// Image 0: mscorlib.dll
// Image 1: Mono.Security.dll
// Image 2: System.dll
// Image 3: System.Core.dll
// Image 4: UnityEngine.SharedInternalsModule.dll
// Image 5: UnityEngine.CoreModule.dll
// Image 6: UnityEngine.AssetBundleModule.dll
// Image 7: UnityEngine.UnityWebRequestModule.dll
// Image 8: UnityEngine.AudioModule.dll
// Image 9: UnityEngine.TextRenderingModule.dll
// Image 10: UnityEngine.UnityWebRequestAssetBundleModule.dll
// Image 11: UnityEngine.AnimationModule.dll
// Image 12: UnityEngine.IMGUIModule.dll
// Image 13: UnityEngine.Physics2DModule.dll
// Image 14: UnityEngine.PhysicsModule.dll
// Image 15: UnityEngine.UIModule.dll
// Image 16: UnityEngine.UnityWebRequestWWWModule.dll
// Image 17: UnityEngine.dll
// Image 18: ICSharpCode.SharpZipLib.dll
// Image 19: UnityEngine.UI.dll
// Image 20: Assembly-CSharp.dll

// Dll : mscorlib.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x68fd78
	public Void .ctor() { }
	// Offset : 0x6a72e8
	public virtual Boolean Equals(Object obj) { }
	// Offset : 0x6a72f4
	public static Boolean Equals(Object objA, Object objB) { }
	// Offset : 0x698940
	protected override Void Finalize() { }
	// Offset : 0x6a7360
	public virtual Int32 GetHashCode() { }
	// Offset : 0x699c84
	public Type GetType() { }
	// Offset : 0x6a72d0
	protected Object MemberwiseClone() { }
	// Offset : 0x6a7368
	public virtual String ToString() { }
	// Offset : 0x6a73b4
	public static Boolean ReferenceEquals(Object objA, Object objB) { }
	// Offset : 0x6a7364
	internal static Int32 InternalGetHashCode(Object o) { }
	// Offset : 0x6a73c0
	private Void FieldGetter(String typeName, String fieldName, ref Object val) { }
	// Offset : 0x6a73c4
	private Void FieldSetter(String typeName, String fieldName, Object val) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class ValueType
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x93ca9c
	protected Void .ctor() { }
	// Offset : 0x93caa4
	private static Boolean InternalEquals(Object o1, Object o2, out Object[] fields) { }
	// Offset : 0x93caa8
	internal static Boolean DefaultEquals(Object o1, Object o2) { }
	// Offset : 0x93cbd4
	public override Boolean Equals(Object obj) { }
	// Offset : 0x93cbd8
	internal static Int32 InternalGetHashCode(Object o, out Object[] fields) { }
	// Offset : 0x93cbdc
	public override Int32 GetHashCode() { }
	// Offset : 0x93ccf0
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class Attribute : _Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x75ced0
	protected Void .ctor() { }
	// Offset : 0x75ced8
	private static Void CheckParameters(Object element, Type attributeType) { }
	// Offset : 0x75d05c
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType) { }
	// Offset : 0x75d064
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, Boolean inherit) { }
	// Offset : 0x75d0f0
	public override Int32 GetHashCode() { }
	// Offset : 0x75d0f8
	public static Boolean IsDefined(ParameterInfo element, Type attributeType) { }
	// Offset : 0x75d1b4
	public static Boolean IsDefined(MemberInfo element, Type attributeType) { }
	// Offset : 0x75d1bc
	public static Boolean IsDefined(MemberInfo element, Type attributeType, Boolean inherit) { }
	// Offset : 0x75d100
	public static Boolean IsDefined(ParameterInfo element, Type attributeType, Boolean inherit) { }
	// Offset : 0x75d344
	public override Boolean Equals(Object obj) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Int32 : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public const Int32 MaxValue; // 0x0
	public const Int32 MinValue; // 0x0
	internal Int32 m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x2ce634
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2ce63c
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2ce644
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2ce64c
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2ce654
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2ce65c
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2ce664
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2ce66c
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2ce674
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2ce67c
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2ce684
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2ce68c
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2ce694
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2ce69c
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2ce6a4
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2ce6ac
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2ce6b4
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2ce6bc
	public override Int32 GetHashCode() { }
	// Offset : 0x2ce6c4
	public Int32 CompareTo(Int32 value) { }
	// Offset : 0x2ce6dc
	public Boolean Equals(Int32 obj) { }
	// Offset : 0x6931d4
	internal static Boolean ProcessTrailingWhitespace(Boolean tryParse, String s, Int32 position, ref Exception exc) { }
	// Offset : 0x694050
	internal static Boolean Parse(String s, Boolean tryParse, out Int32 result, out Exception exc) { }
	// Offset : 0x694324
	public static Int32 Parse(String s, IFormatProvider provider) { }
	// Offset : 0x694334
	internal static Boolean CheckStyle(NumberStyles style, Boolean tryParse, ref Exception exc) { }
	// Offset : 0x69440c
	internal static Boolean JumpOverWhite(ref Int32 pos, String s, Boolean reportError, Boolean tryParse, ref Exception exc) { }
	// Offset : 0x694548
	internal static Void FindSign(ref Int32 pos, String s, NumberFormatInfo nfi, ref Boolean foundSign, ref Boolean negative) { }
	// Offset : 0x69480c
	internal static Void FindCurrency(ref Int32 pos, String s, NumberFormatInfo nfi, ref Boolean foundCurrency) { }
	// Offset : 0x6949b8
	internal static Boolean FindExponent(ref Int32 pos, String s, ref Int32 exponent, Boolean tryParse, ref Exception exc) { }
	// Offset : 0x694d18
	internal static Boolean FindOther(ref Int32 pos, String s, String other) { }
	// Offset : 0x694e60
	internal static Boolean ValidDigit(Char e, Boolean allowHex) { }
	// Offset : 0x69316c
	internal static Exception GetFormatException() { }
	// Offset : 0x694f30
	internal static Boolean Parse(String s, NumberStyles style, IFormatProvider fp, Boolean tryParse, out Int32 result, out Exception exc) { }
	// Offset : 0x695b34
	public static Int32 Parse(String s) { }
	// Offset : 0x6933d4
	public static Int32 Parse(String s, NumberStyles style, IFormatProvider provider) { }
	// Offset : 0x695bbc
	public static Boolean TryParse(String s, out Int32 result) { }
	// Offset : 0x695c08
	public static Boolean TryParse(String s, NumberStyles style, IFormatProvider provider, out Int32 result) { }
	// Offset : 0x2ce6ec
	public override String ToString() { }
	// Offset : 0x2ce6f4
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2ce6fc
	public String ToString(String format) { }
	// Offset : 0x2ce708
	public String ToString(String format, IFormatProvider provider) { }
	// Offset : 0x2ce710
	public TypeCode GetTypeCode() { }
}

// Dll : mscorlib.dll
// Namespace: System
public interface IFormattable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract String ToString(String format, IFormatProvider formatProvider) { }
}

// Dll : mscorlib.dll
// Namespace: System
public interface IConvertible
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Boolean ToBoolean(IFormatProvider provider) { }
	// Offset : 0x
	public abstract Byte ToByte(IFormatProvider provider) { }
	// Offset : 0x
	public abstract Char ToChar(IFormatProvider provider) { }
	// Offset : 0x
	public abstract DateTime ToDateTime(IFormatProvider provider) { }
	// Offset : 0x
	public abstract Decimal ToDecimal(IFormatProvider provider) { }
	// Offset : 0x
	public abstract Double ToDouble(IFormatProvider provider) { }
	// Offset : 0x
	public abstract Int16 ToInt16(IFormatProvider provider) { }
	// Offset : 0x
	public abstract Int32 ToInt32(IFormatProvider provider) { }
	// Offset : 0x
	public abstract Int64 ToInt64(IFormatProvider provider) { }
	// Offset : 0x
	public abstract SByte ToSByte(IFormatProvider provider) { }
	// Offset : 0x
	public abstract Single ToSingle(IFormatProvider provider) { }
	// Offset : 0x
	public abstract String ToString(IFormatProvider provider) { }
	// Offset : 0x
	public abstract Object ToType(Type conversionType, IFormatProvider provider) { }
	// Offset : 0x
	public abstract UInt16 ToUInt16(IFormatProvider provider) { }
	// Offset : 0x
	public abstract UInt32 ToUInt32(IFormatProvider provider) { }
	// Offset : 0x
	public abstract UInt64 ToUInt64(IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System
public interface IComparable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Int32 CompareTo(Object obj) { }
}

// Dll : mscorlib.dll
// Namespace: System
public interface IComparable`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Int32 CompareTo(T other) { }
}

// Dll : mscorlib.dll
// Namespace: System
public sealed class SerializableAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6f473c
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class AttributeUsageAttribute : Attribute
{
	// Fields
	private AttributeTargets valid_on; // 0x10
	private Boolean allow_multiple; // 0x14
	private Boolean inherited; // 0x15

	// Properties
	public Boolean AllowMultiple { get; set; }
	public Boolean Inherited { get; set; }

	// Methods
	// Offset : 0x75d3e8
	public Void .ctor(AttributeTargets validOn) { }
	// Offset : 0x75d41c
	public Boolean get_AllowMultiple() { }
	// Offset : 0x75d424
	public Void set_AllowMultiple(Boolean value) { }
	// Offset : 0x75d430
	public Boolean get_Inherited() { }
	// Offset : 0x75d438
	public Void set_Inherited(Boolean value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class ComVisibleAttribute : Attribute
{
	// Fields
	private Boolean Visible; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fe1cc
	public Void .ctor(Boolean visibility) { }
}

// Dll : mscorlib.dll
// Namespace: System
public interface IEquatable`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Boolean Equals(T other) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Int64 : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	internal Int64 m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x2ce718
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2ce720
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2ce728
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2ce730
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2ce738
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2ce740
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2ce748
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2ce750
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2ce758
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2ce760
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2ce768
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2ce770
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2ce778
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2ce780
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2ce788
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2ce790
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2ce798
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2ce7a0
	public override Int32 GetHashCode() { }
	// Offset : 0x2ce7ac
	public Int32 CompareTo(Int64 value) { }
	// Offset : 0x2ce7c4
	public Boolean Equals(Int64 obj) { }
	// Offset : 0x696750
	internal static Boolean Parse(String s, Boolean tryParse, out Int64 result, out Exception exc) { }
	// Offset : 0x696a10
	public static Int64 Parse(String s, IFormatProvider provider) { }
	// Offset : 0x696abc
	internal static Boolean Parse(String s, NumberStyles style, IFormatProvider fp, Boolean tryParse, out Int64 result, out Exception exc) { }
	// Offset : 0x697b64
	public static Int64 Parse(String s) { }
	// Offset : 0x696a20
	public static Int64 Parse(String s, NumberStyles style, IFormatProvider provider) { }
	// Offset : 0x697be8
	public static Boolean TryParse(String s, out Int64 result) { }
	// Offset : 0x697c34
	public static Boolean TryParse(String s, NumberStyles style, IFormatProvider provider, out Int64 result) { }
	// Offset : 0x2ce7d4
	public override String ToString() { }
	// Offset : 0x2ce7dc
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2ce7e4
	public String ToString(String format) { }
	// Offset : 0x2ce7f0
	public String ToString(String format, IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct UInt32 : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public const UInt32 MaxValue; // 0x0
	public const UInt32 MinValue; // 0x0
	internal UInt32 m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x2d0f50
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2d0f58
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2d0f60
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2d0f68
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2d0f70
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2d0f78
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2d0f80
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2d0f88
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2d0f90
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2d0f98
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2d0fa0
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2d0fa8
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2d0fb0
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2d0fb8
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2d0fc0
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2d0fc8
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2d0fd0
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2d0fd8
	public override Int32 GetHashCode() { }
	// Offset : 0x2d0fe0
	public Int32 CompareTo(UInt32 value) { }
	// Offset : 0x2d0ff8
	public Boolean Equals(UInt32 obj) { }
	// Offset : 0x93935c
	internal static Boolean Parse(String s, Boolean tryParse, out UInt32 result, out Exception exc) { }
	// Offset : 0x93960c
	internal static Boolean Parse(String s, NumberStyles style, IFormatProvider provider, Boolean tryParse, out UInt32 result, out Exception exc) { }
	// Offset : 0x93a1a8
	public static UInt32 Parse(String s) { }
	// Offset : 0x938848
	public static UInt32 Parse(String s, NumberStyles style, IFormatProvider provider) { }
	// Offset : 0x93a230
	public static UInt32 Parse(String s, IFormatProvider provider) { }
	// Offset : 0x93a240
	public static Boolean TryParse(String s, out UInt32 result) { }
	// Offset : 0x938968
	public static Boolean TryParse(String s, NumberStyles style, IFormatProvider provider, out UInt32 result) { }
	// Offset : 0x2d1008
	public override String ToString() { }
	// Offset : 0x2d1010
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2d1018
	public String ToString(String format) { }
	// Offset : 0x2d1024
	public String ToString(String format, IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class CLSCompliantAttribute : Attribute
{
	// Fields
	private Boolean is_compliant; // 0x10

	// Properties

	// Methods
	// Offset : 0x761030
	public Void .ctor(Boolean isCompliant) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct UInt64 : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public const UInt64 MaxValue; // 0x0
	public const UInt64 MinValue; // 0x0
	internal UInt64 m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x2d102c
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2d1034
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2d103c
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2d1044
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2d104c
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2d1054
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2d105c
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2d1064
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2d106c
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2d1074
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2d107c
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2d1084
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2d108c
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2d1094
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2d109c
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2d10a4
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2d10ac
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2d10b4
	public override Int32 GetHashCode() { }
	// Offset : 0x2d10c0
	public Int32 CompareTo(UInt64 value) { }
	// Offset : 0x2d10d8
	public Boolean Equals(UInt64 obj) { }
	// Offset : 0x93ac38
	public static UInt64 Parse(String s, IFormatProvider provider) { }
	// Offset : 0x93ace4
	internal static Boolean Parse(String s, NumberStyles style, IFormatProvider provider, Boolean tryParse, out UInt64 result, out Exception exc) { }
	// Offset : 0x93ac48
	public static UInt64 Parse(String s, NumberStyles style, IFormatProvider provider) { }
	// Offset : 0x93b8b4
	public static Boolean TryParse(String s, out UInt64 result) { }
	// Offset : 0x2d10e8
	public override String ToString() { }
	// Offset : 0x2d10f0
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2d10f8
	public String ToString(String format) { }
	// Offset : 0x2d1104
	public String ToString(String format, IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Byte : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public const Byte MinValue; // 0x0
	public const Byte MaxValue; // 0x0
	internal Byte m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x2cfda4
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2cfdac
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2cfdb4
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2cfdbc
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2cfdc4
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2cfdd0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2cfdd8
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2cfde0
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2cfde8
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2cfdf0
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2cfdf8
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2cfe00
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2cfe08
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2cfe10
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2cfe18
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2cfe20
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2cfe28
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cfe30
	public override Int32 GetHashCode() { }
	// Offset : 0x2cfe38
	public Int32 CompareTo(Byte value) { }
	// Offset : 0x2cfe50
	public Boolean Equals(Byte obj) { }
	// Offset : 0x760d20
	public static Byte Parse(String s, IFormatProvider provider) { }
	// Offset : 0x760d30
	public static Byte Parse(String s, NumberStyles style, IFormatProvider provider) { }
	// Offset : 0x760df4
	public static Byte Parse(String s) { }
	// Offset : 0x760e00
	public static Boolean TryParse(String s, out Byte result) { }
	// Offset : 0x760e60
	public static Boolean TryParse(String s, NumberStyles style, IFormatProvider provider, out Byte result) { }
	// Offset : 0x2cfe60
	public override String ToString() { }
	// Offset : 0x2cfe68
	public String ToString(String format) { }
	// Offset : 0x2cfe74
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2cfe7c
	public String ToString(String format, IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct SByte : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	internal SByte m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x2cb4d0
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2cb4d8
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2cb4e0
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2cb4e8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2cb4f0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2cb4f8
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2cb500
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2cb508
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2cb510
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2cb518
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2cb520
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2cb528
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2cb530
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2cb538
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2cb540
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2cb548
	public Int32 CompareTo(Object obj) { }
	// Offset : 0x2cb550
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cb558
	public override Int32 GetHashCode() { }
	// Offset : 0x2cb560
	public Int32 CompareTo(SByte value) { }
	// Offset : 0x2cb580
	public Boolean Equals(SByte obj) { }
	// Offset : 0x4e7c40
	internal static Boolean Parse(String s, Boolean tryParse, out SByte result, out Exception exc) { }
	// Offset : 0x4e7f6c
	public static SByte Parse(String s, IFormatProvider provider) { }
	// Offset : 0x4e7f7c
	public static SByte Parse(String s, NumberStyles style, IFormatProvider provider) { }
	// Offset : 0x4e8044
	public static Boolean TryParse(String s, out SByte result) { }
	// Offset : 0x2cb59c
	public override String ToString() { }
	// Offset : 0x2cb5a4
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2cb5ac
	public String ToString(String format) { }
	// Offset : 0x2cb5b8
	public String ToString(String format, IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Int16 : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	internal Int16 m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x2ce550
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2ce558
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2ce560
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2ce568
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2ce570
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2ce578
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2ce580
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2ce588
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2ce590
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2ce598
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2ce5a0
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2ce5a8
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2ce5b0
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2ce5b8
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2ce5c0
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2ce5c8
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2ce5d0
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2ce5d8
	public override Int32 GetHashCode() { }
	// Offset : 0x2ce5e0
	public Int32 CompareTo(Int16 value) { }
	// Offset : 0x2ce600
	public Boolean Equals(Int16 obj) { }
	// Offset : 0x692eb0
	internal static Boolean Parse(String s, Boolean tryParse, out Int16 result, out Exception exc) { }
	// Offset : 0x693318
	public static Int16 Parse(String s, IFormatProvider provider) { }
	// Offset : 0x693328
	public static Int16 Parse(String s, NumberStyles style, IFormatProvider provider) { }
	// Offset : 0x693474
	public static Boolean TryParse(String s, out Int16 result) { }
	// Offset : 0x2ce610
	public override String ToString() { }
	// Offset : 0x2ce618
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2ce620
	public String ToString(String format) { }
	// Offset : 0x2ce62c
	public String ToString(String format, IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct UInt16 : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public const UInt16 MaxValue; // 0x0
	public const UInt16 MinValue; // 0x0
	internal UInt16 m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x2d0e80
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2d0e88
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2d0e90
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2d0e98
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2d0ea0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2d0ea8
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2d0eb0
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2d0eb8
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2d0ec0
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2d0ec8
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2d0ed0
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2d0ed8
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2d0ee0
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2d0ee8
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2d0ef0
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2d0ef8
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2d0f00
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2d0f08
	public override Int32 GetHashCode() { }
	// Offset : 0x2d0f10
	public Int32 CompareTo(UInt16 value) { }
	// Offset : 0x2d0f1c
	public Boolean Equals(UInt16 obj) { }
	// Offset : 0x938778
	public static UInt16 Parse(String s, IFormatProvider provider) { }
	// Offset : 0x938788
	public static UInt16 Parse(String s, NumberStyles style, IFormatProvider provider) { }
	// Offset : 0x9388e8
	public static Boolean TryParse(String s, out UInt16 result) { }
	// Offset : 0x9388fc
	public static Boolean TryParse(String s, NumberStyles style, IFormatProvider provider, out UInt16 result) { }
	// Offset : 0x2d0f2c
	public override String ToString() { }
	// Offset : 0x2d0f34
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2d0f3c
	public String ToString(String format) { }
	// Offset : 0x2d0f48
	public String ToString(String format, IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
public interface IEnumerator
{
	// Fields

	// Properties
	public abstract Object Current { get; }

	// Methods
	// Offset : 0x
	public abstract Object get_Current() { }
	// Offset : 0x
	public abstract Boolean MoveNext() { }
	// Offset : 0x
	public abstract Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
public interface IEnumerable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract IEnumerator GetEnumerator() { }
}

// Dll : mscorlib.dll
// Namespace: System
public interface IDisposable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void Dispose() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
public interface IEnumerator`1 : IEnumerator, IDisposable
{
	// Fields

	// Properties
	public abstract T Current { get; }

	// Methods
	// Offset : 0x
	public abstract T get_Current() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Char : IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public const Char MaxValue; // 0x0
	public const Char MinValue; // 0x0
	internal Char m_value; // 0x10
	private static readonly Byte* category_data; // 0x0
	private static readonly Byte* numeric_data; // 0x8
	private static readonly Double* numeric_data_values; // 0x10
	private static readonly UInt16* to_lower_data_low; // 0x18
	private static readonly UInt16* to_lower_data_high; // 0x20
	private static readonly UInt16* to_upper_data_low; // 0x28
	private static readonly UInt16* to_upper_data_high; // 0x30

	// Properties

	// Methods
	// Offset : 0x761060
	private static Void .cctor() { }
	// Offset : 0x2cfe84
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2cfe8c
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2cfe98
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2cfea0
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2cfea8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2cfeb4
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2cfec0
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2cfecc
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2cfed4
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2cfedc
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2cfee4
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2cfeec
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2cfef8
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2cff00
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2cff08
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x7610c4
	private static Void GetDataTablePointers(out Byte* category_data, out Byte* numeric_data, out Double* numeric_data_values, out UInt16* to_lower_data_low, out UInt16* to_lower_data_high, out UInt16* to_upper_data_low, out UInt16* to_upper_data_high) { }
	// Offset : 0x2cff10
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2cff18
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cff20
	public Int32 CompareTo(Char value) { }
	// Offset : 0x2cff38
	public Boolean Equals(Char obj) { }
	// Offset : 0x2cff48
	public override Int32 GetHashCode() { }
	// Offset : 0x761ad8
	public static UnicodeCategory GetUnicodeCategory(Char c) { }
	// Offset : 0x761b4c
	public static Boolean IsDigit(Char c) { }
	// Offset : 0x761bc8
	public static Boolean IsLetter(Char c) { }
	// Offset : 0x761c44
	public static Boolean IsLetterOrDigit(Char c) { }
	// Offset : 0x761ccc
	public static Boolean IsLower(Char c) { }
	// Offset : 0x761d48
	public static Boolean IsSurrogate(Char c) { }
	// Offset : 0x761dc4
	public static Boolean IsUpper(Char c) { }
	// Offset : 0x761e40
	public static Boolean IsWhiteSpace(Char c) { }
	// Offset : 0x761f04
	public static Boolean IsWhiteSpace(String s, Int32 index) { }
	// Offset : 0x761f98
	private static Void CheckParameter(String s, Int32 index) { }
	// Offset : 0x762090
	public static Char Parse(String s) { }
	// Offset : 0x762184
	public static Char ToLower(Char c) { }
	// Offset : 0x762254
	public static Char ToLowerInvariant(Char c) { }
	// Offset : 0x762320
	public static Char ToLower(Char c, CultureInfo culture) { }
	// Offset : 0x762474
	public static Char ToUpper(Char c) { }
	// Offset : 0x762544
	public static Char ToUpperInvariant(Char c) { }
	// Offset : 0x2cff50
	public override String ToString() { }
	// Offset : 0x2cff64
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2cff78
	public TypeCode GetTypeCode() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class String : IConvertible, IComparable, IEnumerable, ICloneable, IComparable`1, IEquatable`1, IEnumerable`1
{
	// Fields
	private Int32 length; // 0x10
	private Char start_char; // 0x14
	public static readonly String Empty; // 0x0
	private static readonly Char[] WhiteChars; // 0x8

	// Properties
	public Char Chars { get; }
	public Int32 Length { get; }

	// Methods
	// Offset : 0x6f5650
	public Void .ctor(Char* value, Int32 startIndex, Int32 length) { }
	// Offset : 0x6f5654
	public Void .ctor(Char[] value, Int32 startIndex, Int32 length) { }
	// Offset : 0x6f5658
	public Void .ctor(Char[] value) { }
	// Offset : 0x6f565c
	public Void .ctor(Char c, Int32 count) { }
	// Offset : 0x6f5660
	private static Void .cctor() { }
	// Offset : 0x6f56f4
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x6f576c
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x6f57e4
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x6f585c
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x6f58d4
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x6f594c
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x6f59c4
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x6f5a3c
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x6f5ab4
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x6f5b2c
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x6f5ba4
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x6f5c1c
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x6f5ce8
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x6f5d60
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x6f5dd8
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x6f5e50
	private IEnumerator`1 System.Collections.Generic.IEnumerable<char>.GetEnumerator() { }
	// Offset : 0x6f5eb4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x6f5f18
	public static Boolean Equals(String a, String b) { }
	// Offset : 0x6f6030
	public override Boolean Equals(Object obj) { }
	// Offset : 0x6f60c0
	public Boolean Equals(String value) { }
	// Offset : 0x6f2138
	public Char get_Chars(Int32 index) { }
	// Offset : 0x6f6134
	public Object Clone() { }
	// Offset : 0x6f6138
	public Void CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count) { }
	// Offset : 0x6f6408
	public Char[] ToCharArray() { }
	// Offset : 0x6f6414
	public Char[] ToCharArray(Int32 startIndex, Int32 length) { }
	// Offset : 0x6f6590
	public String[] Split(Char[] separator) { }
	// Offset : 0x6f6598
	public String[] Split(Char[] separator, Int32 count) { }
	// Offset : 0x6f6720
	public String[] Split(Char[] separator, Int32 count, StringSplitOptions options) { }
	// Offset : 0x6f6a9c
	public String[] Split(String[] separator, Int32 count, StringSplitOptions options) { }
	// Offset : 0x6f710c
	public String[] Split(Char[] separator, StringSplitOptions options) { }
	// Offset : 0x6f711c
	public String[] Split(String[] separator, StringSplitOptions options) { }
	// Offset : 0x6f3af4
	public String Substring(Int32 startIndex) { }
	// Offset : 0x6f6fbc
	public String Substring(Int32 startIndex, Int32 length) { }
	// Offset : 0x6f712c
	internal String SubstringUnchecked(Int32 startIndex, Int32 length) { }
	// Offset : 0x6f7208
	public String Trim() { }
	// Offset : 0x6f73f4
	public String Trim(Char[] trimChars) { }
	// Offset : 0x6f75d4
	public String TrimStart(Char[] trimChars) { }
	// Offset : 0x6f76b4
	public String TrimEnd(Char[] trimChars) { }
	// Offset : 0x6f72dc
	private Int32 FindNotWhiteSpace(Int32 pos, Int32 target, Int32 change) { }
	// Offset : 0x6f7500
	private Int32 FindNotInTable(Int32 pos, Int32 target, Int32 change, Char[] table) { }
	// Offset : 0x6f779c
	public static Int32 Compare(String strA, String strB) { }
	// Offset : 0x6f7880
	public static Int32 Compare(String strA, String strB, Boolean ignoreCase) { }
	// Offset : 0x6f796c
	public static Int32 Compare(String strA, String strB, Boolean ignoreCase, CultureInfo culture) { }
	// Offset : 0x6f7a78
	public static Int32 Compare(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length, Boolean ignoreCase, CultureInfo culture) { }
	// Offset : 0x6f7c38
	public Int32 CompareTo(Object value) { }
	// Offset : 0x6f7d58
	public Int32 CompareTo(String strB) { }
	// Offset : 0x6f7de4
	public static Int32 CompareOrdinal(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length) { }
	// Offset : 0x6f7ef0
	internal static Int32 CompareOrdinalUnchecked(String strA, Int32 indexA, Int32 lenA, String strB, Int32 indexB, Int32 lenB) { }
	// Offset : 0x6f800c
	internal static Int32 CompareOrdinalCaseInsensitiveUnchecked(String strA, Int32 indexA, Int32 lenA, String strB, Int32 indexB, Int32 lenB) { }
	// Offset : 0x6f8198
	public Boolean EndsWith(String value) { }
	// Offset : 0x6f2080
	public Int32 IndexOfAny(Char[] anyOf) { }
	// Offset : 0x6f83ec
	public Int32 IndexOfAny(Char[] anyOf, Int32 startIndex) { }
	// Offset : 0x6f84b4
	public Int32 IndexOfAny(Char[] anyOf, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f82c4
	private Int32 IndexOfAnyUnchecked(Char[] anyOf, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f87a0
	public Int32 IndexOf(String value, StringComparison comparisonType) { }
	// Offset : 0x6f87b4
	public Int32 IndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType) { }
	// Offset : 0x6f8ad0
	internal Int32 IndexOfOrdinal(String value, Int32 startIndex, Int32 count, CompareOptions options) { }
	// Offset : 0x6f8c08
	internal Int32 IndexOfOrdinalUnchecked(String value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f8d44
	internal Int32 IndexOfOrdinalIgnoreCaseUnchecked(String value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f8eb8
	public Int32 IndexOf(Char value) { }
	// Offset : 0x6f8ed0
	public Int32 IndexOf(Char value, Int32 startIndex) { }
	// Offset : 0x6f8fd4
	public Int32 IndexOf(Char value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f85d4
	internal Int32 IndexOfUnchecked(Char value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f3990
	public Int32 IndexOf(String value) { }
	// Offset : 0x6f6fb0
	public Int32 IndexOf(String value, Int32 startIndex) { }
	// Offset : 0x6f9124
	public Int32 IndexOf(String value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f931c
	public Int32 LastIndexOfAny(Char[] anyOf) { }
	// Offset : 0x6f949c
	public Int32 LastIndexOfAny(Char[] anyOf, Int32 startIndex) { }
	// Offset : 0x6f93b4
	private Int32 LastIndexOfAnyUnchecked(Char[] anyOf, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f9768
	public Int32 LastIndexOf(Char value) { }
	// Offset : 0x6f9780
	public Int32 LastIndexOf(Char value, Int32 startIndex) { }
	// Offset : 0x6f9788
	public Int32 LastIndexOf(Char value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f9598
	internal Int32 LastIndexOfUnchecked(Char value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f98e4
	public Int32 LastIndexOf(String value) { }
	// Offset : 0x6f98fc
	public Int32 LastIndexOf(String value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f9b48
	public Boolean Contains(String value) { }
	// Offset : 0x6f9b64
	public static Boolean IsNullOrEmpty(String value) { }
	// Offset : 0x6f9b80
	public String Remove(Int32 startIndex) { }
	// Offset : 0x6f9dd0
	public String PadLeft(Int32 totalWidth, Char paddingChar) { }
	// Offset : 0x6f9f2c
	public String PadRight(Int32 totalWidth, Char paddingChar) { }
	// Offset : 0x6fa094
	public Boolean StartsWith(String value) { }
	// Offset : 0x6fa1c0
	public Boolean StartsWith(String value, StringComparison comparisonType) { }
	// Offset : 0x6fa57c
	public String Replace(Char oldChar, Char newChar) { }
	// Offset : 0x6fa6cc
	public String Replace(String oldValue, String newValue) { }
	// Offset : 0x6fa7f0
	private String ReplaceUnchecked(String oldValue, String newValue) { }
	// Offset : 0x6faae4
	private String ReplaceFallback(String oldValue, String newValue, Int32 testedCount) { }
	// Offset : 0x6f9c58
	public String Remove(Int32 startIndex, Int32 count) { }
	// Offset : 0x6fac78
	public String ToLower() { }
	// Offset : 0x6face8
	public String ToLower(CultureInfo culture) { }
	// Offset : 0x6fae1c
	public String ToLowerInvariant() { }
	// Offset : 0x6faf34
	public String ToUpper() { }
	// Offset : 0x6fafa4
	public String ToUpper(CultureInfo culture) { }
	// Offset : 0x6fb0d8
	public String ToUpperInvariant() { }
	// Offset : 0x6fb1f0
	public override String ToString() { }
	// Offset : 0x6fb1f4
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x6ed8e0
	public static String Format(String format, Object arg0) { }
	// Offset : 0x6fb290
	public static String Format(String format, Object arg0, Object arg1) { }
	// Offset : 0x6fb3c0
	public static String Format(String format, Object arg0, Object arg1, Object arg2) { }
	// Offset : 0x6fb544
	public static String Format(String format, Object[] args) { }
	// Offset : 0x6fb1f8
	public static String Format(IFormatProvider provider, String format, Object[] args) { }
	// Offset : 0x6fb5bc
	internal static StringBuilder FormatHelper(StringBuilder result, IFormatProvider provider, String format, Object[] args) { }
	// Offset : 0x6fc298
	public static String Copy(String str) { }
	// Offset : 0x6fc3ac
	public static String Concat(Object arg0, Object arg1) { }
	// Offset : 0x6f68f8
	public static String Concat(Object arg0, Object arg1, Object arg2) { }
	// Offset : 0x6f1b90
	public static String Concat(String str0, String str1) { }
	// Offset : 0x6f0de8
	public static String Concat(String str0, String str1, String str2) { }
	// Offset : 0x6fc480
	public static String Concat(String str0, String str1, String str2, String str3) { }
	// Offset : 0x6fc7fc
	public static String Concat(Object[] args) { }
	// Offset : 0x6fcbdc
	public static String Concat(String[] values) { }
	// Offset : 0x6fca80
	private static String ConcatInternal(String[] values, Int32 length) { }
	// Offset : 0x6fccf0
	public String Insert(Int32 startIndex, String value) { }
	// Offset : 0x6fce90
	public static String Join(String separator, String[] value) { }
	// Offset : 0x6fd258
	public static String Join(String separator, String[] value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6fcf78
	private static String JoinUnchecked(String separator, String[] value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6f2130
	public Int32 get_Length() { }
	// Offset : 0x6fbe04
	private static Void ParseFormatSpecifier(String str, ref Int32 ptr, out Int32 n, out Int32 width, out Boolean left_align, out String format) { }
	// Offset : 0x6fd428
	private static Int32 ParseDecimal(String str, ref Int32 ptr) { }
	// Offset : 0x6fd4bc
	internal Void InternalSetChar(Int32 idx, Char val) { }
	// Offset : 0x6fd568
	internal Void InternalSetLength(Int32 newLength) { }
	// Offset : 0x6fd638
	public override Int32 GetHashCode() { }
	// Offset : 0x6fd6e4
	internal Int32 GetCaseInsensitiveHashCode() { }
	// Offset : 0x6fd830
	private String CreateString(SByte* value) { }
	// Offset : 0x6fdbf4
	private String CreateString(SByte* value, Int32 startIndex, Int32 length) { }
	// Offset : 0x6fd8dc
	private String CreateString(SByte* value, Int32 startIndex, Int32 length, Encoding enc) { }
	// Offset : 0x6fdd40
	private String CreateString(Char* value) { }
	// Offset : 0x6fde4c
	private String CreateString(Char* value, Int32 startIndex, Int32 length) { }
	// Offset : 0x6fdfb4
	private String CreateString(Char[] val, Int32 startIndex, Int32 length) { }
	// Offset : 0x6fe184
	private String CreateString(Char[] val) { }
	// Offset : 0x6fe29c
	private String CreateString(Char c, Int32 count) { }
	// Offset : 0x6fe3a8
	private static Void memcpy4(Byte* dest, Byte* src, Int32 size) { }
	// Offset : 0x6fe434
	private static Void memcpy2(Byte* dest, Byte* src, Int32 size) { }
	// Offset : 0x6fe4b0
	private static Void memcpy1(Byte* dest, Byte* src, Int32 size) { }
	// Offset : 0x6fdbfc
	internal static Void memcpy(Byte* dest, Byte* src, Int32 size) { }
	// Offset : 0x6f6320
	internal static Void CharCopy(Char* dest, Char* src, Int32 count) { }
	// Offset : 0x6fe55c
	internal static Void CharCopyReverse(Char* dest, Char* src, Int32 count) { }
	// Offset : 0x6fe590
	internal static Void CharCopy(String target, Int32 targetIndex, String source, Int32 sourceIndex, Int32 count) { }
	// Offset : 0x6fe650
	internal static Void CharCopy(String target, Int32 targetIndex, Char[] source, Int32 sourceIndex, Int32 count) { }
	// Offset : 0x6fe710
	internal static Void CharCopyReverse(String target, Int32 targetIndex, String source, Int32 sourceIndex, Int32 count) { }
	// Offset : 0x6f671c
	private String[] InternalSplit(Char[] separator, Int32 count, Int32 options) { }
	// Offset : 0x6f7204
	internal static String InternalAllocateStr(Int32 length) { }
	// Offset : 0x6f0970
	public static Boolean op_Equality(String a, String b) { }
	// Offset : 0x6ee854
	public static Boolean op_Inequality(String a, String b) { }
}

// Dll : mscorlib.dll
// Namespace: System
public interface ICloneable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Object Clone() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
public interface IEnumerable`1 : IEnumerable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract IEnumerator`1 GetEnumerator() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Single : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public const Single Epsilon; // 0x0
	public const Single MaxValue; // 0x0
	public const Single MinValue; // 0x0
	public const Single NaN; // 0x0
	public const Single PositiveInfinity; // 0x0
	public const Single NegativeInfinity; // 0x0
	private const Double MaxValueEpsilon; // 0x0
	internal Single m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x2cf714
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2cf71c
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2cf724
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2cf72c
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2cf734
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2cf73c
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2cf744
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2cf74c
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2cf754
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2cf75c
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2cf764
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2cf76c
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2cf774
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2cf77c
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2cf784
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2cf78c
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2cf794
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cf79c
	public Int32 CompareTo(Single value) { }
	// Offset : 0x2cf7a4
	public Boolean Equals(Single obj) { }
	// Offset : 0x2cf7c4
	public override Int32 GetHashCode() { }
	// Offset : 0x6f5268
	public static Boolean IsInfinity(Single f) { }
	// Offset : 0x6f50bc
	public static Boolean IsNaN(Single f) { }
	// Offset : 0x6f5080
	public static Boolean IsNegativeInfinity(Single f) { }
	// Offset : 0x6f5044
	public static Boolean IsPositiveInfinity(Single f) { }
	// Offset : 0x6f5290
	public static Single Parse(String s, IFormatProvider provider) { }
	// Offset : 0x6f5364
	public static Boolean TryParse(String s, NumberStyles style, IFormatProvider provider, out Single result) { }
	// Offset : 0x6f53f4
	public static Boolean TryParse(String s, out Single result) { }
	// Offset : 0x2cf7cc
	public override String ToString() { }
	// Offset : 0x2cf7d4
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2cf7dc
	public String ToString(String format) { }
	// Offset : 0x2cf7e8
	public String ToString(String format, IFormatProvider provider) { }
	// Offset : 0x2cf7f0
	public TypeCode GetTypeCode() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Double : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public const Double Epsilon; // 0x0
	public const Double MaxValue; // 0x0
	public const Double MinValue; // 0x0
	public const Double NaN; // 0x0
	public const Double NegativeInfinity; // 0x0
	public const Double PositiveInfinity; // 0x0
	private const Int32 State_AllowSign; // 0x0
	private const Int32 State_Digits; // 0x0
	private const Int32 State_Decimal; // 0x0
	private const Int32 State_ExponentSign; // 0x0
	private const Int32 State_Exponent; // 0x0
	private const Int32 State_ConsumeWhiteSpace; // 0x0
	private const Int32 State_Exit; // 0x0
	internal Double m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x2cee44
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2cee4c
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2cee54
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2cee5c
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2cee68
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2cee74
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2cee7c
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2cee84
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2cee8c
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2cee94
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2cee9c
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2ceea4
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2ceeac
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2ceeb4
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2ceebc
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2ceec4
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2ceecc
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2ceed4
	public Int32 CompareTo(Double value) { }
	// Offset : 0x2ceedc
	public Boolean Equals(Double obj) { }
	// Offset : 0x2ceefc
	public override Int32 GetHashCode() { }
	// Offset : 0x6bec70
	public static Boolean IsInfinity(Double d) { }
	// Offset : 0x6b721c
	public static Boolean IsNaN(Double d) { }
	// Offset : 0x6b7228
	public static Boolean IsNegativeInfinity(Double d) { }
	// Offset : 0x6b7264
	public static Boolean IsPositiveInfinity(Double d) { }
	// Offset : 0x6bec98
	public static Double Parse(String s) { }
	// Offset : 0x6bed40
	public static Double Parse(String s, IFormatProvider provider) { }
	// Offset : 0x6beca4
	public static Double Parse(String s, NumberStyles style, IFormatProvider provider) { }
	// Offset : 0x6bed50
	internal static Boolean Parse(String s, NumberStyles style, IFormatProvider provider, Boolean tryParse, out Double result, out Exception exc) { }
	// Offset : 0x6bfcec
	private static Boolean TryParseStringConstant(String format, String s, Int32 start, Int32 end) { }
	// Offset : 0x6bfde0
	private static Boolean ParseImpl(Byte* byte_ptr, out Double value) { }
	// Offset : 0x6bfde4
	public static Boolean TryParse(String s, NumberStyles style, IFormatProvider provider, out Double result) { }
	// Offset : 0x6bfe30
	public static Boolean TryParse(String s, out Double result) { }
	// Offset : 0x2cef08
	public override String ToString() { }
	// Offset : 0x2cef10
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2cef18
	public String ToString(String format, IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Decimal : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public static readonly Decimal MinValue; // 0x0
	public static readonly Decimal MaxValue; // 0x10
	public static readonly Decimal MinusOne; // 0x20
	public static readonly Decimal One; // 0x30
	private static readonly Decimal MaxValueDiv10; // 0x40
	private UInt32 flags; // 0x10
	private UInt32 hi; // 0x14
	private UInt32 lo; // 0x18
	private UInt32 mid; // 0x1c

	// Properties

	// Methods
	// Offset : 0x2cecb4
	public Void .ctor(Int32 lo, Int32 mid, Int32 hi, Boolean isNegative, Byte scale) { }
	// Offset : 0x2cecc0
	public Void .ctor(Int32 value) { }
	// Offset : 0x2cece8
	public Void .ctor(UInt32 value) { }
	// Offset : 0x2cecf4
	public Void .ctor(Int64 value) { }
	// Offset : 0x2ced1c
	public Void .ctor(UInt64 value) { }
	// Offset : 0x2ced2c
	public Void .ctor(Single value) { }
	// Offset : 0x2ced34
	public Void .ctor(Double value) { }
	// Offset : 0x6b7324
	private static Void .cctor() { }
	// Offset : 0x2ced3c
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2ced44
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2ced4c
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2ced54
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2ced60
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2ced6c
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2ced78
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2ced80
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2ced88
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2ced90
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2ced98
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2ceda0
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2ceda8
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2cedb0
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2cedb8
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x6b7a8c
	public static Int32[] GetBits(Decimal d) { }
	// Offset : 0x6b7b80
	public static Decimal Add(Decimal d1, Decimal d2) { }
	// Offset : 0x6b7c5c
	public static Decimal Subtract(Decimal d1, Decimal d2) { }
	// Offset : 0x2cedc0
	public override Int32 GetHashCode() { }
	// Offset : 0x6b7db4
	private static UInt64 u64(Decimal value) { }
	// Offset : 0x6b7e80
	private static Int64 s64(Decimal value) { }
	// Offset : 0x6b7f48
	public static Boolean Equals(Decimal d1, Decimal d2) { }
	// Offset : 0x2cedd8
	public override Boolean Equals(Object value) { }
	// Offset : 0x2cede0
	private Boolean IsZero() { }
	// Offset : 0x6b8134
	public static Decimal Floor(Decimal d) { }
	// Offset : 0x6b81ac
	public static Decimal Multiply(Decimal d1, Decimal d2) { }
	// Offset : 0x6b82c4
	public static Decimal Divide(Decimal d1, Decimal d2) { }
	// Offset : 0x6b7fe0
	public static Int32 Compare(Decimal d1, Decimal d2) { }
	// Offset : 0x2cee08
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2cee10
	public Int32 CompareTo(Decimal value) { }
	// Offset : 0x2cee18
	public Boolean Equals(Decimal value) { }
	// Offset : 0x6b8684
	public static Decimal Parse(String s, IFormatProvider provider) { }
	// Offset : 0x6b86fc
	private static Void ThrowAtPos(Int32 pos) { }
	// Offset : 0x6b87dc
	private static Void ThrowInvalidExp() { }
	// Offset : 0x6b8860
	private static String stripStyles(String s, NumberStyles style, NumberFormatInfo nfi, out Int32 decPos, out Boolean isNegative, out Boolean expFlag, out Int32 exp, Boolean throwex) { }
	// Offset : 0x6b6ee8
	public static Decimal Parse(String s, NumberStyles style, IFormatProvider provider) { }
	// Offset : 0x6b9684
	private static Boolean PerformParse(String s, NumberStyles style, IFormatProvider provider, out Decimal res, Boolean throwex) { }
	// Offset : 0x2cee20
	public String ToString(String format, IFormatProvider provider) { }
	// Offset : 0x2cee28
	public override String ToString() { }
	// Offset : 0x2cee30
	public String ToString(String format) { }
	// Offset : 0x2cee3c
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x6b7e7c
	private static Int32 decimal2UInt64(ref Decimal val, out UInt64 result) { }
	// Offset : 0x6b7f44
	private static Int32 decimal2Int64(ref Decimal val, out Int64 result) { }
	// Offset : 0x6b7c58
	private static Int32 decimalIncr(ref Decimal d1, ref Decimal d2) { }
	// Offset : 0x6b9c18
	internal static Int32 string2decimal(out Decimal val, String sDigits, UInt32 decPos, Int32 sign) { }
	// Offset : 0x6b9c1c
	internal static Int32 decimalSetExponent(ref Decimal val, Int32 exp) { }
	// Offset : 0x6b9d64
	private static Double decimal2double(ref Decimal val) { }
	// Offset : 0x6b7e78
	private static Void decimalFloorAndTrunc(ref Decimal val, Int32 floorFlag) { }
	// Offset : 0x6b82c0
	private static Int32 decimalMult(ref Decimal pd1, ref Decimal pd2) { }
	// Offset : 0x6b846c
	private static Int32 decimalDiv(out Decimal pc, ref Decimal pa, ref Decimal pb) { }
	// Offset : 0x6b8470
	private static Int32 decimalCompare(ref Decimal d1, ref Decimal d2) { }
	// Offset : 0x6b9d68
	public static Decimal op_Increment(Decimal d) { }
	// Offset : 0x6b9de4
	public static Decimal op_Subtraction(Decimal d1, Decimal d2) { }
	// Offset : 0x6b9e70
	public static Decimal op_Multiply(Decimal d1, Decimal d2) { }
	// Offset : 0x6b9efc
	public static Decimal op_Division(Decimal d1, Decimal d2) { }
	// Offset : 0x6b9f88
	public static Byte op_Explicit(Decimal value) { }
	// Offset : 0x6ba024
	public static SByte op_Explicit(Decimal value) { }
	// Offset : 0x6ba0c0
	public static Int16 op_Explicit(Decimal value) { }
	// Offset : 0x6ba15c
	public static UInt16 op_Explicit(Decimal value) { }
	// Offset : 0x6ba1f8
	public static Int32 op_Explicit(Decimal value) { }
	// Offset : 0x6ba298
	public static UInt32 op_Explicit(Decimal value) { }
	// Offset : 0x6ba334
	public static Int64 op_Explicit(Decimal value) { }
	// Offset : 0x6ba3a8
	public static UInt64 op_Explicit(Decimal value) { }
	// Offset : 0x6ba41c
	public static Decimal op_Implicit(Byte value) { }
	// Offset : 0x6ba428
	public static Decimal op_Implicit(SByte value) { }
	// Offset : 0x6ba440
	public static Decimal op_Implicit(Int16 value) { }
	// Offset : 0x6ba458
	public static Decimal op_Implicit(UInt16 value) { }
	// Offset : 0x6ba464
	public static Decimal op_Implicit(Int32 value) { }
	// Offset : 0x6ba474
	public static Decimal op_Implicit(UInt32 value) { }
	// Offset : 0x6ba480
	public static Decimal op_Implicit(Int64 value) { }
	// Offset : 0x6ba494
	public static Decimal op_Implicit(UInt64 value) { }
	// Offset : 0x6ba4a4
	public static Decimal op_Explicit(Single value) { }
	// Offset : 0x6ba4cc
	public static Decimal op_Explicit(Double value) { }
	// Offset : 0x6ba4f4
	public static Single op_Explicit(Decimal value) { }
	// Offset : 0x6ba570
	public static Double op_Explicit(Decimal value) { }
	// Offset : 0x6ba5e0
	public static Boolean op_Inequality(Decimal d1, Decimal d2) { }
	// Offset : 0x6ba678
	public static Boolean op_Equality(Decimal d1, Decimal d2) { }
	// Offset : 0x6ba704
	public static Boolean op_GreaterThan(Decimal d1, Decimal d2) { }
	// Offset : 0x6ba79c
	public static Boolean op_LessThan(Decimal d1, Decimal d2) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Boolean : IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public static readonly String FalseString; // 0x0
	public static readonly String TrueString; // 0x8
	internal Boolean m_value; // 0x10

	// Properties

	// Methods
	// Offset : 0x75de94
	private static Void .cctor() { }
	// Offset : 0x2cfcb0
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2cfcb8
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2cfcc8
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2cfcd0
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2cfcdc
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2cfce8
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2cfcf0
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2cfcf8
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2cfd00
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2cfd08
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2cfd10
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2cfd18
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2cfd20
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2cfd28
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2cfd30
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x2cfd38
	public Int32 CompareTo(Object obj) { }
	// Offset : 0x2cfd40
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cfd48
	public Int32 CompareTo(Boolean value) { }
	// Offset : 0x2cfd68
	public Boolean Equals(Boolean obj) { }
	// Offset : 0x2cfd7c
	public override Int32 GetHashCode() { }
	// Offset : 0x75fc3c
	public static Boolean Parse(String value) { }
	// Offset : 0x75fe64
	public static Boolean TryParse(String value, out Boolean result) { }
	// Offset : 0x2cfd8c
	public override String ToString() { }
	// Offset : 0x2cfd94
	public TypeCode GetTypeCode() { }
	// Offset : 0x2cfd9c
	public String ToString(IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct IntPtr : ISerializable
{
	// Fields
	private Void* m_value; // 0x10
	public static readonly IntPtr Zero; // 0x0

	// Properties
	public static Int32 Size { get; }

	// Methods
	// Offset : 0x2ce7f8
	public Void .ctor(Int32 value) { }
	// Offset : 0x2ce804
	public Void .ctor(Int64 value) { }
	// Offset : 0x2ce80c
	public Void .ctor(Void* value) { }
	// Offset : 0x2ce814
	private Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x2ce81c
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x698104
	public static Int32 get_Size() { }
	// Offset : 0x2ce824
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2ce82c
	public override Int32 GetHashCode() { }
	// Offset : 0x2ce834
	public Int64 ToInt64() { }
	// Offset : 0x2ce83c
	public Void* ToPointer() { }
	// Offset : 0x2ce844
	public override String ToString() { }
	// Offset : 0x2ce874
	public String ToString(String format) { }
	// Offset : 0x698200
	public static Boolean op_Equality(IntPtr value1, IntPtr value2) { }
	// Offset : 0x69820c
	public static Boolean op_Inequality(IntPtr value1, IntPtr value2) { }
	// Offset : 0x698218
	public static IntPtr op_Explicit(Int32 value) { }
	// Offset : 0x698220
	public static IntPtr op_Explicit(Int64 value) { }
	// Offset : 0x698224
	public static IntPtr op_Explicit(Void* value) { }
	// Offset : 0x698228
	public static Int32 op_Explicit(IntPtr value) { }
	// Offset : 0x69822c
	public static Void* op_Explicit(IntPtr value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public interface ISerializable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct UIntPtr : ISerializable
{
	// Fields
	public static readonly UIntPtr Zero; // 0x0
	private Void* _pointer; // 0x10

	// Properties

	// Methods
	// Offset : 0x2d110c
	public Void .ctor(UInt32 value) { }
	// Offset : 0x93ba8c
	private static Void .cctor() { }
	// Offset : 0x2d1118
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x2d1120
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2d1128
	public override Int32 GetHashCode() { }
	// Offset : 0x2d1130
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class MulticastDelegate : Delegate
{
	// Fields
	private MulticastDelegate prev; // 0x58
	private MulticastDelegate kpm_next; // 0x60

	// Properties

	// Methods
	// Offset : 0x69f17c
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x69f184
	public sealed override Boolean Equals(Object obj) { }
	// Offset : 0x69f268
	public sealed override Int32 GetHashCode() { }
	// Offset : 0x69f270
	public sealed override Delegate[] GetInvocationList() { }
	// Offset : 0x69f6f8
	protected sealed override Delegate CombineImpl(Delegate follow) { }
	// Offset : 0x69fc14
	private Boolean BaseEquals(MulticastDelegate value) { }
	// Offset : 0x69fc1c
	private static MulticastDelegate KPM(MulticastDelegate needle, MulticastDelegate haystack, out MulticastDelegate tail) { }
	// Offset : 0x69fd6c
	protected sealed override Delegate RemoveImpl(Delegate value) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class Delegate : ICloneable, ISerializable
{
	// Fields
	private IntPtr method_ptr; // 0x10
	private IntPtr invoke_impl; // 0x18
	private Object m_target; // 0x20
	private IntPtr method; // 0x28
	private IntPtr delegate_trampoline; // 0x30
	private IntPtr method_code; // 0x38
	private MethodInfo method_info; // 0x40
	private MethodInfo original_method_info; // 0x48
	private DelegateData data; // 0x50

	// Properties
	public MethodInfo Method { get; }
	public Object Target { get; }

	// Methods
	// Offset : 0x6ba830
	public MethodInfo get_Method() { }
	// Offset : 0x6ba940
	public Object get_Target() { }
	// Offset : 0x6ba948
	internal static Delegate CreateDelegate_internal(Type type, Object target, MethodInfo info, Boolean throwOnBindFailure) { }
	// Offset : 0x6ba950
	internal Void SetMulticastInvoke() { }
	// Offset : 0x6ba954
	private static Boolean arg_type_match(Type delArgType, Type argType) { }
	// Offset : 0x6ba9e4
	private static Boolean return_type_match(Type delReturnType, Type returnType) { }
	// Offset : 0x6baa74
	public static Delegate CreateDelegate(Type type, Object firstArgument, MethodInfo method, Boolean throwOnBindFailure) { }
	// Offset : 0x6bb498
	public static Delegate CreateDelegate(Type type, Object firstArgument, MethodInfo method) { }
	// Offset : 0x6bb4a0
	public static Delegate CreateDelegate(Type type, MethodInfo method, Boolean throwOnBindFailure) { }
	// Offset : 0x6bb4b4
	public static Delegate CreateDelegate(Type type, MethodInfo method) { }
	// Offset : 0x6bb4c8
	public static Delegate CreateDelegate(Type type, Object target, String method) { }
	// Offset : 0x6bb4e0
	private static MethodInfo GetCandidateMethod(Type type, Type target, String method, BindingFlags bflags, Boolean ignoreCase, Boolean throwOnBindFailure) { }
	// Offset : 0x6bb938
	public static Delegate CreateDelegate(Type type, Type target, String method, Boolean ignoreCase, Boolean throwOnBindFailure) { }
	// Offset : 0x6bba1c
	public static Delegate CreateDelegate(Type type, Type target, String method) { }
	// Offset : 0x6bba28
	public static Delegate CreateDelegate(Type type, Object target, String method, Boolean ignoreCase, Boolean throwOnBindFailure) { }
	// Offset : 0x6bb4d4
	public static Delegate CreateDelegate(Type type, Object target, String method, Boolean ignoreCase) { }
	// Offset : 0x6bbb18
	public virtual Object Clone() { }
	// Offset : 0x6bbb20
	public override Boolean Equals(Object obj) { }
	// Offset : 0x6bbc4c
	public override Int32 GetHashCode() { }
	// Offset : 0x6bbcb4
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6bbef8
	public virtual Delegate[] GetInvocationList() { }
	// Offset : 0x6bbfa8
	public static Delegate Combine(Delegate a, Delegate b) { }
	// Offset : 0x6bc0b8
	public static Delegate Combine(Delegate[] delegates) { }
	// Offset : 0x6bc140
	protected virtual Delegate CombineImpl(Delegate d) { }
	// Offset : 0x6bc1d8
	public static Delegate Remove(Delegate source, Delegate value) { }
	// Offset : 0x6bc230
	protected virtual Delegate RemoveImpl(Delegate d) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class Enum : ValueType, IFormattable, IConvertible, IComparable
{
	// Fields
	private static Char[] split_char; // 0x0

	// Properties
	private Object Value { get; }

	// Methods
	// Offset : 0x6c0000
	protected Void .ctor() { }
	// Offset : 0x6c0008
	private static Void .cctor() { }
	// Offset : 0x6c0098
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x6c0124
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x6c01ac
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x6c0234
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x6c02bc
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x6c0344
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x6c03cc
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x6c0454
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x6c04dc
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x6c0564
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x6c05ec
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x6c0674
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x6c07f8
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x6c0880
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x6c0908
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x6c0990
	public TypeCode GetTypeCode() { }
	// Offset : 0x6c0b30
	private Object get_value() { }
	// Offset : 0x6c0120
	private Object get_Value() { }
	// Offset : 0x6c0b34
	private static Int32 FindPosition(Object value, Array values) { }
	// Offset : 0x6c0d24
	public static String GetName(Type enumType, Object value) { }
	// Offset : 0x6c0eec
	public static Boolean IsDefined(Type enumType, Object value) { }
	// Offset : 0x6c11e8
	private static Type get_underlying_type(Type enumType) { }
	// Offset : 0x6c0a3c
	public static Type GetUnderlyingType(Type enumType) { }
	// Offset : 0x6c11ec
	public static Object Parse(Type enumType, String value) { }
	// Offset : 0x6c19d0
	private static Int32 FindName(Hashtable name_hash, String[] names, String name, Boolean ignoreCase) { }
	// Offset : 0x6c1bc0
	private static UInt64 GetValue(Object value, TypeCode typeCode) { }
	// Offset : 0x6c1264
	public static Object Parse(Type enumType, String value, Boolean ignoreCase) { }
	// Offset : 0x6c21cc
	private Int32 compare_value_to(Object other) { }
	// Offset : 0x6c21d0
	public Int32 CompareTo(Object target) { }
	// Offset : 0x6c22f4
	public override String ToString() { }
	// Offset : 0x6c07a8
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x6c2344
	public String ToString(String format) { }
	// Offset : 0x6c2434
	public String ToString(String format, IFormatProvider provider) { }
	// Offset : 0x6c1e3c
	public static Object ToObject(Type enumType, Byte value) { }
	// Offset : 0x6c1ed4
	public static Object ToObject(Type enumType, Int16 value) { }
	// Offset : 0x6c2004
	public static Object ToObject(Type enumType, Int32 value) { }
	// Offset : 0x6c2134
	public static Object ToObject(Type enumType, Int64 value) { }
	// Offset : 0x6c0ee8
	public static Object ToObject(Type enumType, Object value) { }
	// Offset : 0x6c1da4
	public static Object ToObject(Type enumType, SByte value) { }
	// Offset : 0x6c1f6c
	public static Object ToObject(Type enumType, UInt16 value) { }
	// Offset : 0x6c209c
	public static Object ToObject(Type enumType, UInt32 value) { }
	// Offset : 0x6c1d0c
	public static Object ToObject(Type enumType, UInt64 value) { }
	// Offset : 0x6c2cd4
	public override Boolean Equals(Object obj) { }
	// Offset : 0x6c2cdc
	private Int32 get_hashcode() { }
	// Offset : 0x6c2ce0
	public override Int32 GetHashCode() { }
	// Offset : 0x6c2ce4
	private static String FormatSpecifier_X(Type enumType, Object value, Boolean upper) { }
	// Offset : 0x6c3020
	private static String FormatFlags(Type enumType, Object value) { }
	// Offset : 0x6c2524
	public static String Format(Type enumType, Object value, String format) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class Array : IEnumerable, ICloneable, ICollection, IList
{
	// Fields

	// Properties
	private Object System.Collections.IList.Item { get; set; }
	private Int32 System.Collections.ICollection.Count { get; }
	public Int32 Length { get; }
	public Int64 LongLength { get; }
	public Int32 Rank { get; }
	public Boolean IsSynchronized { get; }
	public Object SyncRoot { get; }
	public Boolean IsFixedSize { get; }
	public Boolean IsReadOnly { get; }

	// Methods
	// Offset : 0x5c91e0
	private Void .ctor() { }
	// Offset : 0x5c91e8
	private Object System.Collections.IList.get_Item(Int32 index) { }
	// Offset : 0x5c935c
	private Void System.Collections.IList.set_Item(Int32 index, Object value) { }
	// Offset : 0x5c9468
	private Int32 System.Collections.IList.Add(Object value) { }
	// Offset : 0x5c94d0
	private Void System.Collections.IList.Clear() { }
	// Offset : 0x5c9510
	private Boolean System.Collections.IList.Contains(Object value) { }
	// Offset : 0x5c9610
	private Int32 System.Collections.IList.IndexOf(Object value) { }
	// Offset : 0x5c9718
	private Void System.Collections.IList.Insert(Int32 index, Object value) { }
	// Offset : 0x5c9780
	private Void System.Collections.IList.Remove(Object value) { }
	// Offset : 0x5c97e8
	private Void System.Collections.IList.RemoveAt(Int32 index) { }
	// Offset : 0x5c9850
	private Int32 System.Collections.ICollection.get_Count() { }
	// Offset : 0x5c9854
	internal Int32 InternalArray__ICollection_get_Count() { }
	// Offset : 0x5c9858
	internal Boolean InternalArray__ICollection_get_IsReadOnly() { }
	// Offset : 0x
	internal IEnumerator`1 InternalArray__IEnumerable_GetEnumerator() { }
	// Offset : 0x5c9860
	internal Void InternalArray__ICollection_Clear() { }
	// Offset : 0x
	internal Void InternalArray__ICollection_Add(T item) { }
	// Offset : 0x
	internal Boolean InternalArray__ICollection_Remove(T item) { }
	// Offset : 0x
	internal Boolean InternalArray__ICollection_Contains(T item) { }
	// Offset : 0x
	internal Void InternalArray__ICollection_CopyTo(T[] array, Int32 index) { }
	// Offset : 0x
	internal Void InternalArray__Insert(Int32 index, T item) { }
	// Offset : 0x5c98d4
	internal Void InternalArray__RemoveAt(Int32 index) { }
	// Offset : 0x
	internal Int32 InternalArray__IndexOf(T item) { }
	// Offset : 0x
	internal T InternalArray__get_Item(Int32 index) { }
	// Offset : 0x
	internal Void InternalArray__set_Item(Int32 index, T item) { }
	// Offset : 0x
	internal Void GetGenericValueImpl(Int32 pos, out T value) { }
	// Offset : 0x
	internal Void SetGenericValueImpl(Int32 pos, ref T value) { }
	// Offset : 0x5c92e8
	public Int32 get_Length() { }
	// Offset : 0x5c994c
	public Int64 get_LongLength() { }
	// Offset : 0x5c9354
	public Int32 get_Rank() { }
	// Offset : 0x5c9964
	private Int32 GetRank() { }
	// Offset : 0x5c9948
	public Int32 GetLength(Int32 dimension) { }
	// Offset : 0x5c9968
	public Int64 GetLongLength(Int32 dimension) { }
	// Offset : 0x5c950c
	public Int32 GetLowerBound(Int32 dimension) { }
	// Offset : 0x5c9980
	public Object GetValue(Int32[] indices) { }
	// Offset : 0x5c9984
	public Void SetValue(Object value, Int32[] indices) { }
	// Offset : 0x5c9358
	internal Object GetValueImpl(Int32 pos) { }
	// Offset : 0x5c9464
	internal Void SetValueImpl(Object value, Int32 pos) { }
	// Offset : 0x5c9988
	internal static Boolean FastCopy(Array source, Int32 source_idx, Array dest, Int32 dest_idx, Int32 length) { }
	// Offset : 0x5c998c
	internal static Array CreateInstanceImpl(Type elementType, Int32[] lengths, Int32[] bounds) { }
	// Offset : 0x5c9990
	public Boolean get_IsSynchronized() { }
	// Offset : 0x5c9998
	public Object get_SyncRoot() { }
	// Offset : 0x5c999c
	public Boolean get_IsFixedSize() { }
	// Offset : 0x5c99a4
	public Boolean get_IsReadOnly() { }
	// Offset : 0x5c99ac
	public IEnumerator GetEnumerator() { }
	// Offset : 0x5c9a10
	public Int32 GetUpperBound(Int32 dimension) { }
	// Offset : 0x5c9a54
	public Object GetValue(Int32 index) { }
	// Offset : 0x5c9b98
	public Object GetValue(Int32 index1, Int32 index2) { }
	// Offset : 0x5c9c4c
	public Object GetValue(Int32 index1, Int32 index2, Int32 index3) { }
	// Offset : 0x5c9d2c
	public Object GetValue(Int64 index) { }
	// Offset : 0x5c9de8
	public Object GetValue(Int64 index1, Int64 index2) { }
	// Offset : 0x5c9eec
	public Object GetValue(Int64 index1, Int64 index2, Int64 index3) { }
	// Offset : 0x5ca040
	public Void SetValue(Object value, Int64 index) { }
	// Offset : 0x5ca250
	public Void SetValue(Object value, Int64 index1, Int64 index2) { }
	// Offset : 0x5ca3bc
	public Void SetValue(Object value, Int64 index1, Int64 index2, Int64 index3) { }
	// Offset : 0x5ca104
	public Void SetValue(Object value, Int32 index) { }
	// Offset : 0x5ca58c
	public Void SetValue(Object value, Int32 index1, Int32 index2) { }
	// Offset : 0x5ca650
	public Void SetValue(Object value, Int32 index1, Int32 index2, Int32 index3) { }
	// Offset : 0x5ca738
	public static Array CreateInstance(Type elementType, Int32 length) { }
	// Offset : 0x5caa0c
	public static Array CreateInstance(Type elementType, Int32 length1, Int32 length2) { }
	// Offset : 0x5caac0
	public static Array CreateInstance(Type elementType, Int32 length1, Int32 length2, Int32 length3) { }
	// Offset : 0x5ca7c8
	public static Array CreateInstance(Type elementType, Int32[] lengths) { }
	// Offset : 0x5caba0
	public static Array CreateInstance(Type elementType, Int32[] lengths, Int32[] lowerBounds) { }
	// Offset : 0x5caf68
	private static Int32[] GetIntArray(Int64[] values) { }
	// Offset : 0x5cb0c8
	public static Array CreateInstance(Type elementType, Int64[] lengths) { }
	// Offset : 0x5cb168
	public Object GetValue(Int64[] indices) { }
	// Offset : 0x5cb208
	public Void SetValue(Object value, Int64[] indices) { }
	// Offset : 0x5cb2b0
	public static Int32 BinarySearch(Array array, Object value) { }
	// Offset : 0x5cb6c8
	public static Int32 BinarySearch(Array array, Object value, IComparer comparer) { }
	// Offset : 0x5cb864
	public static Int32 BinarySearch(Array array, Int32 index, Int32 length, Object value) { }
	// Offset : 0x5cbac0
	public static Int32 BinarySearch(Array array, Int32 index, Int32 length, Object value, IComparer comparer) { }
	// Offset : 0x5cb444
	private static Int32 DoBinarySearch(Array array, Int32 index, Int32 length, Object value, IComparer comparer) { }
	// Offset : 0x5b3294
	public static Void Clear(Array array, Int32 index, Int32 length) { }
	// Offset : 0x5cbd24
	private static Void ClearInternal(Array a, Int32 index, Int32 count) { }
	// Offset : 0x5afe88
	public Object Clone() { }
	// Offset : 0x5c4ba4
	public static Void Copy(Array sourceArray, Array destinationArray, Int32 length) { }
	// Offset : 0x5cbd28
	public static Void Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length) { }
	// Offset : 0x5cc35c
	public static Void Copy(Array sourceArray, Int64 sourceIndex, Array destinationArray, Int64 destinationIndex, Int64 length) { }
	// Offset : 0x5cc520
	public static Void Copy(Array sourceArray, Array destinationArray, Int64 length) { }
	// Offset : 0x5cc5e4
	public static Int32 IndexOf(Array array, Object value) { }
	// Offset : 0x5cc838
	public static Int32 IndexOf(Array array, Object value, Int32 startIndex) { }
	// Offset : 0x5cc68c
	public static Int32 IndexOf(Array array, Object value, Int32 startIndex, Int32 count) { }
	// Offset : 0x5cc8e4
	public Void Initialize() { }
	// Offset : 0x5cc8e8
	public static Int32 LastIndexOf(Array array, Object value) { }
	// Offset : 0x5cc9b8
	public static Int32 LastIndexOf(Array array, Object value, Int32 startIndex) { }
	// Offset : 0x5cca6c
	public static Int32 LastIndexOf(Array array, Object value, Int32 startIndex, Int32 count) { }
	// Offset : 0x5ccc20
	private static Swapper get_swapper(Array array) { }
	// Offset : 0x
	private static Swapper get_swapper(T[] array) { }
	// Offset : 0x5ccd38
	public static Void Reverse(Array array) { }
	// Offset : 0x5b6808
	public static Void Reverse(Array array, Int32 index, Int32 length) { }
	// Offset : 0x5ccde4
	public static Void Sort(Array array) { }
	// Offset : 0x5cd288
	public static Void Sort(Array keys, Array items) { }
	// Offset : 0x5cd348
	public static Void Sort(Array array, IComparer comparer) { }
	// Offset : 0x5cd408
	public static Void Sort(Array array, Int32 index, Int32 length) { }
	// Offset : 0x5cd424
	public static Void Sort(Array keys, Array items, IComparer comparer) { }
	// Offset : 0x5cd4e8
	public static Void Sort(Array keys, Array items, Int32 index, Int32 length) { }
	// Offset : 0x5cd4f0
	public static Void Sort(Array array, Int32 index, Int32 length, IComparer comparer) { }
	// Offset : 0x5cce98
	public static Void Sort(Array keys, Array items, Int32 index, Int32 length, IComparer comparer) { }
	// Offset : 0x5cdc54
	private Void int_swapper(Int32 i, Int32 j) { }
	// Offset : 0x5cdd64
	private Void obj_swapper(Int32 i, Int32 j) { }
	// Offset : 0x5cdec4
	private Void slow_swapper(Int32 i, Int32 j) { }
	// Offset : 0x5cdf20
	private Void double_swapper(Int32 i, Int32 j) { }
	// Offset : 0x5ce030
	private static Int32 new_gap(Int32 gap) { }
	// Offset : 0x5cd510
	private static Void combsort(Double[] array, Int32 start, Int32 size, Swapper swap_items) { }
	// Offset : 0x5cd70c
	private static Void combsort(Int32[] array, Int32 start, Int32 size, Swapper swap_items) { }
	// Offset : 0x5cd900
	private static Void combsort(Char[] array, Int32 start, Int32 size, Swapper swap_items) { }
	// Offset : 0x5cdaf4
	private static Void qsort(Array keys, Array items, Int32 low0, Int32 high0, IComparer comparer) { }
	// Offset : 0x5ce300
	private static Void swap(Array keys, Array items, Int32 i, Int32 j) { }
	// Offset : 0x5ce07c
	private static Int32 compare(Object value1, Object value2, IComparer comparer) { }
	// Offset : 0x
	public static Void Sort(T[] array) { }
	// Offset : 0x
	public static Void Sort(TKey[] keys, TValue[] items) { }
	// Offset : 0x
	public static Void Sort(T[] array, IComparer`1 comparer) { }
	// Offset : 0x
	public static Void Sort(TKey[] keys, TValue[] items, IComparer`1 comparer) { }
	// Offset : 0x
	public static Void Sort(T[] array, Int32 index, Int32 length) { }
	// Offset : 0x
	public static Void Sort(TKey[] keys, TValue[] items, Int32 index, Int32 length) { }
	// Offset : 0x
	public static Void Sort(T[] array, Int32 index, Int32 length, IComparer`1 comparer) { }
	// Offset : 0x
	public static Void Sort(TKey[] keys, TValue[] items, Int32 index, Int32 length, IComparer`1 comparer) { }
	// Offset : 0x
	public static Void Sort(T[] array, Comparison`1 comparison) { }
	// Offset : 0x
	internal static Void Sort(T[] array, Int32 length, Comparison`1 comparison) { }
	// Offset : 0x
	private static Void qsort(K[] keys, V[] items, Int32 low0, Int32 high0, IComparer`1 comparer) { }
	// Offset : 0x
	private static Int32 compare(T value1, T value2, IComparer`1 comparer) { }
	// Offset : 0x
	private static Void qsort(T[] array, Int32 low0, Int32 high0, Comparison`1 comparison) { }
	// Offset : 0x
	private static Void swap(K[] keys, V[] items, Int32 i, Int32 j) { }
	// Offset : 0x
	private static Void swap(T[] array, Int32 i, Int32 j) { }
	// Offset : 0x5ce418
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x5ce600
	public Void CopyTo(Array array, Int64 index) { }
	// Offset : 0x
	public static Void Resize(ref T[] array, Int32 newSize) { }
	// Offset : 0x
	internal static Void Resize(ref T[] array, Int32 length, Int32 newSize) { }
	// Offset : 0x
	public static Boolean TrueForAll(T[] array, Predicate`1 match) { }
	// Offset : 0x
	public static Void ForEach(T[] array, Action`1 action) { }
	// Offset : 0x
	public static TOutput[] ConvertAll(TInput[] array, Converter`2 converter) { }
	// Offset : 0x
	public static Int32 FindLastIndex(T[] array, Predicate`1 match) { }
	// Offset : 0x
	public static Int32 FindLastIndex(T[] array, Int32 startIndex, Predicate`1 match) { }
	// Offset : 0x
	public static Int32 FindLastIndex(T[] array, Int32 startIndex, Int32 count, Predicate`1 match) { }
	// Offset : 0x
	public static Int32 FindIndex(T[] array, Predicate`1 match) { }
	// Offset : 0x
	public static Int32 FindIndex(T[] array, Int32 startIndex, Predicate`1 match) { }
	// Offset : 0x
	public static Int32 FindIndex(T[] array, Int32 startIndex, Int32 count, Predicate`1 match) { }
	// Offset : 0x
	public static Int32 BinarySearch(T[] array, T value) { }
	// Offset : 0x
	public static Int32 BinarySearch(T[] array, T value, IComparer`1 comparer) { }
	// Offset : 0x
	public static Int32 BinarySearch(T[] array, Int32 index, Int32 length, T value) { }
	// Offset : 0x
	public static Int32 BinarySearch(T[] array, Int32 index, Int32 length, T value, IComparer`1 comparer) { }
	// Offset : 0x
	public static Int32 IndexOf(T[] array, T value) { }
	// Offset : 0x
	public static Int32 IndexOf(T[] array, T value, Int32 startIndex) { }
	// Offset : 0x
	public static Int32 IndexOf(T[] array, T value, Int32 startIndex, Int32 count) { }
	// Offset : 0x
	public static Int32 LastIndexOf(T[] array, T value) { }
	// Offset : 0x
	public static Int32 LastIndexOf(T[] array, T value, Int32 startIndex) { }
	// Offset : 0x
	public static Int32 LastIndexOf(T[] array, T value, Int32 startIndex, Int32 count) { }
	// Offset : 0x
	public static T[] FindAll(T[] array, Predicate`1 match) { }
	// Offset : 0x
	public static Boolean Exists(T[] array, Predicate`1 match) { }
	// Offset : 0x
	public static ReadOnlyCollection`1 AsReadOnly(T[] array) { }
	// Offset : 0x
	public static T Find(T[] array, Predicate`1 match) { }
	// Offset : 0x
	public static T FindLast(T[] array, Predicate`1 match) { }
	// Offset : 0x5ce6c4
	public static Void ConstrainedCopy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal struct InternalEnumerator`1 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	private Array array; // 0x0
	private Int32 idx; // 0x0

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Methods
	// Offset : 0x
	internal Void .ctor(Array array) { }
	// Offset : 0x
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public T get_Current() { }
}

// Dll : mscorlib.dll
// Namespace: 
internal class SimpleEnumerator : IEnumerator, ICloneable
{
	// Fields
	private Array enumeratee; // 0x10
	private Int32 currentpos; // 0x18
	private Int32 length; // 0x1c

	// Properties
	public Object Current { get; }

	// Methods
	// Offset : 0x75bf04
	public Void .ctor(Array arrayToEnumerate) { }
	// Offset : 0x75bf54
	public Object get_Current() { }
	// Offset : 0x75c028
	public Boolean MoveNext() { }
	// Offset : 0x75c048
	public Void Reset() { }
	// Offset : 0x75c054
	public Object Clone() { }
}

// Dll : mscorlib.dll
// Namespace: 
private class ArrayReadOnlyList`1 : IEnumerable, IList`1, ICollection`1, IEnumerable`1
{
	// Fields
	private T[] array; // 0x0

	// Properties
	public T Item { get; set; }
	public Int32 Count { get; }
	public Boolean IsReadOnly { get; }

	// Methods
	// Offset : 0x
	public Void .ctor(T[] array) { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	public T get_Item(Int32 index) { }
	// Offset : 0x
	public Void set_Item(Int32 index, T value) { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	public Boolean get_IsReadOnly() { }
	// Offset : 0x
	public Void Add(T item) { }
	// Offset : 0x
	public Void Clear() { }
	// Offset : 0x
	public Boolean Contains(T item) { }
	// Offset : 0x
	public Void CopyTo(T[] array, Int32 index) { }
	// Offset : 0x
	public IEnumerator`1 GetEnumerator() { }
	// Offset : 0x
	public Int32 IndexOf(T item) { }
	// Offset : 0x
	public Void Insert(Int32 index, T item) { }
	// Offset : 0x
	public Boolean Remove(T item) { }
	// Offset : 0x
	public Void RemoveAt(Int32 index) { }
	// Offset : 0x
	private static Exception ReadOnlyError() { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class <GetEnumerator>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal Int32 <i>__0; // 0x0
	internal Int32 $PC; // 0x0
	internal T $current; // 0x0
	internal ArrayReadOnlyList`1 <>f__this; // 0x0

	// Properties
	private T System.Collections.Generic.IEnumerator<T>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	private T System.Collections.Generic.IEnumerator<T>.get_Current() { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	public Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class Swapper : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x75c05c
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x75c06c
	public virtual Void Invoke(Int32 i, Int32 j) { }
	// Offset : 0x75c348
	public virtual IAsyncResult BeginInvoke(Int32 i, Int32 j, AsyncCallback callback, Object object) { }
	// Offset : 0x75c3e8
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
public interface ICollection : IEnumerable
{
	// Fields

	// Properties
	public abstract Int32 Count { get; }
	public abstract Boolean IsSynchronized { get; }
	public abstract Object SyncRoot { get; }

	// Methods
	// Offset : 0x
	public abstract Int32 get_Count() { }
	// Offset : 0x
	public abstract Boolean get_IsSynchronized() { }
	// Offset : 0x
	public abstract Object get_SyncRoot() { }
	// Offset : 0x
	public abstract Void CopyTo(Array array, Int32 index) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
public interface IList : IEnumerable, ICollection
{
	// Fields

	// Properties
	public abstract Boolean IsFixedSize { get; }
	public abstract Boolean IsReadOnly { get; }
	public abstract Object Item { get; set; }

	// Methods
	// Offset : 0x
	public abstract Boolean get_IsFixedSize() { }
	// Offset : 0x
	public abstract Boolean get_IsReadOnly() { }
	// Offset : 0x
	public abstract Object get_Item(Int32 index) { }
	// Offset : 0x
	public abstract Void set_Item(Int32 index, Object value) { }
	// Offset : 0x
	public abstract Int32 Add(Object value) { }
	// Offset : 0x
	public abstract Void Clear() { }
	// Offset : 0x
	public abstract Boolean Contains(Object value) { }
	// Offset : 0x
	public abstract Int32 IndexOf(Object value) { }
	// Offset : 0x
	public abstract Void Insert(Int32 index, Object value) { }
	// Offset : 0x
	public abstract Void Remove(Object value) { }
	// Offset : 0x
	public abstract Void RemoveAt(Int32 index) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
public interface IList`1 : IEnumerable, ICollection`1, IEnumerable`1
{
	// Fields

	// Properties
	public abstract T Item { get; set; }

	// Methods
	// Offset : 0x
	public abstract Int32 IndexOf(T item) { }
	// Offset : 0x
	public abstract Void Insert(Int32 index, T item) { }
	// Offset : 0x
	public abstract Void RemoveAt(Int32 index) { }
	// Offset : 0x
	public abstract T get_Item(Int32 index) { }
	// Offset : 0x
	public abstract Void set_Item(Int32 index, T value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
public interface ICollection`1 : IEnumerable, IEnumerable`1
{
	// Fields

	// Properties
	public abstract Int32 Count { get; }
	public abstract Boolean IsReadOnly { get; }

	// Methods
	// Offset : 0x
	public abstract Int32 get_Count() { }
	// Offset : 0x
	public abstract Boolean get_IsReadOnly() { }
	// Offset : 0x
	public abstract Void Add(T item) { }
	// Offset : 0x
	public abstract Void Clear() { }
	// Offset : 0x
	public abstract Boolean Contains(T item) { }
	// Offset : 0x
	public abstract Void CopyTo(T[] array, Int32 arrayIndex) { }
	// Offset : 0x
	public abstract Boolean Remove(T item) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Void
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class Type : MemberInfo, IReflect, _Type
{
	// Fields
	internal const BindingFlags DefaultBindingFlags; // 0x0
	internal RuntimeTypeHandle _impl; // 0x10
	public static readonly Char Delimiter; // 0x0
	public static readonly Type[] EmptyTypes; // 0x8
	public static readonly MemberFilter FilterAttribute; // 0x10
	public static readonly MemberFilter FilterName; // 0x18
	public static readonly MemberFilter FilterNameIgnoreCase; // 0x20
	public static readonly Object Missing; // 0x28

	// Properties
	public abstract Assembly Assembly { get; }
	public abstract String AssemblyQualifiedName { get; }
	public TypeAttributes Attributes { get; }
	public abstract Type BaseType { get; }
	public override Type DeclaringType { get; }
	public abstract String FullName { get; }
	public Boolean HasElementType { get; }
	public Boolean IsAbstract { get; }
	public Boolean IsArray { get; }
	public Boolean IsByRef { get; }
	public Boolean IsClass { get; }
	public Boolean IsContextful { get; }
	public Boolean IsEnum { get; }
	public Boolean IsExplicitLayout { get; }
	public Boolean IsInterface { get; }
	public Boolean IsMarshalByRef { get; }
	public Boolean IsPointer { get; }
	public Boolean IsPrimitive { get; }
	public Boolean IsSealed { get; }
	public Boolean IsSerializable { get; }
	public Boolean IsValueType { get; }
	public override MemberTypes MemberType { get; }
	public abstract override Module Module { get; }
	public abstract String Namespace { get; }
	public override Type ReflectedType { get; }
	public virtual RuntimeTypeHandle TypeHandle { get; }
	public abstract Type UnderlyingSystemType { get; }
	internal Boolean IsSystemType { get; }
	public virtual Boolean ContainsGenericParameters { get; }
	public virtual Boolean IsGenericTypeDefinition { get; }
	public virtual Boolean IsGenericType { get; }
	public virtual Boolean IsGenericParameter { get; }
	public Boolean IsNested { get; }
	internal Boolean IsUserType { get; }

	// Methods
	// Offset : 0x71abb8
	protected Void .ctor() { }
	// Offset : 0x71abc0
	private static Void .cctor() { }
	// Offset : 0x71ad0c
	private static Boolean FilterName_impl(MemberInfo m, Object filterCriteria) { }
	// Offset : 0x71aee4
	private static Boolean FilterNameIgnoreCase_impl(MemberInfo m, Object filterCriteria) { }
	// Offset : 0x71b100
	private static Boolean FilterAttribute_impl(MemberInfo m, Object filterCriteria) { }
	// Offset : 0x
	public abstract Assembly get_Assembly() { }
	// Offset : 0x
	public abstract String get_AssemblyQualifiedName() { }
	// Offset : 0x71b420
	public TypeAttributes get_Attributes() { }
	// Offset : 0x
	public abstract Type get_BaseType() { }
	// Offset : 0x71b464
	public override Type get_DeclaringType() { }
	// Offset : 0x
	public abstract String get_FullName() { }
	// Offset : 0x71b46c
	public Boolean get_HasElementType() { }
	// Offset : 0x71b4b0
	public Boolean get_IsAbstract() { }
	// Offset : 0x71b4c8
	public Boolean get_IsArray() { }
	// Offset : 0x71b50c
	public Boolean get_IsByRef() { }
	// Offset : 0x71b550
	public Boolean get_IsClass() { }
	// Offset : 0x71b5e8
	public Boolean get_IsContextful() { }
	// Offset : 0x71b62c
	public Boolean get_IsEnum() { }
	// Offset : 0x71b774
	public Boolean get_IsExplicitLayout() { }
	// Offset : 0x71b58c
	public Boolean get_IsInterface() { }
	// Offset : 0x71b794
	public Boolean get_IsMarshalByRef() { }
	// Offset : 0x71b7d8
	public Boolean get_IsPointer() { }
	// Offset : 0x71b81c
	public Boolean get_IsPrimitive() { }
	// Offset : 0x71b860
	public Boolean get_IsSealed() { }
	// Offset : 0x71b878
	public Boolean get_IsSerializable() { }
	// Offset : 0x71b5a4
	public Boolean get_IsValueType() { }
	// Offset : 0x71bab0
	public override MemberTypes get_MemberType() { }
	// Offset : 0x
	public abstract override Module get_Module() { }
	// Offset : 0x
	public abstract String get_Namespace() { }
	// Offset : 0x71bab8
	public override Type get_ReflectedType() { }
	// Offset : 0x71bac0
	public virtual RuntimeTypeHandle get_TypeHandle() { }
	// Offset : 0x
	public abstract Type get_UnderlyingSystemType() { }
	// Offset : 0x71bac8
	public override Boolean Equals(Object o) { }
	// Offset : 0x71bb68
	public Boolean Equals(Type o) { }
	// Offset : 0x71bc14
	internal Boolean EqualsInternal(Type type) { }
	// Offset : 0x71bc18
	private static Type internal_from_handle(IntPtr handle) { }
	// Offset : 0x71bc1c
	private static Type internal_from_name(String name, Boolean throwOnError, Boolean ignoreCase) { }
	// Offset : 0x706718
	public static Type GetType(String typeName) { }
	// Offset : 0x71bc28
	public static Type GetType(String typeName, Boolean throwOnError) { }
	// Offset : 0x71bd70
	internal static TypeCode GetTypeCodeInternal(Type type) { }
	// Offset : 0x71bd74
	public static TypeCode GetTypeCode(Type type) { }
	// Offset : 0x71b6d4
	public static Type GetTypeFromHandle(RuntimeTypeHandle handle) { }
	// Offset : 0x71be68
	public static RuntimeTypeHandle GetTypeHandle(Object o) { }
	// Offset : 0x71baa8
	internal static Boolean type_is_subtype_of(Type a, Type b, Boolean check_interfaces) { }
	// Offset : 0x71bf24
	internal static Boolean type_is_assignable_from(Type a, Type b) { }
	// Offset : 0x71bf28
	public Type GetType() { }
	// Offset : 0x71bf30
	public virtual Boolean IsSubclassOf(Type c) { }
	// Offset : 0x71c028
	public Type GetInterface(String name) { }
	// Offset : 0x
	public abstract Type GetInterface(String name, Boolean ignoreCase) { }
	// Offset : 0x
	public abstract Type[] GetInterfaces() { }
	// Offset : 0x71c078
	public virtual Boolean IsAssignableFrom(Type c) { }
	// Offset : 0x71c238
	public virtual Boolean IsInstanceOfType(Object o) { }
	// Offset : 0x71c23c
	public virtual Int32 GetArrayRank() { }
	// Offset : 0x
	public abstract Type GetElementType() { }
	// Offset : 0x
	public abstract EventInfo GetEvent(String name, BindingFlags bindingAttr) { }
	// Offset : 0x71c2a4
	public FieldInfo GetField(String name) { }
	// Offset : 0x
	public abstract FieldInfo GetField(String name, BindingFlags bindingAttr) { }
	// Offset : 0x71c2f4
	public FieldInfo[] GetFields() { }
	// Offset : 0x
	public abstract FieldInfo[] GetFields(BindingFlags bindingAttr) { }
	// Offset : 0x71c33c
	public override Int32 GetHashCode() { }
	// Offset : 0x71c3d4
	public MethodInfo GetMethod(String name) { }
	// Offset : 0x71c4a8
	public MethodInfo GetMethod(String name, BindingFlags bindingAttr) { }
	// Offset : 0x71c580
	public MethodInfo GetMethod(String name, Type[] types) { }
	// Offset : 0x71c6fc
	public MethodInfo GetMethod(String name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x71c59c
	public MethodInfo GetMethod(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x
	protected abstract MethodInfo GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x71c714
	internal MethodInfo GetMethodImplInternal(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x
	public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr) { }
	// Offset : 0x71c7a0
	public PropertyInfo[] GetProperties() { }
	// Offset : 0x
	public abstract PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }
	// Offset : 0x71c7e8
	public PropertyInfo GetProperty(String name) { }
	// Offset : 0x71c8bc
	public PropertyInfo GetProperty(String name, BindingFlags bindingAttr) { }
	// Offset : 0x71c994
	public PropertyInfo GetProperty(String name, Type returnType) { }
	// Offset : 0x71ca6c
	public PropertyInfo GetProperty(String name, Type returnType, Type[] types) { }
	// Offset : 0x71ca8c
	public PropertyInfo GetProperty(String name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x
	protected abstract PropertyInfo GetPropertyImpl(String name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x71cbec
	internal PropertyInfo GetPropertyImplInternal(String name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x
	protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x
	protected abstract TypeAttributes GetAttributeFlagsImpl() { }
	// Offset : 0x
	protected abstract Boolean HasElementTypeImpl() { }
	// Offset : 0x
	protected abstract Boolean IsArrayImpl() { }
	// Offset : 0x
	protected abstract Boolean IsByRefImpl() { }
	// Offset : 0x
	protected abstract Boolean IsPointerImpl() { }
	// Offset : 0x
	protected abstract Boolean IsPrimitiveImpl() { }
	// Offset : 0x71cc78
	internal static Boolean IsArrayImpl(Type type) { }
	// Offset : 0x71cc7c
	protected virtual Boolean IsValueTypeImpl() { }
	// Offset : 0x71cda0
	protected virtual Boolean IsContextfulImpl() { }
	// Offset : 0x71ce4c
	protected virtual Boolean IsMarshalByRefImpl() { }
	// Offset : 0x71cef8
	public ConstructorInfo GetConstructor(Type[] types) { }
	// Offset : 0x71d04c
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x71cf14
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x
	public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }
	// Offset : 0x
	public abstract Object InvokeMember(String name, BindingFlags invokeAttr, Binder binder, Object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters) { }
	// Offset : 0x71d064
	public override String ToString() { }
	// Offset : 0x71ba54
	internal Boolean get_IsSystemType() { }
	// Offset : 0x71d0a8
	public virtual Type[] GetGenericArguments() { }
	// Offset : 0x71d110
	public virtual Boolean get_ContainsGenericParameters() { }
	// Offset : 0x71d118
	public virtual Boolean get_IsGenericTypeDefinition() { }
	// Offset : 0x71d11c
	internal Type GetGenericTypeDefinition_impl() { }
	// Offset : 0x71d120
	public virtual Type GetGenericTypeDefinition() { }
	// Offset : 0x71d194
	public virtual Boolean get_IsGenericType() { }
	// Offset : 0x71d198
	private static Type MakeGenericType(Type gt, Type[] types) { }
	// Offset : 0x71d19c
	public virtual Type MakeGenericType(Type[] typeArguments) { }
	// Offset : 0x71d544
	public virtual Boolean get_IsGenericParameter() { }
	// Offset : 0x71d54c
	public Boolean get_IsNested() { }
	// Offset : 0x71d598
	private Type make_byref_type() { }
	// Offset : 0x71d59c
	public virtual Type MakeByRefType() { }
	// Offset : 0x71d5a0
	internal Object[] GetPseudoCustomAttributes() { }
	// Offset : 0x71d738
	internal Boolean get_IsUserType() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo
{
	// Fields

	// Properties
	public abstract Type DeclaringType { get; }
	public abstract MemberTypes MemberType { get; }
	public abstract String Name { get; }
	public abstract Type ReflectedType { get; }
	public virtual Module Module { get; }

	// Methods
	// Offset : 0x5e9b08
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Type get_DeclaringType() { }
	// Offset : 0x
	public abstract MemberTypes get_MemberType() { }
	// Offset : 0x
	public abstract String get_Name() { }
	// Offset : 0x
	public abstract Type get_ReflectedType() { }
	// Offset : 0x5d7f74
	public virtual Module get_Module() { }
	// Offset : 0x
	public abstract Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x
	public abstract Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x
	public abstract Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public interface ICustomAttributeProvider
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x
	public abstract Boolean IsDefined(Type attributeType, Boolean inherit) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _MemberInfo
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public interface IReflect
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _Type
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class Exception : ISerializable, _Exception
{
	// Fields
	private IntPtr[] trace_ips; // 0x10
	private Exception inner_exception; // 0x18
	internal String message; // 0x20
	private String help_link; // 0x28
	private String class_name; // 0x30
	private String stack_trace; // 0x38
	private String _remoteStackTraceString; // 0x40
	private Int32 remote_stack_index; // 0x48
	internal Int32 hresult; // 0x4c
	private String source; // 0x50
	private IDictionary _data; // 0x58

	// Properties
	public Exception InnerException { get; }
	protected Int32 HResult { get; set; }
	private String ClassName { get; }
	public virtual String Message { get; }
	public virtual String Source { get; }
	public virtual String StackTrace { get; }

	// Methods
	// Offset : 0x6c4ccc
	public Void .ctor() { }
	// Offset : 0x6b9be0
	public Void .ctor(String message) { }
	// Offset : 0x6c4ce0
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6c5088
	public Void .ctor(String message, Exception innerException) { }
	// Offset : 0x6c50cc
	public Exception get_InnerException() { }
	// Offset : 0x6c50d4
	protected Int32 get_HResult() { }
	// Offset : 0x6be16c
	protected Void set_HResult(Int32 value) { }
	// Offset : 0x6c50dc
	private String get_ClassName() { }
	// Offset : 0x6c514c
	public virtual String get_Message() { }
	// Offset : 0x6c51f8
	public virtual String get_Source() { }
	// Offset : 0x6c53c8
	public virtual String get_StackTrace() { }
	// Offset : 0x6c5ed8
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6c6134
	public override String ToString() { }
	// Offset : 0x6c5884
	internal Void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi) { }
	// Offset : 0x6c5144
	public Type GetType() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _Exception
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct RuntimeFieldHandle : ISerializable
{
	// Fields
	private IntPtr value; // 0x10

	// Properties
	public IntPtr Value { get; }

	// Methods
	// Offset : 0x2cb444
	private Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x2cb44c
	public IntPtr get_Value() { }
	// Offset : 0x2cb454
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x2cb45c
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cb464
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct RuntimeTypeHandle : ISerializable
{
	// Fields
	private IntPtr value; // 0x10

	// Properties
	public IntPtr Value { get; }

	// Methods
	// Offset : 0x2cb4a4
	private Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x2cb4ac
	public IntPtr get_Value() { }
	// Offset : 0x2cb4b4
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x2cb4bc
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cb4c4
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System
public sealed class ParamArrayAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6a7cf4
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class OutAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4f5300
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class ObsoleteAttribute : Attribute
{
	// Fields
	private String _message; // 0x10
	private Boolean _error; // 0x18

	// Properties

	// Methods
	// Offset : 0x6a7508
	public Void .ctor() { }
	// Offset : 0x6a7510
	public Void .ctor(String message) { }
	// Offset : 0x6a753c
	public Void .ctor(String message, Boolean error) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class DllImportAttribute : Attribute
{
	// Fields
	public CallingConvention CallingConvention; // 0x10
	public CharSet CharSet; // 0x14
	private String Dll; // 0x18
	public String EntryPoint; // 0x20
	public Boolean ExactSpelling; // 0x28
	public Boolean PreserveSig; // 0x29
	public Boolean SetLastError; // 0x2a
	public Boolean BestFitMapping; // 0x2b
	public Boolean ThrowOnUnmappableChar; // 0x2c

	// Properties
	public String Value { get; }

	// Methods
	// Offset : 0x4fe228
	public Void .ctor(String dllName) { }
	// Offset : 0x4fe254
	public String get_Value() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class MarshalAsAttribute : Attribute
{
	// Fields
	private UnmanagedType utype; // 0x10
	public UnmanagedType ArraySubType; // 0x14
	public String MarshalCookie; // 0x18
	public String MarshalType; // 0x20
	public Type MarshalTypeRef; // 0x28
	public Int32 SizeConst; // 0x30
	public Int16 SizeParamIndex; // 0x34

	// Properties

	// Methods
	// Offset : 0x4fe664
	public Void .ctor(UnmanagedType unmanagedType) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class InAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4f52f0
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
[Serializable]
public sealed class ConditionalAttribute : Attribute
{
	// Fields
	private String myCondition; // 0x10

	// Properties

	// Methods
	// Offset : 0x6bcab0
	public Void .ctor(String conditionString) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Permissions
[Serializable]
public abstract class SecurityAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class GuidAttribute : Attribute
{
	// Fields
	private String guidValue; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fe45c
	public Void .ctor(String guid) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class ComImportAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4fe1c4
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class OptionalAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4f52f8
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
public sealed class FixedBufferAttribute : Attribute
{
	// Fields
	private Type elementType; // 0x10
	private Int32 length; // 0x18

	// Properties
	public Type ElementType { get; }
	public Int32 Length { get; }

	// Methods
	// Offset : 0x4fdb58
	public Void .ctor(Type elementType, Int32 length) { }
	// Offset : 0x4fdb94
	public Type get_ElementType() { }
	// Offset : 0x4fdb9c
	public Int32 get_Length() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class CompilerGeneratedAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4fda6c
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
public sealed class InternalsVisibleToAttribute : Attribute
{
	// Fields
	private String assemblyName; // 0x10
	private Boolean all_visible; // 0x18

	// Properties

	// Methods
	// Offset : 0x4fdba4
	public Void .ctor(String assemblyName) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class RuntimeCompatibilityAttribute : Attribute
{
	// Fields
	private Boolean wrap_non_exception_throws; // 0x10

	// Properties
	public Boolean WrapNonExceptionThrows { set; }

	// Methods
	// Offset : 0x4fdbd8
	public Void .ctor() { }
	// Offset : 0x4fdbe0
	public Void set_WrapNonExceptionThrows(Boolean value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerHiddenAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6bcce4
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class DefaultMemberAttribute : Attribute
{
	// Fields
	private String member_name; // 0x10

	// Properties
	public String MemberName { get; }

	// Methods
	// Offset : 0x5d5564
	public Void .ctor(String memberName) { }
	// Offset : 0x5d5590
	public String get_MemberName() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class DecimalConstantAttribute : Attribute
{
	// Fields
	private Byte scale; // 0x10
	private Boolean sign; // 0x11
	private Int32 hi; // 0x14
	private Int32 mid; // 0x18
	private Int32 low; // 0x1c

	// Properties

	// Methods
	// Offset : 0x4fda74
	public Void .ctor(Byte scale, Byte sign, UInt32 hi, UInt32 mid, UInt32 low) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class FieldOffsetAttribute : Attribute
{
	// Fields
	private Int32 val; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fe25c
	public Void .ctor(Int32 offset) { }
}

// Dll : mscorlib.dll
// Namespace: System
public struct RuntimeArgumentHandle
{
	// Fields
	internal IntPtr args; // 0x10

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class AsyncCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x75c9d0
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x75c9e0
	public virtual Void Invoke(IAsyncResult ar) { }
	// Offset : 0x75cea0
	public virtual IAsyncResult BeginInvoke(IAsyncResult ar, AsyncCallback callback, Object object) { }
	// Offset : 0x75cec4
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
public interface IAsyncResult
{
	// Fields

	// Properties
	public abstract Object AsyncState { get; }
	public abstract WaitHandle AsyncWaitHandle { get; }
	public abstract Boolean IsCompleted { get; }

	// Methods
	// Offset : 0x
	public abstract Object get_AsyncState() { }
	// Offset : 0x
	public abstract WaitHandle get_AsyncWaitHandle() { }
	// Offset : 0x
	public abstract Boolean get_IsCompleted() { }
}

// Dll : mscorlib.dll
// Namespace: System
public struct TypedReference
{
	// Fields
	private RuntimeTypeHandle type; // 0x10
	private IntPtr value; // 0x18
	private IntPtr klass; // 0x20

	// Properties

	// Methods
	// Offset : 0x2d0e6c
	public override Boolean Equals(Object o) { }
	// Offset : 0x2d0e78
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System
public struct ArgIterator
{
	// Fields
	private IntPtr sig; // 0x10
	private IntPtr args; // 0x18
	private Int32 next_arg; // 0x20
	private Int32 num_args; // 0x24

	// Properties

	// Methods
	// Offset : 0x2cc92c
	public override Boolean Equals(Object o) { }
	// Offset : 0x2cc938
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class MarshalByRefObject
{
	// Fields
	private ServerIdentity _identity; // 0x10

	// Properties
	internal ServerIdentity ObjectIdentity { get; set; }

	// Methods
	// Offset : 0x698944
	protected Void .ctor() { }
	// Offset : 0x698948
	internal ServerIdentity get_ObjectIdentity() { }
	// Offset : 0x698950
	internal Void set_ObjectIdentity(ServerIdentity value) { }
	// Offset : 0x698958
	public virtual ObjRef CreateObjRef(Type requestedType) { }
	// Offset : 0x698a2c
	public virtual Object InitializeLifetimeService() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Nullable`1
{
	// Fields
	internal T value; // 0x0
	internal Boolean has_value; // 0x0

	// Properties
	public Boolean HasValue { get; }
	public T Value { get; }

	// Methods
	// Offset : 0x
	public Void .ctor(T value) { }
	// Offset : 0x
	public Boolean get_HasValue() { }
	// Offset : 0x
	public T get_Value() { }
	// Offset : 0x
	public override Boolean Equals(Object other) { }
	// Offset : 0x
	private Boolean Equals(Nullable`1 other) { }
	// Offset : 0x
	public override Int32 GetHashCode() { }
	// Offset : 0x
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
public static class RuntimeHelpers
{
	// Fields

	// Properties
	public static Int32 OffsetToStringData { get; }

	// Methods
	// Offset : 0x4fdbec
	private static Void InitializeArray(Array array, IntPtr fldHandle) { }
	// Offset : 0x4fdbf0
	public static Void InitializeArray(Array array, RuntimeFieldHandle fldHandle) { }
	// Offset : 0x4fdcac
	public static Int32 get_OffsetToStringData() { }
}

// Dll : mscorlib.dll
// Namespace: 
internal sealed class Locale
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x79e440
	public static String GetText(String msg) { }
	// Offset : 0x79e444
	public static String GetText(String fmt, Object[] args) { }
}

// Dll : mscorlib.dll
// Namespace: System
internal class MonoTODOAttribute : Attribute
{
	// Fields
	private String comment; // 0x10

	// Properties

	// Methods
	// Offset : 0x69c6c8
	public Void .ctor() { }
	// Offset : 0x69baec
	public Void .ctor(String comment) { }
}

// Dll : mscorlib.dll
// Namespace: System
internal class MonoDocumentationNoteAttribute : MonoTODOAttribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x69bac0
	public Void .ctor(String comment) { }
}

// Dll : mscorlib.dll
// Namespace: System
internal class MonoLimitationAttribute : MonoTODOAttribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x69c69c
	public Void .ctor(String comment) { }
}

// Dll : mscorlib.dll
// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle, IDisposable
{
	// Fields

	// Properties
	public override Boolean IsInvalid { get; }

	// Methods
	// Offset : 0x79e4bc
	protected Void .ctor(Boolean ownsHandle) { }
	// Offset : 0x79e4f8
	public override Boolean get_IsInvalid() { }
}

// Dll : mscorlib.dll
// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x79e564
	public Void .ctor(IntPtr existingHandle, Boolean ownsHandle) { }
	// Offset : 0x79e5bc
	protected override Boolean ReleaseHandle() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Globalization.Unicode
internal class CodePointIndexer
{
	// Fields
	private readonly TableRange[] ranges; // 0x10
	public readonly Int32 TotalCount; // 0x18
	private Int32 defaultIndex; // 0x1c
	private Int32 defaultCP; // 0x20

	// Properties

	// Methods
	// Offset : 0x79e5dc
	public Void .ctor(Int32[] starts, Int32[] ends, Int32 defaultIndex, Int32 defaultCP) { }
	// Offset : 0x79e890
	public Int32 ToIndex(Int32 cp) { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
internal struct TableRange
{
	// Fields
	public readonly Int32 Start; // 0x10
	public readonly Int32 End; // 0x14
	public readonly Int32 Count; // 0x18
	public readonly Int32 IndexStart; // 0x1c
	public readonly Int32 IndexEnd; // 0x20

	// Properties

	// Methods
	// Offset : 0x2d07cc
	public Void .ctor(Int32 start, Int32 end, Int32 indexStart) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Globalization.Unicode
internal class TailoringInfo
{
	// Fields
	public readonly Int32 LCID; // 0x10
	public readonly Int32 TailoringIndex; // 0x14
	public readonly Int32 TailoringCount; // 0x18
	public readonly Boolean FrenchSort; // 0x1c

	// Properties

	// Methods
	// Offset : 0x79f358
	public Void .ctor(Int32 lcid, Int32 tailoringIndex, Int32 tailoringCount, Boolean frenchSort) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Globalization.Unicode
internal class Contraction
{
	// Fields
	public readonly Char[] Source; // 0x10
	public readonly String Replacement; // 0x18
	public readonly Byte[] SortKey; // 0x20

	// Properties

	// Methods
	// Offset : 0x79e9e8
	public Void .ctor(Char[] source, String replacement, Byte[] sortkey) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Globalization.Unicode
internal class ContractionComparer : IComparer
{
	// Fields
	public static readonly ContractionComparer Instance; // 0x0

	// Properties

	// Methods
	// Offset : 0x79ea28
	public Void .ctor() { }
	// Offset : 0x79ea30
	private static Void .cctor() { }
	// Offset : 0x79ea94
	public Int32 Compare(Object o1, Object o2) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Globalization.Unicode
internal class Level2Map
{
	// Fields
	public Byte Source; // 0x10
	public Byte Replace; // 0x11

	// Properties

	// Methods
	// Offset : 0x79ecf8
	public Void .ctor(Byte source, Byte replace) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Globalization.Unicode
internal class Level2MapComparer : IComparer
{
	// Fields
	public static readonly Level2MapComparer Instance; // 0x0

	// Properties

	// Methods
	// Offset : 0x79ed34
	public Void .ctor() { }
	// Offset : 0x79ed3c
	private static Void .cctor() { }
	// Offset : 0x79eda0
	public Int32 Compare(Object o1, Object o2) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTable
{
	// Fields
	public static Int32 MaxExpansionLength; // 0x0
	private static readonly Byte* ignorableFlags; // 0x8
	private static readonly Byte* categories; // 0x10
	private static readonly Byte* level1; // 0x18
	private static readonly Byte* level2; // 0x20
	private static readonly Byte* level3; // 0x28
	private static Byte* cjkCHScategory; // 0x30
	private static Byte* cjkCHTcategory; // 0x38
	private static Byte* cjkJAcategory; // 0x40
	private static Byte* cjkKOcategory; // 0x48
	private static Byte* cjkCHSlv1; // 0x50
	private static Byte* cjkCHTlv1; // 0x58
	private static Byte* cjkJAlv1; // 0x60
	private static Byte* cjkKOlv1; // 0x68
	private static Byte* cjkKOlv2; // 0x70
	private static readonly Char[] tailoringArr; // 0x78
	private static readonly TailoringInfo[] tailoringInfos; // 0x80
	private static Object forLock; // 0x88
	public static readonly Boolean isReady; // 0x90
	private static Dictionary`2 <>f__switch$map2; // 0x98
	private static Dictionary`2 <>f__switch$map3; // 0xa0
	private static Dictionary`2 <>f__switch$map4; // 0xa8

	// Properties
	public static Boolean IsReady { get; }

	// Methods
	// Offset : 0x79ef04
	private static Void .cctor() { }
	// Offset : 0x79f3ac
	public static TailoringInfo GetTailoringInfo(Int32 lcid) { }
	// Offset : 0x79f518
	public static Void BuildTailoringTables(CultureInfo culture, TailoringInfo t, ref Contraction[] contractions, ref Level2Map[] diacriticals) { }
	// Offset : 0x79fcf0
	private static Void SetCJKReferences(String name, ref CodePointIndexer cjkIndexer, ref Byte* catTable, ref Byte* lv1Table, ref CodePointIndexer lv2Indexer, ref Byte* lv2Table) { }
	// Offset : 0x7a00dc
	public static Byte Category(Int32 cp) { }
	// Offset : 0x7a019c
	public static Byte Level1(Int32 cp) { }
	// Offset : 0x7a025c
	public static Byte Level2(Int32 cp) { }
	// Offset : 0x7a031c
	public static Byte Level3(Int32 cp) { }
	// Offset : 0x7a03dc
	public static Boolean IsIgnorable(Int32 cp, Byte flag) { }
	// Offset : 0x7a0508
	public static Boolean IsIgnorableNonSpacing(Int32 cp) { }
	// Offset : 0x7a0570
	public static Int32 ToKanaTypeInsensitive(Int32 i) { }
	// Offset : 0x7a0590
	public static Int32 ToWidthCompat(Int32 i) { }
	// Offset : 0x7a0718
	public static Boolean HasSpecialWeight(Char c) { }
	// Offset : 0x7a07ac
	public static Boolean IsHalfWidthKana(Char c) { }
	// Offset : 0x7a07c0
	public static Boolean IsHiragana(Char c) { }
	// Offset : 0x7a07d8
	public static Boolean IsJapaneseSmallLetter(Char c) { }
	// Offset : 0x7a08ac
	public static Boolean get_IsReady() { }
	// Offset : 0x79f298
	private static IntPtr GetResource(String name) { }
	// Offset : 0x79f328
	private static UInt32 UInt32FromBytePtr(Byte* raw, UInt32 idx) { }
	// Offset : 0x7a0914
	public static Void FillCJK(String culture, ref CodePointIndexer cjkIndexer, ref Byte* catTable, ref Byte* lv1Table, ref CodePointIndexer lv2Indexer, ref Byte* lv2Table) { }
	// Offset : 0x7a0a70
	private static Void FillCJKCore(String culture, ref CodePointIndexer cjkIndexer, ref Byte* catTable, ref Byte* lv1Table, ref CodePointIndexer cjkLv2Indexer, ref Byte* lv2Table) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTableUtil
{
	// Fields
	public static readonly CodePointIndexer Ignorable; // 0x0
	public static readonly CodePointIndexer Category; // 0x8
	public static readonly CodePointIndexer Level1; // 0x10
	public static readonly CodePointIndexer Level2; // 0x18
	public static readonly CodePointIndexer Level3; // 0x20
	public static readonly CodePointIndexer CjkCHS; // 0x28
	public static readonly CodePointIndexer Cjk; // 0x30

	// Properties

	// Methods
	// Offset : 0x7a1228
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Globalization.Unicode
internal class SimpleCollator
{
	// Fields
	private static Boolean QuickCheckDisabled; // 0x0
	private static SimpleCollator invariant; // 0x8
	private readonly TextInfo textInfo; // 0x10
	private readonly Boolean frenchSort; // 0x18
	private readonly Byte* cjkCatTable; // 0x20
	private readonly Byte* cjkLv1Table; // 0x28
	private readonly CodePointIndexer cjkIndexer; // 0x30
	private readonly Byte* cjkLv2Table; // 0x38
	private readonly CodePointIndexer cjkLv2Indexer; // 0x40
	private readonly Int32 lcid; // 0x48
	private readonly Contraction[] contractions; // 0x50
	private readonly Level2Map[] level2Maps; // 0x58
	private readonly Byte[] unsafeFlags; // 0x60

	// Properties

	// Methods
	// Offset : 0x7a1898
	public Void .ctor(CultureInfo culture) { }
	// Offset : 0x7a1e3c
	private static Void .cctor() { }
	// Offset : 0x7a1d34
	private Void SetCJKTable(CultureInfo culture, ref CodePointIndexer cjkIndexer, ref Byte* catTable, ref Byte* lv1Table, ref CodePointIndexer lv2Indexer, ref Byte* lv2Table) { }
	// Offset : 0x7a1f3c
	private static CultureInfo GetNeutralCulture(CultureInfo info) { }
	// Offset : 0x7a2024
	private Byte Category(Int32 cp) { }
	// Offset : 0x7a20dc
	private Byte Level1(Int32 cp) { }
	// Offset : 0x7a2194
	private Byte Level2(Int32 cp, ExtenderType ext) { }
	// Offset : 0x7a2390
	private static Boolean IsHalfKana(Int32 cp, CompareOptions opt) { }
	// Offset : 0x7a2418
	private Contraction GetContraction(String s, Int32 start, Int32 end) { }
	// Offset : 0x7a24f8
	private Contraction GetContraction(String s, Int32 start, Int32 end, Contraction[] clist) { }
	// Offset : 0x7a2684
	private Contraction GetTailContraction(String s, Int32 start, Int32 end) { }
	// Offset : 0x7a2764
	private Contraction GetTailContraction(String s, Int32 start, Int32 end, Contraction[] clist) { }
	// Offset : 0x7a2a44
	private Int32 FilterOptions(Int32 i, CompareOptions opt) { }
	// Offset : 0x7a2bb0
	private ExtenderType GetExtenderType(Int32 i) { }
	// Offset : 0x7a2cb0
	private static Byte ToDashTypeValue(ExtenderType ext, CompareOptions opt) { }
	// Offset : 0x7a2ce0
	private Int32 FilterExtender(Int32 i, ExtenderType ext, CompareOptions opt) { }
	// Offset : 0x7a2f14
	private static Boolean IsIgnorable(Int32 i, CompareOptions opt) { }
	// Offset : 0x7a2fac
	private Boolean IsSafe(Int32 i) { }
	// Offset : 0x7a3068
	public SortKey GetSortKey(String s, CompareOptions options) { }
	// Offset : 0x7a30c0
	public SortKey GetSortKey(String s, Int32 start, Int32 length, CompareOptions options) { }
	// Offset : 0x7a33b8
	private Void GetSortKey(String s, Int32 start, Int32 end, SortKeyBuffer buf, CompareOptions opt) { }
	// Offset : 0x7a381c
	private Void FillSortKeyRaw(Int32 i, ExtenderType ext, SortKeyBuffer buf, CompareOptions opt) { }
	// Offset : 0x7a3f00
	private Void FillSurrogateSortKeyRaw(Int32 i, SortKeyBuffer buf) { }
	// Offset : 0x7a40c4
	private Int32 CompareOrdinal(String s1, Int32 idx1, Int32 len1, String s2, Int32 idx2, Int32 len2) { }
	// Offset : 0x7a4578
	private Int32 CompareQuick(String s1, Int32 idx1, Int32 len1, String s2, Int32 idx2, Int32 len2, out Boolean sourceConsumed, out Boolean targetConsumed, Boolean immediateBreakup) { }
	// Offset : 0x7a4dec
	private Int32 CompareOrdinalIgnoreCase(String s1, Int32 idx1, Int32 len1, String s2, Int32 idx2, Int32 len2) { }
	// Offset : 0x7a53bc
	public Int32 Compare(String s1, Int32 idx1, Int32 len1, String s2, Int32 idx2, Int32 len2, CompareOptions options) { }
	// Offset : 0x7a37dc
	private Void ClearBuffer(Byte* buffer, Int32 size) { }
	// Offset : 0x7a5580
	private Boolean QuickCheckPossible(String s1, Int32 idx1, Int32 end1, String s2, Int32 idx2, Int32 end2) { }
	// Offset : 0x7a5588
	private Int32 CompareInternal(String s1, Int32 idx1, Int32 len1, String s2, Int32 idx2, Int32 len2, out Boolean targetConsumed, out Boolean sourceConsumed, Boolean skipHeadingExtenders, Boolean immediateBreakup, ref Context ctx) { }
	// Offset : 0x7a6dec
	private Int32 CompareFlagPair(Boolean b1, Boolean b2) { }
	// Offset : 0x7a6e0c
	public Boolean IsPrefix(String src, String target, CompareOptions opt) { }
	// Offset : 0x7a6e6c
	public Boolean IsPrefix(String s, String target, Int32 start, Int32 length, CompareOptions opt) { }
	// Offset : 0x7a6fb0
	private Boolean IsPrefix(String s, String target, Int32 start, Int32 length, Boolean skipHeadingExtenders, ref Context ctx) { }
	// Offset : 0x7a7068
	public Boolean IsSuffix(String src, String target, CompareOptions opt) { }
	// Offset : 0x7a70fc
	public Boolean IsSuffix(String s, String target, Int32 start, Int32 length, CompareOptions opt) { }
	// Offset : 0x7a73ac
	private Int32 QuickIndexOf(String s, String target, Int32 start, Int32 length, out Boolean testWasUnable) { }
	// Offset : 0x7a7578
	public Int32 IndexOf(String s, String target, Int32 start, Int32 length, CompareOptions opt) { }
	// Offset : 0x7a7758
	private Int32 IndexOfOrdinal(String s, String target, Int32 start, Int32 length) { }
	// Offset : 0x7a7888
	private Int32 IndexOfOrdinalIgnoreCase(String s, String target, Int32 start, Int32 length) { }
	// Offset : 0x7a7fc0
	private Int32 IndexOfSortKey(String s, Int32 start, Int32 length, Byte* sortkey, Char target, Int32 ti, Boolean noLv4, ref Context ctx) { }
	// Offset : 0x7a7a4c
	private Int32 IndexOf(String s, String target, Int32 start, Int32 length, Byte* targetSortKey, ref Context ctx) { }
	// Offset : 0x7a71f4
	public Int32 LastIndexOf(String s, String target, Int32 start, Int32 length, CompareOptions opt) { }
	// Offset : 0x7a8244
	private Int32 LastIndexOfOrdinal(String s, String target, Int32 start, Int32 length) { }
	// Offset : 0x7a849c
	private Int32 LastIndexOfOrdinalIgnoreCase(String s, String target, Int32 start, Int32 length) { }
	// Offset : 0x7a8dc0
	private Int32 LastIndexOfSortKey(String s, Int32 start, Int32 orgStart, Int32 length, Byte* sortkey, Int32 ti, Boolean noLv4, ref Context ctx) { }
	// Offset : 0x7a87ec
	private Int32 LastIndexOf(String s, String target, Int32 start, Int32 length, Byte* targetSortKey, ref Context ctx) { }
	// Offset : 0x7a8060
	private Boolean MatchesForward(String s, ref Int32 idx, Int32 end, Int32 ti, Byte* sortkey, Boolean noLv4, ref Context ctx) { }
	// Offset : 0x7a9060
	private Boolean MatchesForwardCore(String s, ref Int32 idx, Int32 end, Int32 ti, Byte* sortkey, Boolean noLv4, ExtenderType ext, ref Contraction ct, ref Context ctx) { }
	// Offset : 0x7a94c0
	private Boolean MatchesPrimitive(CompareOptions opt, Byte* source, Int32 si, ExtenderType ext, Byte* target, Int32 ti, Boolean noLv4) { }
	// Offset : 0x7a8e70
	private Boolean MatchesBackward(String s, ref Int32 idx, Int32 end, Int32 orgStart, Int32 ti, Byte* sortkey, Boolean noLv4, ref Context ctx) { }
	// Offset : 0x7a9888
	private Boolean MatchesBackwardCore(String s, ref Int32 idx, Int32 end, Int32 orgStart, Int32 ti, Byte* sortkey, Boolean noLv4, ExtenderType ext, ref Contraction ct, ref Context ctx) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal struct Context
{
	// Fields
	public readonly CompareOptions Option; // 0x10
	public readonly Byte* NeverMatchFlags; // 0x18
	public readonly Byte* AlwaysMatchFlags; // 0x20
	public Byte* Buffer1; // 0x28
	public Byte* Buffer2; // 0x30
	public Int32 PrevCode; // 0x38
	public Byte* PrevSortKey; // 0x40
	public readonly Boolean QuickCheckPossible; // 0x48

	// Properties

	// Methods
	// Offset : 0x2d0878
	public Void .ctor(CompareOptions opt, Byte* alwaysMatchFlags, Byte* neverMatchFlags, Byte* buffer1, Byte* buffer2, Byte* prev1, Boolean quickCheckPossible) { }
}

// Dll : mscorlib.dll
// Namespace: 
private struct PreviousInfo
{
	// Fields
	public Int32 Code; // 0x10
	public Byte* SortKey; // 0x18

	// Properties

	// Methods
	// Offset : 0x2d095c
	public Void .ctor(Boolean dummy) { }
}

// Dll : mscorlib.dll
// Namespace: 
private struct Escape
{
	// Fields
	public String Source; // 0x10
	public Int32 Index; // 0x18
	public Int32 Start; // 0x1c
	public Int32 End; // 0x20
	public Int32 Optional; // 0x24

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private enum ExtenderType
{
	// Fields
	public Int32 value__; // 0x10
	public const ExtenderType None = 0; // 0x0
	public const ExtenderType Simple = 1; // 0x0
	public const ExtenderType Voiced = 2; // 0x0
	public const ExtenderType Conditional = 3; // 0x0
	public const ExtenderType Buggy = 4; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public class SortKey
{
	// Fields
	private readonly String source; // 0x10
	private readonly CompareOptions options; // 0x18
	private readonly Byte[] key; // 0x20
	private readonly Int32 lcid; // 0x28

	// Properties
	public virtual String OriginalString { get; }
	public virtual Byte[] KeyData { get; }

	// Methods
	// Offset : 0x743bac
	internal Void .ctor(Int32 lcid, String source, CompareOptions opt) { }
	// Offset : 0x743bf0
	internal Void .ctor(Int32 lcid, String source, Byte[] buffer, CompareOptions opt, Int32 lv1Length, Int32 lv2Length, Int32 lv3Length, Int32 kanaSmallLength, Int32 markTypeLength, Int32 katakanaLength, Int32 kanaWidthLength, Int32 identLength) { }
	// Offset : 0x743c44
	public static Int32 Compare(SortKey sortkey1, SortKey sortkey2) { }
	// Offset : 0x743edc
	public virtual String get_OriginalString() { }
	// Offset : 0x743ee4
	public virtual Byte[] get_KeyData() { }
	// Offset : 0x743eec
	public override Boolean Equals(Object value) { }
	// Offset : 0x743fac
	public override Int32 GetHashCode() { }
	// Offset : 0x744094
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Globalization.Unicode
internal class SortKeyBuffer
{
	// Fields
	private Int32 l1; // 0x10
	private Int32 l2; // 0x14
	private Int32 l3; // 0x18
	private Int32 l4s; // 0x1c
	private Int32 l4t; // 0x20
	private Int32 l4k; // 0x24
	private Int32 l4w; // 0x28
	private Int32 l5; // 0x2c
	private Byte[] l1b; // 0x30
	private Byte[] l2b; // 0x38
	private Byte[] l3b; // 0x40
	private Byte[] l4sb; // 0x48
	private Byte[] l4tb; // 0x50
	private Byte[] l4kb; // 0x58
	private Byte[] l4wb; // 0x60
	private Byte[] l5b; // 0x68
	private String source; // 0x70
	private Boolean processLevel2; // 0x78
	private Boolean frenchSort; // 0x79
	private Boolean frenchSorted; // 0x7a
	private Int32 lcid; // 0x7c
	private CompareOptions options; // 0x80

	// Properties

	// Methods
	// Offset : 0x7a31e8
	public Void .ctor(Int32 lcid) { }
	// Offset : 0x7a9db4
	public Void Reset() { }
	// Offset : 0x7a31f0
	internal Void Initialize(CompareOptions options, Int32 lcid, String s, Boolean frenchSort) { }
	// Offset : 0x7a3e60
	internal Void AppendCJKExtension(Byte lv1msb, Byte lv1lsb) { }
	// Offset : 0x7a3fd4
	internal Void AppendKana(Byte category, Byte lv1, Byte lv2, Byte lv3, Boolean isSmallKana, Byte markType, Boolean isKatakana, Boolean isHalfWidth) { }
	// Offset : 0x7a3cd0
	internal Void AppendNormal(Byte category, Byte lv1, Byte lv2, Byte lv3) { }
	// Offset : 0x7a9ec0
	private Void AppendLevel5(Byte category, Byte lv1) { }
	// Offset : 0x7a9dc4
	private Void AppendBufferPrimitive(Byte value, ref Byte[] buf, ref Int32 bidx) { }
	// Offset : 0x7a37b0
	public SortKey GetResultAndReset() { }
	// Offset : 0x7aa4ac
	private Int32 GetOptimizedLength(Byte[] data, Int32 len, Byte defaultValue) { }
	// Offset : 0x7a9f6c
	public SortKey GetResult() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Math.Prime.Generator
internal abstract class PrimeGeneratorBase
{
	// Fields

	// Properties
	public virtual ConfidenceFactor Confidence { get; }
	public virtual PrimalityTest PrimalityTest { get; }
	public virtual Int32 TrialDivisionBounds { get; }

	// Methods
	// Offset : 0x7b0218
	protected Void .ctor() { }
	// Offset : 0x7b0220
	public virtual ConfidenceFactor get_Confidence() { }
	// Offset : 0x7b0228
	public virtual PrimalityTest get_PrimalityTest() { }
	// Offset : 0x7b029c
	public virtual Int32 get_TrialDivisionBounds() { }
	// Offset : 0x
	public abstract BigInteger GenerateNewPrime(Int32 bits) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Math.Prime.Generator
internal class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7ad194
	public Void .ctor() { }
	// Offset : 0x7b02a4
	protected virtual BigInteger GenerateSearchBase(Int32 bits, Object context) { }
	// Offset : 0x7b032c
	public override BigInteger GenerateNewPrime(Int32 bits) { }
	// Offset : 0x7b0378
	public virtual BigInteger GenerateNewPrime(Int32 bits, Object context) { }
	// Offset : 0x7b0c18
	protected virtual Boolean IsPrimeAcceptable(BigInteger bi, Object context) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Math.Prime
internal enum ConfidenceFactor
{
	// Fields
	public Int32 value__; // 0x10
	public const ConfidenceFactor ExtraLow = 0; // 0x0
	public const ConfidenceFactor Low = 1; // 0x0
	public const ConfidenceFactor Medium = 2; // 0x0
	public const ConfidenceFactor High = 3; // 0x0
	public const ConfidenceFactor ExtraHigh = 4; // 0x0
	public const ConfidenceFactor Provable = 5; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: Mono.Math.Prime
internal sealed class PrimalityTests
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7b0cf8
	private static Int32 GetSPPRounds(BigInteger bi, ConfidenceFactor confidence) { }
	// Offset : 0x7ad0b0
	public static Boolean Test(BigInteger n, ConfidenceFactor confidence) { }
	// Offset : 0x7b10c8
	public static Boolean RabinMillerTest(BigInteger n, ConfidenceFactor confidence) { }
	// Offset : 0x7b0eb8
	public static Boolean SmallPrimeSppTest(BigInteger bi, ConfidenceFactor confidence) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Math
internal class BigInteger
{
	// Fields
	private UInt32 length; // 0x10
	private UInt32[] data; // 0x18
	internal static readonly UInt32[] smallPrimes; // 0x0
	private static RandomNumberGenerator rng; // 0x8

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods
	// Offset : 0x7aa540
	public Void .ctor(Sign sign, UInt32 len) { }
	// Offset : 0x7aa5bc
	public Void .ctor(BigInteger bi) { }
	// Offset : 0x7aa6cc
	public Void .ctor(BigInteger bi, UInt32 len) { }
	// Offset : 0x7aa7e4
	public Void .ctor(Byte[] inData) { }
	// Offset : 0x7aacc4
	public Void .ctor(UInt32 ui) { }
	// Offset : 0x7aad64
	private static Void .cctor() { }
	// Offset : 0x7aade0
	private static RandomNumberGenerator get_Rng() { }
	// Offset : 0x7aaea8
	public static BigInteger GenerateRandom(Int32 bits, RandomNumberGenerator rng) { }
	// Offset : 0x7ab0a0
	public static BigInteger GenerateRandom(Int32 bits) { }
	// Offset : 0x7ab10c
	public Void Randomize(RandomNumberGenerator rng) { }
	// Offset : 0x7ab448
	public Void Randomize() { }
	// Offset : 0x7ab3ac
	public Int32 BitCount() { }
	// Offset : 0x7ab4b4
	public Boolean TestBit(UInt32 bitNum) { }
	// Offset : 0x7ab524
	public Boolean TestBit(Int32 bitNum) { }
	// Offset : 0x7ab648
	public Void SetBit(UInt32 bitNum) { }
	// Offset : 0x7ab650
	public Void SetBit(UInt32 bitNum, Boolean value) { }
	// Offset : 0x7ab6e4
	public Int32 LowestSetBit() { }
	// Offset : 0x7ab770
	public Byte[] GetBytes() { }
	// Offset : 0x7ab8f4
	public String ToString(UInt32 radix) { }
	// Offset : 0x7ab954
	public String ToString(UInt32 radix, String characterSet) { }
	// Offset : 0x7aac38
	private Void Normalize() { }
	// Offset : 0x7abd38
	public Void Clear() { }
	// Offset : 0x7abdb0
	public override Int32 GetHashCode() { }
	// Offset : 0x7abe44
	public override String ToString() { }
	// Offset : 0x7abe4c
	public override Boolean Equals(Object o) { }
	// Offset : 0x7ac378
	public BigInteger ModInverse(BigInteger modulus) { }
	// Offset : 0x7acb28
	public BigInteger ModPow(BigInteger exp, BigInteger n) { }
	// Offset : 0x7acde0
	public Boolean IsProbablePrime() { }
	// Offset : 0x7ad104
	public static BigInteger GeneratePseudoPrime(Int32 bits) { }
	// Offset : 0x7ad19c
	public Void Incr2() { }
	// Offset : 0x7ad030
	public static BigInteger op_Implicit(UInt32 value) { }
	// Offset : 0x7ad2d4
	public static BigInteger op_Implicit(Int32 value) { }
	// Offset : 0x7ad37c
	public static BigInteger op_Addition(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7ad738
	public static BigInteger op_Subtraction(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7ad0ac
	public static UInt32 op_Modulus(BigInteger bi, UInt32 ui) { }
	// Offset : 0x7adc1c
	public static BigInteger op_Modulus(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7ae52c
	public static BigInteger op_Division(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7ae570
	public static BigInteger op_Multiply(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7ae8a8
	public static BigInteger op_Multiply(BigInteger bi, Int32 i) { }
	// Offset : 0x7aeb20
	public static BigInteger op_LeftShift(BigInteger bi1, Int32 shiftVal) { }
	// Offset : 0x7aede4
	public static BigInteger op_RightShift(BigInteger bi1, Int32 shiftVal) { }
	// Offset : 0x7ab328
	public static Boolean op_Equality(BigInteger bi1, UInt32 ui) { }
	// Offset : 0x7abcb4
	public static Boolean op_Inequality(BigInteger bi1, UInt32 ui) { }
	// Offset : 0x7abfdc
	public static Boolean op_Equality(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7af018
	public static Boolean op_Inequality(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7af0e8
	public static Boolean op_GreaterThan(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7af104
	public static Boolean op_LessThan(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7af11c
	public static Boolean op_GreaterThanOrEqual(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7ad090
	public static Boolean op_LessThanOrEqual(BigInteger bi1, BigInteger bi2) { }
}

// Dll : mscorlib.dll
// Namespace: 
public enum Sign
{
	// Fields
	public Int32 value__; // 0x10
	public const Sign Negative = 4294967295; // 0x0
	public const Sign Zero = 0; // 0x0
	public const Sign Positive = 1; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
internal sealed class ModulusRing
{
	// Fields
	private BigInteger mod; // 0x10
	private BigInteger constant; // 0x18

	// Properties

	// Methods
	// Offset : 0x7acbac
	public Void .ctor(BigInteger modulus) { }
	// Offset : 0x7afc8c
	public Void BarrettReduction(BigInteger x) { }
	// Offset : 0x7affd0
	public BigInteger Multiply(BigInteger a, BigInteger b) { }
	// Offset : 0x7afa64
	public BigInteger Difference(BigInteger a, BigInteger b) { }
	// Offset : 0x7accb4
	public BigInteger Pow(BigInteger a, BigInteger k) { }
	// Offset : 0x7b01a0
	public BigInteger Pow(UInt32 b, BigInteger exp) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class Kernel
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7ad468
	public static BigInteger AddSameSign(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7ad8c0
	public static BigInteger Subtract(BigInteger big, BigInteger small) { }
	// Offset : 0x7af138
	public static Void MinusEq(BigInteger big, BigInteger small) { }
	// Offset : 0x7af314
	public static Void PlusEq(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7ac0ac
	public static Sign Compare(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7abbc0
	public static UInt32 SingleByteDivideInPlace(BigInteger n, UInt32 d) { }
	// Offset : 0x7adb6c
	public static UInt32 DwordMod(BigInteger n, UInt32 d) { }
	// Offset : 0x7af5f0
	public static BigInteger[] DwordDivMod(BigInteger n, UInt32 d) { }
	// Offset : 0x7adc64
	public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7aeb24
	public static BigInteger LeftShift(BigInteger bi, Int32 n) { }
	// Offset : 0x7aede8
	public static BigInteger RightShift(BigInteger bi, Int32 n) { }
	// Offset : 0x7ae9b4
	public static BigInteger MultiplyByDword(BigInteger n, UInt32 f) { }
	// Offset : 0x7ae7a8
	public static Void Multiply(UInt32[] x, UInt32 xOffset, UInt32 xLen, UInt32[] y, UInt32 yOffset, UInt32 yLen, UInt32[] d, UInt32 dOffset) { }
	// Offset : 0x7af848
	public static Void MultiplyMod2p32pmod(UInt32[] x, Int32 xOffset, Int32 xLen, UInt32[] y, Int32 yOffest, Int32 yLen, UInt32[] d, Int32 dOffset, Int32 mod) { }
	// Offset : 0x7af99c
	public static UInt32 modInverse(BigInteger bi, UInt32 modulus) { }
	// Offset : 0x7ac37c
	public static BigInteger modInverse(BigInteger bi, BigInteger modulus) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.Cryptography
internal sealed class CryptoConvert
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7b4944
	private static Int32 ToInt32LE(Byte[] bytes, Int32 offset) { }
	// Offset : 0x7b4a38
	private static UInt32 ToUInt32LE(Byte[] bytes, Int32 offset) { }
	// Offset : 0x7b4b2c
	private static Byte[] GetBytesLE(Int32 val) { }
	// Offset : 0x7b4c18
	private static Byte[] Trim(Byte[] array) { }
	// Offset : 0x7b4cf8
	public static RSA FromCapiPrivateKeyBlob(Byte[] blob, Int32 offset) { }
	// Offset : 0x7b52d8
	public static Byte[] ToCapiPrivateKeyBlob(RSA rsa) { }
	// Offset : 0x7b5850
	public static RSA FromCapiPublicKeyBlob(Byte[] blob) { }
	// Offset : 0x7b5858
	public static RSA FromCapiPublicKeyBlob(Byte[] blob, Int32 offset) { }
	// Offset : 0x7b5d38
	public static Byte[] ToCapiPublicKeyBlob(RSA rsa) { }
	// Offset : 0x7b60d8
	public static RSA FromCapiKeyBlob(Byte[] blob) { }
	// Offset : 0x7b60e0
	public static RSA FromCapiKeyBlob(Byte[] blob, Int32 offset) { }
	// Offset : 0x7b6264
	public static Byte[] ToCapiKeyBlob(RSA rsa, Boolean includePrivateKey) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.Cryptography
internal sealed class KeyBuilder
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods
	// Offset : 0x7b864c
	private static RandomNumberGenerator get_Rng() { }
	// Offset : 0x7b86bc
	public static Byte[] Key(Int32 size) { }
	// Offset : 0x7b8754
	public static Byte[] IV(Int32 size) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.Cryptography
internal class BlockProcessor
{
	// Fields
	private ICryptoTransform transform; // 0x10
	private Byte[] block; // 0x18
	private Int32 blockSize; // 0x20
	private Int32 blockCount; // 0x24

	// Properties

	// Methods
	// Offset : 0x7b4400
	public Void .ctor(ICryptoTransform transform, Int32 blockSize) { }
	// Offset : 0x7b447c
	protected override Void Finalize() { }
	// Offset : 0x7b4500
	public Void Initialize() { }
	// Offset : 0x7b4534
	public Void Core(Byte[] rgb) { }
	// Offset : 0x7b4570
	public Void Core(Byte[] rgb, Int32 ib, Int32 cb) { }
	// Offset : 0x7b4840
	public Byte[] Final() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.Cryptography
internal class DSAManaged : DSA
{
	// Fields
	private Boolean keypairGenerated; // 0x20
	private Boolean m_disposed; // 0x21
	private BigInteger p; // 0x28
	private BigInteger q; // 0x30
	private BigInteger g; // 0x38
	private BigInteger x; // 0x40
	private BigInteger y; // 0x48
	private BigInteger j; // 0x50
	private BigInteger seed; // 0x58
	private Int32 counter; // 0x60
	private Boolean j_missing; // 0x64
	private RandomNumberGenerator rng; // 0x68
	private KeyGeneratedEventHandler KeyGenerated; // 0x70

	// Properties
	private RandomNumberGenerator Random { get; }
	public override Int32 KeySize { get; }
	public Boolean PublicOnly { get; }

	// Methods
	// Offset : 0x7b6310
	public Void .ctor(Int32 dwKeySize) { }
	// Offset : 0x7b6408
	public Void add_KeyGenerated(KeyGeneratedEventHandler value) { }
	// Offset : 0x7b64cc
	public Void remove_KeyGenerated(KeyGeneratedEventHandler value) { }
	// Offset : 0x7b6590
	protected override Void Finalize() { }
	// Offset : 0x7b662c
	private Void Generate() { }
	// Offset : 0x7b6d68
	private Void GenerateKeyPair() { }
	// Offset : 0x7b7360
	private Void add(Byte[] a, Byte[] b, Int32 value) { }
	// Offset : 0x7b668c
	private Void GenerateParams(Int32 keyLength) { }
	// Offset : 0x7b748c
	private RandomNumberGenerator get_Random() { }
	// Offset : 0x7b74b8
	public override Int32 get_KeySize() { }
	// Offset : 0x7b74f4
	public Boolean get_PublicOnly() { }
	// Offset : 0x7b7578
	private Byte[] NormalizeArray(Byte[] array) { }
	// Offset : 0x7b7630
	public override DSAParameters ExportParameters(Boolean includePrivateParameters) { }
	// Offset : 0x7b78f8
	public override Void ImportParameters(DSAParameters parameters) { }
	// Offset : 0x7b7b88
	public override Byte[] CreateSignature(Byte[] rgbHash) { }
	// Offset : 0x7b7f08
	public override Boolean VerifySignature(Byte[] rgbHash, Byte[] rgbSignature) { }
	// Offset : 0x7b83a0
	protected override Void Dispose(Boolean disposing) { }
}

// Dll : mscorlib.dll
// Namespace: 
public sealed class KeyGeneratedEventHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7b8600
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x7b6e80
	public virtual Void Invoke(Object sender, EventArgs e) { }
	// Offset : 0x7b8610
	public virtual IAsyncResult BeginInvoke(Object sender, EventArgs e, AsyncCallback callback, Object object) { }
	// Offset : 0x7b8640
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.Cryptography
internal class KeyPairPersistence
{
	// Fields
	private static Boolean _userPathExists; // 0x0
	private static String _userPath; // 0x8
	private static Boolean _machinePathExists; // 0x10
	private static String _machinePath; // 0x18
	private CspParameters _params; // 0x10
	private String _keyvalue; // 0x18
	private String _filename; // 0x20
	private String _container; // 0x28
	private static Object lockobj; // 0x20

	// Properties
	public String Filename { get; }
	public String KeyValue { get; set; }
	private static String UserPath { get; }
	private static String MachinePath { get; }
	private Boolean CanChange { get; }
	private Boolean UseDefaultKeyContainer { get; }
	private Boolean UseMachineKeyStore { get; }
	private String ContainerName { get; }

	// Methods
	// Offset : 0x7b87ec
	public Void .ctor(CspParameters parameters) { }
	// Offset : 0x7b87f4
	public Void .ctor(CspParameters parameters, String keyPair) { }
	// Offset : 0x7b89c0
	private static Void .cctor() { }
	// Offset : 0x7b8a44
	public String get_Filename() { }
	// Offset : 0x7b97f8
	public String get_KeyValue() { }
	// Offset : 0x7b9800
	public Void set_KeyValue(String value) { }
	// Offset : 0x7b9824
	public Boolean Load() { }
	// Offset : 0x7b9be0
	public Void Save() { }
	// Offset : 0x7ba270
	public Void Remove() { }
	// Offset : 0x7b9370
	private static String get_UserPath() { }
	// Offset : 0x7b8ee8
	private static String get_MachinePath() { }
	// Offset : 0x7ba3e0
	internal static Boolean _CanSecure(String root) { }
	// Offset : 0x7ba3e4
	internal static Boolean _ProtectUser(String path) { }
	// Offset : 0x7ba3e8
	internal static Boolean _ProtectMachine(String path) { }
	// Offset : 0x7ba3ec
	internal static Boolean _IsUserProtected(String path) { }
	// Offset : 0x7ba3f0
	internal static Boolean _IsMachineProtected(String path) { }
	// Offset : 0x7ba3f4
	private static Boolean CanSecure(String path) { }
	// Offset : 0x7ba1d8
	private static Boolean ProtectUser(String path) { }
	// Offset : 0x7ba140
	private static Boolean ProtectMachine(String path) { }
	// Offset : 0x7ba2b0
	private static Boolean IsUserProtected(String path) { }
	// Offset : 0x7ba348
	private static Boolean IsMachineProtected(String path) { }
	// Offset : 0x7b9814
	private Boolean get_CanChange() { }
	// Offset : 0x7ba4d4
	private Boolean get_UseDefaultKeyContainer() { }
	// Offset : 0x7b8eb0
	private Boolean get_UseMachineKeyStore() { }
	// Offset : 0x7b8cf8
	private String get_ContainerName() { }
	// Offset : 0x7b88a4
	private CspParameters Copy(CspParameters p) { }
	// Offset : 0x7b99d0
	private Void FromXml(String xml) { }
	// Offset : 0x7b9e90
	private String ToXml() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.Cryptography
internal class MACAlgorithm
{
	// Fields
	private SymmetricAlgorithm algo; // 0x10
	private ICryptoTransform enc; // 0x18
	private Byte[] block; // 0x20
	private Int32 blockSize; // 0x28
	private Int32 blockCount; // 0x2c

	// Properties

	// Methods
	// Offset : 0x7ba50c
	public Void .ctor(SymmetricAlgorithm algorithm) { }
	// Offset : 0x7ba644
	public Void Initialize(Byte[] key) { }
	// Offset : 0x7ba708
	public Void Core(Byte[] rgb, Int32 ib, Int32 cb) { }
	// Offset : 0x7ba9b4
	public Byte[] Final() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.Cryptography
internal sealed class PKCS1
{
	// Fields
	private static Byte[] emptySHA1; // 0x0
	private static Byte[] emptySHA256; // 0x8
	private static Byte[] emptySHA384; // 0x10
	private static Byte[] emptySHA512; // 0x18

	// Properties

	// Methods
	// Offset : 0x5aebb4
	private static Void .cctor() { }
	// Offset : 0x5aecc8
	private static Boolean Compare(Byte[] array1, Byte[] array2) { }
	// Offset : 0x5aed94
	public static Byte[] I2OSP(Byte[] x, Int32 size) { }
	// Offset : 0x5aee40
	public static Byte[] OS2IP(Byte[] x) { }
	// Offset : 0x5aef28
	public static Byte[] RSAEP(RSA rsa, Byte[] m) { }
	// Offset : 0x5aef78
	public static Byte[] RSASP1(RSA rsa, Byte[] m) { }
	// Offset : 0x5aefc8
	public static Byte[] RSAVP1(RSA rsa, Byte[] s) { }
	// Offset : 0x5af018
	public static Byte[] Encrypt_v15(RSA rsa, RandomNumberGenerator rng, Byte[] M) { }
	// Offset : 0x5af234
	public static Byte[] Sign_v15(RSA rsa, HashAlgorithm hash, Byte[] hashValue) { }
	// Offset : 0x5af720
	public static Boolean Verify_v15(RSA rsa, HashAlgorithm hash, Byte[] hashValue, Byte[] signature) { }
	// Offset : 0x5af7b0
	public static Boolean Verify_v15(RSA rsa, HashAlgorithm hash, Byte[] hashValue, Byte[] signature, Boolean tryNonStandardEncoding) { }
	// Offset : 0x5af304
	public static Byte[] Encode_v15(HashAlgorithm hash, Byte[] hashValue, Int32 emLength) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.Cryptography
internal sealed class PKCS8
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
public class PrivateKeyInfo
{
	// Fields
	private Int32 _version; // 0x10
	private String _algorithm; // 0x18
	private Byte[] _key; // 0x20
	private ArrayList _list; // 0x28

	// Properties
	public Byte[] PrivateKey { get; }

	// Methods
	// Offset : 0x5affd4
	public Void .ctor() { }
	// Offset : 0x5b0044
	public Void .ctor(Byte[] data) { }
	// Offset : 0x5b03b8
	public Byte[] get_PrivateKey() { }
	// Offset : 0x5b0070
	private Void Decode(Byte[] data) { }
	// Offset : 0x5b0480
	private static Byte[] RemoveLeadingZero(Byte[] bigInt) { }
	// Offset : 0x5b0554
	private static Byte[] Normalize(Byte[] bigInt, Int32 length) { }
	// Offset : 0x5b060c
	public static RSA DecodeRSA(Byte[] keypair) { }
	// Offset : 0x5b0b10
	public static DSA DecodeDSA(Byte[] privateKey, DSAParameters dsaParameters) { }
}

// Dll : mscorlib.dll
// Namespace: 
public class EncryptedPrivateKeyInfo
{
	// Fields
	private String _algorithm; // 0x10
	private Byte[] _salt; // 0x18
	private Int32 _iterations; // 0x20
	private Byte[] _data; // 0x28

	// Properties
	public String Algorithm { get; }
	public Byte[] EncryptedData { get; }
	public Byte[] Salt { get; }
	public Int32 IterationCount { get; }

	// Methods
	// Offset : 0x5afa0c
	public Void .ctor() { }
	// Offset : 0x5afa14
	public Void .ctor(Byte[] data) { }
	// Offset : 0x5afdb8
	public String get_Algorithm() { }
	// Offset : 0x5afdc0
	public Byte[] get_EncryptedData() { }
	// Offset : 0x5afe8c
	public Byte[] get_Salt() { }
	// Offset : 0x5affcc
	public Int32 get_IterationCount() { }
	// Offset : 0x5afa44
	private Void Decode(Byte[] data) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.Cryptography
internal class RSAManaged : RSA
{
	// Fields
	private Boolean isCRTpossible; // 0x20
	private Boolean keyBlinding; // 0x21
	private Boolean keypairGenerated; // 0x22
	private Boolean m_disposed; // 0x23
	private BigInteger d; // 0x28
	private BigInteger p; // 0x30
	private BigInteger q; // 0x38
	private BigInteger dp; // 0x40
	private BigInteger dq; // 0x48
	private BigInteger qInv; // 0x50
	private BigInteger n; // 0x58
	private BigInteger e; // 0x60
	private KeyGeneratedEventHandler KeyGenerated; // 0x68

	// Properties
	public override Int32 KeySize { get; }
	public Boolean PublicOnly { get; }
	public Boolean IsCrtPossible { get; }

	// Methods
	// Offset : 0x5b0c98
	public Void .ctor(Int32 keySize) { }
	// Offset : 0x5b0da0
	public Void add_KeyGenerated(KeyGeneratedEventHandler value) { }
	// Offset : 0x5b0e64
	public Void remove_KeyGenerated(KeyGeneratedEventHandler value) { }
	// Offset : 0x5b0f28
	protected override Void Finalize() { }
	// Offset : 0x5b0fc4
	private Void GenerateKeyPair() { }
	// Offset : 0x5b1808
	public override Int32 get_KeySize() { }
	// Offset : 0x5b185c
	public Boolean get_PublicOnly() { }
	// Offset : 0x5b1928
	public override Byte[] DecryptValue(Byte[] rgb) { }
	// Offset : 0x5b1e20
	public override Byte[] EncryptValue(Byte[] rgb) { }
	// Offset : 0x5b1f80
	public override RSAParameters ExportParameters(Boolean includePrivateParameters) { }
	// Offset : 0x5b2368
	public override Void ImportParameters(RSAParameters parameters) { }
	// Offset : 0x5b287c
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x5b2b64
	public override String ToXmlString(Boolean includePrivateParameters) { }
	// Offset : 0x5b33c8
	public Boolean get_IsCrtPossible() { }
	// Offset : 0x5b1d58
	private Byte[] GetPaddedValue(BigInteger value, Int32 length) { }
}

// Dll : mscorlib.dll
// Namespace: 
public sealed class KeyGeneratedEventHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5b33e8
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x5b1328
	public virtual Void Invoke(Object sender, EventArgs e) { }
	// Offset : 0x5b33f8
	public virtual IAsyncResult BeginInvoke(Object sender, EventArgs e, AsyncCallback callback, Object object) { }
	// Offset : 0x5b3428
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.Cryptography
internal abstract class SymmetricTransform : IDisposable, ICryptoTransform
{
	// Fields
	protected SymmetricAlgorithm algo; // 0x10
	protected Boolean encrypt; // 0x18
	private Int32 BlockSizeByte; // 0x1c
	private Byte[] temp; // 0x20
	private Byte[] temp2; // 0x28
	private Byte[] workBuff; // 0x30
	private Byte[] workout; // 0x38
	private Int32 FeedBackByte; // 0x40
	private Int32 FeedBackIter; // 0x44
	private Boolean m_disposed; // 0x48
	private Boolean lastBlock; // 0x49
	private RandomNumberGenerator _rng; // 0x50

	// Properties
	public virtual Boolean CanTransformMultipleBlocks { get; }
	public virtual Boolean CanReuseTransform { get; }
	public virtual Int32 InputBlockSize { get; }
	public virtual Int32 OutputBlockSize { get; }
	private Boolean KeepLastBlock { get; }

	// Methods
	// Offset : 0x5b3434
	public Void .ctor(SymmetricAlgorithm symmAlgo, Boolean encryption, Byte[] rgbIV) { }
	// Offset : 0x5b3768
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x5b37b8
	protected override Void Finalize() { }
	// Offset : 0x5b3854
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x5b38ac
	public virtual Boolean get_CanTransformMultipleBlocks() { }
	// Offset : 0x5b38b4
	public virtual Boolean get_CanReuseTransform() { }
	// Offset : 0x5b38bc
	public virtual Int32 get_InputBlockSize() { }
	// Offset : 0x5b38c4
	public virtual Int32 get_OutputBlockSize() { }
	// Offset : 0x5b38cc
	protected virtual Void Transform(Byte[] input, Byte[] output) { }
	// Offset : 0x
	protected abstract Void ECB(Byte[] input, Byte[] output) { }
	// Offset : 0x5b3b60
	protected virtual Void CBC(Byte[] input, Byte[] output) { }
	// Offset : 0x5b3d6c
	protected virtual Void CFB(Byte[] input, Byte[] output) { }
	// Offset : 0x5b4074
	protected virtual Void OFB(Byte[] input, Byte[] output) { }
	// Offset : 0x5b40e8
	protected virtual Void CTS(Byte[] input, Byte[] output) { }
	// Offset : 0x5b415c
	private Void CheckInput(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x5b43d4
	public virtual Int32 TransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x5b465c
	private Boolean get_KeepLastBlock() { }
	// Offset : 0x5b4710
	private Int32 InternalTransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x5b492c
	private Void Random(Byte[] buffer, Int32 start, Int32 length) { }
	// Offset : 0x5b4a08
	private Void ThrowBadPaddingException(PaddingMode padding, Int32 length, Int32 position) { }
	// Offset : 0x5b4be8
	private Byte[] FinalEncrypt(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x5b4f94
	private Byte[] FinalDecrypt(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x5b5378
	public virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.X509
internal class SafeBag
{
	// Fields
	private String _bagOID; // 0x10
	private ASN1 _asn1; // 0x18

	// Properties
	public String BagOID { get; }
	public ASN1 ASN1 { get; }

	// Methods
	// Offset : 0x5ba8b4
	public Void .ctor(String bagOID, ASN1 asn1) { }
	// Offset : 0x5b8de4
	public String get_BagOID() { }
	// Offset : 0x5b8dec
	public ASN1 get_ASN1() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.X509
internal class PKCS12 : ICloneable
{
	// Fields
	private static Int32 recommendedIterationCount; // 0x0
	private Byte[] _password; // 0x10
	private ArrayList _keyBags; // 0x18
	private ArrayList _secretBags; // 0x20
	private X509CertificateCollection _certs; // 0x28
	private Boolean _keyBagsChanged; // 0x30
	private Boolean _secretBagsChanged; // 0x31
	private Boolean _certsChanged; // 0x32
	private Int32 _iterations; // 0x34
	private ArrayList _safeBags; // 0x38
	private RandomNumberGenerator _rng; // 0x40
	private static Int32 password_max_length; // 0x4
	private static Dictionary`2 <>f__switch$map8; // 0x8
	private static Dictionary`2 <>f__switch$map9; // 0x10
	private static Dictionary`2 <>f__switch$mapA; // 0x18
	private static Dictionary`2 <>f__switch$mapB; // 0x20
	private static Dictionary`2 <>f__switch$mapF; // 0x28

	// Properties
	public String Password { set; }
	public Int32 IterationCount { get; set; }
	public X509CertificateCollection Certificates { get; }
	internal RandomNumberGenerator RNG { get; }
	public static Int32 MaximumPasswordLength { get; }

	// Methods
	// Offset : 0x5b6c78
	public Void .ctor() { }
	// Offset : 0x5b6d7c
	public Void .ctor(Byte[] data) { }
	// Offset : 0x5b78c4
	public Void .ctor(Byte[] data, String password) { }
	// Offset : 0x5b7908
	private static Void .cctor() { }
	// Offset : 0x5b6f78
	private Void Decode(Byte[] data) { }
	// Offset : 0x5b8800
	protected override Void Finalize() { }
	// Offset : 0x5b6dd8
	public Void set_Password(String value) { }
	// Offset : 0x5b88f0
	public Int32 get_IterationCount() { }
	// Offset : 0x5b88f8
	public Void set_IterationCount(Int32 value) { }
	// Offset : 0x5b8900
	public X509CertificateCollection get_Certificates() { }
	// Offset : 0x5b905c
	internal RandomNumberGenerator get_RNG() { }
	// Offset : 0x5b7b70
	private Boolean Compare(Byte[] expected, Byte[] actual) { }
	// Offset : 0x5b9088
	private SymmetricAlgorithm GetSymmetricAlgorithm(String algorithmOid, Byte[] salt, Int32 iterationCount) { }
	// Offset : 0x5b9a0c
	public Byte[] Decrypt(String algorithmOid, Byte[] salt, Int32 iterationCount, Byte[] encryptedData) { }
	// Offset : 0x5b8708
	public Byte[] Decrypt(EncryptedData ed) { }
	// Offset : 0x5b9bf0
	public Byte[] Encrypt(String algorithmOid, Byte[] salt, Int32 iterationCount, Byte[] data) { }
	// Offset : 0x5b9e50
	private DSAParameters GetExistingParameters(out Boolean found) { }
	// Offset : 0x5ba70c
	private Void AddPrivateKey(PrivateKeyInfo pki) { }
	// Offset : 0x5b7c40
	private Void ReadSafeBag(ASN1 safeBag) { }
	// Offset : 0x5ba8ec
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes) { }
	// Offset : 0x5b796c
	private Byte[] MAC(Byte[] password, Byte[] salt, Int32 iterations, Byte[] data) { }
	// Offset : 0x5bba98
	public Byte[] GetBytes() { }
	// Offset : 0x5be4cc
	private ContentInfo EncryptedContentInfo(ASN1 safeBags, String algorithmOid) { }
	// Offset : 0x5be4c4
	public Void AddCertificate(X509Certificate cert) { }
	// Offset : 0x5be8a0
	public Void AddCertificate(X509Certificate cert, IDictionary attributes) { }
	// Offset : 0x5be4bc
	public Void RemoveCertificate(X509Certificate cert) { }
	// Offset : 0x5bec0c
	public Void RemoveCertificate(X509Certificate cert, IDictionary attrs) { }
	// Offset : 0x5bf388
	public Object Clone() { }
	// Offset : 0x5b8888
	public static Int32 get_MaximumPasswordLength() { }
}

// Dll : mscorlib.dll
// Namespace: 
public class DeriveBytes
{
	// Fields
	private static Byte[] keyDiversifier; // 0x0
	private static Byte[] ivDiversifier; // 0x8
	private static Byte[] macDiversifier; // 0x10
	private String _hashName; // 0x10
	private Int32 _iterations; // 0x18
	private Byte[] _password; // 0x20
	private Byte[] _salt; // 0x28

	// Properties
	public String HashName { set; }
	public Int32 IterationCount { set; }
	public Byte[] Password { set; }
	public Byte[] Salt { set; }

	// Methods
	// Offset : 0x5b973c
	public Void .ctor() { }
	// Offset : 0x5bf4ac
	private static Void .cctor() { }
	// Offset : 0x5b9904
	public Void set_HashName(String value) { }
	// Offset : 0x5b98fc
	public Void set_IterationCount(Int32 value) { }
	// Offset : 0x5b9744
	public Void set_Password(Byte[] value) { }
	// Offset : 0x5b982c
	public Void set_Salt(Byte[] value) { }
	// Offset : 0x5bf590
	private Void Adjust(Byte[] a, Int32 aOff, Byte[] b) { }
	// Offset : 0x5bf73c
	private Byte[] Derive(Byte[] diversifier, Int32 n) { }
	// Offset : 0x5b990c
	public Byte[] DeriveKey(Int32 size) { }
	// Offset : 0x5b998c
	public Byte[] DeriveIV(Int32 size) { }
	// Offset : 0x5bba18
	public Byte[] DeriveMAC(Int32 size) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.X509
internal sealed class X501
{
	// Fields
	private static Byte[] countryName; // 0x0
	private static Byte[] organizationName; // 0x8
	private static Byte[] organizationalUnitName; // 0x10
	private static Byte[] commonName; // 0x18
	private static Byte[] localityName; // 0x20
	private static Byte[] stateOrProvinceName; // 0x28
	private static Byte[] streetAddress; // 0x30
	private static Byte[] domainComponent; // 0x38
	private static Byte[] userid; // 0x40
	private static Byte[] email; // 0x48
	private static Byte[] dnQualifier; // 0x50
	private static Byte[] title; // 0x58
	private static Byte[] surname; // 0x60
	private static Byte[] givenName; // 0x68
	private static Byte[] initial; // 0x70

	// Properties

	// Methods
	// Offset : 0x5bfd48
	private static Void .cctor() { }
	// Offset : 0x5c04b8
	public static String ToString(ASN1 seq) { }
	// Offset : 0x5c0f00
	public static String ToString(ASN1 seq, Boolean reversed, String separator, Boolean quotes) { }
	// Offset : 0x5c0600
	private static Void AppendEntry(StringBuilder sb, ASN1 entry, Boolean quotes) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.X509
internal class X509Certificate : ISerializable
{
	// Fields
	private ASN1 decoder; // 0x10
	private Byte[] m_encodedcert; // 0x18
	private DateTime m_from; // 0x20
	private DateTime m_until; // 0x30
	private ASN1 issuer; // 0x40
	private String m_issuername; // 0x48
	private String m_keyalgo; // 0x50
	private Byte[] m_keyalgoparams; // 0x58
	private ASN1 subject; // 0x60
	private String m_subject; // 0x68
	private Byte[] m_publickey; // 0x70
	private Byte[] signature; // 0x78
	private String m_signaturealgo; // 0x80
	private Byte[] m_signaturealgoparams; // 0x88
	private DSA _dsa; // 0x90
	private Int32 version; // 0x98
	private Byte[] serialnumber; // 0xa0
	private Byte[] issuerUniqueID; // 0xa8
	private Byte[] subjectUniqueID; // 0xb0
	private X509ExtensionCollection extensions; // 0xb8
	private static String encoding_error; // 0x0

	// Properties
	public DSA DSA { get; }
	public virtual String IssuerName { get; }
	public virtual Byte[] KeyAlgorithmParameters { get; }
	public virtual Byte[] PublicKey { get; }
	public virtual Byte[] RawData { get; }
	public virtual String SubjectName { get; }
	public virtual DateTime ValidFrom { get; }
	public virtual DateTime ValidUntil { get; }

	// Methods
	// Offset : 0x5b8df4
	public Void .ctor(Byte[] data) { }
	// Offset : 0x5c1df8
	private static Void .cctor() { }
	// Offset : 0x5c12d4
	private Void Parse(Byte[] data) { }
	// Offset : 0x5c1fd0
	private Byte[] GetUnsignedBigInteger(Byte[] integer) { }
	// Offset : 0x5ba2d0
	public DSA get_DSA() { }
	// Offset : 0x5c2088
	public virtual String get_IssuerName() { }
	// Offset : 0x5c2090
	public virtual Byte[] get_KeyAlgorithmParameters() { }
	// Offset : 0x5c2158
	public virtual Byte[] get_PublicKey() { }
	// Offset : 0x5c2220
	public virtual Byte[] get_RawData() { }
	// Offset : 0x5c22e8
	public virtual String get_SubjectName() { }
	// Offset : 0x5c22f0
	public virtual DateTime get_ValidFrom() { }
	// Offset : 0x5c22fc
	public virtual DateTime get_ValidUntil() { }
	// Offset : 0x5c2308
	public ASN1 GetIssuerName() { }
	// Offset : 0x5c2310
	public ASN1 GetSubjectName() { }
	// Offset : 0x5c2318
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x5c10f8
	private static Byte[] PEM(String type, Byte[] data) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.X509
[Serializable]
internal class X509CertificateCollection : CollectionBase, IEnumerable
{
	// Fields

	// Properties
	public X509Certificate Item { get; }

	// Methods
	// Offset : 0x5b6d74
	public Void .ctor() { }
	// Offset : 0x5c238c
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x5c23e0
	public X509Certificate get_Item(Int32 index) { }
	// Offset : 0x5b8f88
	public Int32 Add(X509Certificate value) { }
	// Offset : 0x5ba104
	public X509CertificateEnumerator GetEnumerator() { }
	// Offset : 0x5c25f0
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: 
public class X509CertificateEnumerator : IEnumerator
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public X509Certificate Current { get; }

	// Methods
	// Offset : 0x5c24f4
	public Void .ctor(X509CertificateCollection mappings) { }
	// Offset : 0x5c2640
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x5c2728
	private Boolean System.Collections.IEnumerator.MoveNext() { }
	// Offset : 0x5c2814
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x5ba164
	public X509Certificate get_Current() { }
	// Offset : 0x5ba620
	public Boolean MoveNext() { }
	// Offset : 0x5c2900
	public Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.X509
internal class X509Extension
{
	// Fields
	protected String extnOid; // 0x10
	protected Boolean extnCritical; // 0x18
	protected ASN1 extnValue; // 0x20

	// Properties

	// Methods
	// Offset : 0x5c29ec
	public Void .ctor(ASN1 asn1) { }
	// Offset : 0x5c2dec
	protected virtual Void Decode() { }
	// Offset : 0x5c2df0
	public override Boolean Equals(Object obj) { }
	// Offset : 0x5c2fbc
	public override Int32 GetHashCode() { }
	// Offset : 0x5c2fec
	private Void WriteLine(StringBuilder sb, Int32 n, Int32 pos) { }
	// Offset : 0x5c328c
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security.X509
internal sealed class X509ExtensionCollection : CollectionBase, IEnumerable
{
	// Fields
	private Boolean readOnly; // 0x18

	// Properties

	// Methods
	// Offset : 0x5c3398
	public Void .ctor() { }
	// Offset : 0x5c1e5c
	public Void .ctor(ASN1 asn1) { }
	// Offset : 0x5c33a0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security
internal class ASN1
{
	// Fields
	private Byte m_nTag; // 0x10
	private Byte[] m_aValue; // 0x18
	private ArrayList elist; // 0x20

	// Properties
	public Int32 Count { get; }
	public Byte Tag { get; }
	public Int32 Length { get; }
	public Byte[] Value { get; set; }
	public ASN1 Item { get; }

	// Methods
	// Offset : 0x7b13f4
	public Void .ctor(Byte tag) { }
	// Offset : 0x7b1424
	public Void .ctor(Byte tag, Byte[] data) { }
	// Offset : 0x7b1460
	public Void .ctor(Byte[] data) { }
	// Offset : 0x7b1754
	public Int32 get_Count() { }
	// Offset : 0x7b17ac
	public Byte get_Tag() { }
	// Offset : 0x7b17b4
	public Int32 get_Length() { }
	// Offset : 0x7b17cc
	public Byte[] get_Value() { }
	// Offset : 0x7b18d4
	public Void set_Value(Byte[] value) { }
	// Offset : 0x7b19a8
	private Boolean CompareArray(Byte[] array1, Byte[] array2) { }
	// Offset : 0x7b1a78
	public Boolean CompareValue(Byte[] value) { }
	// Offset : 0x7b1a8c
	public ASN1 Add(ASN1 asn1) { }
	// Offset : 0x7b1b44
	public virtual Byte[] GetBytes() { }
	// Offset : 0x7b161c
	protected Void Decode(Byte[] asn1, ref Int32 anPos, Int32 anLength) { }
	// Offset : 0x7b2418
	protected Void DecodeTLV(Byte[] asn1, ref Int32 pos, out Byte tag, out Int32 length, out Byte[] content) { }
	// Offset : 0x7b2588
	public ASN1 get_Item(Int32 index) { }
	// Offset : 0x7b2754
	public ASN1 Element(Int32 index, Byte anTag) { }
	// Offset : 0x7b294c
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security
internal static class ASN1Convert
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7b2c00
	public static ASN1 FromInt32(Int32 value) { }
	// Offset : 0x7b2d98
	public static ASN1 FromOid(String oid) { }
	// Offset : 0x7b2e74
	public static Int32 ToInt32(ASN1 asn1) { }
	// Offset : 0x7b2fbc
	public static String ToOid(ASN1 asn1) { }
	// Offset : 0x7b3308
	public static DateTime ToDateTime(ASN1 time) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security
internal sealed class BitConverterLE
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7b3a1c
	private static Byte[] GetUIntBytes(Byte* bytes) { }
	// Offset : 0x7b3bc8
	private static Byte[] GetULongBytes(Byte* bytes) { }
	// Offset : 0x7b2d74
	internal static Byte[] GetBytes(Int32 value) { }
	// Offset : 0x7b3e94
	internal static Byte[] GetBytes(Single value) { }
	// Offset : 0x7b3eb8
	internal static Byte[] GetBytes(Double value) { }
	// Offset : 0x7b3edc
	private static Void UShortFromBytes(Byte* dst, Byte[] src, Int32 startIndex) { }
	// Offset : 0x7b4008
	private static Void UIntFromBytes(Byte* dst, Byte[] src, Int32 startIndex) { }
	// Offset : 0x7b41f4
	private static Void ULongFromBytes(Byte* dst, Byte[] src, Int32 startIndex) { }
	// Offset : 0x7b4320
	internal static Int16 ToInt16(Byte[] value, Int32 startIndex) { }
	// Offset : 0x7b4358
	internal static Int32 ToInt32(Byte[] value, Int32 startIndex) { }
	// Offset : 0x7b4390
	internal static Single ToSingle(Byte[] value, Int32 startIndex) { }
	// Offset : 0x7b43c8
	internal static Double ToDouble(Byte[] value, Int32 startIndex) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security
internal sealed class PKCS7
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
public class ContentInfo
{
	// Fields
	private String contentType; // 0x10
	private ASN1 content; // 0x18

	// Properties
	public ASN1 ASN1 { get; }
	public ASN1 Content { get; set; }
	public String ContentType { get; set; }

	// Methods
	// Offset : 0x5b546c
	public Void .ctor() { }
	// Offset : 0x5b54dc
	public Void .ctor(String oid) { }
	// Offset : 0x5b5504
	public Void .ctor(Byte[] data) { }
	// Offset : 0x5b5578
	public Void .ctor(ASN1 asn1) { }
	// Offset : 0x5b57e4
	public ASN1 get_ASN1() { }
	// Offset : 0x5b58b8
	public ASN1 get_Content() { }
	// Offset : 0x5b58c0
	public Void set_Content(ASN1 value) { }
	// Offset : 0x5b58c8
	public String get_ContentType() { }
	// Offset : 0x5b58d0
	public Void set_ContentType(String value) { }
	// Offset : 0x5b57e8
	internal ASN1 GetASN1() { }
}

// Dll : mscorlib.dll
// Namespace: 
public class EncryptedData
{
	// Fields
	private Byte _version; // 0x10
	private ContentInfo _content; // 0x18
	private ContentInfo _encryptionAlgorithm; // 0x20
	private Byte[] _encrypted; // 0x28

	// Properties
	public ContentInfo EncryptionAlgorithm { get; }
	public Byte[] EncryptedContent { get; }

	// Methods
	// Offset : 0x5b58d8
	public Void .ctor() { }
	// Offset : 0x5b5900
	public Void .ctor(ASN1 asn1) { }
	// Offset : 0x5b5cd8
	public ContentInfo get_EncryptionAlgorithm() { }
	// Offset : 0x5b5ce0
	public Byte[] get_EncryptedContent() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Security
internal sealed class StrongName
{
	// Fields
	private RSA rsa; // 0x10
	private Byte[] publicKey; // 0x18
	private Byte[] keyToken; // 0x20
	private String tokenAlgorithm; // 0x28
	private static Object lockObject; // 0x0
	private static Boolean initialized; // 0x8

	// Properties
	public RSA RSA { set; }
	public Byte[] PublicKey { get; }
	public Byte[] PublicKeyToken { get; }
	public String TokenAlgorithm { get; }

	// Methods
	// Offset : 0x5b5da8
	public Void .ctor(Byte[] data) { }
	// Offset : 0x5b5f74
	public Void .ctor(RSA rsa) { }
	// Offset : 0x5b6018
	private static Void .cctor() { }
	// Offset : 0x5b6090
	private Void InvalidateCache() { }
	// Offset : 0x5b5f68
	public Void set_RSA(RSA value) { }
	// Offset : 0x5b6098
	public Byte[] get_PublicKey() { }
	// Offset : 0x5b65f8
	public Byte[] get_PublicKeyToken() { }
	// Offset : 0x5b67b0
	public String get_TokenAlgorithm() { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Xml
internal class SecurityParser : SmallXmlParser, IContentHandler
{
	// Fields
	private SecurityElement root; // 0x68
	private SecurityElement current; // 0x70
	private Stack stack; // 0x78

	// Properties

	// Methods
	// Offset : 0x5c33f4
	public Void .ctor() { }
	// Offset : 0x5c3544
	public Void LoadXml(String xml) { }
	// Offset : 0x5c389c
	public SecurityElement ToXml() { }
	// Offset : 0x5c38a4
	public Void OnStartParsing(SmallXmlParser parser) { }
	// Offset : 0x5c38a8
	public Void OnProcessingInstruction(String name, String text) { }
	// Offset : 0x5c38ac
	public Void OnIgnorableWhitespace(String s) { }
	// Offset : 0x5c38b0
	public Void OnStartElement(String name, IAttrList attrs) { }
	// Offset : 0x5c3c9c
	public Void OnEndElement(String name) { }
	// Offset : 0x5c3d88
	public Void OnChars(String ch) { }
	// Offset : 0x5c3e20
	public Void OnEndParsing(SmallXmlParser parser) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Xml
internal class SmallXmlParser
{
	// Fields
	private IContentHandler handler; // 0x10
	private TextReader reader; // 0x18
	private Stack elementNames; // 0x20
	private Stack xmlSpaces; // 0x28
	private String xmlSpace; // 0x30
	private StringBuilder buffer; // 0x38
	private Char[] nameBuffer; // 0x40
	private Boolean isWhitespace; // 0x48
	private AttrListImpl attributes; // 0x50
	private Int32 line; // 0x58
	private Int32 column; // 0x5c
	private Boolean resetColumn; // 0x60
	private static Dictionary`2 <>f__switch$map18; // 0x0

	// Properties

	// Methods
	// Offset : 0x5c345c
	public Void .ctor() { }
	// Offset : 0x5c3eac
	private Exception Error(String msg) { }
	// Offset : 0x5c4014
	private Exception UnexpectedEndError() { }
	// Offset : 0x5c4150
	private Boolean IsNameChar(Char c, Boolean start) { }
	// Offset : 0x5c425c
	private Boolean IsWhitespace(Int32 c) { }
	// Offset : 0x5c428c
	public Void SkipWhitespaces() { }
	// Offset : 0x5c434c
	private Void HandleWhitespaces() { }
	// Offset : 0x5c4294
	public Void SkipWhitespaces(Boolean expected) { }
	// Offset : 0x5c4488
	private Int32 Peek() { }
	// Offset : 0x5c43f4
	private Int32 Read() { }
	// Offset : 0x5c44d4
	public Void Expect(Int32 c) { }
	// Offset : 0x5c45e4
	private String ReadUntil(Char until, Boolean handleReferences) { }
	// Offset : 0x5c49f8
	public String ReadName() { }
	// Offset : 0x5c35f8
	public Void Parse(TextReader input, IContentHandler handler) { }
	// Offset : 0x5c5814
	private Void Cleanup() { }
	// Offset : 0x5c4c88
	public Void ReadContent() { }
	// Offset : 0x5c5644
	private Void HandleBufferedContent() { }
	// Offset : 0x5c5cdc
	private Void ReadCharacters() { }
	// Offset : 0x5c4700
	private Void ReadReference() { }
	// Offset : 0x5c5d68
	private Int32 ReadCharacterReference() { }
	// Offset : 0x5c5b68
	private Void ReadAttribute(AttrListImpl a) { }
	// Offset : 0x5c597c
	private Void ReadCDATASection() { }
	// Offset : 0x5c5ab4
	private Void ReadComment() { }
}

// Dll : mscorlib.dll
// Namespace: 
public interface IContentHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnStartParsing(SmallXmlParser parser) { }
	// Offset : 0x
	public abstract Void OnEndParsing(SmallXmlParser parser) { }
	// Offset : 0x
	public abstract Void OnStartElement(String name, IAttrList attrs) { }
	// Offset : 0x
	public abstract Void OnEndElement(String name) { }
	// Offset : 0x
	public abstract Void OnProcessingInstruction(String name, String text) { }
	// Offset : 0x
	public abstract Void OnChars(String text) { }
	// Offset : 0x
	public abstract Void OnIgnorableWhitespace(String text) { }
}

// Dll : mscorlib.dll
// Namespace: 
public interface IAttrList
{
	// Fields

	// Properties
	public abstract Int32 Length { get; }
	public abstract String[] Names { get; }
	public abstract String[] Values { get; }

	// Methods
	// Offset : 0x
	public abstract Int32 get_Length() { }
	// Offset : 0x
	public abstract String GetName(Int32 i) { }
	// Offset : 0x
	public abstract String GetValue(Int32 i) { }
	// Offset : 0x
	public abstract String GetValue(String name) { }
	// Offset : 0x
	public abstract String[] get_Names() { }
	// Offset : 0x
	public abstract String[] get_Values() { }
}

// Dll : mscorlib.dll
// Namespace: 
private class AttrListImpl : IAttrList
{
	// Fields
	private ArrayList attrNames; // 0x10
	private ArrayList attrValues; // 0x18

	// Properties
	public Int32 Length { get; }
	public String[] Names { get; }
	public String[] Values { get; }

	// Methods
	// Offset : 0x5c3e24
	public Void .ctor() { }
	// Offset : 0x5c5ef8
	public Int32 get_Length() { }
	// Offset : 0x5c5f48
	public String GetName(Int32 i) { }
	// Offset : 0x5c6038
	public String GetValue(Int32 i) { }
	// Offset : 0x5c6128
	public String GetValue(String name) { }
	// Offset : 0x5c634c
	public String[] get_Names() { }
	// Offset : 0x5c6484
	public String[] get_Values() { }
	// Offset : 0x5c58ec
	internal Void Clear() { }
	// Offset : 0x5c5e50
	internal Void Add(String name, String value) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Xml
internal class SmallXmlParserException : SystemException
{
	// Fields
	private Int32 line; // 0x60
	private Int32 column; // 0x64

	// Properties

	// Methods
	// Offset : 0x5c3f28
	public Void .ctor(String msg, Int32 line, Int32 column) { }
}

// Dll : mscorlib.dll
// Namespace: Mono
internal class Runtime
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7b13f0
	internal static String GetDisplayName() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
internal sealed class CollectionDebuggerView`1
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
internal sealed class CollectionDebuggerView`2
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
[Serializable]
public abstract class Comparer`1 : IComparer`1, IComparer
{
	// Fields
	private static readonly Comparer`1 _default; // 0x0

	// Properties
	public static Comparer`1 Default { get; }

	// Methods
	// Offset : 0x
	protected Void .ctor() { }
	// Offset : 0x
	private static Void .cctor() { }
	// Offset : 0x
	private Int32 System.Collections.IComparer.Compare(Object x, Object y) { }
	// Offset : 0x
	public abstract Int32 Compare(T x, T y) { }
	// Offset : 0x
	public static Comparer`1 get_Default() { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class DefaultComparer : Comparer`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public override Int32 Compare(T x, T y) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
[Serializable]
internal sealed class GenericComparer`1 : Comparer`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public override Int32 Compare(T x, T y) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
internal struct Link
{
	// Fields
	public Int32 HashCode; // 0x10
	public Int32 Next; // 0x14

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
[Serializable]
public class Dictionary`2 : IEnumerable, ISerializable, ICollection, ICollection`1, IEnumerable`1, IDictionary`2, IDictionary, IDeserializationCallback
{
	// Fields
	private const Int32 INITIAL_SIZE; // 0x0
	private const Single DEFAULT_LOAD_FACTOR; // 0x0
	private const Int32 NO_SLOT; // 0x0
	private const Int32 HASH_FLAG; // 0x0
	private Int32[] table; // 0x0
	private Link[] linkSlots; // 0x0
	private TKey[] keySlots; // 0x0
	private TValue[] valueSlots; // 0x0
	private Int32 touchedSlots; // 0x0
	private Int32 emptySlot; // 0x0
	private Int32 count; // 0x0
	private Int32 threshold; // 0x0
	private IEqualityComparer`1 hcp; // 0x0
	private SerializationInfo serialization_info; // 0x0
	private Int32 generation; // 0x0
	private static Transform`1 <>f__am$cacheB; // 0x0

	// Properties
	private ICollection System.Collections.IDictionary.Keys { get; }
	private ICollection System.Collections.IDictionary.Values { get; }
	private Boolean System.Collections.IDictionary.IsFixedSize { get; }
	private Boolean System.Collections.IDictionary.IsReadOnly { get; }
	private Object System.Collections.IDictionary.Item { get; set; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	private Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
	public Int32 Count { get; }
	public TValue Item { get; set; }
	public KeyCollection Keys { get; }
	public ValueCollection Values { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public Void .ctor(IEqualityComparer`1 comparer) { }
	// Offset : 0x
	public Void .ctor(Int32 capacity) { }
	// Offset : 0x
	public Void .ctor(Int32 capacity, IEqualityComparer`1 comparer) { }
	// Offset : 0x
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x
	private ICollection System.Collections.IDictionary.get_Keys() { }
	// Offset : 0x
	private ICollection System.Collections.IDictionary.get_Values() { }
	// Offset : 0x
	private Boolean System.Collections.IDictionary.get_IsFixedSize() { }
	// Offset : 0x
	private Boolean System.Collections.IDictionary.get_IsReadOnly() { }
	// Offset : 0x
	private Object System.Collections.IDictionary.get_Item(Object key) { }
	// Offset : 0x
	private Void System.Collections.IDictionary.set_Item(Object key, Object value) { }
	// Offset : 0x
	private Void System.Collections.IDictionary.Add(Object key, Object value) { }
	// Offset : 0x
	private Boolean System.Collections.IDictionary.Contains(Object key) { }
	// Offset : 0x
	private Void System.Collections.IDictionary.Remove(Object key) { }
	// Offset : 0x
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly() { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2 keyValuePair) { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2 keyValuePair) { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, Int32 index) { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2 keyValuePair) { }
	// Offset : 0x
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	private IEnumerator`1 System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator() { }
	// Offset : 0x
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	public TValue get_Item(TKey key) { }
	// Offset : 0x
	public Void set_Item(TKey key, TValue value) { }
	// Offset : 0x
	private Void Init(Int32 capacity, IEqualityComparer`1 hcp) { }
	// Offset : 0x
	private Void InitArrays(Int32 size) { }
	// Offset : 0x
	private Void CopyToCheck(Array array, Int32 index) { }
	// Offset : 0x
	private Void Do_CopyTo(TElem[] array, Int32 index, Transform`1 transform) { }
	// Offset : 0x
	private static KeyValuePair`2 make_pair(TKey key, TValue value) { }
	// Offset : 0x
	private static TKey pick_key(TKey key, TValue value) { }
	// Offset : 0x
	private static TValue pick_value(TKey key, TValue value) { }
	// Offset : 0x
	private Void CopyTo(KeyValuePair`2[] array, Int32 index) { }
	// Offset : 0x
	private Void Do_ICollectionCopyTo(Array array, Int32 index, Transform`1 transform) { }
	// Offset : 0x
	private Void Resize() { }
	// Offset : 0x
	public Void Add(TKey key, TValue value) { }
	// Offset : 0x
	public Void Clear() { }
	// Offset : 0x
	public Boolean ContainsKey(TKey key) { }
	// Offset : 0x
	public Boolean ContainsValue(TValue value) { }
	// Offset : 0x
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x
	public virtual Void OnDeserialization(Object sender) { }
	// Offset : 0x
	public Boolean Remove(TKey key) { }
	// Offset : 0x
	public Boolean TryGetValue(TKey key, out TValue value) { }
	// Offset : 0x
	public KeyCollection get_Keys() { }
	// Offset : 0x
	public ValueCollection get_Values() { }
	// Offset : 0x
	private TKey ToTKey(Object key) { }
	// Offset : 0x
	private TValue ToTValue(Object value) { }
	// Offset : 0x
	private Boolean ContainsKeyValuePair(KeyValuePair`2 pair) { }
	// Offset : 0x
	public Enumerator GetEnumerator() { }
	// Offset : 0x
	private static DictionaryEntry <CopyTo>m__0(TKey key, TValue value) { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class ShimEnumerator : IEnumerator, IDictionaryEnumerator
{
	// Fields
	private Enumerator host_enumerator; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public Object Key { get; }
	public Object Value { get; }
	public Object Current { get; }

	// Methods
	// Offset : 0x
	public Void .ctor(Dictionary`2 host) { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public DictionaryEntry get_Entry() { }
	// Offset : 0x
	public Object get_Key() { }
	// Offset : 0x
	public Object get_Value() { }
	// Offset : 0x
	public Object get_Current() { }
	// Offset : 0x
	public Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1, IDictionaryEnumerator
{
	// Fields
	private Dictionary`2 dictionary; // 0x0
	private Int32 next; // 0x0
	private Int32 stamp; // 0x0
	internal KeyValuePair`2 current; // 0x0

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	private DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get; }
	private Object System.Collections.IDictionaryEnumerator.Key { get; }
	private Object System.Collections.IDictionaryEnumerator.Value { get; }
	public KeyValuePair`2 Current { get; }
	internal TKey CurrentKey { get; }
	internal TValue CurrentValue { get; }

	// Methods
	// Offset : 0x
	internal Void .ctor(Dictionary`2 dictionary) { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x
	private DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry() { }
	// Offset : 0x
	private Object System.Collections.IDictionaryEnumerator.get_Key() { }
	// Offset : 0x
	private Object System.Collections.IDictionaryEnumerator.get_Value() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public KeyValuePair`2 get_Current() { }
	// Offset : 0x
	internal TKey get_CurrentKey() { }
	// Offset : 0x
	internal TValue get_CurrentValue() { }
	// Offset : 0x
	internal Void Reset() { }
	// Offset : 0x
	private Void VerifyState() { }
	// Offset : 0x
	private Void VerifyCurrent() { }
	// Offset : 0x
	public Void Dispose() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
public sealed class KeyCollection : IEnumerable, ICollection, ICollection`1, IEnumerable`1
{
	// Fields
	private Dictionary`2 dictionary; // 0x0

	// Properties
	private Boolean System.Collections.Generic.ICollection<TKey>.IsReadOnly { get; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	public Int32 Count { get; }

	// Methods
	// Offset : 0x
	public Void .ctor(Dictionary`2 dictionary) { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<TKey>.Add(TKey item) { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<TKey>.Clear() { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<TKey>.Contains(TKey item) { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<TKey>.Remove(TKey item) { }
	// Offset : 0x
	private IEnumerator`1 System.Collections.Generic.IEnumerable<TKey>.GetEnumerator() { }
	// Offset : 0x
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<TKey>.get_IsReadOnly() { }
	// Offset : 0x
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x
	public Void CopyTo(TKey[] array, Int32 index) { }
	// Offset : 0x
	public Enumerator GetEnumerator() { }
	// Offset : 0x
	public Int32 get_Count() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	private Enumerator host_enumerator; // 0x0

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public TKey Current { get; }

	// Methods
	// Offset : 0x
	internal Void .ctor(Dictionary`2 host) { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public TKey get_Current() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
public sealed class ValueCollection : IEnumerable, ICollection, ICollection`1, IEnumerable`1
{
	// Fields
	private Dictionary`2 dictionary; // 0x0

	// Properties
	private Boolean System.Collections.Generic.ICollection<TValue>.IsReadOnly { get; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	public Int32 Count { get; }

	// Methods
	// Offset : 0x
	public Void .ctor(Dictionary`2 dictionary) { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<TValue>.Add(TValue item) { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<TValue>.Clear() { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<TValue>.Contains(TValue item) { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<TValue>.Remove(TValue item) { }
	// Offset : 0x
	private IEnumerator`1 System.Collections.Generic.IEnumerable<TValue>.GetEnumerator() { }
	// Offset : 0x
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<TValue>.get_IsReadOnly() { }
	// Offset : 0x
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x
	public Void CopyTo(TValue[] array, Int32 index) { }
	// Offset : 0x
	public Enumerator GetEnumerator() { }
	// Offset : 0x
	public Int32 get_Count() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	private Enumerator host_enumerator; // 0x0

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public TValue Current { get; }

	// Methods
	// Offset : 0x
	internal Void .ctor(Dictionary`2 host) { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public TValue get_Current() { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class Transform`1 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual TRet Invoke(TKey key, TValue value) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(TKey key, TValue value, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual TRet EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
[Serializable]
public abstract class EqualityComparer`1 : IEqualityComparer`1, IEqualityComparer
{
	// Fields
	private static readonly EqualityComparer`1 _default; // 0x0

	// Properties
	public static EqualityComparer`1 Default { get; }

	// Methods
	// Offset : 0x
	protected Void .ctor() { }
	// Offset : 0x
	private static Void .cctor() { }
	// Offset : 0x
	private Int32 System.Collections.IEqualityComparer.GetHashCode(Object obj) { }
	// Offset : 0x
	private Boolean System.Collections.IEqualityComparer.Equals(Object x, Object y) { }
	// Offset : 0x
	public abstract Int32 GetHashCode(T obj) { }
	// Offset : 0x
	public abstract Boolean Equals(T x, T y) { }
	// Offset : 0x
	public static EqualityComparer`1 get_Default() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private sealed class DefaultComparer : EqualityComparer`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public override Int32 GetHashCode(T obj) { }
	// Offset : 0x
	public override Boolean Equals(T x, T y) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
[Serializable]
internal sealed class GenericEqualityComparer`1 : EqualityComparer`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public override Int32 GetHashCode(T obj) { }
	// Offset : 0x
	public override Boolean Equals(T x, T y) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
public interface IComparer`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Int32 Compare(T x, T y) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
public interface IDictionary`2 : IEnumerable, ICollection`1, IEnumerable`1
{
	// Fields

	// Properties
	public abstract TValue Item { get; set; }

	// Methods
	// Offset : 0x
	public abstract Void Add(TKey key, TValue value) { }
	// Offset : 0x
	public abstract Boolean ContainsKey(TKey key) { }
	// Offset : 0x
	public abstract Boolean Remove(TKey key) { }
	// Offset : 0x
	public abstract Boolean TryGetValue(TKey key, out TValue value) { }
	// Offset : 0x
	public abstract TValue get_Item(TKey key) { }
	// Offset : 0x
	public abstract Void set_Item(TKey key, TValue value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
public interface IEqualityComparer`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Boolean Equals(T x, T y) { }
	// Offset : 0x
	public abstract Int32 GetHashCode(T obj) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
[Serializable]
public class KeyNotFoundException : SystemException, ISerializable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x769b6c
	public Void .ctor() { }
	// Offset : 0x769bc0
	public Void .ctor(String message) { }
	// Offset : 0x769bc8
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
[Serializable]
public struct KeyValuePair`2
{
	// Fields
	private TKey key; // 0x0
	private TValue value; // 0x0

	// Properties
	public TKey Key { get; set; }
	public TValue Value { get; set; }

	// Methods
	// Offset : 0x
	public Void .ctor(TKey key, TValue value) { }
	// Offset : 0x
	public TKey get_Key() { }
	// Offset : 0x
	private Void set_Key(TKey value) { }
	// Offset : 0x
	public TValue get_Value() { }
	// Offset : 0x
	private Void set_Value(TValue value) { }
	// Offset : 0x
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.Generic
[Serializable]
public class List`1 : IEnumerable, ICollection, IList, ICollection`1, IEnumerable`1, IList`1
{
	// Fields
	private const Int32 DefaultCapacity; // 0x0
	private T[] _items; // 0x0
	private Int32 _size; // 0x0
	private Int32 _version; // 0x0
	private static readonly T[] EmptyArray; // 0x0

	// Properties
	private Boolean System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	private Boolean System.Collections.IList.IsFixedSize { get; }
	private Boolean System.Collections.IList.IsReadOnly { get; }
	private Object System.Collections.IList.Item { get; set; }
	public Int32 Capacity { get; set; }
	public Int32 Count { get; }
	public T Item { get; set; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public Void .ctor(Int32 capacity) { }
	// Offset : 0x
	private static Void .cctor() { }
	// Offset : 0x
	private IEnumerator`1 System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// Offset : 0x
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 arrayIndex) { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	private Int32 System.Collections.IList.Add(Object item) { }
	// Offset : 0x
	private Boolean System.Collections.IList.Contains(Object item) { }
	// Offset : 0x
	private Int32 System.Collections.IList.IndexOf(Object item) { }
	// Offset : 0x
	private Void System.Collections.IList.Insert(Int32 index, Object item) { }
	// Offset : 0x
	private Void System.Collections.IList.Remove(Object item) { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	// Offset : 0x
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x
	private Boolean System.Collections.IList.get_IsFixedSize() { }
	// Offset : 0x
	private Boolean System.Collections.IList.get_IsReadOnly() { }
	// Offset : 0x
	private Object System.Collections.IList.get_Item(Int32 index) { }
	// Offset : 0x
	private Void System.Collections.IList.set_Item(Int32 index, Object value) { }
	// Offset : 0x
	public Void Add(T item) { }
	// Offset : 0x
	private Void GrowIfNeeded(Int32 newCount) { }
	// Offset : 0x
	private Void AddCollection(ICollection`1 collection) { }
	// Offset : 0x
	private Void AddEnumerable(IEnumerable`1 enumerable) { }
	// Offset : 0x
	public Void AddRange(IEnumerable`1 collection) { }
	// Offset : 0x
	public ReadOnlyCollection`1 AsReadOnly() { }
	// Offset : 0x
	public Void Clear() { }
	// Offset : 0x
	public Boolean Contains(T item) { }
	// Offset : 0x
	public Void CopyTo(T[] array, Int32 arrayIndex) { }
	// Offset : 0x
	public T Find(Predicate`1 match) { }
	// Offset : 0x
	private static Void CheckMatch(Predicate`1 match) { }
	// Offset : 0x
	private Int32 GetIndex(Int32 startIndex, Int32 count, Predicate`1 match) { }
	// Offset : 0x
	public Enumerator GetEnumerator() { }
	// Offset : 0x
	public Int32 IndexOf(T item) { }
	// Offset : 0x
	private Void Shift(Int32 start, Int32 delta) { }
	// Offset : 0x
	private Void CheckIndex(Int32 index) { }
	// Offset : 0x
	public Void Insert(Int32 index, T item) { }
	// Offset : 0x
	private Void CheckCollection(IEnumerable`1 collection) { }
	// Offset : 0x
	public Void InsertRange(Int32 index, IEnumerable`1 collection) { }
	// Offset : 0x
	private Void InsertCollection(Int32 index, ICollection`1 collection) { }
	// Offset : 0x
	private Void InsertEnumeration(Int32 index, IEnumerable`1 enumerable) { }
	// Offset : 0x
	public Boolean Remove(T item) { }
	// Offset : 0x
	public Int32 RemoveAll(Predicate`1 match) { }
	// Offset : 0x
	public Void RemoveAt(Int32 index) { }
	// Offset : 0x
	public Void Reverse() { }
	// Offset : 0x
	public Void Sort() { }
	// Offset : 0x
	public Void Sort(Comparison`1 comparison) { }
	// Offset : 0x
	public T[] ToArray() { }
	// Offset : 0x
	public Void TrimExcess() { }
	// Offset : 0x
	public Int32 get_Capacity() { }
	// Offset : 0x
	public Void set_Capacity(Int32 value) { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	public T get_Item(Int32 index) { }
	// Offset : 0x
	public Void set_Item(Int32 index, T value) { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	private List`1 l; // 0x0
	private Int32 next; // 0x0
	private Int32 ver; // 0x0
	private T current; // 0x0

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Methods
	// Offset : 0x
	internal Void .ctor(List`1 l) { }
	// Offset : 0x
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	private Void VerifyState() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public T get_Current() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.ObjectModel
[Serializable]
public class Collection`1 : IEnumerable, ICollection, IList, ICollection`1, IList`1, IEnumerable`1
{
	// Fields
	private IList`1 list; // 0x0
	private Object syncRoot; // 0x0

	// Properties
	private Boolean System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	private Boolean System.Collections.IList.IsFixedSize { get; }
	private Boolean System.Collections.IList.IsReadOnly { get; }
	private Object System.Collections.IList.Item { get; set; }
	public Int32 Count { get; }
	public T Item { get; set; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	// Offset : 0x
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	private Int32 System.Collections.IList.Add(Object value) { }
	// Offset : 0x
	private Boolean System.Collections.IList.Contains(Object value) { }
	// Offset : 0x
	private Int32 System.Collections.IList.IndexOf(Object value) { }
	// Offset : 0x
	private Void System.Collections.IList.Insert(Int32 index, Object value) { }
	// Offset : 0x
	private Void System.Collections.IList.Remove(Object value) { }
	// Offset : 0x
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x
	private Boolean System.Collections.IList.get_IsFixedSize() { }
	// Offset : 0x
	private Boolean System.Collections.IList.get_IsReadOnly() { }
	// Offset : 0x
	private Object System.Collections.IList.get_Item(Int32 index) { }
	// Offset : 0x
	private Void System.Collections.IList.set_Item(Int32 index, Object value) { }
	// Offset : 0x
	public Void Add(T item) { }
	// Offset : 0x
	public Void Clear() { }
	// Offset : 0x
	protected virtual Void ClearItems() { }
	// Offset : 0x
	public Boolean Contains(T item) { }
	// Offset : 0x
	public Void CopyTo(T[] array, Int32 index) { }
	// Offset : 0x
	public IEnumerator`1 GetEnumerator() { }
	// Offset : 0x
	public Int32 IndexOf(T item) { }
	// Offset : 0x
	public Void Insert(Int32 index, T item) { }
	// Offset : 0x
	protected virtual Void InsertItem(Int32 index, T item) { }
	// Offset : 0x
	public Boolean Remove(T item) { }
	// Offset : 0x
	public Void RemoveAt(Int32 index) { }
	// Offset : 0x
	protected virtual Void RemoveItem(Int32 index) { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	public T get_Item(Int32 index) { }
	// Offset : 0x
	public Void set_Item(Int32 index, T value) { }
	// Offset : 0x
	protected virtual Void SetItem(Int32 index, T item) { }
	// Offset : 0x
	internal static Boolean IsValidItem(Object item) { }
	// Offset : 0x
	internal static T ConvertItem(Object item) { }
	// Offset : 0x
	internal static Void CheckWritable(IList`1 list) { }
	// Offset : 0x
	internal static Boolean IsSynchronized(IList`1 list) { }
	// Offset : 0x
	internal static Boolean IsFixedSize(IList`1 list) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections.ObjectModel
[Serializable]
public class ReadOnlyCollection`1 : IEnumerable, ICollection, IList, ICollection`1, IList`1, IEnumerable`1
{
	// Fields
	private IList`1 list; // 0x0

	// Properties
	private T System.Collections.Generic.IList<T>.Item { get; set; }
	private Boolean System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	private Boolean System.Collections.IList.IsFixedSize { get; }
	private Boolean System.Collections.IList.IsReadOnly { get; }
	private Object System.Collections.IList.Item { get; set; }
	public Int32 Count { get; }
	public T Item { get; }

	// Methods
	// Offset : 0x
	public Void .ctor(IList`1 list) { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<T>.Add(T item) { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<T>.Clear() { }
	// Offset : 0x
	private Void System.Collections.Generic.IList<T>.Insert(Int32 index, T item) { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<T>.Remove(T item) { }
	// Offset : 0x
	private Void System.Collections.Generic.IList<T>.RemoveAt(Int32 index) { }
	// Offset : 0x
	private T System.Collections.Generic.IList<T>.get_Item(Int32 index) { }
	// Offset : 0x
	private Void System.Collections.Generic.IList<T>.set_Item(Int32 index, T value) { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	// Offset : 0x
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	private Int32 System.Collections.IList.Add(Object value) { }
	// Offset : 0x
	private Void System.Collections.IList.Clear() { }
	// Offset : 0x
	private Boolean System.Collections.IList.Contains(Object value) { }
	// Offset : 0x
	private Int32 System.Collections.IList.IndexOf(Object value) { }
	// Offset : 0x
	private Void System.Collections.IList.Insert(Int32 index, Object value) { }
	// Offset : 0x
	private Void System.Collections.IList.Remove(Object value) { }
	// Offset : 0x
	private Void System.Collections.IList.RemoveAt(Int32 index) { }
	// Offset : 0x
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x
	private Boolean System.Collections.IList.get_IsFixedSize() { }
	// Offset : 0x
	private Boolean System.Collections.IList.get_IsReadOnly() { }
	// Offset : 0x
	private Object System.Collections.IList.get_Item(Int32 index) { }
	// Offset : 0x
	private Void System.Collections.IList.set_Item(Int32 index, Object value) { }
	// Offset : 0x
	public Boolean Contains(T value) { }
	// Offset : 0x
	public Void CopyTo(T[] array, Int32 index) { }
	// Offset : 0x
	public IEnumerator`1 GetEnumerator() { }
	// Offset : 0x
	public Int32 IndexOf(T value) { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	public T get_Item(Int32 index) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public class ArrayList : IEnumerable, ICloneable, ICollection, IList
{
	// Fields
	private const Int32 DefaultInitialCapacity; // 0x0
	private Int32 _size; // 0x10
	private Object[] _items; // 0x18
	private Int32 _version; // 0x20
	private static readonly Object[] EmptyArray; // 0x0

	// Properties
	public virtual Object Item { get; set; }
	public virtual Int32 Count { get; }
	public virtual Int32 Capacity { get; set; }
	public virtual Boolean IsFixedSize { get; }
	public virtual Boolean IsReadOnly { get; }
	public virtual Boolean IsSynchronized { get; }
	public virtual Object SyncRoot { get; }

	// Methods
	// Offset : 0x762878
	public Void .ctor() { }
	// Offset : 0x7628f4
	public Void .ctor(ICollection c) { }
	// Offset : 0x762adc
	public Void .ctor(Int32 capacity) { }
	// Offset : 0x762c40
	private Void .ctor(Object[] array, Int32 index, Int32 count) { }
	// Offset : 0x762cf0
	private static Void .cctor() { }
	// Offset : 0x762d54
	public virtual Object get_Item(Int32 index) { }
	// Offset : 0x762e48
	public virtual Void set_Item(Int32 index, Object value) { }
	// Offset : 0x762f7c
	public virtual Int32 get_Count() { }
	// Offset : 0x762f84
	public virtual Int32 get_Capacity() { }
	// Offset : 0x762fb0
	public virtual Void set_Capacity(Int32 value) { }
	// Offset : 0x7630a4
	public virtual Boolean get_IsFixedSize() { }
	// Offset : 0x7630ac
	public virtual Boolean get_IsReadOnly() { }
	// Offset : 0x7630b4
	public virtual Boolean get_IsSynchronized() { }
	// Offset : 0x7630bc
	public virtual Object get_SyncRoot() { }
	// Offset : 0x7630c0
	private Void EnsureCapacity(Int32 count) { }
	// Offset : 0x7631a4
	private Void Shift(Int32 index, Int32 count) { }
	// Offset : 0x763358
	public virtual Int32 Add(Object value) { }
	// Offset : 0x763430
	public virtual Void Clear() { }
	// Offset : 0x763470
	public virtual Boolean Contains(Object item) { }
	// Offset : 0x7634dc
	public virtual Int32 IndexOf(Object value) { }
	// Offset : 0x76352c
	public virtual Int32 IndexOf(Object value, Int32 startIndex) { }
	// Offset : 0x763594
	public virtual Int32 IndexOf(Object value, Int32 startIndex, Int32 count) { }
	// Offset : 0x763730
	public virtual Void Insert(Int32 index, Object value) { }
	// Offset : 0x763880
	public virtual Void InsertRange(Int32 index, ICollection c) { }
	// Offset : 0x763c98
	public virtual Void Remove(Object obj) { }
	// Offset : 0x763d2c
	public virtual Void RemoveAt(Int32 index) { }
	// Offset : 0x763e10
	public virtual Void CopyTo(Array array) { }
	// Offset : 0x763e24
	public virtual Void CopyTo(Array array, Int32 arrayIndex) { }
	// Offset : 0x763e8c
	public virtual Void CopyTo(Int32 index, Array array, Int32 arrayIndex, Int32 count) { }
	// Offset : 0x763f98
	public virtual IEnumerator GetEnumerator() { }
	// Offset : 0x7640a0
	public virtual Void AddRange(ICollection c) { }
	// Offset : 0x7640fc
	public virtual Void Sort() { }
	// Offset : 0x764164
	public virtual Void Sort(IComparer comparer) { }
	// Offset : 0x764184
	public virtual Object[] ToArray() { }
	// Offset : 0x764214
	public virtual Array ToArray(Type type) { }
	// Offset : 0x764280
	public virtual Object Clone() { }
	// Offset : 0x762bbc
	internal static Void ThrowNewArgumentOutOfRangeException(String name, Object actual, String message) { }
	// Offset : 0x7642f8
	public static ArrayList Synchronized(ArrayList list) { }
	// Offset : 0x764434
	public static ArrayList ReadOnly(ArrayList list) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class SimpleEnumerator : IEnumerator, ICloneable
{
	// Fields
	private ArrayList list; // 0x10
	private Int32 index; // 0x18
	private Int32 version; // 0x1c
	private Object currentElement; // 0x20
	private static Object endFlag; // 0x0

	// Properties
	public Object Current { get; }

	// Methods
	// Offset : 0x763ff8
	public Void .ctor(ArrayList list) { }
	// Offset : 0x765644
	private static Void .cctor() { }
	// Offset : 0x7656b0
	public Object Clone() { }
	// Offset : 0x7656b8
	public Boolean MoveNext() { }
	// Offset : 0x765838
	public Object get_Current() { }
	// Offset : 0x76591c
	public Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class ArrayListWrapper : ArrayList
{
	// Fields
	protected ArrayList m_InnerArrayList; // 0x28

	// Properties
	public override Object Item { get; set; }
	public override Int32 Count { get; }
	public override Int32 Capacity { get; set; }
	public override Boolean IsFixedSize { get; }
	public override Boolean IsReadOnly { get; }
	public override Boolean IsSynchronized { get; }
	public override Object SyncRoot { get; }

	// Methods
	// Offset : 0x764514
	public Void .ctor(ArrayList innerArrayList) { }
	// Offset : 0x76458c
	public override Object get_Item(Int32 index) { }
	// Offset : 0x7645e4
	public override Void set_Item(Int32 index, Object value) { }
	// Offset : 0x76464c
	public override Int32 get_Count() { }
	// Offset : 0x76469c
	public override Int32 get_Capacity() { }
	// Offset : 0x7646ec
	public override Void set_Capacity(Int32 value) { }
	// Offset : 0x764744
	public override Boolean get_IsFixedSize() { }
	// Offset : 0x764794
	public override Boolean get_IsReadOnly() { }
	// Offset : 0x7647e4
	public override Boolean get_IsSynchronized() { }
	// Offset : 0x764834
	public override Object get_SyncRoot() { }
	// Offset : 0x764884
	public override Int32 Add(Object value) { }
	// Offset : 0x7648dc
	public override Void Clear() { }
	// Offset : 0x76492c
	public override Boolean Contains(Object value) { }
	// Offset : 0x764984
	public override Int32 IndexOf(Object value) { }
	// Offset : 0x7649dc
	public override Int32 IndexOf(Object value, Int32 startIndex) { }
	// Offset : 0x764a44
	public override Int32 IndexOf(Object value, Int32 startIndex, Int32 count) { }
	// Offset : 0x764ab4
	public override Void Insert(Int32 index, Object value) { }
	// Offset : 0x764b1c
	public override Void InsertRange(Int32 index, ICollection c) { }
	// Offset : 0x764b84
	public override Void Remove(Object value) { }
	// Offset : 0x764bdc
	public override Void RemoveAt(Int32 index) { }
	// Offset : 0x764c34
	public override Void CopyTo(Array array) { }
	// Offset : 0x764c8c
	public override Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x764cf4
	public override Void CopyTo(Int32 index, Array array, Int32 arrayIndex, Int32 count) { }
	// Offset : 0x764d74
	public override IEnumerator GetEnumerator() { }
	// Offset : 0x764dc4
	public override Void AddRange(ICollection c) { }
	// Offset : 0x764e1c
	public override Object Clone() { }
	// Offset : 0x764e6c
	public override Void Sort() { }
	// Offset : 0x764ebc
	public override Void Sort(IComparer comparer) { }
	// Offset : 0x764f14
	public override Object[] ToArray() { }
	// Offset : 0x764f64
	public override Array ToArray(Type elementType) { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private sealed class SynchronizedArrayListWrapper : ArrayListWrapper
{
	// Fields
	private Object m_SyncRoot; // 0x30

	// Properties
	public override Object Item { get; set; }
	public override Int32 Count { get; }
	public override Int32 Capacity { get; set; }
	public override Boolean IsFixedSize { get; }
	public override Boolean IsReadOnly { get; }
	public override Boolean IsSynchronized { get; }
	public override Object SyncRoot { get; }

	// Methods
	// Offset : 0x7643d4
	internal Void .ctor(ArrayList innerArrayList) { }
	// Offset : 0x765a00
	public override Object get_Item(Int32 index) { }
	// Offset : 0x765acc
	public override Void set_Item(Int32 index, Object value) { }
	// Offset : 0x765ba8
	public override Int32 get_Count() { }
	// Offset : 0x765c64
	public override Int32 get_Capacity() { }
	// Offset : 0x765d20
	public override Void set_Capacity(Int32 value) { }
	// Offset : 0x765df4
	public override Boolean get_IsFixedSize() { }
	// Offset : 0x765eb0
	public override Boolean get_IsReadOnly() { }
	// Offset : 0x765f6c
	public override Boolean get_IsSynchronized() { }
	// Offset : 0x765f74
	public override Object get_SyncRoot() { }
	// Offset : 0x765f7c
	public override Int32 Add(Object value) { }
	// Offset : 0x766048
	public override Void Clear() { }
	// Offset : 0x766104
	public override Boolean Contains(Object value) { }
	// Offset : 0x7661d0
	public override Int32 IndexOf(Object value) { }
	// Offset : 0x76629c
	public override Int32 IndexOf(Object value, Int32 startIndex) { }
	// Offset : 0x766370
	public override Int32 IndexOf(Object value, Int32 startIndex, Int32 count) { }
	// Offset : 0x766454
	public override Void Insert(Int32 index, Object value) { }
	// Offset : 0x766530
	public override Void InsertRange(Int32 index, ICollection c) { }
	// Offset : 0x76660c
	public override Void Remove(Object value) { }
	// Offset : 0x7666e0
	public override Void RemoveAt(Int32 index) { }
	// Offset : 0x7667b4
	public override Void CopyTo(Array array) { }
	// Offset : 0x766888
	public override Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x766964
	public override Void CopyTo(Int32 index, Array array, Int32 arrayIndex, Int32 count) { }
	// Offset : 0x766a60
	public override IEnumerator GetEnumerator() { }
	// Offset : 0x766b1c
	public override Void AddRange(ICollection c) { }
	// Offset : 0x766bf0
	public override Object Clone() { }
	// Offset : 0x766cac
	public override Void Sort() { }
	// Offset : 0x766d68
	public override Void Sort(IComparer comparer) { }
	// Offset : 0x766e3c
	public override Object[] ToArray() { }
	// Offset : 0x766ef8
	public override Array ToArray(Type elementType) { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class FixedSizeArrayListWrapper : ArrayListWrapper
{
	// Fields

	// Properties
	protected virtual String ErrorMessage { get; }
	public override Int32 Capacity { get; set; }
	public override Boolean IsFixedSize { get; }

	// Methods
	// Offset : 0x764fbc
	public Void .ctor(ArrayList innerList) { }
	// Offset : 0x764fc0
	protected virtual String get_ErrorMessage() { }
	// Offset : 0x765008
	public override Int32 get_Capacity() { }
	// Offset : 0x76500c
	public override Void set_Capacity(Int32 value) { }
	// Offset : 0x765090
	public override Boolean get_IsFixedSize() { }
	// Offset : 0x765098
	public override Int32 Add(Object value) { }
	// Offset : 0x76511c
	public override Void AddRange(ICollection c) { }
	// Offset : 0x7651a0
	public override Void Clear() { }
	// Offset : 0x765224
	public override Void Insert(Int32 index, Object value) { }
	// Offset : 0x7652a8
	public override Void InsertRange(Int32 index, ICollection c) { }
	// Offset : 0x76532c
	public override Void Remove(Object value) { }
	// Offset : 0x7653b0
	public override Void RemoveAt(Int32 index) { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private sealed class ReadOnlyArrayListWrapper : FixedSizeArrayListWrapper
{
	// Fields

	// Properties
	protected override String ErrorMessage { get; }
	public override Boolean IsReadOnly { get; }
	public override Object Item { get; set; }

	// Methods
	// Offset : 0x764510
	public Void .ctor(ArrayList innerArrayList) { }
	// Offset : 0x765434
	protected override String get_ErrorMessage() { }
	// Offset : 0x76547c
	public override Boolean get_IsReadOnly() { }
	// Offset : 0x765484
	public override Object get_Item(Int32 index) { }
	// Offset : 0x7654dc
	public override Void set_Item(Int32 index, Object value) { }
	// Offset : 0x765554
	public override Void Sort() { }
	// Offset : 0x7655cc
	public override Void Sort(IComparer comparer) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public sealed class BitArray : IEnumerable, ICloneable, ICollection
{
	// Fields
	private Int32[] m_array; // 0x10
	private Int32 m_length; // 0x18
	private Int32 _version; // 0x1c

	// Properties
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public Boolean Item { get; set; }
	public Int32 Length { get; }
	public Object SyncRoot { get; }

	// Methods
	// Offset : 0x766fc4
	public Void .ctor(BitArray bits) { }
	// Offset : 0x767138
	public Void .ctor(Int32 length) { }
	// Offset : 0x767204
	private Byte getByte(Int32 byteIndex) { }
	// Offset : 0x76728c
	public Int32 get_Count() { }
	// Offset : 0x767294
	public Boolean get_IsSynchronized() { }
	// Offset : 0x76729c
	public Boolean get_Item(Int32 index) { }
	// Offset : 0x767380
	public Void set_Item(Int32 index, Boolean value) { }
	// Offset : 0x76748c
	public Int32 get_Length() { }
	// Offset : 0x767494
	public Object get_SyncRoot() { }
	// Offset : 0x767498
	public Object Clone() { }
	// Offset : 0x7674f8
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x7672a0
	public Boolean Get(Int32 index) { }
	// Offset : 0x767388
	public Void Set(Int32 index, Boolean value) { }
	// Offset : 0x767920
	public IEnumerator GetEnumerator() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class BitArrayEnumerator : IEnumerator, ICloneable
{
	// Fields
	private BitArray _bitArray; // 0x10
	private Boolean _current; // 0x18
	private Int32 _index; // 0x1c
	private Int32 _version; // 0x20

	// Properties
	public Object Current { get; }

	// Methods
	// Offset : 0x767980
	public Void .ctor(BitArray ba) { }
	// Offset : 0x7679c8
	public Object Clone() { }
	// Offset : 0x7679d0
	public Object get_Current() { }
	// Offset : 0x767abc
	public Boolean MoveNext() { }
	// Offset : 0x767bf4
	public Void Reset() { }
	// Offset : 0x767b5c
	private Void checkVersion() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public class CaseInsensitiveComparer : IComparer
{
	// Fields
	private static CaseInsensitiveComparer defaultComparer; // 0x0
	private static CaseInsensitiveComparer defaultInvariantComparer; // 0x8
	private CultureInfo culture; // 0x10

	// Properties
	public static CaseInsensitiveComparer DefaultInvariant { get; }

	// Methods
	// Offset : 0x767c1c
	public Void .ctor() { }
	// Offset : 0x767c94
	private Void .ctor(Boolean invariant) { }
	// Offset : 0x767c9c
	private static Void .cctor() { }
	// Offset : 0x767d1c
	public static CaseInsensitiveComparer get_DefaultInvariant() { }
	// Offset : 0x767d84
	public Int32 Compare(Object a, Object b) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public class CaseInsensitiveHashCodeProvider : IHashCodeProvider
{
	// Fields
	private static readonly CaseInsensitiveHashCodeProvider singletonInvariant; // 0x0
	private static readonly Object sync; // 0x8
	private TextInfo m_text; // 0x10

	// Properties
	public static CaseInsensitiveHashCodeProvider DefaultInvariant { get; }

	// Methods
	// Offset : 0x76820c
	public Void .ctor() { }
	// Offset : 0x768410
	public Void .ctor(CultureInfo culture) { }
	// Offset : 0x76853c
	private static Void .cctor() { }
	// Offset : 0x768324
	private static Boolean AreEqual(CultureInfo a, CultureInfo b) { }
	// Offset : 0x768600
	private static Boolean AreEqual(TextInfo info, CultureInfo culture) { }
	// Offset : 0x7686d0
	public static CaseInsensitiveHashCodeProvider get_DefaultInvariant() { }
	// Offset : 0x768738
	public Int32 GetHashCode(Object obj) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public abstract class CollectionBase : IEnumerable, ICollection, IList
{
	// Fields
	private ArrayList list; // 0x10

	// Properties
	private Object System.Collections.ICollection.SyncRoot { get; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Boolean System.Collections.IList.IsFixedSize { get; }
	private Boolean System.Collections.IList.IsReadOnly { get; }
	private Object System.Collections.IList.Item { get; set; }
	public Int32 Count { get; }
	protected ArrayList InnerList { get; }
	protected IList List { get; }

	// Methods
	// Offset : 0x7689f4
	protected Void .ctor() { }
	// Offset : 0x7689fc
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x768acc
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x768b1c
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x768b6c
	private Int32 System.Collections.IList.Add(Object value) { }
	// Offset : 0x768d8c
	private Boolean System.Collections.IList.Contains(Object value) { }
	// Offset : 0x768de4
	private Int32 System.Collections.IList.IndexOf(Object value) { }
	// Offset : 0x768e3c
	private Void System.Collections.IList.Insert(Int32 index, Object value) { }
	// Offset : 0x769018
	private Void System.Collections.IList.Remove(Object value) { }
	// Offset : 0x7691dc
	private Boolean System.Collections.IList.get_IsFixedSize() { }
	// Offset : 0x76922c
	private Boolean System.Collections.IList.get_IsReadOnly() { }
	// Offset : 0x76927c
	private Object System.Collections.IList.get_Item(Int32 index) { }
	// Offset : 0x7692d4
	private Void System.Collections.IList.set_Item(Int32 index, Object value) { }
	// Offset : 0x769594
	public Int32 get_Count() { }
	// Offset : 0x7695e4
	public IEnumerator GetEnumerator() { }
	// Offset : 0x769634
	public Void Clear() { }
	// Offset : 0x7696e4
	public Void RemoveAt(Int32 index) { }
	// Offset : 0x768a64
	protected ArrayList get_InnerList() { }
	// Offset : 0x76982c
	protected IList get_List() { }
	// Offset : 0x769830
	protected virtual Void OnClear() { }
	// Offset : 0x769834
	protected virtual Void OnClearComplete() { }
	// Offset : 0x769838
	protected virtual Void OnInsert(Int32 index, Object value) { }
	// Offset : 0x76983c
	protected virtual Void OnInsertComplete(Int32 index, Object value) { }
	// Offset : 0x769840
	protected virtual Void OnRemove(Int32 index, Object value) { }
	// Offset : 0x769844
	protected virtual Void OnRemoveComplete(Int32 index, Object value) { }
	// Offset : 0x769848
	protected virtual Void OnSet(Int32 index, Object oldValue, Object newValue) { }
	// Offset : 0x76984c
	protected virtual Void OnSetComplete(Int32 index, Object oldValue, Object newValue) { }
	// Offset : 0x769850
	protected virtual Void OnValidate(Object value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
internal sealed class CollectionDebuggerView
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public sealed class Comparer : ISerializable, IComparer
{
	// Fields
	public static readonly Comparer Default; // 0x0
	public static readonly Comparer DefaultInvariant; // 0x8
	private CompareInfo m_compareInfo; // 0x10

	// Properties

	// Methods
	// Offset : 0x7698d8
	private Void .ctor() { }
	// Offset : 0x7698e0
	public Void .ctor(CultureInfo culture) { }
	// Offset : 0x7699ac
	private static Void .cctor() { }
	// Offset : 0x767f20
	public Int32 Compare(Object a, Object b) { }
	// Offset : 0x769a68
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public struct DictionaryEntry
{
	// Fields
	private Object _key; // 0x10
	private Object _value; // 0x18

	// Properties
	public Object Key { get; }
	public Object Value { get; }

	// Methods
	// Offset : 0x2d01f0
	public Void .ctor(Object key, Object value) { }
	// Offset : 0x2d01f8
	public Object get_Key() { }
	// Offset : 0x2d0200
	public Object get_Value() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public class Hashtable : IEnumerable, ICloneable, ISerializable, ICollection, IDictionary, IDeserializationCallback
{
	// Fields
	private const Int32 CHAIN_MARKER; // 0x0
	private Int32 inUse; // 0x10
	private Int32 modificationCount; // 0x14
	private Single loadFactor; // 0x18
	private Slot[] table; // 0x20
	private Int32[] hashes; // 0x28
	private Int32 threshold; // 0x30
	private HashKeys hashKeys; // 0x38
	private HashValues hashValues; // 0x40
	private IHashCodeProvider hcpRef; // 0x48
	private IComparer comparerRef; // 0x50
	private SerializationInfo serializationInfo; // 0x58
	private IEqualityComparer equalityComparer; // 0x60
	private static readonly Int32[] primeTbl; // 0x0

	// Properties
	protected IComparer comparer { set; }
	protected IHashCodeProvider hcp { set; }
	public virtual Int32 Count { get; }
	public virtual Boolean IsSynchronized { get; }
	public virtual Object SyncRoot { get; }
	public virtual Boolean IsFixedSize { get; }
	public virtual Boolean IsReadOnly { get; }
	public virtual ICollection Keys { get; }
	public virtual ICollection Values { get; }
	public virtual Object Item { get; set; }

	// Methods
	// Offset : 0x769bd0
	public Void .ctor() { }
	// Offset : 0x769bf0
	public Void .ctor(Int32 capacity, Single loadFactor, IHashCodeProvider hcp, IComparer comparer) { }
	// Offset : 0x769be4
	public Void .ctor(Int32 capacity, Single loadFactor) { }
	// Offset : 0x76a00c
	public Void .ctor(Int32 capacity) { }
	// Offset : 0x76a01c
	internal Void .ctor(Hashtable source) { }
	// Offset : 0x76a208
	public Void .ctor(Int32 capacity, IHashCodeProvider hcp, IComparer comparer) { }
	// Offset : 0x76a210
	public Void .ctor(IDictionary d, Single loadFactor, IHashCodeProvider hcp, IComparer comparer) { }
	// Offset : 0x76a678
	public Void .ctor(IDictionary d, IHashCodeProvider hcp, IComparer comparer) { }
	// Offset : 0x76a680
	public Void .ctor(IHashCodeProvider hcp, IComparer comparer) { }
	// Offset : 0x76a69c
	public Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x76a6c8
	public Void .ctor(Int32 capacity, IEqualityComparer equalityComparer) { }
	// Offset : 0x76a6fc
	public Void .ctor(Int32 capacity, Single loadFactor, IEqualityComparer equalityComparer) { }
	// Offset : 0x76a72c
	private static Void .cctor() { }
	// Offset : 0x76a7a8
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x76a004
	protected Void set_comparer(IComparer value) { }
	// Offset : 0x769ffc
	protected Void set_hcp(IHashCodeProvider value) { }
	// Offset : 0x76a89c
	public virtual Int32 get_Count() { }
	// Offset : 0x76a8a4
	public virtual Boolean get_IsSynchronized() { }
	// Offset : 0x76a8ac
	public virtual Object get_SyncRoot() { }
	// Offset : 0x76a8b0
	public virtual Boolean get_IsFixedSize() { }
	// Offset : 0x76a8b8
	public virtual Boolean get_IsReadOnly() { }
	// Offset : 0x76a8c0
	public virtual ICollection get_Keys() { }
	// Offset : 0x76a9c4
	public virtual ICollection get_Values() { }
	// Offset : 0x76aac8
	public virtual Object get_Item(Object key) { }
	// Offset : 0x76acc4
	public virtual Void set_Item(Object key, Object value) { }
	// Offset : 0x76b144
	public virtual Void CopyTo(Array array, Int32 arrayIndex) { }
	// Offset : 0x76b494
	public virtual Void Add(Object key, Object value) { }
	// Offset : 0x76b49c
	public virtual Void Clear() { }
	// Offset : 0x76b594
	public virtual Boolean Contains(Object key) { }
	// Offset : 0x76b7a8
	public virtual IDictionaryEnumerator GetEnumerator() { }
	// Offset : 0x76b80c
	public virtual Void Remove(Object key) { }
	// Offset : 0x76b998
	public virtual Boolean ContainsKey(Object key) { }
	// Offset : 0x76b9e4
	public virtual Object Clone() { }
	// Offset : 0x76ba44
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x76be18
	public virtual Void OnDeserialization(Object sender) { }
	// Offset : 0x76c660
	public static Hashtable Synchronized(Hashtable table) { }
	// Offset : 0x76c7cc
	protected virtual Int32 GetHash(Object key) { }
	// Offset : 0x76c984
	protected virtual Boolean KeyEquals(Object item, Object key) { }
	// Offset : 0x76c610
	private Void AdjustThreshold() { }
	// Offset : 0x769f5c
	private Void SetTable(Slot[] table, Int32[] hashes) { }
	// Offset : 0x76b5b0
	private Int32 Find(Object key) { }
	// Offset : 0x76cbc0
	private Void Rehash() { }
	// Offset : 0x76accc
	private Void PutImpl(Object key, Object value, Boolean overwrite) { }
	// Offset : 0x76bc2c
	private Void CopyToArray(Array arr, Int32 i, EnumeratorMode mode) { }
	// Offset : 0x76ce94
	internal static Boolean TestPrime(Int32 x) { }
	// Offset : 0x76cf0c
	internal static Int32 CalcPrime(Int32 x) { }
	// Offset : 0x769de0
	internal static Int32 ToPrime(Int32 x) { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
internal struct Slot
{
	// Fields
	internal Object key; // 0x10
	internal Object value; // 0x18

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
internal class KeyMarker
{
	// Fields
	public static readonly KeyMarker Removed; // 0x0

	// Properties

	// Methods
	// Offset : 0x76dae8
	public Void .ctor() { }
	// Offset : 0x76daf0
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: 
private enum EnumeratorMode
{
	// Fields
	public Int32 value__; // 0x10
	public const EnumeratorMode KEY_MODE = 0; // 0x0
	public const EnumeratorMode VALUE_MODE = 1; // 0x0
	public const EnumeratorMode ENTRY_MODE = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private sealed class Enumerator : IEnumerator, IDictionaryEnumerator
{
	// Fields
	private Hashtable host; // 0x10
	private Int32 stamp; // 0x18
	private Int32 pos; // 0x1c
	private Int32 size; // 0x20
	private EnumeratorMode mode; // 0x24
	private Object currentKey; // 0x28
	private Object currentValue; // 0x30
	private static readonly String xstr; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public Object Key { get; }
	public Object Value { get; }
	public Object Current { get; }

	// Methods
	// Offset : 0x76a80c
	public Void .ctor(Hashtable host, EnumeratorMode mode) { }
	// Offset : 0x76d02c
	private static Void .cctor() { }
	// Offset : 0x76d088
	private Void FailFast() { }
	// Offset : 0x76d000
	public Void Reset() { }
	// Offset : 0x76d150
	public Boolean MoveNext() { }
	// Offset : 0x76d288
	public DictionaryEntry get_Entry() { }
	// Offset : 0x76d314
	public Object get_Key() { }
	// Offset : 0x76d3a0
	public Object get_Value() { }
	// Offset : 0x76d42c
	public Object get_Current() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class HashKeys : IEnumerable, ICollection
{
	// Fields
	private Hashtable host; // 0x10

	// Properties
	public virtual Int32 Count { get; }
	public virtual Boolean IsSynchronized { get; }
	public virtual Object SyncRoot { get; }

	// Methods
	// Offset : 0x76a92c
	public Void .ctor(Hashtable host) { }
	// Offset : 0x76d520
	public virtual Int32 get_Count() { }
	// Offset : 0x76d570
	public virtual Boolean get_IsSynchronized() { }
	// Offset : 0x76d5c0
	public virtual Object get_SyncRoot() { }
	// Offset : 0x76d610
	public virtual Void CopyTo(Array array, Int32 arrayIndex) { }
	// Offset : 0x76d79c
	public virtual IEnumerator GetEnumerator() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class HashValues : IEnumerable, ICollection
{
	// Fields
	private Hashtable host; // 0x10

	// Properties
	public virtual Int32 Count { get; }
	public virtual Boolean IsSynchronized { get; }
	public virtual Object SyncRoot { get; }

	// Methods
	// Offset : 0x76aa30
	public Void .ctor(Hashtable host) { }
	// Offset : 0x76d804
	public virtual Int32 get_Count() { }
	// Offset : 0x76d854
	public virtual Boolean get_IsSynchronized() { }
	// Offset : 0x76d8a4
	public virtual Object get_SyncRoot() { }
	// Offset : 0x76d8f4
	public virtual Void CopyTo(Array array, Int32 arrayIndex) { }
	// Offset : 0x76da80
	public virtual IEnumerator GetEnumerator() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class SyncHashtable : Hashtable, IEnumerable
{
	// Fields
	private Hashtable host; // 0x68

	// Properties
	public override Int32 Count { get; }
	public override Boolean IsSynchronized { get; }
	public override Object SyncRoot { get; }
	public override Boolean IsFixedSize { get; }
	public override Boolean IsReadOnly { get; }
	public override ICollection Keys { get; }
	public override ICollection Values { get; }
	public override Object Item { get; set; }

	// Methods
	// Offset : 0x76c708
	public Void .ctor(Hashtable host) { }
	// Offset : 0x76db54
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x76dcc0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x76dd28
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x76dd9c
	public override Int32 get_Count() { }
	// Offset : 0x76ddec
	public override Boolean get_IsSynchronized() { }
	// Offset : 0x76ddf4
	public override Object get_SyncRoot() { }
	// Offset : 0x76de44
	public override Boolean get_IsFixedSize() { }
	// Offset : 0x76de94
	public override Boolean get_IsReadOnly() { }
	// Offset : 0x76dee4
	public override ICollection get_Keys() { }
	// Offset : 0x76dfd8
	public override ICollection get_Values() { }
	// Offset : 0x76e0cc
	public override Object get_Item(Object key) { }
	// Offset : 0x76e124
	public override Void set_Item(Object key, Object value) { }
	// Offset : 0x76e238
	public override Void CopyTo(Array array, Int32 arrayIndex) { }
	// Offset : 0x76e2a0
	public override Void Add(Object key, Object value) { }
	// Offset : 0x76e3b4
	public override Void Clear() { }
	// Offset : 0x76e4a8
	public override Boolean Contains(Object key) { }
	// Offset : 0x76e4e8
	public override IDictionaryEnumerator GetEnumerator() { }
	// Offset : 0x76e550
	public override Void Remove(Object key) { }
	// Offset : 0x76e65c
	public override Boolean ContainsKey(Object key) { }
	// Offset : 0x76e6b4
	public override Object Clone() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
public interface IComparer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Int32 Compare(Object x, Object y) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
public interface IDictionary : IEnumerable, ICollection
{
	// Fields

	// Properties
	public abstract Boolean IsFixedSize { get; }
	public abstract Boolean IsReadOnly { get; }
	public abstract Object Item { get; set; }
	public abstract ICollection Keys { get; }
	public abstract ICollection Values { get; }

	// Methods
	// Offset : 0x
	public abstract Boolean get_IsFixedSize() { }
	// Offset : 0x
	public abstract Boolean get_IsReadOnly() { }
	// Offset : 0x
	public abstract Object get_Item(Object key) { }
	// Offset : 0x
	public abstract Void set_Item(Object key, Object value) { }
	// Offset : 0x
	public abstract ICollection get_Keys() { }
	// Offset : 0x
	public abstract ICollection get_Values() { }
	// Offset : 0x
	public abstract Void Add(Object key, Object value) { }
	// Offset : 0x
	public abstract Void Clear() { }
	// Offset : 0x
	public abstract Boolean Contains(Object key) { }
	// Offset : 0x
	public abstract IDictionaryEnumerator GetEnumerator() { }
	// Offset : 0x
	public abstract Void Remove(Object key) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
public interface IDictionaryEnumerator : IEnumerator
{
	// Fields

	// Properties
	public abstract DictionaryEntry Entry { get; }
	public abstract Object Key { get; }
	public abstract Object Value { get; }

	// Methods
	// Offset : 0x
	public abstract DictionaryEntry get_Entry() { }
	// Offset : 0x
	public abstract Object get_Key() { }
	// Offset : 0x
	public abstract Object get_Value() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
public interface IEqualityComparer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Boolean Equals(Object x, Object y) { }
	// Offset : 0x
	public abstract Int32 GetHashCode(Object obj) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
public interface IHashCodeProvider
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Int32 GetHashCode(Object obj) { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public class Queue : IEnumerable, ICloneable, ICollection
{
	// Fields
	private Object[] _array; // 0x10
	private Int32 _head; // 0x18
	private Int32 _size; // 0x1c
	private Int32 _tail; // 0x20
	private Int32 _growFactor; // 0x24
	private Int32 _version; // 0x28

	// Properties
	public virtual Int32 Count { get; }
	public virtual Boolean IsSynchronized { get; }
	public virtual Object SyncRoot { get; }

	// Methods
	// Offset : 0x76e888
	public Void .ctor() { }
	// Offset : 0x76e9b4
	public Void .ctor(Int32 capacity) { }
	// Offset : 0x76e9bc
	public Void .ctor(ICollection col) { }
	// Offset : 0x76e894
	public Void .ctor(Int32 capacity, Single growFactor) { }
	// Offset : 0x76ee40
	public virtual Int32 get_Count() { }
	// Offset : 0x76ee48
	public virtual Boolean get_IsSynchronized() { }
	// Offset : 0x76ee50
	public virtual Object get_SyncRoot() { }
	// Offset : 0x76ee54
	public virtual Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x76f00c
	public virtual IEnumerator GetEnumerator() { }
	// Offset : 0x76f0b0
	public virtual Object Clone() { }
	// Offset : 0x76f1ac
	public virtual Void Clear() { }
	// Offset : 0x76f240
	public virtual Object Dequeue() { }
	// Offset : 0x76f37c
	public virtual Void Enqueue(Object obj) { }
	// Offset : 0x76f584
	public virtual Object Peek() { }
	// Offset : 0x76f470
	private Void grow() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class QueueEnumerator : IEnumerator, ICloneable
{
	// Fields
	private Queue queue; // 0x10
	private Int32 _version; // 0x18
	private Int32 current; // 0x1c

	// Properties
	public virtual Object Current { get; }

	// Methods
	// Offset : 0x76f06c
	internal Void .ctor(Queue q) { }
	// Offset : 0x76f640
	public Object Clone() { }
	// Offset : 0x76f6e0
	public virtual Object get_Current() { }
	// Offset : 0x76f850
	public virtual Boolean MoveNext() { }
	// Offset : 0x76f930
	public virtual Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public class SortedList : IEnumerable, ICloneable, ICollection, IDictionary
{
	// Fields
	private static readonly Int32 INITIAL_SIZE; // 0x0
	private Int32 inUse; // 0x10
	private Int32 modificationCount; // 0x14
	private Slot[] table; // 0x18
	private IComparer comparer; // 0x20
	private Int32 defaultCapacity; // 0x28

	// Properties
	public virtual Int32 Count { get; }
	public virtual Boolean IsSynchronized { get; }
	public virtual Object SyncRoot { get; }
	public virtual Boolean IsFixedSize { get; }
	public virtual Boolean IsReadOnly { get; }
	public virtual ICollection Keys { get; }
	public virtual ICollection Values { get; }
	public virtual Object Item { get; set; }
	public virtual Int32 Capacity { get; set; }

	// Methods
	// Offset : 0x76f9d8
	public Void .ctor() { }
	// Offset : 0x76fb3c
	public Void .ctor(Int32 initialCapacity) { }
	// Offset : 0x76fa4c
	public Void .ctor(IComparer comparer, Int32 capacity) { }
	// Offset : 0x76fbc4
	public Void .ctor(IDictionary d, IComparer comparer) { }
	// Offset : 0x76ffe8
	private static Void .cctor() { }
	// Offset : 0x77003c
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x770138
	public virtual Int32 get_Count() { }
	// Offset : 0x770140
	public virtual Boolean get_IsSynchronized() { }
	// Offset : 0x770148
	public virtual Object get_SyncRoot() { }
	// Offset : 0x77014c
	public virtual Boolean get_IsFixedSize() { }
	// Offset : 0x770154
	public virtual Boolean get_IsReadOnly() { }
	// Offset : 0x77015c
	public virtual ICollection get_Keys() { }
	// Offset : 0x770254
	public virtual ICollection get_Values() { }
	// Offset : 0x77034c
	public virtual Object get_Item(Object key) { }
	// Offset : 0x770444
	public virtual Void set_Item(Object key, Object value) { }
	// Offset : 0x770d40
	public virtual Int32 get_Capacity() { }
	// Offset : 0x770d6c
	public virtual Void set_Capacity(Int32 value) { }
	// Offset : 0x770e9c
	public virtual Void Add(Object key, Object value) { }
	// Offset : 0x770ea4
	public virtual Void Clear() { }
	// Offset : 0x770f34
	public virtual Boolean Contains(Object key) { }
	// Offset : 0x77105c
	public virtual IDictionaryEnumerator GetEnumerator() { }
	// Offset : 0x7710c0
	public virtual Void Remove(Object key) { }
	// Offset : 0x771150
	public virtual Void CopyTo(Array array, Int32 arrayIndex) { }
	// Offset : 0x7714b0
	public virtual Object Clone() { }
	// Offset : 0x771534
	public virtual Void RemoveAt(Int32 index) { }
	// Offset : 0x77168c
	public virtual Int32 IndexOfKey(Object key) { }
	// Offset : 0x7717b0
	public virtual Int32 IndexOfValue(Object value) { }
	// Offset : 0x771850
	public virtual Boolean ContainsKey(Object key) { }
	// Offset : 0x771998
	public virtual Boolean ContainsValue(Object value) { }
	// Offset : 0x7719f0
	public virtual Object GetByIndex(Int32 index) { }
	// Offset : 0x771af0
	public virtual Object GetKey(Int32 index) { }
	// Offset : 0x771bf0
	private Void EnsureCapacity(Int32 n, Int32 free) { }
	// Offset : 0x77078c
	private Void PutImpl(Object key, Object value, Boolean overwrite) { }
	// Offset : 0x7703dc
	private Object GetImpl(Object key) { }
	// Offset : 0x76fb4c
	private Void InitTable(Int32 capacity, Boolean forceSize) { }
	// Offset : 0x771dfc
	private Void CopyToArray(Array arr, Int32 i, EnumeratorMode mode) { }
	// Offset : 0x770598
	private Int32 Find(Object key) { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
internal struct Slot
{
	// Fields
	internal Object key; // 0x10
	internal Object value; // 0x18

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private enum EnumeratorMode
{
	// Fields
	public Int32 value__; // 0x10
	public const EnumeratorMode KEY_MODE = 0; // 0x0
	public const EnumeratorMode VALUE_MODE = 1; // 0x0
	public const EnumeratorMode ENTRY_MODE = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class Enumerator : IEnumerator, ICloneable, IDictionaryEnumerator
{
	// Fields
	private SortedList host; // 0x10
	private Int32 stamp; // 0x18
	private Int32 pos; // 0x1c
	private Int32 size; // 0x20
	private EnumeratorMode mode; // 0x24
	private Object currentKey; // 0x28
	private Object currentValue; // 0x30
	private Boolean invalid; // 0x38
	private static readonly String xstr; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public Object Key { get; }
	public Object Value { get; }
	public Object Current { get; }

	// Methods
	// Offset : 0x7700a0
	public Void .ctor(SortedList host, EnumeratorMode mode) { }
	// Offset : 0x772174
	private static Void .cctor() { }
	// Offset : 0x772098
	public Void Reset() { }
	// Offset : 0x7721d0
	public Boolean MoveNext() { }
	// Offset : 0x772318
	public DictionaryEntry get_Entry() { }
	// Offset : 0x7723e4
	public Object get_Key() { }
	// Offset : 0x7724b0
	public Object get_Value() { }
	// Offset : 0x77257c
	public Object get_Current() { }
	// Offset : 0x77271c
	public Object Clone() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class ListKeys : IEnumerable, ICollection, IList
{
	// Fields
	private SortedList host; // 0x10

	// Properties
	public virtual Int32 Count { get; }
	public virtual Boolean IsSynchronized { get; }
	public virtual Object SyncRoot { get; }
	public virtual Boolean IsFixedSize { get; }
	public virtual Boolean IsReadOnly { get; }
	public virtual Object Item { get; set; }

	// Methods
	// Offset : 0x7701bc
	public Void .ctor(SortedList host) { }
	// Offset : 0x772830
	public virtual Int32 get_Count() { }
	// Offset : 0x772880
	public virtual Boolean get_IsSynchronized() { }
	// Offset : 0x7728d0
	public virtual Object get_SyncRoot() { }
	// Offset : 0x772920
	public virtual Void CopyTo(Array array, Int32 arrayIndex) { }
	// Offset : 0x772968
	public virtual Boolean get_IsFixedSize() { }
	// Offset : 0x772970
	public virtual Boolean get_IsReadOnly() { }
	// Offset : 0x772978
	public virtual Object get_Item(Int32 index) { }
	// Offset : 0x7729d0
	public virtual Void set_Item(Int32 index, Object value) { }
	// Offset : 0x772a44
	public virtual Int32 Add(Object value) { }
	// Offset : 0x772ab8
	public virtual Void Clear() { }
	// Offset : 0x772b2c
	public virtual Boolean Contains(Object key) { }
	// Offset : 0x772b84
	public virtual Int32 IndexOf(Object key) { }
	// Offset : 0x772bdc
	public virtual Void Insert(Int32 index, Object value) { }
	// Offset : 0x772c50
	public virtual Void Remove(Object value) { }
	// Offset : 0x772cc4
	public virtual Void RemoveAt(Int32 index) { }
	// Offset : 0x772d38
	public virtual IEnumerator GetEnumerator() { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class ListValues : IEnumerable, ICollection, IList
{
	// Fields
	private SortedList host; // 0x10

	// Properties
	public virtual Int32 Count { get; }
	public virtual Boolean IsSynchronized { get; }
	public virtual Object SyncRoot { get; }
	public virtual Boolean IsFixedSize { get; }
	public virtual Boolean IsReadOnly { get; }
	public virtual Object Item { get; set; }

	// Methods
	// Offset : 0x7702b4
	public Void .ctor(SortedList host) { }
	// Offset : 0x772da0
	public virtual Int32 get_Count() { }
	// Offset : 0x772df0
	public virtual Boolean get_IsSynchronized() { }
	// Offset : 0x772e40
	public virtual Object get_SyncRoot() { }
	// Offset : 0x772e90
	public virtual Void CopyTo(Array array, Int32 arrayIndex) { }
	// Offset : 0x772ed8
	public virtual Boolean get_IsFixedSize() { }
	// Offset : 0x772ee0
	public virtual Boolean get_IsReadOnly() { }
	// Offset : 0x772ee8
	public virtual Object get_Item(Int32 index) { }
	// Offset : 0x772f40
	public virtual Void set_Item(Int32 index, Object value) { }
	// Offset : 0x772fb4
	public virtual Int32 Add(Object value) { }
	// Offset : 0x773028
	public virtual Void Clear() { }
	// Offset : 0x77309c
	public virtual Boolean Contains(Object value) { }
	// Offset : 0x7730f4
	public virtual Int32 IndexOf(Object value) { }
	// Offset : 0x77314c
	public virtual Void Insert(Int32 index, Object value) { }
	// Offset : 0x7731c0
	public virtual Void Remove(Object value) { }
	// Offset : 0x773234
	public virtual Void RemoveAt(Int32 index) { }
	// Offset : 0x7732a8
	public virtual IEnumerator GetEnumerator() { }
}

// Dll : mscorlib.dll
// Namespace: System.Collections
[Serializable]
public class Stack : IEnumerable, ICloneable, ICollection
{
	// Fields
	private Object[] contents; // 0x10
	private Int32 current; // 0x18
	private Int32 count; // 0x1c
	private Int32 capacity; // 0x20
	private Int32 modCount; // 0x24

	// Properties
	public virtual Int32 Count { get; }
	public virtual Boolean IsSynchronized { get; }
	public virtual Object SyncRoot { get; }

	// Methods
	// Offset : 0x773310
	public Void .ctor() { }
	// Offset : 0x773384
	public Void .ctor(ICollection col) { }
	// Offset : 0x773804
	public Void .ctor(Int32 initialCapacity) { }
	// Offset : 0x7738c8
	private Void Resize(Int32 ncapacity) { }
	// Offset : 0x773964
	public virtual Int32 get_Count() { }
	// Offset : 0x77396c
	public virtual Boolean get_IsSynchronized() { }
	// Offset : 0x773974
	public virtual Object get_SyncRoot() { }
	// Offset : 0x773978
	public virtual Void Clear() { }
	// Offset : 0x773a08
	public virtual Object Clone() { }
	// Offset : 0x773aa8
	public virtual Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x773c60
	public virtual IEnumerator GetEnumerator() { }
	// Offset : 0x773d04
	public virtual Object Peek() { }
	// Offset : 0x773dbc
	public virtual Object Pop() { }
	// Offset : 0x773f0c
	public virtual Void Push(Object obj) { }
}

// Dll : mscorlib.dll
// Namespace: 
private class Enumerator : IEnumerator, ICloneable
{
	// Fields
	private Stack stack; // 0x10
	private Int32 modCount; // 0x18
	private Int32 current; // 0x1c

	// Properties
	public virtual Object Current { get; }

	// Methods
	// Offset : 0x773cc0
	internal Void .ctor(Stack s) { }
	// Offset : 0x773fd4
	public Object Clone() { }
	// Offset : 0x773fdc
	public virtual Object get_Current() { }
	// Offset : 0x7740ec
	public virtual Boolean MoveNext() { }
	// Offset : 0x7741d0
	public virtual Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: System.Configuration.Assemblies
[Serializable]
public enum AssemblyHashAlgorithm
{
	// Fields
	public Int32 value__; // 0x10
	public const AssemblyHashAlgorithm None = 0; // 0x0
	public const AssemblyHashAlgorithm MD5 = 32771; // 0x0
	public const AssemblyHashAlgorithm SHA1 = 32772; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Configuration.Assemblies
[Serializable]
public enum AssemblyVersionCompatibility
{
	// Fields
	public Int32 value__; // 0x10
	public const AssemblyVersionCompatibility SameMachine = 1; // 0x0
	public const AssemblyVersionCompatibility SameProcess = 2; // 0x0
	public const AssemblyVersionCompatibility SameDomain = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolWriter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void Initialize(IntPtr emitter, String filename, Boolean fFullBuild) { }
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
public sealed class DebuggableAttribute : Attribute
{
	// Fields
	private Boolean JITTrackingEnabledFlag; // 0x10
	private Boolean JITOptimizerDisabledFlag; // 0x11
	private DebuggingModes debuggingModes; // 0x14

	// Properties

	// Methods
	// Offset : 0x6bcadc
	public Void .ctor(DebuggingModes modes) { }
}

// Dll : mscorlib.dll
// Namespace: 
public enum DebuggingModes
{
	// Fields
	public Int32 value__; // 0x10
	public const DebuggingModes None = 0; // 0x0
	public const DebuggingModes Default = 1; // 0x0
	public const DebuggingModes IgnoreSymbolStoreSequencePoints = 2; // 0x0
	public const DebuggingModes EnableEditAndContinue = 4; // 0x0
	public const DebuggingModes DisableOptimizations = 256; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
public sealed class Debugger
{
	// Fields
	public static readonly String DefaultCategory; // 0x0

	// Properties
	public static Boolean IsAttached { get; }

	// Methods
	// Offset : 0x6bcb18
	private static Void .cctor() { }
	// Offset : 0x6bcb94
	public static Boolean get_IsAttached() { }
	// Offset : 0x6bcbf0
	private static Boolean IsAttached_internal() { }
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
public sealed class DebuggerBrowsableAttribute : Attribute
{
	// Fields
	private DebuggerBrowsableState state; // 0x10

	// Properties

	// Methods
	// Offset : 0x6bcbf4
	public Void .ctor(DebuggerBrowsableState state) { }
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
public enum DebuggerBrowsableState
{
	// Fields
	public Int32 value__; // 0x10
	public const DebuggerBrowsableState Never = 0; // 0x0
	public const DebuggerBrowsableState Collapsed = 2; // 0x0
	public const DebuggerBrowsableState RootHidden = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
public sealed class DebuggerDisplayAttribute : Attribute
{
	// Fields
	private String value; // 0x10
	private String type; // 0x18
	private String name; // 0x20

	// Properties
	public String Name { set; }

	// Methods
	// Offset : 0x6bcc20
	public Void .ctor(String value) { }
	// Offset : 0x6bccdc
	public Void set_Name(String value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerNonUserCodeAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6bccec
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerStepThroughAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6bccf4
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
public sealed class DebuggerTypeProxyAttribute : Attribute
{
	// Fields
	private String proxy_type_name; // 0x10

	// Properties

	// Methods
	// Offset : 0x6bccfc
	public Void .ctor(Type type) { }
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
[Serializable]
public class StackFrame
{
	// Fields
	public const Int32 OFFSET_UNKNOWN; // 0x0
	private Int32 ilOffset; // 0x10
	private Int32 nativeOffset; // 0x14
	private MethodBase methodBase; // 0x18
	private String fileName; // 0x20
	private Int32 lineNumber; // 0x28
	private Int32 columnNumber; // 0x2c
	private String internalMethodName; // 0x30

	// Properties

	// Methods
	// Offset : 0x6bcd5c
	public Void .ctor() { }
	// Offset : 0x6bcdc0
	public Void .ctor(Int32 skipFrames, Boolean fNeedFileInfo) { }
	// Offset : 0x6bcdb8
	private static Boolean get_frame_info(Int32 skip, Boolean needFileInfo, out MethodBase method, out Int32 iloffset, out Int32 native_offset, out String file, out Int32 line, out Int32 column) { }
	// Offset : 0x6bce2c
	public virtual Int32 GetFileLineNumber() { }
	// Offset : 0x6bce34
	public virtual String GetFileName() { }
	// Offset : 0x6bce3c
	internal String GetSecureFileName() { }
	// Offset : 0x6bcf30
	public virtual Int32 GetILOffset() { }
	// Offset : 0x6bcf38
	public virtual MethodBase GetMethod() { }
	// Offset : 0x6bcf40
	public virtual Int32 GetNativeOffset() { }
	// Offset : 0x6bcf48
	internal String GetInternalMethodName() { }
	// Offset : 0x6bcf50
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Diagnostics
[Serializable]
public class StackTrace
{
	// Fields
	public const Int32 METHODS_TO_SKIP; // 0x0
	private StackFrame[] frames; // 0x10
	private Boolean debug_info; // 0x18

	// Properties
	public virtual Int32 FrameCount { get; }

	// Methods
	// Offset : 0x6bd1fc
	public Void .ctor() { }
	// Offset : 0x6bd4b0
	public Void .ctor(Int32 skipFrames, Boolean fNeedFileInfo) { }
	// Offset : 0x6bd4f0
	public Void .ctor(Exception e, Boolean fNeedFileInfo) { }
	// Offset : 0x6bd500
	public Void .ctor(Exception e, Int32 skipFrames, Boolean fNeedFileInfo) { }
	// Offset : 0x6bd50c
	internal Void .ctor(Exception e, Int32 skipFrames, Boolean fNeedFileInfo, Boolean returnNativeFrames) { }
	// Offset : 0x6bd22c
	private Void init_frames(Int32 skipFrames, Boolean fNeedFileInfo) { }
	// Offset : 0x6bd8dc
	private static StackFrame[] get_trace(Exception e, Int32 skipFrames, Boolean fNeedFileInfo) { }
	// Offset : 0x6bd8e4
	public virtual Int32 get_FrameCount() { }
	// Offset : 0x6bd8fc
	public virtual StackFrame GetFrame(Int32 index) { }
	// Offset : 0x6bd990
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public abstract class Calendar : ICloneable
{
	// Fields
	private Boolean m_isReadOnly; // 0x10
	internal Int32 twoDigitYearMax; // 0x14
	internal String[] M_AbbrEraNames; // 0x18
	internal String[] M_EraNames; // 0x20

	// Properties
	public abstract Int32[] Eras { get; }
	internal String[] EraNames { get; }

	// Methods
	// Offset : 0x6c6ac4
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Int32[] get_Eras() { }
	// Offset : 0x6c6af0
	public virtual Object Clone() { }
	// Offset : 0x6c6bcc
	internal Void CheckReadOnly() { }
	// Offset : 0x
	public abstract Int32 GetDayOfMonth(DateTime time) { }
	// Offset : 0x
	public abstract DayOfWeek GetDayOfWeek(DateTime time) { }
	// Offset : 0x
	public abstract Int32 GetEra(DateTime time) { }
	// Offset : 0x
	public abstract Int32 GetMonth(DateTime time) { }
	// Offset : 0x
	public abstract Int32 GetYear(DateTime time) { }
	// Offset : 0x6c6c58
	internal String[] get_EraNames() { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
internal class CCMath
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6c66c8
	public static Int32 div(Int32 x, Int32 y) { }
	// Offset : 0x6c6590
	public static Int32 mod(Int32 x, Int32 y) { }
	// Offset : 0x6c6778
	public static Int32 div_mod(out Int32 remainder, Int32 x, Int32 y) { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
internal class CCFixed
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6c6524
	public static Int32 FromDateTime(DateTime time) { }
	// Offset : 0x6c6574
	public static DayOfWeek day_of_week(Int32 date) { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
internal class CCGregorianCalendar
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6c65a8
	public static Boolean is_leap_year(Int32 year) { }
	// Offset : 0x6c6600
	public static Int32 fixed_from_dmy(Int32 day, Int32 month, Int32 year) { }
	// Offset : 0x6c66dc
	public static Int32 year_from_fixed(Int32 date) { }
	// Offset : 0x6c6798
	public static Void my_from_fixed(out Int32 month, out Int32 year, Int32 date) { }
	// Offset : 0x6c68d4
	public static Void dmy_from_fixed(out Int32 day, out Int32 month, out Int32 year, Int32 date) { }
	// Offset : 0x6c6930
	public static Int32 month_from_fixed(Int32 date) { }
	// Offset : 0x6c6968
	public static Int32 day_from_fixed(Int32 date) { }
	// Offset : 0x6c69b4
	public static Int32 GetDayOfMonth(DateTime time) { }
	// Offset : 0x6c6a08
	public static Int32 GetMonth(DateTime time) { }
	// Offset : 0x6c6a70
	public static Int32 GetYear(DateTime time) { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
public sealed class CharUnicodeInfo
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6c6dbc
	public static UnicodeCategory GetUnicodeCategory(Char ch) { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public class CompareInfo : IDeserializationCallback
{
	// Fields
	private static readonly Boolean useManagedCollation; // 0x0
	private Int32 culture; // 0x10
	private String icu_name; // 0x18
	private Int32 win32LCID; // 0x20
	private String m_name; // 0x28
	private SimpleCollator collator; // 0x30
	private static Hashtable collators; // 0x8
	private static Object monitor; // 0x10

	// Properties
	internal static Boolean UseManagedCollation { get; }
	public Int32 LCID { get; }

	// Methods
	// Offset : 0x6c6e24
	private Void .ctor() { }
	// Offset : 0x6c6e2c
	internal Void .ctor(CultureInfo ci) { }
	// Offset : 0x6c72b4
	private static Void .cctor() { }
	// Offset : 0x6c73b4
	private Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object sender) { }
	// Offset : 0x6c7248
	internal static Boolean get_UseManagedCollation() { }
	// Offset : 0x6c72b0
	private Void construct_compareinfo(String locale) { }
	// Offset : 0x6c74f4
	private Void free_internal_collator() { }
	// Offset : 0x6c74f8
	private Int32 internal_compare(String str1, Int32 offset1, Int32 length1, String str2, Int32 offset2, Int32 length2, CompareOptions options) { }
	// Offset : 0x6c74fc
	private Void assign_sortkey(Object key, String source, CompareOptions options) { }
	// Offset : 0x6c7500
	private Int32 internal_index(String source, Int32 sindex, Int32 count, String value, CompareOptions options, Boolean first) { }
	// Offset : 0x6c7508
	protected override Void Finalize() { }
	// Offset : 0x6c757c
	private Int32 internal_compare_managed(String str1, Int32 offset1, Int32 length1, String str2, Int32 offset2, Int32 length2, CompareOptions options) { }
	// Offset : 0x6c75fc
	private Int32 internal_compare_switch(String str1, Int32 offset1, Int32 length1, String str2, Int32 offset2, Int32 length2, CompareOptions options) { }
	// Offset : 0x6c76fc
	public virtual Int32 Compare(String string1, String string2) { }
	// Offset : 0x6c7758
	public virtual Int32 Compare(String string1, String string2, CompareOptions options) { }
	// Offset : 0x6c788c
	public virtual Int32 Compare(String string1, Int32 offset1, Int32 length1, String string2, Int32 offset2, Int32 length2, CompareOptions options) { }
	// Offset : 0x6c7b0c
	public override Boolean Equals(Object value) { }
	// Offset : 0x6c7bb8
	public override Int32 GetHashCode() { }
	// Offset : 0x6c7bc8
	public virtual SortKey GetSortKey(String source, CompareOptions options) { }
	// Offset : 0x6c7d28
	public virtual Int32 IndexOf(String source, String value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6c7d9c
	private Int32 internal_index_managed(String s1, Int32 sindex, Int32 count, String s2, CompareOptions opt, Boolean first) { }
	// Offset : 0x6c7e4c
	private Int32 internal_index_switch(String s1, Int32 sindex, Int32 count, String s2, CompareOptions opt, Boolean first) { }
	// Offset : 0x6c7f48
	public virtual Int32 IndexOf(String source, String value, Int32 startIndex, Int32 count, CompareOptions options) { }
	// Offset : 0x6c8110
	public virtual Boolean IsPrefix(String source, String prefix, CompareOptions options) { }
	// Offset : 0x6c82e0
	public virtual Boolean IsSuffix(String source, String suffix, CompareOptions options) { }
	// Offset : 0x6c84dc
	public virtual Int32 LastIndexOf(String source, String value, Int32 startIndex, Int32 count) { }
	// Offset : 0x6c8554
	public virtual Int32 LastIndexOf(String source, String value, Int32 startIndex, Int32 count, CompareOptions options) { }
	// Offset : 0x6c870c
	public override String ToString() { }
	// Offset : 0x6c7bc0
	public Int32 get_LCID() { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public enum CompareOptions
{
	// Fields
	public Int32 value__; // 0x10
	public const CompareOptions None = 0; // 0x0
	public const CompareOptions IgnoreCase = 1; // 0x0
	public const CompareOptions IgnoreNonSpace = 2; // 0x0
	public const CompareOptions IgnoreSymbols = 4; // 0x0
	public const CompareOptions IgnoreKanaType = 8; // 0x0
	public const CompareOptions IgnoreWidth = 16; // 0x0
	public const CompareOptions StringSort = 536870912; // 0x0
	public const CompareOptions Ordinal = 1073741824; // 0x0
	public const CompareOptions OrdinalIgnoreCase = 268435456; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public class CultureInfo : ICloneable, IFormatProvider
{
	// Fields
	private const Int32 NumOptionalCalendars; // 0x0
	private const Int32 GregorianTypeMask; // 0x0
	private const Int32 CalendarTypeBits; // 0x0
	private const Int32 InvariantCultureId; // 0x0
	private static CultureInfo invariant_culture_info; // 0x0
	private static Object shared_table_lock; // 0x8
	internal static Int32 BootstrapCultureID; // 0x10
	private Boolean m_isReadOnly; // 0x10
	private Int32 cultureID; // 0x14
	private Int32 parent_lcid; // 0x18
	private Int32 specific_lcid; // 0x1c
	private Int32 datetime_index; // 0x20
	private Int32 number_index; // 0x24
	private Boolean m_useUserOverride; // 0x28
	private NumberFormatInfo numInfo; // 0x30
	private DateTimeFormatInfo dateTimeInfo; // 0x38
	private TextInfo textInfo; // 0x40
	private String m_name; // 0x48
	private String displayname; // 0x50
	private String englishname; // 0x58
	private String nativename; // 0x60
	private String iso3lang; // 0x68
	private String iso2lang; // 0x70
	private String icu_name; // 0x78
	private String win3lang; // 0x80
	private String territory; // 0x88
	private CompareInfo compareInfo; // 0x90
	private readonly Int32* calendar_data; // 0x98
	private readonly Void* textinfo_data; // 0xa0
	private Calendar[] optional_calendars; // 0xa8
	private CultureInfo parent_culture; // 0xb0
	private Int32 m_dataItem; // 0xb8
	private Calendar calendar; // 0xc0
	private Boolean constructed; // 0xc8
	internal Byte[] cached_serialized_form; // 0xd0
	private static readonly String MSG_READONLY; // 0x18
	private static Hashtable shared_by_number; // 0x20
	private static Hashtable shared_by_name; // 0x28
	private static Dictionary`2 <>f__switch$map19; // 0x30
	private static Dictionary`2 <>f__switch$map1A; // 0x38

	// Properties
	public static CultureInfo InvariantCulture { get; }
	public static CultureInfo CurrentCulture { get; }
	public static CultureInfo CurrentUICulture { get; }
	internal String Territory { get; }
	public virtual Int32 LCID { get; }
	public virtual String Name { get; }
	public virtual CultureInfo Parent { get; }
	public virtual TextInfo TextInfo { get; }
	internal String IcuName { get; }
	public virtual CompareInfo CompareInfo { get; }
	public virtual Boolean IsNeutralCulture { get; }
	public virtual NumberFormatInfo NumberFormat { get; set; }
	public virtual DateTimeFormatInfo DateTimeFormat { get; set; }
	public Boolean IsReadOnly { get; }

	// Methods
	// Offset : 0x73d3bc
	public Void .ctor(Int32 culture) { }
	// Offset : 0x73d3c8
	public Void .ctor(Int32 culture, Boolean useUserOverride) { }
	// Offset : 0x73d3d4
	private Void .ctor(Int32 culture, Boolean useUserOverride, Boolean read_only) { }
	// Offset : 0x73d7c0
	public Void .ctor(String name) { }
	// Offset : 0x73d7cc
	public Void .ctor(String name, Boolean useUserOverride) { }
	// Offset : 0x73d7d8
	private Void .ctor(String name, Boolean useUserOverride, Boolean read_only) { }
	// Offset : 0x73db54
	private Void .ctor() { }
	// Offset : 0x73db80
	private static Void .cctor() { }
	// Offset : 0x73dc28
	public static CultureInfo get_InvariantCulture() { }
	// Offset : 0x73dc98
	public static CultureInfo get_CurrentCulture() { }
	// Offset : 0x73dd10
	public static CultureInfo get_CurrentUICulture() { }
	// Offset : 0x73dd88
	internal static CultureInfo ConstructCurrentCulture() { }
	// Offset : 0x73ded0
	internal static CultureInfo ConstructCurrentUICulture() { }
	// Offset : 0x73df2c
	internal String get_Territory() { }
	// Offset : 0x73df34
	public virtual Int32 get_LCID() { }
	// Offset : 0x73df3c
	public virtual String get_Name() { }
	// Offset : 0x73df44
	public virtual CultureInfo get_Parent() { }
	// Offset : 0x73e05c
	public virtual TextInfo get_TextInfo() { }
	// Offset : 0x73e1b4
	internal String get_IcuName() { }
	// Offset : 0x73e1f0
	public virtual Object Clone() { }
	// Offset : 0x73e654
	public override Boolean Equals(Object value) { }
	// Offset : 0x73e700
	public override Int32 GetHashCode() { }
	// Offset : 0x73e708
	public override String ToString() { }
	// Offset : 0x73e710
	public virtual CompareInfo get_CompareInfo() { }
	// Offset : 0x73e818
	public virtual Boolean get_IsNeutralCulture() { }
	// Offset : 0x73e880
	internal Void CheckNeutral() { }
	// Offset : 0x73e978
	public virtual NumberFormatInfo get_NumberFormat() { }
	// Offset : 0x73eab0
	public virtual Void set_NumberFormat(NumberFormatInfo value) { }
	// Offset : 0x73ebcc
	public virtual DateTimeFormatInfo get_DateTimeFormat() { }
	// Offset : 0x73f028
	public virtual Void set_DateTimeFormat(DateTimeFormatInfo value) { }
	// Offset : 0x73f144
	public Boolean get_IsReadOnly() { }
	// Offset : 0x73f14c
	public virtual Object GetFormat(Type formatType) { }
	// Offset : 0x73e030
	private Void Construct() { }
	// Offset : 0x73d970
	private Boolean ConstructInternalLocaleFromName(String locale) { }
	// Offset : 0x73d7bc
	private Boolean ConstructInternalLocaleFromLcid(Int32 lcid) { }
	// Offset : 0x73de6c
	private static Boolean ConstructInternalLocaleFromCurrentLocale(CultureInfo ci) { }
	// Offset : 0x73f264
	private Boolean construct_internal_locale_from_lcid(Int32 lcid) { }
	// Offset : 0x73f268
	private Boolean construct_internal_locale_from_name(String name) { }
	// Offset : 0x73f26c
	private static Boolean construct_internal_locale_from_current_locale(CultureInfo ci) { }
	// Offset : 0x73ef34
	private Void construct_datetime_format() { }
	// Offset : 0x73eaac
	private Void construct_number_format() { }
	// Offset : 0x73d570
	private Void ConstructInvariant(Boolean read_only) { }
	// Offset : 0x73e12c
	private TextInfo CreateTextInfo(Boolean readOnly) { }
	// Offset : 0x73f5ac
	private static Void insert_into_shared_tables(CultureInfo c) { }
	// Offset : 0x73f768
	public static CultureInfo GetCultureInfo(Int32 culture) { }
	// Offset : 0x73f964
	public static CultureInfo GetCultureInfo(String name) { }
	// Offset : 0x73fb80
	internal static CultureInfo CreateCulture(String name, Boolean reference) { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
internal enum DateTimeFormatFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const DateTimeFormatFlags Unused = 0; // 0x0
	public const DateTimeFormatFlags But = 1; // 0x0
	public const DateTimeFormatFlags Serialized = 2; // 0x0
	public const DateTimeFormatFlags By = 3; // 0x0
	public const DateTimeFormatFlags Microsoft = 4; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider
{
	// Fields
	private const String _RoundtripPattern; // 0x0
	private static readonly String MSG_READONLY; // 0x0
	private static readonly String MSG_ARRAYSIZE_MONTH; // 0x8
	private static readonly String MSG_ARRAYSIZE_DAY; // 0x10
	private static readonly String[] INVARIANT_ABBREVIATED_DAY_NAMES; // 0x18
	private static readonly String[] INVARIANT_DAY_NAMES; // 0x20
	private static readonly String[] INVARIANT_ABBREVIATED_MONTH_NAMES; // 0x28
	private static readonly String[] INVARIANT_MONTH_NAMES; // 0x30
	private static readonly String[] INVARIANT_SHORT_DAY_NAMES; // 0x38
	private static DateTimeFormatInfo theInvariantDateTimeFormatInfo; // 0x40
	private Boolean m_isReadOnly; // 0x10
	private String amDesignator; // 0x18
	private String pmDesignator; // 0x20
	private String dateSeparator; // 0x28
	private String timeSeparator; // 0x30
	private String shortDatePattern; // 0x38
	private String longDatePattern; // 0x40
	private String shortTimePattern; // 0x48
	private String longTimePattern; // 0x50
	private String monthDayPattern; // 0x58
	private String yearMonthPattern; // 0x60
	private String fullDateTimePattern; // 0x68
	private String _RFC1123Pattern; // 0x70
	private String _SortableDateTimePattern; // 0x78
	private String _UniversalSortableDateTimePattern; // 0x80
	private Int32 firstDayOfWeek; // 0x88
	private Calendar calendar; // 0x90
	private Int32 calendarWeekRule; // 0x98
	private String[] abbreviatedDayNames; // 0xa0
	private String[] dayNames; // 0xa8
	private String[] monthNames; // 0xb0
	private String[] abbreviatedMonthNames; // 0xb8
	private String[] allShortDatePatterns; // 0xc0
	private String[] allLongDatePatterns; // 0xc8
	private String[] allShortTimePatterns; // 0xd0
	private String[] allLongTimePatterns; // 0xd8
	private String[] monthDayPatterns; // 0xe0
	private String[] yearMonthPatterns; // 0xe8
	private String[] shortDayNames; // 0xf0
	private Int32 nDataItem; // 0xf8
	private Boolean m_useUserOverride; // 0xfc
	private Boolean m_isDefaultCalendar; // 0xfd
	private Int32 CultureID; // 0x100
	private Boolean bUseCalendarInfo; // 0x104
	private String generalShortTimePattern; // 0x108
	private String generalLongTimePattern; // 0x110
	private String[] m_eraNames; // 0x118
	private String[] m_abbrevEraNames; // 0x120
	private String[] m_abbrevEnglishEraNames; // 0x128
	private String[] m_dateWords; // 0x130
	private Int32[] optionalCalendars; // 0x138
	private String[] m_superShortDayNames; // 0x140
	private String[] genitiveMonthNames; // 0x148
	private String[] m_genitiveAbbreviatedMonthNames; // 0x150
	private String[] leapYearMonthNames; // 0x158
	private DateTimeFormatFlags formatFlags; // 0x160
	private String m_name; // 0x168
	private String[] all_date_time_patterns; // 0x170

	// Properties
	public Boolean IsReadOnly { get; }
	internal String[] RawAbbreviatedDayNames { get; }
	internal String[] RawAbbreviatedMonthNames { get; }
	internal String[] RawDayNames { get; }
	internal String[] RawMonthNames { get; }
	public String AMDesignator { get; }
	public String PMDesignator { get; }
	public String DateSeparator { get; }
	public String TimeSeparator { get; }
	public String LongDatePattern { get; }
	public String ShortDatePattern { get; }
	public String ShortTimePattern { get; }
	public String LongTimePattern { get; }
	public String MonthDayPattern { get; }
	public String YearMonthPattern { get; }
	public String FullDateTimePattern { get; }
	public static DateTimeFormatInfo CurrentInfo { get; }
	public static DateTimeFormatInfo InvariantInfo { get; }
	public Calendar Calendar { get; set; }
	public String RFC1123Pattern { get; }
	internal String RoundtripPattern { get; }
	public String SortableDateTimePattern { get; }
	public String UniversalSortableDateTimePattern { get; }

	// Methods
	// Offset : 0x73ed54
	internal Void .ctor(Boolean read_only) { }
	// Offset : 0x73fc1c
	public Void .ctor() { }
	// Offset : 0x73fc24
	private static Void .cctor() { }
	// Offset : 0x740ce8
	public static DateTimeFormatInfo GetInstance(IFormatProvider provider) { }
	// Offset : 0x740f44
	public Boolean get_IsReadOnly() { }
	// Offset : 0x740f4c
	public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi) { }
	// Offset : 0x73e594
	public Object Clone() { }
	// Offset : 0x741018
	public Object GetFormat(Type formatType) { }
	// Offset : 0x741048
	public String GetAbbreviatedMonthName(Int32 month) { }
	// Offset : 0x741110
	public String GetEraName(Int32 era) { }
	// Offset : 0x741248
	public String GetMonthName(Int32 month) { }
	// Offset : 0x741310
	internal String[] get_RawAbbreviatedDayNames() { }
	// Offset : 0x741318
	internal String[] get_RawAbbreviatedMonthNames() { }
	// Offset : 0x741320
	internal String[] get_RawDayNames() { }
	// Offset : 0x741328
	internal String[] get_RawMonthNames() { }
	// Offset : 0x741330
	public String get_AMDesignator() { }
	// Offset : 0x741338
	public String get_PMDesignator() { }
	// Offset : 0x741340
	public String get_DateSeparator() { }
	// Offset : 0x741348
	public String get_TimeSeparator() { }
	// Offset : 0x741350
	public String get_LongDatePattern() { }
	// Offset : 0x741358
	public String get_ShortDatePattern() { }
	// Offset : 0x741360
	public String get_ShortTimePattern() { }
	// Offset : 0x741368
	public String get_LongTimePattern() { }
	// Offset : 0x741370
	public String get_MonthDayPattern() { }
	// Offset : 0x741378
	public String get_YearMonthPattern() { }
	// Offset : 0x741380
	public String get_FullDateTimePattern() { }
	// Offset : 0x740e94
	public static DateTimeFormatInfo get_CurrentInfo() { }
	// Offset : 0x73f308
	public static DateTimeFormatInfo get_InvariantInfo() { }
	// Offset : 0x7417e8
	public Calendar get_Calendar() { }
	// Offset : 0x73ef38
	public Void set_Calendar(Calendar value) { }
	// Offset : 0x7417f0
	public String get_RFC1123Pattern() { }
	// Offset : 0x7417f8
	internal String get_RoundtripPattern() { }
	// Offset : 0x741840
	public String get_SortableDateTimePattern() { }
	// Offset : 0x741848
	public String get_UniversalSortableDateTimePattern() { }
	// Offset : 0x741850
	internal String[] GetAllDateTimePatternsInternal() { }
	// Offset : 0x74187c
	private Void FillAllDateTimePatterns() { }
	// Offset : 0x741e64
	internal String[] GetAllRawDateTimePatterns(Char format) { }
	// Offset : 0x742454
	public String GetDayName(DayOfWeek dayofweek) { }
	// Offset : 0x742518
	public String GetAbbreviatedDayName(DayOfWeek dayofweek) { }
	// Offset : 0x741414
	private Void FillInvariantPatterns() { }
	// Offset : 0x742280
	private String[] PopulateCombinedList(String[] dates, String[] times) { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public enum DateTimeStyles
{
	// Fields
	public Int32 value__; // 0x10
	public const DateTimeStyles None = 0; // 0x0
	public const DateTimeStyles AllowLeadingWhite = 1; // 0x0
	public const DateTimeStyles AllowTrailingWhite = 2; // 0x0
	public const DateTimeStyles AllowInnerWhite = 4; // 0x0
	public const DateTimeStyles AllowWhiteSpaces = 7; // 0x0
	public const DateTimeStyles NoCurrentDateDefault = 8; // 0x0
	public const DateTimeStyles AdjustToUniversal = 16; // 0x0
	public const DateTimeStyles AssumeLocal = 32; // 0x0
	public const DateTimeStyles AssumeUniversal = 64; // 0x0
	public const DateTimeStyles RoundtripKind = 128; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public class DaylightTime
{
	// Fields
	private DateTime m_start; // 0x10
	private DateTime m_end; // 0x20
	private TimeSpan m_delta; // 0x30

	// Properties
	public DateTime Start { get; }
	public DateTime End { get; }
	public TimeSpan Delta { get; }

	// Methods
	// Offset : 0x7425dc
	public Void .ctor(DateTime start, DateTime end, TimeSpan delta) { }
	// Offset : 0x742630
	public DateTime get_Start() { }
	// Offset : 0x74263c
	public DateTime get_End() { }
	// Offset : 0x742648
	public TimeSpan get_Delta() { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public class GregorianCalendar : Calendar
{
	// Fields
	internal GregorianCalendarTypes m_type; // 0x28

	// Properties
	public override Int32[] Eras { get; }
	public virtual GregorianCalendarTypes CalendarType { set; }

	// Methods
	// Offset : 0x742650
	public Void .ctor(GregorianCalendarTypes type) { }
	// Offset : 0x73fc14
	public Void .ctor() { }
	// Offset : 0x7427c8
	public override Int32[] get_Eras() { }
	// Offset : 0x742848
	public virtual Void set_CalendarType(GregorianCalendarTypes value) { }
	// Offset : 0x742874
	public override Int32 GetDayOfMonth(DateTime time) { }
	// Offset : 0x742884
	public override DayOfWeek GetDayOfWeek(DateTime time) { }
	// Offset : 0x7428a8
	public override Int32 GetEra(DateTime time) { }
	// Offset : 0x7428b0
	public override Int32 GetMonth(DateTime time) { }
	// Offset : 0x7428c0
	public override Int32 GetYear(DateTime time) { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public enum GregorianCalendarTypes
{
	// Fields
	public Int32 value__; // 0x10
	public const GregorianCalendarTypes Localized = 1; // 0x0
	public const GregorianCalendarTypes USEnglish = 2; // 0x0
	public const GregorianCalendarTypes MiddleEastFrench = 9; // 0x0
	public const GregorianCalendarTypes Arabic = 10; // 0x0
	public const GregorianCalendarTypes TransliteratedEnglish = 11; // 0x0
	public const GregorianCalendarTypes TransliteratedFrench = 12; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public sealed class NumberFormatInfo : ICloneable, IFormatProvider
{
	// Fields
	private Boolean isReadOnly; // 0x10
	private String decimalFormats; // 0x18
	private String currencyFormats; // 0x20
	private String percentFormats; // 0x28
	private String digitPattern; // 0x30
	private String zeroPattern; // 0x38
	private Int32 currencyDecimalDigits; // 0x40
	private String currencyDecimalSeparator; // 0x48
	private String currencyGroupSeparator; // 0x50
	private Int32[] currencyGroupSizes; // 0x58
	private Int32 currencyNegativePattern; // 0x60
	private Int32 currencyPositivePattern; // 0x64
	private String currencySymbol; // 0x68
	private String nanSymbol; // 0x70
	private String negativeInfinitySymbol; // 0x78
	private String negativeSign; // 0x80
	private Int32 numberDecimalDigits; // 0x88
	private String numberDecimalSeparator; // 0x90
	private String numberGroupSeparator; // 0x98
	private Int32[] numberGroupSizes; // 0xa0
	private Int32 numberNegativePattern; // 0xa8
	private Int32 percentDecimalDigits; // 0xac
	private String percentDecimalSeparator; // 0xb0
	private String percentGroupSeparator; // 0xb8
	private Int32[] percentGroupSizes; // 0xc0
	private Int32 percentNegativePattern; // 0xc8
	private Int32 percentPositivePattern; // 0xcc
	private String percentSymbol; // 0xd0
	private String perMilleSymbol; // 0xd8
	private String positiveInfinitySymbol; // 0xe0
	private String positiveSign; // 0xe8
	private String ansiCurrencySymbol; // 0xf0
	private Int32 m_dataItem; // 0xf8
	private Boolean m_useUserOverride; // 0xfc
	private Boolean validForParseAsNumber; // 0xfd
	private Boolean validForParseAsCurrency; // 0xfe
	private String[] nativeDigits; // 0x100
	private Int32 digitSubstitution; // 0x108
	private static readonly String[] invariantNativeDigits; // 0x0

	// Properties
	public Int32 CurrencyDecimalDigits { get; }
	public String CurrencyDecimalSeparator { get; }
	public String CurrencyGroupSeparator { get; }
	internal Int32[] RawCurrencyGroupSizes { get; }
	public Int32 CurrencyNegativePattern { get; }
	public Int32 CurrencyPositivePattern { get; }
	public String CurrencySymbol { get; }
	public static NumberFormatInfo CurrentInfo { get; }
	public static NumberFormatInfo InvariantInfo { get; }
	public String NaNSymbol { get; }
	public String NegativeInfinitySymbol { get; }
	public String NegativeSign { get; }
	public Int32 NumberDecimalDigits { get; }
	public String NumberDecimalSeparator { get; }
	public String NumberGroupSeparator { get; }
	internal Int32[] RawNumberGroupSizes { get; }
	public Int32 NumberNegativePattern { get; set; }
	public Int32 PercentDecimalDigits { get; }
	public String PercentDecimalSeparator { get; }
	public String PercentGroupSeparator { get; }
	internal Int32[] RawPercentGroupSizes { get; }
	public Int32 PercentNegativePattern { get; }
	public Int32 PercentPositivePattern { get; }
	public String PercentSymbol { get; }
	public String PerMilleSymbol { get; }
	public String PositiveInfinitySymbol { get; }
	public String PositiveSign { get; }

	// Methods
	// Offset : 0x7428d0
	internal Void .ctor(Int32 lcid, Boolean read_only) { }
	// Offset : 0x73eaa0
	internal Void .ctor(Boolean read_only) { }
	// Offset : 0x742b1c
	public Void .ctor() { }
	// Offset : 0x742b28
	private static Void .cctor() { }
	// Offset : 0x742edc
	public Int32 get_CurrencyDecimalDigits() { }
	// Offset : 0x742ee4
	public String get_CurrencyDecimalSeparator() { }
	// Offset : 0x742eec
	public String get_CurrencyGroupSeparator() { }
	// Offset : 0x742ef4
	internal Int32[] get_RawCurrencyGroupSizes() { }
	// Offset : 0x742efc
	public Int32 get_CurrencyNegativePattern() { }
	// Offset : 0x742f04
	public Int32 get_CurrencyPositivePattern() { }
	// Offset : 0x742f0c
	public String get_CurrencySymbol() { }
	// Offset : 0x742f14
	public static NumberFormatInfo get_CurrentInfo() { }
	// Offset : 0x73f270
	public static NumberFormatInfo get_InvariantInfo() { }
	// Offset : 0x7430ac
	public String get_NaNSymbol() { }
	// Offset : 0x7430b4
	public String get_NegativeInfinitySymbol() { }
	// Offset : 0x7430bc
	public String get_NegativeSign() { }
	// Offset : 0x7430c4
	public Int32 get_NumberDecimalDigits() { }
	// Offset : 0x7430cc
	public String get_NumberDecimalSeparator() { }
	// Offset : 0x7430d4
	public String get_NumberGroupSeparator() { }
	// Offset : 0x7430dc
	internal Int32[] get_RawNumberGroupSizes() { }
	// Offset : 0x7430e4
	public Int32 get_NumberNegativePattern() { }
	// Offset : 0x742fdc
	public Void set_NumberNegativePattern(Int32 value) { }
	// Offset : 0x7430ec
	public Int32 get_PercentDecimalDigits() { }
	// Offset : 0x7430f4
	public String get_PercentDecimalSeparator() { }
	// Offset : 0x7430fc
	public String get_PercentGroupSeparator() { }
	// Offset : 0x743104
	internal Int32[] get_RawPercentGroupSizes() { }
	// Offset : 0x74310c
	public Int32 get_PercentNegativePattern() { }
	// Offset : 0x743114
	public Int32 get_PercentPositivePattern() { }
	// Offset : 0x74311c
	public String get_PercentSymbol() { }
	// Offset : 0x743124
	public String get_PerMilleSymbol() { }
	// Offset : 0x74312c
	public String get_PositiveInfinitySymbol() { }
	// Offset : 0x743134
	public String get_PositiveSign() { }
	// Offset : 0x74313c
	public Object GetFormat(Type formatType) { }
	// Offset : 0x73e4d4
	public Object Clone() { }
	// Offset : 0x7431c8
	public static NumberFormatInfo GetInstance(IFormatProvider formatProvider) { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public enum NumberStyles
{
	// Fields
	public Int32 value__; // 0x10
	public const NumberStyles None = 0; // 0x0
	public const NumberStyles AllowLeadingWhite = 1; // 0x0
	public const NumberStyles AllowTrailingWhite = 2; // 0x0
	public const NumberStyles AllowLeadingSign = 4; // 0x0
	public const NumberStyles AllowTrailingSign = 8; // 0x0
	public const NumberStyles AllowParentheses = 16; // 0x0
	public const NumberStyles AllowDecimalPoint = 32; // 0x0
	public const NumberStyles AllowThousands = 64; // 0x0
	public const NumberStyles AllowExponent = 128; // 0x0
	public const NumberStyles AllowCurrencySymbol = 256; // 0x0
	public const NumberStyles AllowHexSpecifier = 512; // 0x0
	public const NumberStyles Integer = 7; // 0x0
	public const NumberStyles HexNumber = 515; // 0x0
	public const NumberStyles Number = 111; // 0x0
	public const NumberStyles Float = 167; // 0x0
	public const NumberStyles Currency = 383; // 0x0
	public const NumberStyles Any = 511; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public class RegionInfo
{
	// Fields
	private static RegionInfo currentRegion; // 0x0
	private Int32 lcid; // 0x10
	private Int32 regionId; // 0x14
	private String iso2Name; // 0x18
	private String iso3Name; // 0x20
	private String win3Name; // 0x28
	private String englishName; // 0x30
	private String currencySymbol; // 0x38
	private String isoCurrencySymbol; // 0x40
	private String currencyEnglishName; // 0x48
	private static Dictionary`2 <>f__switch$map1B; // 0x8

	// Properties
	public static RegionInfo CurrentRegion { get; }
	public virtual String CurrencyEnglishName { get; }
	public virtual String CurrencySymbol { get; }
	public virtual String DisplayName { get; }
	public virtual String EnglishName { get; }
	public virtual Int32 GeoId { get; }
	public virtual Boolean IsMetric { get; }
	public virtual String ISOCurrencySymbol { get; }
	public virtual String NativeName { get; }
	public virtual String CurrencyNativeName { get; }
	public virtual String Name { get; }
	public virtual String ThreeLetterISORegionName { get; }
	public virtual String ThreeLetterWindowsRegionName { get; }
	public virtual String TwoLetterISORegionName { get; }

	// Methods
	// Offset : 0x743374
	public Void .ctor(Int32 culture) { }
	// Offset : 0x7435d8
	public Void .ctor(String name) { }
	// Offset : 0x743754
	public static RegionInfo get_CurrentRegion() { }
	// Offset : 0x7434ac
	private Boolean GetByTerritory(CultureInfo ci) { }
	// Offset : 0x743750
	private Boolean construct_internal_region_from_name(String name) { }
	// Offset : 0x74385c
	public virtual String get_CurrencyEnglishName() { }
	// Offset : 0x743864
	public virtual String get_CurrencySymbol() { }
	// Offset : 0x74386c
	public virtual String get_DisplayName() { }
	// Offset : 0x743874
	public virtual String get_EnglishName() { }
	// Offset : 0x74387c
	public virtual Int32 get_GeoId() { }
	// Offset : 0x743884
	public virtual Boolean get_IsMetric() { }
	// Offset : 0x7439ec
	public virtual String get_ISOCurrencySymbol() { }
	// Offset : 0x7439f4
	public virtual String get_NativeName() { }
	// Offset : 0x743a34
	public virtual String get_CurrencyNativeName() { }
	// Offset : 0x743a9c
	public virtual String get_Name() { }
	// Offset : 0x743aa4
	public virtual String get_ThreeLetterISORegionName() { }
	// Offset : 0x743aac
	public virtual String get_ThreeLetterWindowsRegionName() { }
	// Offset : 0x743ab4
	public virtual String get_TwoLetterISORegionName() { }
	// Offset : 0x743abc
	public override Boolean Equals(Object value) { }
	// Offset : 0x743b58
	public override Int32 GetHashCode() { }
	// Offset : 0x743b6c
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public class TextInfo : ICloneable, IDeserializationCallback
{
	// Fields
	private String m_listSeparator; // 0x10
	private Boolean m_isReadOnly; // 0x18
	private String customCultureName; // 0x20
	private Int32 m_nDataItem; // 0x28
	private Boolean m_useUserOverride; // 0x2c
	private Int32 m_win32LangID; // 0x30
	private readonly CultureInfo ci; // 0x38
	private readonly Boolean handleDotI; // 0x40
	private readonly Data data; // 0x44

	// Properties
	public virtual String ListSeparator { get; }
	public String CultureName { get; }

	// Methods
	// Offset : 0x73f3f0
	internal Void .ctor(CultureInfo ci, Int32 lcid, Void* data, Boolean read_only) { }
	// Offset : 0x74433c
	private Void .ctor(TextInfo textInfo) { }
	// Offset : 0x744480
	private Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object sender) { }
	// Offset : 0x744484
	public virtual String get_ListSeparator() { }
	// Offset : 0x744420
	public String get_CultureName() { }
	// Offset : 0x7444c4
	public override Boolean Equals(Object obj) { }
	// Offset : 0x744580
	public override Int32 GetHashCode() { }
	// Offset : 0x744588
	public override String ToString() { }
	// Offset : 0x74462c
	public virtual Char ToLower(Char c) { }
	// Offset : 0x7447e8
	public virtual Char ToUpper(Char c) { }
	// Offset : 0x7449e8
	public virtual String ToLower(String str) { }
	// Offset : 0x744b9c
	public virtual String ToUpper(String str) { }
	// Offset : 0x744d50
	public virtual Object Clone() { }
}

// Dll : mscorlib.dll
// Namespace: 
private struct Data
{
	// Fields
	public Int32 ansi; // 0x10
	public Int32 ebcdic; // 0x14
	public Int32 mac; // 0x18
	public Int32 oem; // 0x1c
	public Byte list_sep; // 0x20

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Globalization
[Serializable]
public enum UnicodeCategory
{
	// Fields
	public Int32 value__; // 0x10
	public const UnicodeCategory UppercaseLetter = 0; // 0x0
	public const UnicodeCategory LowercaseLetter = 1; // 0x0
	public const UnicodeCategory TitlecaseLetter = 2; // 0x0
	public const UnicodeCategory ModifierLetter = 3; // 0x0
	public const UnicodeCategory OtherLetter = 4; // 0x0
	public const UnicodeCategory NonSpacingMark = 5; // 0x0
	public const UnicodeCategory SpacingCombiningMark = 6; // 0x0
	public const UnicodeCategory EnclosingMark = 7; // 0x0
	public const UnicodeCategory DecimalDigitNumber = 8; // 0x0
	public const UnicodeCategory LetterNumber = 9; // 0x0
	public const UnicodeCategory OtherNumber = 10; // 0x0
	public const UnicodeCategory SpaceSeparator = 11; // 0x0
	public const UnicodeCategory LineSeparator = 12; // 0x0
	public const UnicodeCategory ParagraphSeparator = 13; // 0x0
	public const UnicodeCategory Control = 14; // 0x0
	public const UnicodeCategory Format = 15; // 0x0
	public const UnicodeCategory Surrogate = 16; // 0x0
	public const UnicodeCategory PrivateUse = 17; // 0x0
	public const UnicodeCategory ConnectorPunctuation = 18; // 0x0
	public const UnicodeCategory DashPunctuation = 19; // 0x0
	public const UnicodeCategory OpenPunctuation = 20; // 0x0
	public const UnicodeCategory ClosePunctuation = 21; // 0x0
	public const UnicodeCategory InitialQuotePunctuation = 22; // 0x0
	public const UnicodeCategory FinalQuotePunctuation = 23; // 0x0
	public const UnicodeCategory OtherPunctuation = 24; // 0x0
	public const UnicodeCategory MathSymbol = 25; // 0x0
	public const UnicodeCategory CurrencySymbol = 26; // 0x0
	public const UnicodeCategory ModifierSymbol = 27; // 0x0
	public const UnicodeCategory OtherSymbol = 28; // 0x0
	public const UnicodeCategory OtherNotAssigned = 29; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.IO.IsolatedStorage
[Serializable]
public class IsolatedStorageException : Exception
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7538c0
	public Void .ctor() { }
	// Offset : 0x74fb50
	public Void .ctor(String message) { }
	// Offset : 0x753920
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
public class BinaryReader : IDisposable
{
	// Fields
	private Stream m_stream; // 0x10
	private Encoding m_encoding; // 0x18
	private Byte[] m_buffer; // 0x20
	private Decoder decoder; // 0x28
	private Char[] charBuffer; // 0x30
	private Boolean m_disposed; // 0x38

	// Properties
	public virtual Stream BaseStream { get; }

	// Methods
	// Offset : 0x746fbc
	public Void .ctor(Stream input) { }
	// Offset : 0x74703c
	public Void .ctor(Stream input, Encoding encoding) { }
	// Offset : 0x7471b0
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x7471f4
	public virtual Stream get_BaseStream() { }
	// Offset : 0x7471fc
	public virtual Void Close() { }
	// Offset : 0x74724c
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x7472b0
	protected virtual Void FillBuffer(Int32 numBytes) { }
	// Offset : 0x74753c
	public virtual Int32 Read() { }
	// Offset : 0x74760c
	public virtual Int32 Read(Byte[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x7477e4
	public virtual Int32 Read(Char[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x7479a4
	private Int32 ReadCharBytes(Char[] buffer, Int32 index, Int32 count, out Int32 bytes_read) { }
	// Offset : 0x747b1c
	protected Int32 Read7BitEncodedInt() { }
	// Offset : 0x747c0c
	public virtual Boolean ReadBoolean() { }
	// Offset : 0x747c58
	public virtual Byte ReadByte() { }
	// Offset : 0x747d74
	public virtual Byte[] ReadBytes(Int32 count) { }
	// Offset : 0x747f44
	public virtual Char ReadChar() { }
	// Offset : 0x747fe8
	public virtual Decimal ReadDecimal() { }
	// Offset : 0x74821c
	public virtual Double ReadDouble() { }
	// Offset : 0x748270
	public virtual Int16 ReadInt16() { }
	// Offset : 0x748324
	public virtual Int32 ReadInt32() { }
	// Offset : 0x748440
	public virtual Int64 ReadInt64() { }
	// Offset : 0x74863c
	public virtual SByte ReadSByte() { }
	// Offset : 0x74867c
	public virtual String ReadString() { }
	// Offset : 0x7488f0
	public virtual Single ReadSingle() { }
	// Offset : 0x748944
	public virtual UInt16 ReadUInt16() { }
	// Offset : 0x7489f8
	public virtual UInt32 ReadUInt32() { }
	// Offset : 0x748b14
	public virtual UInt64 ReadUInt64() { }
	// Offset : 0x74742c
	private Void CheckBuffer(Int32 length) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class BinaryWriter : IDisposable
{
	// Fields
	public static readonly BinaryWriter Null; // 0x0
	protected Stream OutStream; // 0x10
	private Encoding m_encoding; // 0x18
	private Byte[] buffer; // 0x20
	private Boolean disposed; // 0x28
	private Byte[] stringBuffer; // 0x30
	private Int32 maxCharsPerRound; // 0x38

	// Properties

	// Methods
	// Offset : 0x748d10
	protected Void .ctor() { }
	// Offset : 0x748f0c
	public Void .ctor(Stream output) { }
	// Offset : 0x748db4
	public Void .ctor(Stream output, Encoding encoding) { }
	// Offset : 0x748f8c
	private static Void .cctor() { }
	// Offset : 0x748fec
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x749030
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x74908c
	public virtual Void Flush() { }
	// Offset : 0x7490d8
	public virtual Void Write(Boolean value) { }
	// Offset : 0x7491f4
	public virtual Void Write(Byte value) { }
	// Offset : 0x7492d4
	public virtual Void Write(Byte[] buffer) { }
	// Offset : 0x7493f0
	public virtual Void Write(Byte[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x749518
	public virtual Void Write(Char ch) { }
	// Offset : 0x749698
	public virtual Void Write(Char[] chars) { }
	// Offset : 0x749810
	public virtual Void Write(Char[] chars, Int32 index, Int32 count) { }
	// Offset : 0x749994
	public virtual Void Write(Decimal value) { }
	// Offset : 0x749c6c
	public virtual Void Write(Double value) { }
	// Offset : 0x749d64
	public virtual Void Write(Int16 value) { }
	// Offset : 0x749eb0
	public virtual Void Write(Int32 value) { }
	// Offset : 0x74a064
	public virtual Void Write(Int64 value) { }
	// Offset : 0x74a1a8
	public virtual Void Write(SByte value) { }
	// Offset : 0x74a2c0
	public virtual Void Write(Single value) { }
	// Offset : 0x74a3b8
	public virtual Void Write(String value) { }
	// Offset : 0x74a678
	public virtual Void Write(UInt16 value) { }
	// Offset : 0x74a7c4
	public virtual Void Write(UInt32 value) { }
	// Offset : 0x74a978
	public virtual Void Write(UInt64 value) { }
	// Offset : 0x74a60c
	protected Void Write7BitEncodedInt(Int32 value) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
public static class Directory
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x74aabc
	public static DirectoryInfo CreateDirectory(String path) { }
	// Offset : 0x74ade8
	private static DirectoryInfo CreateDirectoriesInternal(String path) { }
	// Offset : 0x74b8e4
	public static Void Delete(String path) { }
	// Offset : 0x74bc78
	private static Void RecursiveDelete(String path) { }
	// Offset : 0x74c1a8
	public static Void Delete(String path, Boolean recursive) { }
	// Offset : 0x74c344
	public static Boolean Exists(String path) { }
	// Offset : 0x74c494
	public static String GetCurrentDirectory() { }
	// Offset : 0x74bde0
	public static String[] GetDirectories(String path) { }
	// Offset : 0x74c668
	public static String[] GetDirectories(String path, String searchPattern) { }
	// Offset : 0x74be38
	public static String[] GetFiles(String path) { }
	// Offset : 0x74cba8
	public static String[] GetFiles(String path, String searchPattern) { }
	// Offset : 0x74c1e0
	private static Void CheckPathExceptions(String path) { }
	// Offset : 0x74c674
	private static String[] GetFileSystemEntries(String path, String searchPattern, FileAttributes mask, FileAttributes attrs) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public sealed class DirectoryInfo : FileSystemInfo
{
	// Fields
	private String current; // 0x60
	private String parent; // 0x68

	// Properties
	public override Boolean Exists { get; }
	public DirectoryInfo Parent { get; }

	// Methods
	// Offset : 0x74d2dc
	public Void .ctor(String path) { }
	// Offset : 0x74af48
	internal Void .ctor(String path, Boolean simpleOriginalPath) { }
	// Offset : 0x74d8dc
	private Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x74d5bc
	private Void Initialize() { }
	// Offset : 0x74b094
	public override Boolean get_Exists() { }
	// Offset : 0x74b010
	public DirectoryInfo get_Parent() { }
	// Offset : 0x74b130
	public Void Create() { }
	// Offset : 0x74dac4
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class DirectoryNotFoundException : IOException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x74dacc
	public Void .ctor() { }
	// Offset : 0x74bc70
	public Void .ctor(String message) { }
	// Offset : 0x74db20
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class EndOfStreamException : IOException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7474dc
	public Void .ctor() { }
	// Offset : 0x74db30
	public Void .ctor(String message) { }
	// Offset : 0x74db38
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
public static class File
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x74db40
	public static FileStream Create(String path) { }
	// Offset : 0x74db48
	public static FileStream Create(String path, Int32 bufferSize) { }
	// Offset : 0x74be90
	public static Void Delete(String path) { }
	// Offset : 0x74acfc
	public static Boolean Exists(String path) { }
	// Offset : 0x74dbf8
	public static Void Move(String sourceFileName, String destFileName) { }
	// Offset : 0x74e11c
	public static FileStream Open(String path, FileMode mode) { }
	// Offset : 0x74e1dc
	public static FileStream OpenRead(String path) { }
	// Offset : 0x74e25c
	public static StreamReader OpenText(String path) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public enum FileAccess
{
	// Fields
	public Int32 value__; // 0x10
	public const FileAccess Read = 1; // 0x0
	public const FileAccess Write = 2; // 0x0
	public const FileAccess ReadWrite = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public enum FileAttributes
{
	// Fields
	public Int32 value__; // 0x10
	public const FileAttributes Archive = 32; // 0x0
	public const FileAttributes Compressed = 2048; // 0x0
	public const FileAttributes Device = 64; // 0x0
	public const FileAttributes Directory = 16; // 0x0
	public const FileAttributes Encrypted = 16384; // 0x0
	public const FileAttributes Hidden = 2; // 0x0
	public const FileAttributes Normal = 128; // 0x0
	public const FileAttributes NotContentIndexed = 8192; // 0x0
	public const FileAttributes Offline = 4096; // 0x0
	public const FileAttributes ReadOnly = 1; // 0x0
	public const FileAttributes ReparsePoint = 1024; // 0x0
	public const FileAttributes SparseFile = 512; // 0x0
	public const FileAttributes System = 4; // 0x0
	public const FileAttributes Temporary = 256; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class FileLoadException : IOException
{
	// Fields
	private const Int32 Result; // 0x0
	private String msg; // 0x60
	private String fileName; // 0x68
	private String fusionLog; // 0x70

	// Properties
	public override String Message { get; }

	// Methods
	// Offset : 0x74e344
	public Void .ctor() { }
	// Offset : 0x74e3cc
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x74e4e0
	public override String get_Message() { }
	// Offset : 0x74e4e8
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x74e5b0
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public enum FileMode
{
	// Fields
	public Int32 value__; // 0x10
	public const FileMode CreateNew = 1; // 0x0
	public const FileMode Create = 2; // 0x0
	public const FileMode Open = 3; // 0x0
	public const FileMode OpenOrCreate = 4; // 0x0
	public const FileMode Truncate = 5; // 0x0
	public const FileMode Append = 6; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class FileNotFoundException : IOException
{
	// Fields
	private String fileName; // 0x60
	private String fusionLog; // 0x68

	// Properties
	public override String Message { get; }

	// Methods
	// Offset : 0x74e7b8
	public Void .ctor() { }
	// Offset : 0x74e82c
	public Void .ctor(String message) { }
	// Offset : 0x74e0d8
	public Void .ctor(String message, String fileName) { }
	// Offset : 0x74e860
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x74e940
	public override String get_Message() { }
	// Offset : 0x74ea7c
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x74eb44
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public enum FileOptions
{
	// Fields
	public Int32 value__; // 0x10
	public const FileOptions None = 0; // 0x0
	public const FileOptions Encrypted = 16384; // 0x0
	public const FileOptions DeleteOnClose = 67108864; // 0x0
	public const FileOptions SequentialScan = 134217728; // 0x0
	public const FileOptions RandomAccess = 268435456; // 0x0
	public const FileOptions Asynchronous = 1073741824; // 0x0
	public const FileOptions WriteThrough = 2147483648; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public enum FileShare
{
	// Fields
	public Int32 value__; // 0x10
	public const FileShare None = 0; // 0x0
	public const FileShare Read = 1; // 0x0
	public const FileShare Write = 2; // 0x0
	public const FileShare ReadWrite = 3; // 0x0
	public const FileShare Delete = 4; // 0x0
	public const FileShare Inheritable = 16; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.IO
public class FileStream : Stream
{
	// Fields
	private FileAccess access; // 0x10
	private Boolean owner; // 0x14
	private Boolean async; // 0x15
	private Boolean canseek; // 0x16
	private Int64 append_startpos; // 0x18
	private Boolean anonymous; // 0x20
	private Byte[] buf; // 0x28
	private Int32 buf_size; // 0x30
	private Int32 buf_length; // 0x34
	private Int32 buf_offset; // 0x38
	private Boolean buf_dirty; // 0x3c
	private Int64 buf_start; // 0x40
	private String name; // 0x48
	private IntPtr handle; // 0x50

	// Properties
	public override Boolean CanRead { get; }
	public override Boolean CanWrite { get; }
	public override Boolean CanSeek { get; }
	public override Int64 Length { get; }
	public override Int64 Position { get; set; }

	// Methods
	// Offset : 0x74edc4
	internal Void .ctor(IntPtr handle, FileAccess access, Boolean ownsHandle, Int32 bufferSize, Boolean isAsync, Boolean noBuffering) { }
	// Offset : 0x74f18c
	public Void .ctor(String path, FileMode mode) { }
	// Offset : 0x74fa5c
	public Void .ctor(String path, FileMode mode, FileAccess access) { }
	// Offset : 0x74e1b4
	public Void .ctor(String path, FileMode mode, FileAccess access, FileShare share) { }
	// Offset : 0x74dbd4
	public Void .ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize) { }
	// Offset : 0x74fad0
	internal Void .ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, Boolean isAsync, Boolean anonymous) { }
	// Offset : 0x74f1f8
	internal Void .ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, Boolean anonymous, FileOptions options) { }
	// Offset : 0x74fcc0
	public override Boolean get_CanRead() { }
	// Offset : 0x74fcd4
	public override Boolean get_CanWrite() { }
	// Offset : 0x74fce8
	public override Boolean get_CanSeek() { }
	// Offset : 0x74fcf0
	public override Int64 get_Length() { }
	// Offset : 0x74febc
	public override Int64 get_Position() { }
	// Offset : 0x74ffec
	public override Void set_Position(Int64 value) { }
	// Offset : 0x750174
	public override Int32 ReadByte() { }
	// Offset : 0x7504d4
	public override Void WriteByte(Byte value) { }
	// Offset : 0x7506cc
	public override Int32 Read([In] [Out] Byte[] array, Int32 offset, Int32 count) { }
	// Offset : 0x750990
	private Int32 ReadInternal(Byte[] dest, Int32 offset, Int32 count) { }
	// Offset : 0x750aa0
	public override IAsyncResult BeginRead(Byte[] array, Int32 offset, Int32 numBytes, AsyncCallback userCallback, Object stateObject) { }
	// Offset : 0x751000
	public override Int32 EndRead(IAsyncResult asyncResult) { }
	// Offset : 0x7512f4
	public override Void Write(Byte[] array, Int32 offset, Int32 count) { }
	// Offset : 0x751594
	private Void WriteInternal(Byte[] src, Int32 offset, Int32 count) { }
	// Offset : 0x751798
	public override IAsyncResult BeginWrite(Byte[] array, Int32 offset, Int32 numBytes, AsyncCallback userCallback, Object stateObject) { }
	// Offset : 0x752090
	public override Void EndWrite(IAsyncResult asyncResult) { }
	// Offset : 0x752360
	public override Int64 Seek(Int64 offset, SeekOrigin origin) { }
	// Offset : 0x752608
	public override Void SetLength(Int64 value) { }
	// Offset : 0x7528b8
	public override Void Flush() { }
	// Offset : 0x75298c
	protected override Void Finalize() { }
	// Offset : 0x752a28
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x750a38
	private Int32 ReadSegment(Byte[] dest, Int32 dest_offset, Int32 count) { }
	// Offset : 0x75171c
	private Int32 WriteSegment(Byte[] src, Int32 src_offset, Int32 count) { }
	// Offset : 0x751dfc
	private Void FlushBuffer(Stream st) { }
	// Offset : 0x7506c4
	private Void FlushBuffer() { }
	// Offset : 0x74fea4
	private Void FlushBufferIfDirty() { }
	// Offset : 0x750494
	private Void RefillBuffer() { }
	// Offset : 0x750354
	private Int32 ReadData(IntPtr handle, Byte[] buf, Int32 offset, Int32 count) { }
	// Offset : 0x74f08c
	private Void InitBuffer(Int32 size, Boolean noBuffering) { }
	// Offset : 0x74fc20
	private String GetSecureFileName(String filename) { }
	// Offset : 0x74fb58
	private String GetSecureFileName(String filename, Boolean full) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class ReadDelegate : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x750f3c
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x752c48
	public virtual Int32 Invoke(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x750f4c
	public virtual IAsyncResult BeginInvoke(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object object) { }
	// Offset : 0x7512b8
	public virtual Int32 EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class WriteDelegate : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x751fcc
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x75315c
	public virtual Void Invoke(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x751fdc
	public virtual IAsyncResult BeginInvoke(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object object) { }
	// Offset : 0x752354
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
internal class FileStreamAsyncResult : IAsyncResult
{
	// Fields
	private Object state; // 0x10
	private Boolean completed; // 0x18
	private ManualResetEvent wh; // 0x20
	private AsyncCallback cb; // 0x28
	public Int32 Count; // 0x30
	public Int32 OriginalCount; // 0x34
	public Int32 BytesRead; // 0x38
	private AsyncCallback realcb; // 0x40

	// Properties
	public Object AsyncState { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public Boolean IsCompleted { get; }

	// Methods
	// Offset : 0x751d38
	public Void .ctor(AsyncCallback cb, Object state) { }
	// Offset : 0x75366c
	private static Void CBWrapper(IAsyncResult ares) { }
	// Offset : 0x753760
	public Object get_AsyncState() { }
	// Offset : 0x753768
	public WaitHandle get_AsyncWaitHandle() { }
	// Offset : 0x753770
	public Boolean get_IsCompleted() { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public abstract class FileSystemInfo : MarshalByRefObject, ISerializable
{
	// Fields
	protected String FullPath; // 0x18
	protected String OriginalPath; // 0x20
	internal MonoIOStat stat; // 0x28
	internal Boolean valid; // 0x58

	// Properties
	public abstract Boolean Exists { get; }
	public virtual String FullName { get; }

	// Methods
	// Offset : 0x74d2e4
	protected Void .ctor() { }
	// Offset : 0x74d900
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x753778
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x
	public abstract Boolean get_Exists() { }
	// Offset : 0x753874
	public virtual String get_FullName() { }
	// Offset : 0x74d9d8
	internal Void Refresh(Boolean force) { }
	// Offset : 0x753880
	internal virtual Void InternalRefresh() { }
	// Offset : 0x74d310
	internal Void CheckPath(String path) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class IOException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x74e48c
	public Void .ctor() { }
	// Offset : 0x747424
	public Void .ctor(String message) { }
	// Offset : 0x753884
	public Void .ctor(String message, Exception innerException) { }
	// Offset : 0x74db28
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x75388c
	public Void .ctor(String message, Int32 hresult) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class MemoryStream : Stream
{
	// Fields
	private Boolean canWrite; // 0x10
	private Boolean allowGetBuffer; // 0x11
	private Int32 capacity; // 0x14
	private Int32 length; // 0x18
	private Byte[] internalBuffer; // 0x20
	private Int32 initialIndex; // 0x28
	private Boolean expandable; // 0x2c
	private Boolean streamClosed; // 0x2d
	private Int32 position; // 0x30
	private Int32 dirty_bytes; // 0x34

	// Properties
	public override Boolean CanRead { get; }
	public override Boolean CanSeek { get; }
	public override Boolean CanWrite { get; }
	public virtual Int32 Capacity { set; }
	public override Int64 Length { get; }
	public override Int64 Position { get; set; }

	// Methods
	// Offset : 0x751df4
	public Void .ctor() { }
	// Offset : 0x753928
	public Void .ctor(Int32 capacity) { }
	// Offset : 0x753a14
	public Void .ctor(Byte[] buffer) { }
	// Offset : 0x753aec
	private Void InternalConstructor(Byte[] buffer, Int32 index, Int32 count, Boolean writable, Boolean publicallyVisible) { }
	// Offset : 0x753c44
	private Void CheckIfClosedThrowDisposed() { }
	// Offset : 0x753cd0
	public override Boolean get_CanRead() { }
	// Offset : 0x753ce0
	public override Boolean get_CanSeek() { }
	// Offset : 0x753cf0
	public override Boolean get_CanWrite() { }
	// Offset : 0x753d10
	public virtual Void set_Capacity(Int32 value) { }
	// Offset : 0x754020
	public override Int64 get_Length() { }
	// Offset : 0x754050
	public override Int64 get_Position() { }
	// Offset : 0x754080
	public override Void set_Position(Int64 value) { }
	// Offset : 0x754164
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x754170
	public override Void Flush() { }
	// Offset : 0x754174
	public virtual Byte[] GetBuffer() { }
	// Offset : 0x7541f8
	public override Int32 Read([In] [Out] Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x75436c
	public override Int32 ReadByte() { }
	// Offset : 0x7543e8
	public override Int64 Seek(Int64 offset, SeekOrigin loc) { }
	// Offset : 0x7545a8
	private Int32 CalculateNewCapacity(Int32 minimum) { }
	// Offset : 0x7545c8
	private Void Expand(Int32 newSize) { }
	// Offset : 0x754660
	public override Void SetLength(Int64 value) { }
	// Offset : 0x7547dc
	public virtual Byte[] ToArray() { }
	// Offset : 0x754870
	public override Void Write(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x754a18
	public override Void WriteByte(Byte value) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
internal enum MonoFileType
{
	// Fields
	public Int32 value__; // 0x10
	public const MonoFileType Unknown = 0; // 0x0
	public const MonoFileType Disk = 1; // 0x0
	public const MonoFileType Char = 2; // 0x0
	public const MonoFileType Pipe = 3; // 0x0
	public const MonoFileType Remote = 32768; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.IO
internal sealed class MonoIO
{
	// Fields
	public static readonly FileAttributes InvalidFileAttributes; // 0x0
	public static readonly IntPtr InvalidHandle; // 0x8

	// Properties
	public static IntPtr ConsoleOutput { get; }
	public static IntPtr ConsoleInput { get; }
	public static IntPtr ConsoleError { get; }
	public static Char VolumeSeparatorChar { get; }
	public static Char DirectorySeparatorChar { get; }
	public static Char AltDirectorySeparatorChar { get; }
	public static Char PathSeparator { get; }

	// Methods
	// Offset : 0x754b20
	private static Void .cctor() { }
	// Offset : 0x74c544
	public static Exception GetException(MonoIOError error) { }
	// Offset : 0x74b13c
	public static Exception GetException(String path, MonoIOError error) { }
	// Offset : 0x74b138
	public static Boolean CreateDirectory(String path, out MonoIOError error) { }
	// Offset : 0x74bc6c
	public static Boolean RemoveDirectory(String path, out MonoIOError error) { }
	// Offset : 0x74d2d8
	public static String[] GetFileSystemEntries(String path, String path_with_pattern, Int32 attrs, Int32 mask, out MonoIOError error) { }
	// Offset : 0x74c540
	public static String GetCurrentDirectory(out MonoIOError error) { }
	// Offset : 0x74e118
	public static Boolean MoveFile(String path, String dest, out MonoIOError error) { }
	// Offset : 0x74bc68
	public static Boolean DeleteFile(String path, out MonoIOError error) { }
	// Offset : 0x754b94
	public static FileAttributes GetFileAttributes(String path, out MonoIOError error) { }
	// Offset : 0x74f088
	public static MonoFileType GetFileType(IntPtr handle, out MonoIOError error) { }
	// Offset : 0x74e04c
	public static Boolean Exists(String path, out MonoIOError error) { }
	// Offset : 0x74d23c
	public static Boolean ExistsFile(String path, out MonoIOError error) { }
	// Offset : 0x74c3cc
	public static Boolean ExistsDirectory(String path, out MonoIOError error) { }
	// Offset : 0x74bbd0
	public static Boolean ExistsSymlink(String path, out MonoIOError error) { }
	// Offset : 0x75387c
	public static Boolean GetFileStat(String path, out MonoIOStat stat, out MonoIOError error) { }
	// Offset : 0x74fcbc
	public static IntPtr Open(String filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error) { }
	// Offset : 0x752c40
	public static Boolean Close(IntPtr handle, out MonoIOError error) { }
	// Offset : 0x752c44
	public static Int32 Read(IntPtr handle, Byte[] dest, Int32 dest_offset, Int32 count, out MonoIOError error) { }
	// Offset : 0x751718
	public static Int32 Write(IntPtr handle, [In] Byte[] src, Int32 src_offset, Int32 count, out MonoIOError error) { }
	// Offset : 0x74f188
	public static Int64 Seek(IntPtr handle, Int64 offset, SeekOrigin origin, out MonoIOError error) { }
	// Offset : 0x74feb8
	public static Int64 GetLength(IntPtr handle, out MonoIOError error) { }
	// Offset : 0x7528b4
	public static Boolean SetLength(IntPtr handle, Int64 length, out MonoIOError error) { }
	// Offset : 0x754b98
	public static IntPtr get_ConsoleOutput() { }
	// Offset : 0x754b9c
	public static IntPtr get_ConsoleInput() { }
	// Offset : 0x754ba0
	public static IntPtr get_ConsoleError() { }
	// Offset : 0x754ba4
	public static Char get_VolumeSeparatorChar() { }
	// Offset : 0x754ba8
	public static Char get_DirectorySeparatorChar() { }
	// Offset : 0x754bac
	public static Char get_AltDirectorySeparatorChar() { }
	// Offset : 0x754bb0
	public static Char get_PathSeparator() { }
	// Offset : 0x754bb4
	public static Boolean RemapPath(String path, out String newPath) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
internal enum MonoIOError
{
	// Fields
	public Int32 value__; // 0x10
	public const MonoIOError ERROR_SUCCESS = 0; // 0x0
	public const MonoIOError ERROR_FILE_NOT_FOUND = 2; // 0x0
	public const MonoIOError ERROR_PATH_NOT_FOUND = 3; // 0x0
	public const MonoIOError ERROR_TOO_MANY_OPEN_FILES = 4; // 0x0
	public const MonoIOError ERROR_ACCESS_DENIED = 5; // 0x0
	public const MonoIOError ERROR_INVALID_HANDLE = 6; // 0x0
	public const MonoIOError ERROR_INVALID_DRIVE = 15; // 0x0
	public const MonoIOError ERROR_NOT_SAME_DEVICE = 17; // 0x0
	public const MonoIOError ERROR_NO_MORE_FILES = 18; // 0x0
	public const MonoIOError ERROR_WRITE_FAULT = 29; // 0x0
	public const MonoIOError ERROR_READ_FAULT = 30; // 0x0
	public const MonoIOError ERROR_GEN_FAILURE = 31; // 0x0
	public const MonoIOError ERROR_SHARING_VIOLATION = 32; // 0x0
	public const MonoIOError ERROR_LOCK_VIOLATION = 33; // 0x0
	public const MonoIOError ERROR_HANDLE_DISK_FULL = 39; // 0x0
	public const MonoIOError ERROR_FILE_EXISTS = 80; // 0x0
	public const MonoIOError ERROR_CANNOT_MAKE = 82; // 0x0
	public const MonoIOError ERROR_INVALID_PARAMETER = 87; // 0x0
	public const MonoIOError ERROR_BROKEN_PIPE = 109; // 0x0
	public const MonoIOError ERROR_INVALID_NAME = 123; // 0x0
	public const MonoIOError ERROR_DIR_NOT_EMPTY = 145; // 0x0
	public const MonoIOError ERROR_ALREADY_EXISTS = 183; // 0x0
	public const MonoIOError ERROR_FILENAME_EXCED_RANGE = 206; // 0x0
	public const MonoIOError ERROR_ENCRYPTION_FAILED = 6000; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.IO
internal struct MonoIOStat
{
	// Fields
	public String Name; // 0x10
	public FileAttributes Attributes; // 0x18
	public Int64 Length; // 0x20
	public Int64 CreationTime; // 0x28
	public Int64 LastAccessTime; // 0x30
	public Int64 LastWriteTime; // 0x38

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.IO
public static class Path
{
	// Fields
	public static readonly Char[] InvalidPathChars; // 0x0
	public static readonly Char AltDirectorySeparatorChar; // 0x8
	public static readonly Char DirectorySeparatorChar; // 0xa
	public static readonly Char PathSeparator; // 0xc
	internal static readonly String DirectorySeparatorStr; // 0x10
	public static readonly Char VolumeSeparatorChar; // 0x18
	internal static readonly Char[] PathSeparatorChars; // 0x20
	private static readonly Boolean dirEqualsVolume; // 0x28

	// Properties

	// Methods
	// Offset : 0x754c74
	private static Void .cctor() { }
	// Offset : 0x754ea4
	public static String ChangeExtension(String path, String extension) { }
	// Offset : 0x74cbb4
	public static String Combine(String path1, String path2) { }
	// Offset : 0x755418
	internal static String CleanPath(String s) { }
	// Offset : 0x74ceac
	public static String GetDirectoryName(String path) { }
	// Offset : 0x755e60
	public static String GetExtension(String path) { }
	// Offset : 0x74d494
	public static String GetFileName(String path) { }
	// Offset : 0x755fb4
	public static String GetFileNameWithoutExtension(String path) { }
	// Offset : 0x74d430
	public static String GetFullPath(String path) { }
	// Offset : 0x75680c
	internal static String WindowsDriveAdjustment(String path) { }
	// Offset : 0x756020
	internal static String InsecureGetFullPath(String path) { }
	// Offset : 0x756c38
	private static Boolean IsDsc(Char c) { }
	// Offset : 0x75593c
	public static String GetPathRoot(String path) { }
	// Offset : 0x75522c
	public static Boolean IsPathRooted(String path) { }
	// Offset : 0x754e14
	public static Char[] GetInvalidPathChars() { }
	// Offset : 0x755180
	private static Int32 findExtension(String path) { }
	// Offset : 0x757730
	private static String GetServerAndShare(String path) { }
	// Offset : 0x7578fc
	private static Boolean SameRoot(String root, String path) { }
	// Offset : 0x756cdc
	private static String CanonicalizePath(String path) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class PathTooLongException : IOException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x757cec
	public Void .ctor() { }
	// Offset : 0x754b8c
	public Void .ctor(String message) { }
	// Offset : 0x757d4c
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
internal class SearchPattern
{
	// Fields
	internal static readonly Char[] WildcardChars; // 0x0
	internal static readonly Char[] InvalidChars; // 0x8

	// Properties

	// Methods
	// Offset : 0x757d54
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public enum SeekOrigin
{
	// Fields
	public Int32 value__; // 0x10
	public const SeekOrigin Begin = 0; // 0x0
	public const SeekOrigin Current = 1; // 0x0
	public const SeekOrigin End = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public abstract class Stream : IDisposable
{
	// Fields
	public static readonly Stream Null; // 0x0

	// Properties
	public abstract Boolean CanRead { get; }
	public abstract Boolean CanSeek { get; }
	public abstract Boolean CanWrite { get; }
	public abstract Int64 Length { get; }
	public abstract Int64 Position { get; set; }

	// Methods
	// Offset : 0x74f080
	protected Void .ctor() { }
	// Offset : 0x757eb0
	private static Void .cctor() { }
	// Offset : 0x
	public abstract Boolean get_CanRead() { }
	// Offset : 0x
	public abstract Boolean get_CanSeek() { }
	// Offset : 0x
	public abstract Boolean get_CanWrite() { }
	// Offset : 0x
	public abstract Int64 get_Length() { }
	// Offset : 0x
	public abstract Int64 get_Position() { }
	// Offset : 0x
	public abstract Void set_Position(Int64 value) { }
	// Offset : 0x757f18
	public Void Dispose() { }
	// Offset : 0x757f58
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x757f5c
	public virtual Void Close() { }
	// Offset : 0x
	public abstract Void Flush() { }
	// Offset : 0x
	public abstract Int32 Read([In] [Out] Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x757fa0
	public virtual Int32 ReadByte() { }
	// Offset : 0x
	public abstract Int64 Seek(Int64 offset, SeekOrigin origin) { }
	// Offset : 0x
	public abstract Void SetLength(Int64 value) { }
	// Offset : 0x
	public abstract Void Write(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x75806c
	public virtual Void WriteByte(Byte value) { }
	// Offset : 0x750d34
	public virtual IAsyncResult BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) { }
	// Offset : 0x751b34
	public virtual IAsyncResult BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) { }
	// Offset : 0x751160
	public virtual Int32 EndRead(IAsyncResult asyncResult) { }
	// Offset : 0x7521f4
	public virtual Void EndWrite(IAsyncResult asyncResult) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
internal class NullStream : Stream
{
	// Fields

	// Properties
	public override Boolean CanRead { get; }
	public override Boolean CanSeek { get; }
	public override Boolean CanWrite { get; }
	public override Int64 Length { get; }
	public override Int64 Position { get; set; }

	// Methods
	// Offset : 0x754bb8
	public Void .ctor() { }
	// Offset : 0x754c20
	public override Boolean get_CanRead() { }
	// Offset : 0x754c28
	public override Boolean get_CanSeek() { }
	// Offset : 0x754c30
	public override Boolean get_CanWrite() { }
	// Offset : 0x754c38
	public override Int64 get_Length() { }
	// Offset : 0x754c40
	public override Int64 get_Position() { }
	// Offset : 0x754c48
	public override Void set_Position(Int64 value) { }
	// Offset : 0x754c4c
	public override Void Flush() { }
	// Offset : 0x754c50
	public override Int32 Read(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x754c58
	public override Int32 ReadByte() { }
	// Offset : 0x754c60
	public override Int64 Seek(Int64 offset, SeekOrigin origin) { }
	// Offset : 0x754c68
	public override Void SetLength(Int64 value) { }
	// Offset : 0x754c6c
	public override Void Write(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x754c70
	public override Void WriteByte(Byte value) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
internal class StreamAsyncResult : IAsyncResult
{
	// Fields
	private Object state; // 0x10
	private Boolean completed; // 0x18
	private Boolean done; // 0x19
	private Exception exc; // 0x20
	private Int32 nbytes; // 0x28
	private ManualResetEvent wh; // 0x30

	// Properties
	public Object AsyncState { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public Boolean IsCompleted { get; }
	public Exception Exception { get; }
	public Int32 NBytes { get; }
	public Boolean Done { get; set; }

	// Methods
	// Offset : 0x758128
	public Void .ctor(Object state) { }
	// Offset : 0x758164
	public Void SetComplete(Exception e) { }
	// Offset : 0x75815c
	public Void SetComplete(Exception e, Int32 nbytes) { }
	// Offset : 0x75821c
	public Object get_AsyncState() { }
	// Offset : 0x758224
	public WaitHandle get_AsyncWaitHandle() { }
	// Offset : 0x758304
	public Boolean get_IsCompleted() { }
	// Offset : 0x758214
	public Exception get_Exception() { }
	// Offset : 0x7581f8
	public Int32 get_NBytes() { }
	// Offset : 0x758200
	public Boolean get_Done() { }
	// Offset : 0x758208
	public Void set_Done(Boolean value) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class StreamReader : TextReader
{
	// Fields
	private Byte[] input_buffer; // 0x10
	private Char[] decoded_buffer; // 0x18
	private Int32 decoded_count; // 0x20
	private Int32 pos; // 0x24
	private Int32 buffer_size; // 0x28
	private Int32 do_checks; // 0x2c
	private Encoding encoding; // 0x30
	private Decoder decoder; // 0x38
	private Stream base_stream; // 0x40
	private Boolean mayBlock; // 0x48
	private StringBuilder line_builder; // 0x50
	public static readonly StreamReader Null; // 0x0
	private Boolean foundCR; // 0x58

	// Properties
	public virtual Stream BaseStream { get; }

	// Methods
	// Offset : 0x75830c
	internal Void .ctor() { }
	// Offset : 0x758374
	public Void .ctor(Stream stream, Encoding encoding) { }
	// Offset : 0x758380
	public Void .ctor(Stream stream, Encoding encoding, Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize) { }
	// Offset : 0x74e2bc
	public Void .ctor(String path) { }
	// Offset : 0x758690
	public Void .ctor(String path, Encoding encoding, Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize) { }
	// Offset : 0x7588a4
	private static Void .cctor() { }
	// Offset : 0x758420
	internal Void Initialize(Stream stream, Encoding encoding, Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize) { }
	// Offset : 0x758970
	public virtual Stream get_BaseStream() { }
	// Offset : 0x758978
	public override Void Close() { }
	// Offset : 0x7589bc
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x758a30
	private Int32 DoChecks(Int32 count) { }
	// Offset : 0x758fcc
	private Int32 ReadBuffer() { }
	// Offset : 0x759220
	public override Int32 Peek() { }
	// Offset : 0x759314
	public override Int32 Read() { }
	// Offset : 0x759418
	public override Int32 Read([In] [Out] Char[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x75961c
	private Int32 FindNextEOL() { }
	// Offset : 0x759700
	public override String ReadLine() { }
	// Offset : 0x759a00
	public override String ReadToEnd() { }
}

// Dll : mscorlib.dll
// Namespace: 
private class NullStreamReader : StreamReader
{
	// Fields

	// Properties
	public override Stream BaseStream { get; }

	// Methods
	// Offset : 0x75890c
	public Void .ctor() { }
	// Offset : 0x759b60
	public override Int32 Peek() { }
	// Offset : 0x759b68
	public override Int32 Read() { }
	// Offset : 0x759b70
	public override Int32 Read([In] [Out] Char[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x759b78
	public override String ReadLine() { }
	// Offset : 0x759b80
	public override String ReadToEnd() { }
	// Offset : 0x759be8
	public override Stream get_BaseStream() { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class StreamWriter : TextWriter
{
	// Fields
	private const Int32 DefaultBufferSize; // 0x0
	private const Int32 DefaultFileBufferSize; // 0x0
	private const Int32 MinimumBufferSize; // 0x0
	private Encoding internalEncoding; // 0x20
	private Stream internalStream; // 0x28
	private Boolean iflush; // 0x30
	private Byte[] byte_buf; // 0x38
	private Int32 byte_pos; // 0x40
	private Char[] decode_buf; // 0x48
	private Int32 decode_pos; // 0x50
	private Boolean DisposedAlready; // 0x54
	private Boolean preamble_done; // 0x55
	public static readonly StreamWriter Null; // 0x0

	// Properties
	public virtual Boolean AutoFlush { set; }

	// Methods
	// Offset : 0x759c50
	public Void .ctor(Stream stream, Encoding encoding) { }
	// Offset : 0x759c58
	public Void .ctor(Stream stream, Encoding encoding, Int32 bufferSize) { }
	// Offset : 0x759f4c
	public Void .ctor(String path, Boolean append, Encoding encoding) { }
	// Offset : 0x759f58
	public Void .ctor(String path, Boolean append, Encoding encoding, Int32 bufferSize) { }
	// Offset : 0x75a170
	private static Void .cctor() { }
	// Offset : 0x759de4
	internal Void Initialize(Encoding encoding, Int32 bufferSize) { }
	// Offset : 0x75a244
	public virtual Void set_AutoFlush(Boolean value) { }
	// Offset : 0x75a29c
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x75a484
	public override Void Flush() { }
	// Offset : 0x75a620
	private Void FlushBytes() { }
	// Offset : 0x75a56c
	private Void Decode() { }
	// Offset : 0x75a754
	public override Void Write(Char[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x75a918
	private Void LowLevelWrite(Char[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x75a9d8
	private Void LowLevelWrite(String s) { }
	// Offset : 0x75ab18
	public override Void Write(Char value) { }
	// Offset : 0x75ac54
	public override Void Write(Char[] buffer) { }
	// Offset : 0x75ad40
	public override Void Write(String value) { }
	// Offset : 0x75ae24
	public override Void Close() { }
	// Offset : 0x75ae68
	protected override Void Finalize() { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class StringReader : TextReader
{
	// Fields
	private String source; // 0x10
	private Int32 nextChar; // 0x18
	private Int32 sourceLength; // 0x1c

	// Properties

	// Methods
	// Offset : 0x68e69c
	public Void .ctor(String s) { }
	// Offset : 0x68e76c
	public override Void Close() { }
	// Offset : 0x68e7b0
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x68e7d4
	public override Int32 Peek() { }
	// Offset : 0x68e8d4
	public override Int32 Read() { }
	// Offset : 0x68e93c
	public override Int32 Read([In] [Out] Char[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x68ea90
	public override String ReadLine() { }
	// Offset : 0x68ebdc
	public override String ReadToEnd() { }
	// Offset : 0x68e82c
	private Void CheckObjectDisposedException() { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public class StringWriter : TextWriter
{
	// Fields
	private StringBuilder internalString; // 0x20
	private Boolean disposed; // 0x28

	// Properties

	// Methods
	// Offset : 0x68ec84
	public Void .ctor() { }
	// Offset : 0x68ecec
	public Void .ctor(StringBuilder sb) { }
	// Offset : 0x68ecf4
	public Void .ctor(StringBuilder sb, IFormatProvider formatProvider) { }
	// Offset : 0x68edf8
	public override Void Close() { }
	// Offset : 0x68ee48
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x68ee8c
	public override String ToString() { }
	// Offset : 0x68eebc
	public override Void Write(Char value) { }
	// Offset : 0x68ef8c
	public override Void Write(String value) { }
	// Offset : 0x68f05c
	public override Void Write(Char[] buffer, Int32 index, Int32 count) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public abstract class TextReader : IDisposable
{
	// Fields
	public static readonly TextReader Null; // 0x0

	// Properties

	// Methods
	// Offset : 0x68e768
	protected Void .ctor() { }
	// Offset : 0x68fd7c
	private static Void .cctor() { }
	// Offset : 0x68fe48
	public virtual Void Close() { }
	// Offset : 0x68fe8c
	public Void Dispose() { }
	// Offset : 0x68e7c4
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x68fed0
	public virtual Int32 Peek() { }
	// Offset : 0x68fed8
	public virtual Int32 Read() { }
	// Offset : 0x68fee0
	public virtual Int32 Read([In] [Out] Char[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x68ffb0
	public virtual String ReadLine() { }
	// Offset : 0x690018
	public virtual String ReadToEnd() { }
	// Offset : 0x690080
	public static TextReader Synchronized(TextReader reader) { }
}

// Dll : mscorlib.dll
// Namespace: 
private class NullTextReader : TextReader
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x68fde4
	public Void .ctor() { }
	// Offset : 0x690154
	public override String ReadLine() { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
internal class SynchronizedReader : TextReader
{
	// Fields
	private TextReader reader; // 0x10

	// Properties

	// Methods
	// Offset : 0x68f218
	public Void .ctor(TextReader reader) { }
	// Offset : 0x68f288
	public override Void Close() { }
	// Offset : 0x68f338
	public override Int32 Peek() { }
	// Offset : 0x68f3e8
	public override String ReadLine() { }
	// Offset : 0x68f498
	public override String ReadToEnd() { }
	// Offset : 0x68f548
	public override Int32 Read() { }
	// Offset : 0x68f5f8
	public override Int32 Read(Char[] buffer, Int32 index, Int32 count) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
public abstract class TextWriter : IDisposable
{
	// Fields
	protected Char[] CoreNewLine; // 0x10
	internal IFormatProvider internalFormatProvider; // 0x18
	public static readonly TextWriter Null; // 0x0

	// Properties

	// Methods
	// Offset : 0x68edb8
	protected Void .ctor() { }
	// Offset : 0x69015c
	private static Void .cctor() { }
	// Offset : 0x690228
	public virtual Void Close() { }
	// Offset : 0x68ee7c
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x69026c
	public Void Dispose() { }
	// Offset : 0x6902bc
	public virtual Void Flush() { }
	// Offset : 0x6902c0
	internal static TextWriter Synchronized(TextWriter writer, Boolean neverClose) { }
	// Offset : 0x6903a4
	public virtual Void Write(Char value) { }
	// Offset : 0x6903a8
	public virtual Void Write(Char[] buffer) { }
	// Offset : 0x690418
	public virtual Void Write(String value) { }
	// Offset : 0x690480
	public virtual Void Write(Char[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x6905fc
	public virtual Void WriteLine() { }
	// Offset : 0x690644
	public virtual Void WriteLine(String value) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class NullTextWriter : TextWriter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6901c4
	public Void .ctor() { }
	// Offset : 0x6906b4
	public override Void Write(String s) { }
	// Offset : 0x6906b8
	public override Void Write(Char value) { }
	// Offset : 0x6906bc
	public override Void Write(Char[] value, Int32 index, Int32 count) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
[Serializable]
internal class SynchronizedWriter : TextWriter
{
	// Fields
	private TextWriter writer; // 0x20
	private Boolean neverClose; // 0x28

	// Properties

	// Methods
	// Offset : 0x68f6d0
	public Void .ctor(TextWriter writer, Boolean neverClose) { }
	// Offset : 0x68f754
	public override Void Close() { }
	// Offset : 0x68f810
	public override Void Flush() { }
	// Offset : 0x68f8c0
	public override Void Write(Char value) { }
	// Offset : 0x68f988
	public override Void Write(Char[] value) { }
	// Offset : 0x68fa50
	public override Void Write(String value) { }
	// Offset : 0x68fb18
	public override Void Write(Char[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x68fc00
	public override Void WriteLine() { }
	// Offset : 0x68fcb0
	public override Void WriteLine(String value) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
internal class UnexceptionalStreamReader : StreamReader
{
	// Fields
	private static Boolean[] newline; // 0x0
	private static Char newlineChar; // 0x8

	// Properties

	// Methods
	// Offset : 0x6906c0
	public Void .ctor(Stream stream, Encoding encoding) { }
	// Offset : 0x690740
	private static Void .cctor() { }
	// Offset : 0x690818
	public override Int32 Peek() { }
	// Offset : 0x6908d8
	public override Int32 Read() { }
	// Offset : 0x690998
	public override Int32 Read([In] [Out] Char[] dest_buffer, Int32 index, Int32 count) { }
	// Offset : 0x690c18
	private Boolean CheckEOL(Char current) { }
	// Offset : 0x690e70
	public override String ReadLine() { }
	// Offset : 0x690f30
	public override String ReadToEnd() { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
internal class UnexceptionalStreamWriter : StreamWriter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x690ff0
	public Void .ctor(Stream stream, Encoding encoding) { }
	// Offset : 0x691070
	public override Void Flush() { }
	// Offset : 0x691130
	public override Void Write(Char[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x691220
	public override Void Write(Char value) { }
	// Offset : 0x6912f4
	public override Void Write(Char[] value) { }
	// Offset : 0x6913c8
	public override Void Write(String value) { }
}

// Dll : mscorlib.dll
// Namespace: System.IO
public class UnmanagedMemoryStream : Stream
{
	// Fields
	private Int64 length; // 0x10
	private Boolean closed; // 0x18
	private Int64 capacity; // 0x20
	private FileAccess fileaccess; // 0x28
	private IntPtr initial_pointer; // 0x30
	private Int64 initial_position; // 0x38
	private Int64 current_position; // 0x40
	private EventHandler Closed; // 0x48

	// Properties
	public override Boolean CanRead { get; }
	public override Boolean CanSeek { get; }
	public override Boolean CanWrite { get; }
	public override Int64 Length { get; }
	public override Int64 Position { get; set; }

	// Methods
	// Offset : 0x69149c
	public Void .ctor(Byte* pointer, Int64 length) { }
	// Offset : 0x6916a4
	internal Void add_Closed(EventHandler value) { }
	// Offset : 0x691768
	internal Void remove_Closed(EventHandler value) { }
	// Offset : 0x69182c
	public override Boolean get_CanRead() { }
	// Offset : 0x69184c
	public override Boolean get_CanSeek() { }
	// Offset : 0x69185c
	public override Boolean get_CanWrite() { }
	// Offset : 0x69187c
	public override Int64 get_Length() { }
	// Offset : 0x6919a0
	public override Int64 get_Position() { }
	// Offset : 0x691a2c
	public override Void set_Position(Int64 value) { }
	// Offset : 0x691b30
	public override Int32 Read([In] [Out] Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x691d8c
	public override Int32 ReadByte() { }
	// Offset : 0x691ea0
	public override Int64 Seek(Int64 offset, SeekOrigin loc) { }
	// Offset : 0x691fd4
	public override Void SetLength(Int64 value) { }
	// Offset : 0x692124
	public override Void Flush() { }
	// Offset : 0x6921ac
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x6921dc
	public override Void Write(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x692448
	public override Void WriteByte(Byte value) { }
	// Offset : 0x69152c
	protected Void Initialize(Byte* pointer, Int64 length, Int64 capacity, FileAccess access) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
internal enum NativeResourceType
{
	// Fields
	public Int32 value__; // 0x10
	public const NativeResourceType None = 0; // 0x0
	public const NativeResourceType Unmanaged = 1; // 0x0
	public const NativeResourceType Assembly = 2; // 0x0
	public const NativeResourceType Explicit = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
internal struct RefEmitPermissionSet
{
	// Fields
	public SecurityAction action; // 0x10
	public String pset; // 0x18

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
internal struct MonoResource
{
	// Fields
	public Byte[] data; // 0x10
	public String name; // 0x18
	public String filename; // 0x20
	public ResourceAttributes attrs; // 0x28
	public Int32 offset; // 0x2c
	public Stream stream; // 0x30

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
internal struct MonoWin32Resource
{
	// Fields
	public Int32 res_type; // 0x10
	public Int32 res_id; // 0x14
	public Int32 lang_id; // 0x18
	public Byte[] data; // 0x20

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class AssemblyBuilder : Assembly, _AssemblyBuilder
{
	// Fields
	private UIntPtr dynamic_assembly; // 0x60
	private MethodInfo entry_point; // 0x68
	private ModuleBuilder[] modules; // 0x70
	private String name; // 0x78
	private String dir; // 0x80
	private CustomAttributeBuilder[] cattrs; // 0x88
	private MonoResource[] resources; // 0x90
	private Byte[] public_key; // 0x98
	private String version; // 0xa0
	private String culture; // 0xa8
	private UInt32 algid; // 0xb0
	private UInt32 flags; // 0xb4
	private PEFileKinds pekind; // 0xb8
	private Boolean delay_sign; // 0xbc
	private UInt32 access; // 0xc0
	private Module[] loaded_modules; // 0xc8
	private MonoWin32Resource[] win32_resources; // 0xd0
	private RefEmitPermissionSet[] permissions_minimum; // 0xd8
	private RefEmitPermissionSet[] permissions_optional; // 0xe0
	private RefEmitPermissionSet[] permissions_refused; // 0xe8
	private PortableExecutableKinds peKind; // 0xf0
	private ImageFileMachine machine; // 0xf4
	private Boolean corlib_internal; // 0xf8
	private Type[] type_forwarders; // 0x100
	private Byte[] pktoken; // 0x108
	internal Type corlib_object_type; // 0x110
	internal Type corlib_value_type; // 0x118
	internal Type corlib_enum_type; // 0x120
	internal Type corlib_void_type; // 0x128
	private ArrayList resource_writers; // 0x130
	private Win32VersionResource version_res; // 0x138
	private Boolean created; // 0x140
	private Boolean is_module_only; // 0x141
	private StrongName sn; // 0x148
	private NativeResourceType native_resource; // 0x150
	private readonly Boolean is_compiler_context; // 0x154
	private String versioninfo_culture; // 0x158
	private ModuleBuilder manifest_module; // 0x160

	// Properties
	public override String Location { get; }
	internal Boolean IsCompilerContext { get; }
	internal Boolean IsSave { get; }
	internal Boolean IsRun { get; }
	internal String AssemblyDir { get; }

	// Methods
	// Offset : 0x5d5598
	internal Void .ctor(AssemblyName n, String directory, AssemblyBuilderAccess access, Boolean corlib_internal) { }
	// Offset : 0x5d5b78
	private static Void basic_init(AssemblyBuilder ab) { }
	// Offset : 0x5d5b7c
	public override String get_Location() { }
	// Offset : 0x5d5c30
	public ModuleBuilder DefineDynamicModule(String name, Boolean emitSymbolInfo) { }
	// Offset : 0x5d5c40
	private ModuleBuilder DefineDynamicModule(String name, String fileName, Boolean emitSymbolInfo, Boolean transient) { }
	// Offset : 0x5d69d0
	internal override Module[] GetModulesInternal() { }
	// Offset : 0x5d6ab4
	internal override Type[] GetTypes(Boolean exportedOnly) { }
	// Offset : 0x5d6d64
	public override ManifestResourceInfo GetManifestResourceInfo(String resourceName) { }
	// Offset : 0x5d6db0
	public override String[] GetManifestResourceNames() { }
	// Offset : 0x5d6dfc
	public override Stream GetManifestResourceStream(String name) { }
	// Offset : 0x5d6e48
	public override Stream GetManifestResourceStream(Type type, String name) { }
	// Offset : 0x5d6e94
	internal Boolean get_IsCompilerContext() { }
	// Offset : 0x5d5b68
	internal Boolean get_IsSave() { }
	// Offset : 0x5d6e9c
	internal Boolean get_IsRun() { }
	// Offset : 0x5d6eb0
	internal String get_AssemblyDir() { }
	// Offset : 0x5d5bc8
	private Exception not_supported() { }
	// Offset : 0x5d5f4c
	private Void check_name_and_filename(String name, String fileName, Boolean fileNeedsToExists) { }
	// Offset : 0x5d6ec8
	internal override AssemblyName UnprotectedGetName() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
[Serializable]
public enum AssemblyBuilderAccess
{
	// Fields
	public Int32 value__; // 0x10
	public const AssemblyBuilderAccess Run = 1; // 0x0
	public const AssemblyBuilderAccess Save = 2; // 0x0
	public const AssemblyBuilderAccess RunAndSave = 3; // 0x0
	public const AssemblyBuilderAccess ReflectionOnly = 6; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class ConstructorBuilder : ConstructorInfo, _ConstructorBuilder
{
	// Fields
	private ILGenerator ilgen; // 0x10
	internal Type[] parameters; // 0x18
	private MethodAttributes attrs; // 0x20
	private MethodImplAttributes iattrs; // 0x24
	private Int32 table_idx; // 0x28
	private CallingConventions call_conv; // 0x2c
	private TypeBuilder type; // 0x30
	internal ParameterBuilder[] pinfo; // 0x38
	private Boolean init_locals; // 0x40
	private Type[][] paramModReq; // 0x48
	private Type[][] paramModOpt; // 0x50

	// Properties
	public override CallingConventions CallingConvention { get; }
	internal TypeBuilder TypeBuilder { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override String Name { get; }
	public override Module Module { get; }
	private Boolean IsCompilerContext { get; }

	// Methods
	// Offset : 0x5d7150
	internal Void .ctor(TypeBuilder tb, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt) { }
	// Offset : 0x5d748c
	public override CallingConventions get_CallingConvention() { }
	// Offset : 0x5d7494
	internal TypeBuilder get_TypeBuilder() { }
	// Offset : 0x5d749c
	public override ParameterInfo[] GetParameters() { }
	// Offset : 0x5d76ec
	internal ParameterInfo[] GetParametersInternal() { }
	// Offset : 0x5d78b0
	internal override Int32 GetParameterCount() { }
	// Offset : 0x5d78c8
	public override Object Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) { }
	// Offset : 0x5d797c
	public override Object Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) { }
	// Offset : 0x5d79c8
	public override RuntimeMethodHandle get_MethodHandle() { }
	// Offset : 0x5d7a14
	public override MethodAttributes get_Attributes() { }
	// Offset : 0x5d7a1c
	public override Type get_ReflectedType() { }
	// Offset : 0x5d7a24
	public override Type get_DeclaringType() { }
	// Offset : 0x5d7a2c
	public override String get_Name() { }
	// Offset : 0x5d7ac0
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x5d7b0c
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x5d7bc4
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x5d7c84
	public ILGenerator GetILGenerator() { }
	// Offset : 0x5d7c8c
	public ILGenerator GetILGenerator(Int32 streamSize) { }
	// Offset : 0x5d7474
	public MethodToken GetToken() { }
	// Offset : 0x5d7f70
	public override Module get_Module() { }
	// Offset : 0x5d7fe8
	public override String ToString() { }
	// Offset : 0x5d8084
	internal Void fixup() { }
	// Offset : 0x5d7420
	internal override Int32 get_next_table_index(Object obj, Int32 table, Boolean inc) { }
	// Offset : 0x5d7530
	private Boolean get_IsCompilerContext() { }
	// Offset : 0x5d7914
	private Exception not_supported() { }
	// Offset : 0x5d7684
	private Exception not_created() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public class CustomAttributeBuilder : _CustomAttributeBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
internal abstract class DerivedType : Type
{
	// Fields
	internal Type elementType; // 0x18

	// Properties
	public override Boolean ContainsGenericParameters { get; }
	public override Assembly Assembly { get; }
	public override String AssemblyQualifiedName { get; }
	public override String FullName { get; }
	public override String Name { get; }
	public override Module Module { get; }
	public override String Namespace { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods
	// Offset : 0x5d6f60
	internal Void .ctor(Type elementType) { }
	// Offset : 0x5d8528
	internal static Void create_unmanaged_type(Type type) { }
	// Offset : 0x
	internal abstract String FormatName(String elementName) { }
	// Offset : 0x5d852c
	public override Type GetInterface(String name, Boolean ignoreCase) { }
	// Offset : 0x5d8594
	public override Type[] GetInterfaces() { }
	// Offset : 0x5d85fc
	public override Type GetElementType() { }
	// Offset : 0x5d8604
	public override EventInfo GetEvent(String name, BindingFlags bindingAttr) { }
	// Offset : 0x5d866c
	public override FieldInfo GetField(String name, BindingFlags bindingAttr) { }
	// Offset : 0x5d86d4
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }
	// Offset : 0x5d873c
	protected override MethodInfo GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5d87a4
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }
	// Offset : 0x5d880c
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }
	// Offset : 0x5d8874
	protected override PropertyInfo GetPropertyImpl(String name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5d88dc
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5d8944
	protected override TypeAttributes GetAttributeFlagsImpl() { }
	// Offset : 0x5d8974
	protected override Boolean HasElementTypeImpl() { }
	// Offset : 0x5d897c
	protected override Boolean IsArrayImpl() { }
	// Offset : 0x5d8984
	protected override Boolean IsByRefImpl() { }
	// Offset : 0x5d898c
	protected override Boolean IsPointerImpl() { }
	// Offset : 0x5d8994
	protected override Boolean IsPrimitiveImpl() { }
	// Offset : 0x5d899c
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }
	// Offset : 0x5d8a04
	public override Object InvokeMember(String name, BindingFlags invokeAttr, Binder binder, Object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters) { }
	// Offset : 0x5d8a6c
	public override Boolean IsInstanceOfType(Object o) { }
	// Offset : 0x5d8a74
	public override Boolean IsAssignableFrom(Type c) { }
	// Offset : 0x5d8a7c
	public override Boolean get_ContainsGenericParameters() { }
	// Offset : 0x5d8acc
	public override Type MakeGenericType(Type[] typeArguments) { }
	// Offset : 0x5d8b34
	public override Type MakeByRefType() { }
	// Offset : 0x5d8b94
	public override String ToString() { }
	// Offset : 0x5d8c1c
	public override Assembly get_Assembly() { }
	// Offset : 0x5d8c6c
	public override String get_AssemblyQualifiedName() { }
	// Offset : 0x5d8de4
	public override String get_FullName() { }
	// Offset : 0x5d8e70
	public override String get_Name() { }
	// Offset : 0x5d8ef8
	public override Module get_Module() { }
	// Offset : 0x5d8f44
	public override String get_Namespace() { }
	// Offset : 0x5d8f94
	public override RuntimeTypeHandle get_TypeHandle() { }
	// Offset : 0x5d8ffc
	public override Type get_UnderlyingSystemType() { }
	// Offset : 0x5d9020
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x5d9088
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x5d90f0
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
internal class ByRefType : DerivedType
{
	// Fields

	// Properties
	public override Type BaseType { get; }

	// Methods
	// Offset : 0x5d6f5c
	internal Void .ctor(Type elementType) { }
	// Offset : 0x5d6fdc
	protected override Boolean IsByRefImpl() { }
	// Offset : 0x5d6fe4
	public override Type get_BaseType() { }
	// Offset : 0x5d7054
	internal override String FormatName(String elementName) { }
	// Offset : 0x5d70dc
	public override Type MakeByRefType() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class DynamicMethod : MethodInfo
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x10
	private String name; // 0x18
	private Type returnType; // 0x20
	private Type[] parameters; // 0x28
	private MethodAttributes attributes; // 0x30
	private CallingConventions callingConvention; // 0x34
	private Module module; // 0x38
	private Boolean skipVisibility; // 0x40
	private Boolean init_locals; // 0x41
	private ILGenerator ilgen; // 0x48
	private Int32 nrefs; // 0x50
	private Object[] refs; // 0x58
	private IntPtr referenced_by; // 0x60
	private Type owner; // 0x68
	private Delegate deleg; // 0x70
	private MonoMethod method; // 0x78
	private ParameterBuilder[] pinfo; // 0x80
	internal Boolean creating; // 0x88

	// Properties
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type DeclaringType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override Module Module { get; }
	public override String Name { get; }
	public override Type ReflectedType { get; }
	public override Type ReturnType { get; }

	// Methods
	// Offset : 0x5d9158
	private Void create_dynamic_method(DynamicMethod m) { }
	// Offset : 0x5d91cc
	private Void destroy_dynamic_method(DynamicMethod m) { }
	// Offset : 0x5d9240
	private Void CreateDynMethod() { }
	// Offset : 0x5d952c
	protected override Void Finalize() { }
	// Offset : 0x5d95a4
	public override MethodInfo GetBaseDefinition() { }
	// Offset : 0x5d95a8
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x5d9610
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x5d9678
	public override ParameterInfo[] GetParameters() { }
	// Offset : 0x5d983c
	public override Object Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) { }
	// Offset : 0x5d99b0
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x5d9a18
	public override String ToString() { }
	// Offset : 0x5d9e38
	public override MethodAttributes get_Attributes() { }
	// Offset : 0x5d9e40
	public override CallingConventions get_CallingConvention() { }
	// Offset : 0x5d9e48
	public override Type get_DeclaringType() { }
	// Offset : 0x5d9e50
	public override RuntimeMethodHandle get_MethodHandle() { }
	// Offset : 0x5d9e58
	public override Module get_Module() { }
	// Offset : 0x5d9e30
	public override String get_Name() { }
	// Offset : 0x5d9e60
	public override Type get_ReflectedType() { }
	// Offset : 0x5d9e28
	public override Type get_ReturnType() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class EnumBuilder : Type, _EnumBuilder
{
	// Fields
	private TypeBuilder _tb; // 0x18
	private Type _underlyingType; // 0x20

	// Properties
	public override Assembly Assembly { get; }
	public override String AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override Type DeclaringType { get; }
	public override String FullName { get; }
	public override Module Module { get; }
	public override String Name { get; }
	public override String Namespace { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods
	// Offset : 0x5d9e68
	public override Assembly get_Assembly() { }
	// Offset : 0x5d9ec4
	public override String get_AssemblyQualifiedName() { }
	// Offset : 0x5d9fb0
	public override Type get_BaseType() { }
	// Offset : 0x5d9fe4
	public override Type get_DeclaringType() { }
	// Offset : 0x5da018
	public override String get_FullName() { }
	// Offset : 0x5da04c
	public override Module get_Module() { }
	// Offset : 0x5da078
	public override String get_Name() { }
	// Offset : 0x5da0a4
	public override String get_Namespace() { }
	// Offset : 0x5da0d8
	public override Type get_ReflectedType() { }
	// Offset : 0x5da10c
	public override RuntimeTypeHandle get_TypeHandle() { }
	// Offset : 0x5da190
	public override Type get_UnderlyingSystemType() { }
	// Offset : 0x5da198
	protected override TypeAttributes GetAttributeFlagsImpl() { }
	// Offset : 0x5da1c4
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5da22c
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }
	// Offset : 0x5da33c
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x5da3cc
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x5da47c
	public override Type GetElementType() { }
	// Offset : 0x5da4fc
	public override EventInfo GetEvent(String name, BindingFlags bindingAttr) { }
	// Offset : 0x5da5b0
	public override FieldInfo GetField(String name, BindingFlags bindingAttr) { }
	// Offset : 0x5da7c8
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }
	// Offset : 0x5daa58
	public override Type GetInterface(String name, Boolean ignoreCase) { }
	// Offset : 0x5dab0c
	public override Type[] GetInterfaces() { }
	// Offset : 0x5dac2c
	protected override MethodInfo GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5dacd4
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }
	// Offset : 0x5dad24
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }
	// Offset : 0x5db02c
	protected override PropertyInfo GetPropertyImpl(String name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5db0e0
	protected override Boolean HasElementTypeImpl() { }
	// Offset : 0x5db110
	public override Object InvokeMember(String name, BindingFlags invokeAttr, Binder binder, Object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters) { }
	// Offset : 0x5db254
	protected override Boolean IsArrayImpl() { }
	// Offset : 0x5db25c
	protected override Boolean IsByRefImpl() { }
	// Offset : 0x5db264
	protected override Boolean IsPointerImpl() { }
	// Offset : 0x5db26c
	protected override Boolean IsPrimitiveImpl() { }
	// Offset : 0x5db274
	protected override Boolean IsValueTypeImpl() { }
	// Offset : 0x5db27c
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x5db38c
	public override Type MakeByRefType() { }
	// Offset : 0x5db078
	private Exception CreateNotSupportedException() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class EventBuilder : _EventBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class FieldBuilder : FieldInfo, _FieldBuilder
{
	// Fields
	private FieldAttributes attrs; // 0x10
	private Type type; // 0x18
	private String name; // 0x20
	internal TypeBuilder typeb; // 0x28
	private UnmanagedMarshal marshal_info; // 0x30

	// Properties
	public override FieldAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type FieldType { get; }
	public override String Name { get; }
	public override Type ReflectedType { get; }
	internal override UnmanagedMarshal UMarshal { get; }
	public override Module Module { get; }

	// Methods
	// Offset : 0x5db3ec
	public override FieldAttributes get_Attributes() { }
	// Offset : 0x5db3f4
	public override Type get_DeclaringType() { }
	// Offset : 0x5db3fc
	public override RuntimeFieldHandle get_FieldHandle() { }
	// Offset : 0x5db4b0
	public override Type get_FieldType() { }
	// Offset : 0x5db4b8
	public override String get_Name() { }
	// Offset : 0x5db4c0
	public override Type get_ReflectedType() { }
	// Offset : 0x5db4c8
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x5db574
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x5db628
	public override Object GetValue(Object obj) { }
	// Offset : 0x5db674
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x5db6c0
	internal override Int32 GetFieldOffset() { }
	// Offset : 0x5db6c8
	public override Void SetValue(Object obj, Object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }
	// Offset : 0x5db714
	internal override UnmanagedMarshal get_UMarshal() { }
	// Offset : 0x5db448
	private Exception CreateNotSupportedException() { }
	// Offset : 0x5db71c
	public override Module get_Module() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class GenericTypeParameterBuilder : Type
{
	// Fields
	private TypeBuilder tbuilder; // 0x18
	private MethodBuilder mbuilder; // 0x20
	private String name; // 0x28
	private Type base_type; // 0x30

	// Properties
	public override Type UnderlyingSystemType { get; }
	public override Assembly Assembly { get; }
	public override String AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override String FullName { get; }
	public override String Name { get; }
	public override String Namespace { get; }
	public override Module Module { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Boolean ContainsGenericParameters { get; }
	public override Boolean IsGenericParameter { get; }
	public override Boolean IsGenericType { get; }
	public override Boolean IsGenericTypeDefinition { get; }

	// Methods
	// Offset : 0x5db720
	public override Boolean IsSubclassOf(Type c) { }
	// Offset : 0x5db964
	protected override TypeAttributes GetAttributeFlagsImpl() { }
	// Offset : 0x5dbae8
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5dbb34
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }
	// Offset : 0x5dbb80
	public override EventInfo GetEvent(String name, BindingFlags bindingAttr) { }
	// Offset : 0x5dbbcc
	public override FieldInfo GetField(String name, BindingFlags bindingAttr) { }
	// Offset : 0x5dbc18
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }
	// Offset : 0x5dbc64
	public override Type GetInterface(String name, Boolean ignoreCase) { }
	// Offset : 0x5dbcb0
	public override Type[] GetInterfaces() { }
	// Offset : 0x5dbcfc
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }
	// Offset : 0x5dbd48
	protected override MethodInfo GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5dbd94
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }
	// Offset : 0x5dbde0
	protected override PropertyInfo GetPropertyImpl(String name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5dbe2c
	protected override Boolean HasElementTypeImpl() { }
	// Offset : 0x5dbe34
	public override Boolean IsAssignableFrom(Type c) { }
	// Offset : 0x5dbe80
	public override Boolean IsInstanceOfType(Object o) { }
	// Offset : 0x5dbecc
	protected override Boolean IsArrayImpl() { }
	// Offset : 0x5dbed4
	protected override Boolean IsByRefImpl() { }
	// Offset : 0x5dbedc
	protected override Boolean IsPointerImpl() { }
	// Offset : 0x5dbee4
	protected override Boolean IsPrimitiveImpl() { }
	// Offset : 0x5dbeec
	protected override Boolean IsValueTypeImpl() { }
	// Offset : 0x5dbf00
	public override Object InvokeMember(String name, BindingFlags invokeAttr, Binder binder, Object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters) { }
	// Offset : 0x5dbf4c
	public override Type GetElementType() { }
	// Offset : 0x5dbf98
	public override Type get_UnderlyingSystemType() { }
	// Offset : 0x5dbf9c
	public override Assembly get_Assembly() { }
	// Offset : 0x5dbfc8
	public override String get_AssemblyQualifiedName() { }
	// Offset : 0x5db95c
	public override Type get_BaseType() { }
	// Offset : 0x5dbfd0
	public override String get_FullName() { }
	// Offset : 0x5dbfd8
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x5dc024
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x5dc070
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x5dc0bc
	public override String get_Name() { }
	// Offset : 0x5dc0c4
	public override String get_Namespace() { }
	// Offset : 0x5dc0cc
	public override Module get_Module() { }
	// Offset : 0x5dc0f8
	public override Type get_DeclaringType() { }
	// Offset : 0x5dc11c
	public override Type get_ReflectedType() { }
	// Offset : 0x5dc138
	public override RuntimeTypeHandle get_TypeHandle() { }
	// Offset : 0x5dc184
	public override Type[] GetGenericArguments() { }
	// Offset : 0x5dc1ec
	public override Type GetGenericTypeDefinition() { }
	// Offset : 0x5dc254
	public override Boolean get_ContainsGenericParameters() { }
	// Offset : 0x5dc25c
	public override Boolean get_IsGenericParameter() { }
	// Offset : 0x5dc264
	public override Boolean get_IsGenericType() { }
	// Offset : 0x5dc26c
	public override Boolean get_IsGenericTypeDefinition() { }
	// Offset : 0x5db900
	private Exception not_supported() { }
	// Offset : 0x5dc274
	public override String ToString() { }
	// Offset : 0x5dc27c
	public override Boolean Equals(Object o) { }
	// Offset : 0x5dc284
	public override Int32 GetHashCode() { }
	// Offset : 0x5dc28c
	public override Type MakeByRefType() { }
	// Offset : 0x5dc2ec
	public override Type MakeGenericType(Type[] typeArguments) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
internal struct ILTokenInfo
{
	// Fields
	public MemberInfo member; // 0x10
	public Int32 code_pos; // 0x18

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
internal interface TokenGenerator
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Int32 GetToken(String str) { }
	// Offset : 0x
	public abstract Int32 GetToken(MemberInfo member) { }
	// Offset : 0x
	public abstract Int32 GetToken(MethodInfo method, Type[] opt_param_types) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public class ILGenerator : _ILGenerator
{
	// Fields
	private static readonly Type void_type; // 0x0
	private Byte[] code; // 0x10
	private Int32 code_len; // 0x18
	private Int32 max_stack; // 0x1c
	private Int32 cur_stack; // 0x20
	private LocalBuilder[] locals; // 0x28
	private Int32 num_token_fixups; // 0x30
	private ILTokenInfo[] token_fixups; // 0x38
	private LabelData[] labels; // 0x40
	private Int32 num_labels; // 0x48
	private LabelFixup[] fixups; // 0x50
	private Int32 num_fixups; // 0x58
	internal Module module; // 0x60
	private TokenGenerator token_gen; // 0x68

	// Properties

	// Methods
	// Offset : 0x5d7ec0
	internal Void .ctor(Module m, TokenGenerator token_gen, Int32 size) { }
	// Offset : 0x5dc2f4
	private static Void .cctor() { }
	// Offset : 0x5dc37c
	private Void add_token_fixup(MemberInfo mi) { }
	// Offset : 0x5dc4ac
	private Void make_room(Int32 nbytes) { }
	// Offset : 0x5dc570
	private Void emit_int(Int32 val) { }
	// Offset : 0x5dc6a4
	private Void ll_emit(OpCode opcode) { }
	// Offset : 0x5dc800
	private static Int32 target_len(OpCode opcode) { }
	// Offset : 0x5dc818
	public virtual LocalBuilder DeclareLocal(Type localType) { }
	// Offset : 0x5dc864
	public virtual LocalBuilder DeclareLocal(Type localType, Boolean pinned) { }
	// Offset : 0x5dcaec
	public virtual Label DefineLabel() { }
	// Offset : 0x5dcc08
	public virtual Void Emit(OpCode opcode) { }
	// Offset : 0x5dcc38
	public virtual Void Emit(OpCode opcode, Byte arg) { }
	// Offset : 0x5dccb8
	public virtual Void Emit(OpCode opcode, ConstructorInfo con) { }
	// Offset : 0x5dceac
	public virtual Void Emit(OpCode opcode, FieldInfo field) { }
	// Offset : 0x5dd054
	public virtual Void Emit(OpCode opcode, Int32 arg) { }
	// Offset : 0x5dd09c
	public virtual Void Emit(OpCode opcode, Label label) { }
	// Offset : 0x5dd308
	public virtual Void Emit(OpCode opcode, LocalBuilder local) { }
	// Offset : 0x5dd774
	public virtual Void Emit(OpCode opcode, MethodInfo meth) { }
	// Offset : 0x5ddb40
	private Void Emit(OpCode opcode, MethodInfo method, Int32 token) { }
	// Offset : 0x5ddcf8
	public virtual Void Emit(OpCode opcode, String str) { }
	// Offset : 0x5dde1c
	public virtual Void Emit(OpCode opcode, Type cls) { }
	// Offset : 0x5ddf40
	public virtual Void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes) { }
	// Offset : 0x5de298
	public virtual Void MarkLabel(Label loc) { }
	// Offset : 0x5d81e8
	internal Void label_fixup() { }
	// Offset : 0x5d81c0
	internal static Int32 Mono_GetCurrentOffset(ILGenerator ig) { }
}

// Dll : mscorlib.dll
// Namespace: 
private struct LabelFixup
{
	// Fields
	public Int32 offset; // 0x10
	public Int32 pos; // 0x14
	public Int32 label_idx; // 0x18

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct LabelData
{
	// Fields
	public Int32 addr; // 0x10
	public Int32 maxStack; // 0x14

	// Properties

	// Methods
	// Offset : 0x2cca0c
	public Void .ctor(Int32 addr, Int32 maxStack) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
[Serializable]
public struct Label
{
	// Fields
	internal Int32 label; // 0x10

	// Properties

	// Methods
	// Offset : 0x2cca60
	internal Void .ctor(Int32 val) { }
	// Offset : 0x2cca68
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cca70
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder
{
	// Fields
	internal ILGenerator ilgen; // 0x20

	// Properties

	// Methods
	// Offset : 0x5dcab0
	internal Void .ctor(Type t, ILGenerator ilgen) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class MethodBuilder : MethodInfo, _MethodBuilder
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x10
	private Type rtype; // 0x18
	internal Type[] parameters; // 0x20
	private MethodAttributes attrs; // 0x28
	private MethodImplAttributes iattrs; // 0x2c
	private String name; // 0x30
	private Int32 table_idx; // 0x38
	private Byte[] code; // 0x40
	private ILGenerator ilgen; // 0x48
	private TypeBuilder type; // 0x50
	internal ParameterBuilder[] pinfo; // 0x58
	private CustomAttributeBuilder[] cattrs; // 0x60
	private MethodInfo override_method; // 0x68
	private String pi_dll; // 0x70
	private String pi_entry; // 0x78
	private CharSet charset; // 0x80
	private UInt32 extra_flags; // 0x84
	private CallingConvention native_cc; // 0x88
	private CallingConventions call_conv; // 0x8c
	private Boolean init_locals; // 0x90
	private IntPtr generic_container; // 0x98
	internal GenericTypeParameterBuilder[] generic_params; // 0xa0
	private Type[] returnModReq; // 0xa8
	private Type[] returnModOpt; // 0xb0
	private Type[][] paramModReq; // 0xb8
	private Type[][] paramModOpt; // 0xc0
	private RefEmitPermissionSet[] permissions; // 0xc8

	// Properties
	public override Boolean ContainsGenericParameters { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override Type ReturnType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override String Name { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Boolean IsGenericMethodDefinition { get; }
	public override Boolean IsGenericMethod { get; }
	public override Module Module { get; }

	// Methods
	// Offset : 0x5de4e0
	internal Void .ctor(TypeBuilder tb, String name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt) { }
	// Offset : 0x5de818
	public override Boolean get_ContainsGenericParameters() { }
	// Offset : 0x5de880
	public override RuntimeMethodHandle get_MethodHandle() { }
	// Offset : 0x5de934
	public override Type get_ReturnType() { }
	// Offset : 0x5de93c
	public override Type get_ReflectedType() { }
	// Offset : 0x5dc114
	public override Type get_DeclaringType() { }
	// Offset : 0x5de944
	public override String get_Name() { }
	// Offset : 0x5de94c
	public override MethodAttributes get_Attributes() { }
	// Offset : 0x5de954
	public override CallingConventions get_CallingConvention() { }
	// Offset : 0x5de80c
	public MethodToken GetToken() { }
	// Offset : 0x5de95c
	public override MethodInfo GetBaseDefinition() { }
	// Offset : 0x5de960
	public override ParameterInfo[] GetParameters() { }
	// Offset : 0x5deb50
	internal override Int32 GetParameterCount() { }
	// Offset : 0x5deb68
	public override Object Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) { }
	// Offset : 0x5debb4
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x5dec00
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x5decac
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x5ded60
	public ILGenerator GetILGenerator() { }
	// Offset : 0x5ded68
	public ILGenerator GetILGenerator(Int32 size) { }
	// Offset : 0x5def7c
	internal Void check_override() { }
	// Offset : 0x5df068
	internal Void fixup() { }
	// Offset : 0x5df1e4
	public override String ToString() { }
	// Offset : 0x5df414
	public override Boolean Equals(Object obj) { }
	// Offset : 0x5df41c
	public override Int32 GetHashCode() { }
	// Offset : 0x5de7c0
	internal override Int32 get_next_table_index(Object obj, Int32 table, Boolean inc) { }
	// Offset : 0x5df44c
	internal Void set_override(MethodInfo mdecl) { }
	// Offset : 0x5de8cc
	private Exception NotSupported() { }
	// Offset : 0x5df454
	public override MethodInfo MakeGenericMethod(Type[] typeArguments) { }
	// Offset : 0x5df458
	public override Boolean get_IsGenericMethodDefinition() { }
	// Offset : 0x5df468
	public override Boolean get_IsGenericMethod() { }
	// Offset : 0x5df478
	public override Type[] GetGenericArguments() { }
	// Offset : 0x5df5dc
	public override Module get_Module() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
[Serializable]
public struct MethodToken
{
	// Fields
	internal Int32 tokValue; // 0x10
	public static readonly MethodToken Empty; // 0x0

	// Properties
	public Int32 Token { get; }

	// Methods
	// Offset : 0x2cca7c
	internal Void .ctor(Int32 val) { }
	// Offset : 0x5df5e0
	private static Void .cctor() { }
	// Offset : 0x2cca84
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cca8c
	public override Int32 GetHashCode() { }
	// Offset : 0x2cca94
	public Int32 get_Token() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public class ModuleBuilder : Module, _ModuleBuilder
{
	// Fields
	private UIntPtr dynamic_image; // 0x40
	private Int32 num_types; // 0x48
	private TypeBuilder[] types; // 0x50
	private CustomAttributeBuilder[] cattrs; // 0x58
	private Byte[] guid; // 0x60
	private Int32 table_idx; // 0x68
	internal AssemblyBuilder assemblyb; // 0x70
	private MethodBuilder[] global_methods; // 0x78
	private FieldBuilder[] global_fields; // 0x80
	private Boolean is_main; // 0x88
	private MonoResource[] resources; // 0x90
	private TypeBuilder global_type; // 0x98
	private Type global_type_created; // 0xa0
	private Hashtable name_cache; // 0xa8
	private Hashtable us_string_cache; // 0xb0
	private Int32[] table_indexes; // 0xb8
	private Boolean transient; // 0xc0
	private ModuleBuilderTokenGenerator token_gen; // 0xc8
	private Hashtable resource_writers; // 0xd0
	private ISymbolWriter symbolWriter; // 0xd8
	private static readonly Char[] type_modifiers; // 0x0

	// Properties
	internal String FileName { get; }

	// Methods
	// Offset : 0x5d653c
	internal Void .ctor(AssemblyBuilder assb, String name, String fullyqname, Boolean emitSymbolInfo, Boolean transient) { }
	// Offset : 0x5e0258
	private static Void .cctor() { }
	// Offset : 0x5df81c
	private static Void basic_init(ModuleBuilder ab) { }
	// Offset : 0x5e0254
	private static Void set_wrappers_type(ModuleBuilder mb, Type ab) { }
	// Offset : 0x5d6eb8
	public Boolean IsTransient() { }
	// Offset : 0x5e0330
	public TypeBuilder DefineType(String name, TypeAttributes attr, Type parent) { }
	// Offset : 0x5e034c
	private Void AddType(TypeBuilder tb) { }
	// Offset : 0x5e0484
	private TypeBuilder DefineType(String name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packingSize, Int32 typesize) { }
	// Offset : 0x5e0340
	public TypeBuilder DefineType(String name, TypeAttributes attr, Type parent, Type[] interfaces) { }
	// Offset : 0x5e0898
	public override Type GetType(String className) { }
	// Offset : 0x5e08e8
	private TypeBuilder search_in_array(TypeBuilder[] arr, Int32 validElementsInArray, String className) { }
	// Offset : 0x5e0a44
	private TypeBuilder search_nested_in_array(TypeBuilder[] arr, Int32 validElementsInArray, String className) { }
	// Offset : 0x5e0ba0
	private static Type create_modified_type(TypeBuilder tb, String modifiers) { }
	// Offset : 0x5e0ba4
	private TypeBuilder GetMaybeNested(TypeBuilder t, String className) { }
	// Offset : 0x5e0cac
	public override Type GetType(String className, Boolean throwOnError, Boolean ignoreCase) { }
	// Offset : 0x5df6c0
	internal Int32 get_next_table_index(Object obj, Int32 table, Boolean inc) { }
	// Offset : 0x5e1004
	public override Type[] GetTypes() { }
	// Offset : 0x5e11cc
	private static Int32 getUSIndex(ModuleBuilder mb, String str) { }
	// Offset : 0x5e11d0
	private static Int32 getToken(ModuleBuilder mb, Object obj) { }
	// Offset : 0x5e11d4
	private static Int32 getMethodToken(ModuleBuilder mb, MethodInfo method, Type[] opt_param_types) { }
	// Offset : 0x5e11d8
	internal Int32 GetToken(String str) { }
	// Offset : 0x5e1360
	internal Int32 GetToken(MemberInfo member) { }
	// Offset : 0x5e13d4
	internal Int32 GetToken(MethodInfo method, Type[] opt_param_types) { }
	// Offset : 0x5d7488
	internal Void RegisterToken(Object obj, Int32 token) { }
	// Offset : 0x5d7e50
	internal TokenGenerator GetTokenGenerator() { }
	// Offset : 0x5d6ec0
	internal String get_FileName() { }
	// Offset : 0x5df820
	internal Void CreateGlobalType() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
internal class ModuleBuilderTokenGenerator : TokenGenerator
{
	// Fields
	private ModuleBuilder mb; // 0x10

	// Properties

	// Methods
	// Offset : 0x5e1450
	public Void .ctor(ModuleBuilder mb) { }
	// Offset : 0x5e147c
	public Int32 GetToken(String str) { }
	// Offset : 0x5e14b0
	public Int32 GetToken(MemberInfo member) { }
	// Offset : 0x5e14e4
	public Int32 GetToken(MethodInfo method, Type[] opt_param_types) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public struct OpCode
{
	// Fields
	internal Byte op1; // 0x10
	internal Byte op2; // 0x11
	private Byte push; // 0x12
	private Byte pop; // 0x13
	private Byte size; // 0x14
	private Byte type; // 0x15
	private Byte args; // 0x16
	private Byte flow; // 0x17

	// Properties
	public String Name { get; }
	public Int32 Size { get; }
	public OperandType OperandType { get; }
	public StackBehaviour StackBehaviourPop { get; }
	public StackBehaviour StackBehaviourPush { get; }
	public Int16 Value { get; }

	// Methods
	// Offset : 0x2ccae8
	internal Void .ctor(Int32 p, Int32 q) { }
	// Offset : 0x2ccb24
	public override Int32 GetHashCode() { }
	// Offset : 0x2ccb2c
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2ccb34
	public override String ToString() { }
	// Offset : 0x2ccb3c
	public String get_Name() { }
	// Offset : 0x2ccb44
	public Int32 get_Size() { }
	// Offset : 0x2ccb4c
	public OperandType get_OperandType() { }
	// Offset : 0x2ccb54
	public StackBehaviour get_StackBehaviourPop() { }
	// Offset : 0x2ccb5c
	public StackBehaviour get_StackBehaviourPush() { }
	// Offset : 0x2ccb64
	public Int16 get_Value() { }
	// Offset : 0x5ddb1c
	public static Boolean op_Equality(OpCode a, OpCode b) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
internal class OpCodeNames
{
	// Fields
	internal static readonly String[] names; // 0x0

	// Properties

	// Methods
	// Offset : 0x5e1714
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public class OpCodes
{
	// Fields
	public static readonly OpCode Nop; // 0x0
	public static readonly OpCode Break; // 0x8
	public static readonly OpCode Ldarg_0; // 0x10
	public static readonly OpCode Ldarg_1; // 0x18
	public static readonly OpCode Ldarg_2; // 0x20
	public static readonly OpCode Ldarg_3; // 0x28
	public static readonly OpCode Ldloc_0; // 0x30
	public static readonly OpCode Ldloc_1; // 0x38
	public static readonly OpCode Ldloc_2; // 0x40
	public static readonly OpCode Ldloc_3; // 0x48
	public static readonly OpCode Stloc_0; // 0x50
	public static readonly OpCode Stloc_1; // 0x58
	public static readonly OpCode Stloc_2; // 0x60
	public static readonly OpCode Stloc_3; // 0x68
	public static readonly OpCode Ldarg_S; // 0x70
	public static readonly OpCode Ldarga_S; // 0x78
	public static readonly OpCode Starg_S; // 0x80
	public static readonly OpCode Ldloc_S; // 0x88
	public static readonly OpCode Ldloca_S; // 0x90
	public static readonly OpCode Stloc_S; // 0x98
	public static readonly OpCode Ldnull; // 0xa0
	public static readonly OpCode Ldc_I4_M1; // 0xa8
	public static readonly OpCode Ldc_I4_0; // 0xb0
	public static readonly OpCode Ldc_I4_1; // 0xb8
	public static readonly OpCode Ldc_I4_2; // 0xc0
	public static readonly OpCode Ldc_I4_3; // 0xc8
	public static readonly OpCode Ldc_I4_4; // 0xd0
	public static readonly OpCode Ldc_I4_5; // 0xd8
	public static readonly OpCode Ldc_I4_6; // 0xe0
	public static readonly OpCode Ldc_I4_7; // 0xe8
	public static readonly OpCode Ldc_I4_8; // 0xf0
	public static readonly OpCode Ldc_I4_S; // 0xf8
	public static readonly OpCode Ldc_I4; // 0x100
	public static readonly OpCode Ldc_I8; // 0x108
	public static readonly OpCode Ldc_R4; // 0x110
	public static readonly OpCode Ldc_R8; // 0x118
	public static readonly OpCode Dup; // 0x120
	public static readonly OpCode Pop; // 0x128
	public static readonly OpCode Jmp; // 0x130
	public static readonly OpCode Call; // 0x138
	public static readonly OpCode Calli; // 0x140
	public static readonly OpCode Ret; // 0x148
	public static readonly OpCode Br_S; // 0x150
	public static readonly OpCode Brfalse_S; // 0x158
	public static readonly OpCode Brtrue_S; // 0x160
	public static readonly OpCode Beq_S; // 0x168
	public static readonly OpCode Bge_S; // 0x170
	public static readonly OpCode Bgt_S; // 0x178
	public static readonly OpCode Ble_S; // 0x180
	public static readonly OpCode Blt_S; // 0x188
	public static readonly OpCode Bne_Un_S; // 0x190
	public static readonly OpCode Bge_Un_S; // 0x198
	public static readonly OpCode Bgt_Un_S; // 0x1a0
	public static readonly OpCode Ble_Un_S; // 0x1a8
	public static readonly OpCode Blt_Un_S; // 0x1b0
	public static readonly OpCode Br; // 0x1b8
	public static readonly OpCode Brfalse; // 0x1c0
	public static readonly OpCode Brtrue; // 0x1c8
	public static readonly OpCode Beq; // 0x1d0
	public static readonly OpCode Bge; // 0x1d8
	public static readonly OpCode Bgt; // 0x1e0
	public static readonly OpCode Ble; // 0x1e8
	public static readonly OpCode Blt; // 0x1f0
	public static readonly OpCode Bne_Un; // 0x1f8
	public static readonly OpCode Bge_Un; // 0x200
	public static readonly OpCode Bgt_Un; // 0x208
	public static readonly OpCode Ble_Un; // 0x210
	public static readonly OpCode Blt_Un; // 0x218
	public static readonly OpCode Switch; // 0x220
	public static readonly OpCode Ldind_I1; // 0x228
	public static readonly OpCode Ldind_U1; // 0x230
	public static readonly OpCode Ldind_I2; // 0x238
	public static readonly OpCode Ldind_U2; // 0x240
	public static readonly OpCode Ldind_I4; // 0x248
	public static readonly OpCode Ldind_U4; // 0x250
	public static readonly OpCode Ldind_I8; // 0x258
	public static readonly OpCode Ldind_I; // 0x260
	public static readonly OpCode Ldind_R4; // 0x268
	public static readonly OpCode Ldind_R8; // 0x270
	public static readonly OpCode Ldind_Ref; // 0x278
	public static readonly OpCode Stind_Ref; // 0x280
	public static readonly OpCode Stind_I1; // 0x288
	public static readonly OpCode Stind_I2; // 0x290
	public static readonly OpCode Stind_I4; // 0x298
	public static readonly OpCode Stind_I8; // 0x2a0
	public static readonly OpCode Stind_R4; // 0x2a8
	public static readonly OpCode Stind_R8; // 0x2b0
	public static readonly OpCode Add; // 0x2b8
	public static readonly OpCode Sub; // 0x2c0
	public static readonly OpCode Mul; // 0x2c8
	public static readonly OpCode Div; // 0x2d0
	public static readonly OpCode Div_Un; // 0x2d8
	public static readonly OpCode Rem; // 0x2e0
	public static readonly OpCode Rem_Un; // 0x2e8
	public static readonly OpCode And; // 0x2f0
	public static readonly OpCode Or; // 0x2f8
	public static readonly OpCode Xor; // 0x300
	public static readonly OpCode Shl; // 0x308
	public static readonly OpCode Shr; // 0x310
	public static readonly OpCode Shr_Un; // 0x318
	public static readonly OpCode Neg; // 0x320
	public static readonly OpCode Not; // 0x328
	public static readonly OpCode Conv_I1; // 0x330
	public static readonly OpCode Conv_I2; // 0x338
	public static readonly OpCode Conv_I4; // 0x340
	public static readonly OpCode Conv_I8; // 0x348
	public static readonly OpCode Conv_R4; // 0x350
	public static readonly OpCode Conv_R8; // 0x358
	public static readonly OpCode Conv_U4; // 0x360
	public static readonly OpCode Conv_U8; // 0x368
	public static readonly OpCode Callvirt; // 0x370
	public static readonly OpCode Cpobj; // 0x378
	public static readonly OpCode Ldobj; // 0x380
	public static readonly OpCode Ldstr; // 0x388
	public static readonly OpCode Newobj; // 0x390
	public static readonly OpCode Castclass; // 0x398
	public static readonly OpCode Isinst; // 0x3a0
	public static readonly OpCode Conv_R_Un; // 0x3a8
	public static readonly OpCode Unbox; // 0x3b0
	public static readonly OpCode Throw; // 0x3b8
	public static readonly OpCode Ldfld; // 0x3c0
	public static readonly OpCode Ldflda; // 0x3c8
	public static readonly OpCode Stfld; // 0x3d0
	public static readonly OpCode Ldsfld; // 0x3d8
	public static readonly OpCode Ldsflda; // 0x3e0
	public static readonly OpCode Stsfld; // 0x3e8
	public static readonly OpCode Stobj; // 0x3f0
	public static readonly OpCode Conv_Ovf_I1_Un; // 0x3f8
	public static readonly OpCode Conv_Ovf_I2_Un; // 0x400
	public static readonly OpCode Conv_Ovf_I4_Un; // 0x408
	public static readonly OpCode Conv_Ovf_I8_Un; // 0x410
	public static readonly OpCode Conv_Ovf_U1_Un; // 0x418
	public static readonly OpCode Conv_Ovf_U2_Un; // 0x420
	public static readonly OpCode Conv_Ovf_U4_Un; // 0x428
	public static readonly OpCode Conv_Ovf_U8_Un; // 0x430
	public static readonly OpCode Conv_Ovf_I_Un; // 0x438
	public static readonly OpCode Conv_Ovf_U_Un; // 0x440
	public static readonly OpCode Box; // 0x448
	public static readonly OpCode Newarr; // 0x450
	public static readonly OpCode Ldlen; // 0x458
	public static readonly OpCode Ldelema; // 0x460
	public static readonly OpCode Ldelem_I1; // 0x468
	public static readonly OpCode Ldelem_U1; // 0x470
	public static readonly OpCode Ldelem_I2; // 0x478
	public static readonly OpCode Ldelem_U2; // 0x480
	public static readonly OpCode Ldelem_I4; // 0x488
	public static readonly OpCode Ldelem_U4; // 0x490
	public static readonly OpCode Ldelem_I8; // 0x498
	public static readonly OpCode Ldelem_I; // 0x4a0
	public static readonly OpCode Ldelem_R4; // 0x4a8
	public static readonly OpCode Ldelem_R8; // 0x4b0
	public static readonly OpCode Ldelem_Ref; // 0x4b8
	public static readonly OpCode Stelem_I; // 0x4c0
	public static readonly OpCode Stelem_I1; // 0x4c8
	public static readonly OpCode Stelem_I2; // 0x4d0
	public static readonly OpCode Stelem_I4; // 0x4d8
	public static readonly OpCode Stelem_I8; // 0x4e0
	public static readonly OpCode Stelem_R4; // 0x4e8
	public static readonly OpCode Stelem_R8; // 0x4f0
	public static readonly OpCode Stelem_Ref; // 0x4f8
	public static readonly OpCode Ldelem; // 0x500
	public static readonly OpCode Stelem; // 0x508
	public static readonly OpCode Unbox_Any; // 0x510
	public static readonly OpCode Conv_Ovf_I1; // 0x518
	public static readonly OpCode Conv_Ovf_U1; // 0x520
	public static readonly OpCode Conv_Ovf_I2; // 0x528
	public static readonly OpCode Conv_Ovf_U2; // 0x530
	public static readonly OpCode Conv_Ovf_I4; // 0x538
	public static readonly OpCode Conv_Ovf_U4; // 0x540
	public static readonly OpCode Conv_Ovf_I8; // 0x548
	public static readonly OpCode Conv_Ovf_U8; // 0x550
	public static readonly OpCode Refanyval; // 0x558
	public static readonly OpCode Ckfinite; // 0x560
	public static readonly OpCode Mkrefany; // 0x568
	public static readonly OpCode Ldtoken; // 0x570
	public static readonly OpCode Conv_U2; // 0x578
	public static readonly OpCode Conv_U1; // 0x580
	public static readonly OpCode Conv_I; // 0x588
	public static readonly OpCode Conv_Ovf_I; // 0x590
	public static readonly OpCode Conv_Ovf_U; // 0x598
	public static readonly OpCode Add_Ovf; // 0x5a0
	public static readonly OpCode Add_Ovf_Un; // 0x5a8
	public static readonly OpCode Mul_Ovf; // 0x5b0
	public static readonly OpCode Mul_Ovf_Un; // 0x5b8
	public static readonly OpCode Sub_Ovf; // 0x5c0
	public static readonly OpCode Sub_Ovf_Un; // 0x5c8
	public static readonly OpCode Endfinally; // 0x5d0
	public static readonly OpCode Leave; // 0x5d8
	public static readonly OpCode Leave_S; // 0x5e0
	public static readonly OpCode Stind_I; // 0x5e8
	public static readonly OpCode Conv_U; // 0x5f0
	public static readonly OpCode Prefix7; // 0x5f8
	public static readonly OpCode Prefix6; // 0x600
	public static readonly OpCode Prefix5; // 0x608
	public static readonly OpCode Prefix4; // 0x610
	public static readonly OpCode Prefix3; // 0x618
	public static readonly OpCode Prefix2; // 0x620
	public static readonly OpCode Prefix1; // 0x628
	public static readonly OpCode Prefixref; // 0x630
	public static readonly OpCode Arglist; // 0x638
	public static readonly OpCode Ceq; // 0x640
	public static readonly OpCode Cgt; // 0x648
	public static readonly OpCode Cgt_Un; // 0x650
	public static readonly OpCode Clt; // 0x658
	public static readonly OpCode Clt_Un; // 0x660
	public static readonly OpCode Ldftn; // 0x668
	public static readonly OpCode Ldvirtftn; // 0x670
	public static readonly OpCode Ldarg; // 0x678
	public static readonly OpCode Ldarga; // 0x680
	public static readonly OpCode Starg; // 0x688
	public static readonly OpCode Ldloc; // 0x690
	public static readonly OpCode Ldloca; // 0x698
	public static readonly OpCode Stloc; // 0x6a0
	public static readonly OpCode Localloc; // 0x6a8
	public static readonly OpCode Endfilter; // 0x6b0
	public static readonly OpCode Unaligned; // 0x6b8
	public static readonly OpCode Volatile; // 0x6c0
	public static readonly OpCode Tailcall; // 0x6c8
	public static readonly OpCode Initobj; // 0x6d0
	public static readonly OpCode Constrained; // 0x6d8
	public static readonly OpCode Cpblk; // 0x6e0
	public static readonly OpCode Initblk; // 0x6e8
	public static readonly OpCode Rethrow; // 0x6f0
	public static readonly OpCode Sizeof; // 0x6f8
	public static readonly OpCode Refanytype; // 0x700
	public static readonly OpCode Readonly; // 0x708

	// Properties

	// Methods
	// Offset : 0x5e61a8
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
[Serializable]
public enum OperandType
{
	// Fields
	public Int32 value__; // 0x10
	public const OperandType InlineBrTarget = 0; // 0x0
	public const OperandType InlineField = 1; // 0x0
	public const OperandType InlineI = 2; // 0x0
	public const OperandType InlineI8 = 3; // 0x0
	public const OperandType InlineMethod = 4; // 0x0
	public const OperandType InlineNone = 5; // 0x0
	public const OperandType InlinePhi = 6; // 0x0
	public const OperandType InlineR = 7; // 0x0
	public const OperandType InlineSig = 9; // 0x0
	public const OperandType InlineString = 10; // 0x0
	public const OperandType InlineSwitch = 11; // 0x0
	public const OperandType InlineTok = 12; // 0x0
	public const OperandType InlineType = 13; // 0x0
	public const OperandType InlineVar = 14; // 0x0
	public const OperandType ShortInlineBrTarget = 15; // 0x0
	public const OperandType ShortInlineI = 16; // 0x0
	public const OperandType ShortInlineR = 17; // 0x0
	public const OperandType ShortInlineVar = 18; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
[Serializable]
public enum PEFileKinds
{
	// Fields
	public Int32 value__; // 0x10
	public const PEFileKinds Dll = 1; // 0x0
	public const PEFileKinds ConsoleApplication = 2; // 0x0
	public const PEFileKinds WindowApplication = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
[Serializable]
public enum PackingSize
{
	// Fields
	public Int32 value__; // 0x10
	public const PackingSize Unspecified = 0; // 0x0
	public const PackingSize Size1 = 1; // 0x0
	public const PackingSize Size2 = 2; // 0x0
	public const PackingSize Size4 = 4; // 0x0
	public const PackingSize Size8 = 8; // 0x0
	public const PackingSize Size16 = 16; // 0x0
	public const PackingSize Size32 = 32; // 0x0
	public const PackingSize Size64 = 64; // 0x0
	public const PackingSize Size128 = 128; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public class ParameterBuilder : _ParameterBuilder
{
	// Fields
	private String name; // 0x10
	private ParameterAttributes attrs; // 0x18
	private Int32 position; // 0x1c

	// Properties
	public virtual Int32 Attributes { get; }
	public virtual String Name { get; }
	public virtual Int32 Position { get; }

	// Methods
	// Offset : 0x5e7190
	public virtual Int32 get_Attributes() { }
	// Offset : 0x5e7198
	public virtual String get_Name() { }
	// Offset : 0x5e71a0
	public virtual Int32 get_Position() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class PropertyBuilder : PropertyInfo, _PropertyBuilder
{
	// Fields
	private PropertyAttributes attrs; // 0x10
	private String name; // 0x18
	private Type type; // 0x20
	private MethodBuilder set_method; // 0x28
	private MethodBuilder get_method; // 0x30
	internal TypeBuilder typeb; // 0x38

	// Properties
	public override PropertyAttributes Attributes { get; }
	public override Boolean CanRead { get; }
	public override Boolean CanWrite { get; }
	public override Type DeclaringType { get; }
	public override String Name { get; }
	public override Type PropertyType { get; }
	public override Type ReflectedType { get; }
	public override Module Module { get; }

	// Methods
	// Offset : 0x5e71a8
	public override PropertyAttributes get_Attributes() { }
	// Offset : 0x5e71b0
	public override Boolean get_CanRead() { }
	// Offset : 0x5e71c0
	public override Boolean get_CanWrite() { }
	// Offset : 0x5e71d0
	public override Type get_DeclaringType() { }
	// Offset : 0x5e71d8
	public override String get_Name() { }
	// Offset : 0x5e71e0
	public override Type get_PropertyType() { }
	// Offset : 0x5e71e8
	public override Type get_ReflectedType() { }
	// Offset : 0x5e71f0
	public override MethodInfo[] GetAccessors(Boolean nonPublic) { }
	// Offset : 0x5e71f8
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x5e72ac
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x5e72f8
	public override MethodInfo GetGetMethod(Boolean nonPublic) { }
	// Offset : 0x5e7300
	public override ParameterInfo[] GetIndexParameters() { }
	// Offset : 0x5e734c
	public override MethodInfo GetSetMethod(Boolean nonPublic) { }
	// Offset : 0x5e7354
	public override Object GetValue(Object obj, Object[] index) { }
	// Offset : 0x5e735c
	public override Object GetValue(Object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture) { }
	// Offset : 0x5e73a8
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x5e73f4
	public override Void SetValue(Object obj, Object value, Object[] index) { }
	// Offset : 0x5e73f8
	public override Void SetValue(Object obj, Object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture) { }
	// Offset : 0x5e73fc
	public override Module get_Module() { }
	// Offset : 0x5e7244
	private Exception not_supported() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
[Serializable]
public enum StackBehaviour
{
	// Fields
	public Int32 value__; // 0x10
	public const StackBehaviour Pop0 = 0; // 0x0
	public const StackBehaviour Pop1 = 1; // 0x0
	public const StackBehaviour Pop1_pop1 = 2; // 0x0
	public const StackBehaviour Popi = 3; // 0x0
	public const StackBehaviour Popi_pop1 = 4; // 0x0
	public const StackBehaviour Popi_popi = 5; // 0x0
	public const StackBehaviour Popi_popi8 = 6; // 0x0
	public const StackBehaviour Popi_popi_popi = 7; // 0x0
	public const StackBehaviour Popi_popr4 = 8; // 0x0
	public const StackBehaviour Popi_popr8 = 9; // 0x0
	public const StackBehaviour Popref = 10; // 0x0
	public const StackBehaviour Popref_pop1 = 11; // 0x0
	public const StackBehaviour Popref_popi = 12; // 0x0
	public const StackBehaviour Popref_popi_popi = 13; // 0x0
	public const StackBehaviour Popref_popi_popi8 = 14; // 0x0
	public const StackBehaviour Popref_popi_popr4 = 15; // 0x0
	public const StackBehaviour Popref_popi_popr8 = 16; // 0x0
	public const StackBehaviour Popref_popi_popref = 17; // 0x0
	public const StackBehaviour Push0 = 18; // 0x0
	public const StackBehaviour Push1 = 19; // 0x0
	public const StackBehaviour Push1_push1 = 20; // 0x0
	public const StackBehaviour Pushi = 21; // 0x0
	public const StackBehaviour Pushi8 = 22; // 0x0
	public const StackBehaviour Pushr4 = 23; // 0x0
	public const StackBehaviour Pushr8 = 24; // 0x0
	public const StackBehaviour Pushref = 25; // 0x0
	public const StackBehaviour Varpop = 26; // 0x0
	public const StackBehaviour Varpush = 27; // 0x0
	public const StackBehaviour Popref_popi_pop1 = 28; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
public sealed class TypeBuilder : Type, _TypeBuilder
{
	// Fields
	private String tname; // 0x18
	private String nspace; // 0x20
	private Type parent; // 0x28
	private Type nesting_type; // 0x30
	internal Type[] interfaces; // 0x38
	internal Int32 num_methods; // 0x40
	internal MethodBuilder[] methods; // 0x48
	internal ConstructorBuilder[] ctors; // 0x50
	internal PropertyBuilder[] properties; // 0x58
	internal Int32 num_fields; // 0x60
	internal FieldBuilder[] fields; // 0x68
	internal EventBuilder[] events; // 0x70
	private CustomAttributeBuilder[] cattrs; // 0x78
	internal TypeBuilder[] subtypes; // 0x80
	internal TypeAttributes attrs; // 0x88
	private Int32 table_idx; // 0x8c
	private ModuleBuilder pmodule; // 0x90
	private Int32 class_size; // 0x98
	private PackingSize packing_size; // 0x9c
	private IntPtr generic_container; // 0xa0
	private GenericTypeParameterBuilder[] generic_params; // 0xa8
	private RefEmitPermissionSet[] permissions; // 0xb0
	private Type created; // 0xb8
	private String fullname; // 0xc0
	private Boolean createTypeCalled; // 0xc8
	private Type underlying_type; // 0xd0

	// Properties
	public override Assembly Assembly { get; }
	public override String AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override Type DeclaringType { get; }
	public override Type UnderlyingSystemType { get; }
	public override String FullName { get; }
	public override Module Module { get; }
	public override String Name { get; }
	public override String Namespace { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	internal Boolean IsCompilerContext { get; }
	internal Boolean is_created { get; }
	public override Boolean ContainsGenericParameters { get; }
	public override Boolean IsGenericParameter { get; }
	public override Boolean IsGenericTypeDefinition { get; }
	public override Boolean IsGenericType { get; }

	// Methods
	// Offset : 0x5df890
	internal Void .ctor(ModuleBuilder mb, TypeAttributes attr, Int32 table_idx) { }
	// Offset : 0x5e0610
	internal Void .ctor(ModuleBuilder mb, String name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packing_size, Int32 type_size, Type nesting_type) { }
	// Offset : 0x5e7658
	protected override TypeAttributes GetAttributeFlagsImpl() { }
	// Offset : 0x5e7400
	private Void setup_internal_class(TypeBuilder tb) { }
	// Offset : 0x5e7660
	private Void create_generic_class() { }
	// Offset : 0x5d9e94
	public override Assembly get_Assembly() { }
	// Offset : 0x5d9ef0
	public override String get_AssemblyQualifiedName() { }
	// Offset : 0x5d9fdc
	public override Type get_BaseType() { }
	// Offset : 0x5da010
	public override Type get_DeclaringType() { }
	// Offset : 0x5e7664
	public override Type get_UnderlyingSystemType() { }
	// Offset : 0x5e7540
	private String GetFullName() { }
	// Offset : 0x5da044
	public override String get_FullName() { }
	// Offset : 0x5d746c
	public override Module get_Module() { }
	// Offset : 0x5d807c
	public override String get_Name() { }
	// Offset : 0x5da0d0
	public override String get_Namespace() { }
	// Offset : 0x5da104
	public override Type get_ReflectedType() { }
	// Offset : 0x5e774c
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5db2c0
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x5da370
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x5da410
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x5e7bf4
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes) { }
	// Offset : 0x5e7c00
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers) { }
	// Offset : 0x5e7e58
	public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes) { }
	// Offset : 0x5e80b0
	private Void append_method(MethodBuilder mb) { }
	// Offset : 0x5e81e8
	public MethodBuilder DefineMethod(String name, MethodAttributes attributes, Type returnType, Type[] parameterTypes) { }
	// Offset : 0x5e8224
	public MethodBuilder DefineMethod(String name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { }
	// Offset : 0x5e8254
	public MethodBuilder DefineMethod(String name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { }
	// Offset : 0x5e83e0
	public Void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration) { }
	// Offset : 0x5e8518
	private Type create_runtime_class(TypeBuilder tb) { }
	// Offset : 0x5e851c
	private Boolean is_nested_in(Type t) { }
	// Offset : 0x5e8588
	private Boolean has_ctor_method() { }
	// Offset : 0x5df9dc
	public Type CreateType() { }
	// Offset : 0x5da260
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }
	// Offset : 0x5e880c
	internal ConstructorInfo[] GetConstructorsInternal(BindingFlags bindingAttr) { }
	// Offset : 0x5da494
	public override Type GetElementType() { }
	// Offset : 0x5da540
	public override EventInfo GetEvent(String name, BindingFlags bindingAttr) { }
	// Offset : 0x5da5f4
	public override FieldInfo GetField(String name, BindingFlags bindingAttr) { }
	// Offset : 0x5da7fc
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }
	// Offset : 0x5daa9c
	public override Type GetInterface(String name, Boolean ignoreCase) { }
	// Offset : 0x5dab38
	public override Type[] GetInterfaces() { }
	// Offset : 0x5e8a08
	private MethodInfo[] GetMethodsByName(String name, BindingFlags bindingAttr, Boolean ignoreCase, Type reflected_type) { }
	// Offset : 0x5dad10
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }
	// Offset : 0x5e8f80
	protected override MethodInfo GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5dad58
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }
	// Offset : 0x5e93f8
	protected override PropertyInfo GetPropertyImpl(String name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5e94ac
	protected override Boolean HasElementTypeImpl() { }
	// Offset : 0x5db19c
	public override Object InvokeMember(String name, BindingFlags invokeAttr, Binder binder, Object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters) { }
	// Offset : 0x5e94c0
	protected override Boolean IsArrayImpl() { }
	// Offset : 0x5e94c8
	protected override Boolean IsByRefImpl() { }
	// Offset : 0x5e94d0
	protected override Boolean IsPointerImpl() { }
	// Offset : 0x5e94d8
	protected override Boolean IsPrimitiveImpl() { }
	// Offset : 0x5e94e0
	protected override Boolean IsValueTypeImpl() { }
	// Offset : 0x5e9634
	public override Type MakeByRefType() { }
	// Offset : 0x5e9694
	public override Type MakeGenericType(Type[] typeArguments) { }
	// Offset : 0x5da138
	public override RuntimeTypeHandle get_TypeHandle() { }
	// Offset : 0x5e86c8
	public Void SetParent(Type parent) { }
	// Offset : 0x5d84e4
	internal Int32 get_next_table_index(Object obj, Int32 table, Boolean inc) { }
	// Offset : 0x5e7504
	internal Boolean get_IsCompilerContext() { }
	// Offset : 0x5d7520
	internal Boolean get_is_created() { }
	// Offset : 0x5e9444
	private Exception not_supported() { }
	// Offset : 0x5e7dcc
	private Void check_not_created() { }
	// Offset : 0x5e7b90
	private Void check_created() { }
	// Offset : 0x5e7404
	private Void check_name(String argName, String name) { }
	// Offset : 0x5e969c
	public override String ToString() { }
	// Offset : 0x5e96a4
	public override Boolean IsAssignableFrom(Type c) { }
	// Offset : 0x5e96ac
	public override Boolean IsSubclassOf(Type c) { }
	// Offset : 0x5e96b4
	internal Boolean IsAssignableTo(Type c) { }
	// Offset : 0x5e98b4
	public override Type[] GetGenericArguments() { }
	// Offset : 0x5e9944
	public override Type GetGenericTypeDefinition() { }
	// Offset : 0x5e99d4
	public override Boolean get_ContainsGenericParameters() { }
	// Offset : 0x5e99e4
	public override Boolean get_IsGenericParameter() { }
	// Offset : 0x5e99e8
	public override Boolean get_IsGenericTypeDefinition() { }
	// Offset : 0x5e99f8
	public override Boolean get_IsGenericType() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection.Emit
[Serializable]
public sealed class UnmanagedMarshal
{
	// Fields
	private Int32 count; // 0x10
	private UnmanagedType t; // 0x14
	private UnmanagedType tbase; // 0x18
	private String guid; // 0x20
	private String mcookie; // 0x28
	private String marshaltype; // 0x30
	private Type marshaltyperef; // 0x38
	private Int32 param_num; // 0x40
	private Boolean has_size; // 0x44

	// Properties

	// Methods
	// Offset : 0x5e9a08
	internal MarshalAsAttribute ToMarshalAsAttribute() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class AmbiguousMatchException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x69cbcc
	public Void .ctor() { }
	// Offset : 0x69ac68
	public Void .ctor(String message) { }
	// Offset : 0x6a7e40
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public class Assembly : ICustomAttributeProvider, _Assembly
{
	// Fields
	private IntPtr _mono_assembly; // 0x10
	private ResolveEventHolder resolve_event_holder; // 0x18
	private Evidence _evidence; // 0x20
	internal PermissionSet _minimum; // 0x28
	internal PermissionSet _optional; // 0x30
	internal PermissionSet _refuse; // 0x38
	private PermissionSet _granted; // 0x40
	private PermissionSet _denied; // 0x48
	private Boolean fromByteArray; // 0x50
	private String assemblyName; // 0x58

	// Properties
	public virtual String FullName { get; }
	public virtual String Location { get; }

	// Methods
	// Offset : 0x6a7e48
	internal Void .ctor() { }
	// Offset : 0x6a7ea8
	private String get_code_base(Boolean escaped) { }
	// Offset : 0x6a7eb0
	private String get_fullname() { }
	// Offset : 0x6a7eb4
	private String get_location() { }
	// Offset : 0x6a7eb8
	private String GetCodeBase(Boolean escaped) { }
	// Offset : 0x6a7ec0
	public virtual String get_FullName() { }
	// Offset : 0x6a7f00
	public virtual String get_Location() { }
	// Offset : 0x6a7f80
	public virtual Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x6a7ffc
	public virtual Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x6a8078
	internal IntPtr GetManifestResourceInternal(String name, out Int32 size, out Module module) { }
	// Offset : 0x6a807c
	public virtual Stream GetManifestResourceStream(String name) { }
	// Offset : 0x6a8468
	public virtual Stream GetManifestResourceStream(Type type, String name) { }
	// Offset : 0x6a85b4
	internal virtual Type[] GetTypes(Boolean exportedOnly) { }
	// Offset : 0x6a85bc
	public virtual Type[] GetTypes() { }
	// Offset : 0x6a8600
	public virtual Type GetType(String name, Boolean throwOnError) { }
	// Offset : 0x6a8704
	public virtual Type GetType(String name) { }
	// Offset : 0x6a8710
	internal Type InternalGetType(Module module, String name, Boolean throwOnError, Boolean ignoreCase) { }
	// Offset : 0x6a860c
	public Type GetType(String name, Boolean throwOnError, Boolean ignoreCase) { }
	// Offset : 0x6a871c
	private static Void FillName(Assembly ass, AssemblyName aname) { }
	// Offset : 0x6a8720
	public virtual AssemblyName GetName(Boolean copiedName) { }
	// Offset : 0x6a87c0
	public virtual AssemblyName GetName() { }
	// Offset : 0x6a8808
	internal virtual AssemblyName UnprotectedGetName() { }
	// Offset : 0x6a8874
	public override String ToString() { }
	// Offset : 0x6a88a4
	internal Assembly GetSatelliteAssemblyNoThrow(CultureInfo culture, Version version) { }
	// Offset : 0x6a88ac
	private Assembly GetSatelliteAssembly(CultureInfo culture, Version version, Boolean throwOnError) { }
	// Offset : 0x6a8c30
	private static Assembly LoadFrom(String assemblyFile, Boolean refonly) { }
	// Offset : 0x6a8c28
	public static Assembly LoadFrom(String assemblyFile) { }
	// Offset : 0x6a8c38
	public static Assembly Load(String assemblyString) { }
	// Offset : 0x6a8c74
	public static Assembly LoadWithPartialName(String partialName) { }
	// Offset : 0x6a8c88
	private static Assembly load_with_partial_name(String name, Evidence e) { }
	// Offset : 0x6a8c80
	public static Assembly LoadWithPartialName(String partialName, Evidence securityEvidence) { }
	// Offset : 0x6a8c8c
	internal static Assembly LoadWithPartialName(String partialName, Evidence securityEvidence, Boolean oldBehavior) { }
	// Offset : 0x6a8d3c
	public Module GetModule(String name) { }
	// Offset : 0x6a910c
	internal virtual Module[] GetModulesInternal() { }
	// Offset : 0x6a8ec8
	public Module[] GetModules(Boolean getResourceModules) { }
	// Offset : 0x6a9110
	public virtual String[] GetManifestResourceNames() { }
	// Offset : 0x6a9114
	public static Assembly GetExecutingAssembly() { }
	// Offset : 0x6a9168
	private Boolean GetManifestResourceInfoInternal(String name, ManifestResourceInfo info) { }
	// Offset : 0x6a916c
	public virtual ManifestResourceInfo GetManifestResourceInfo(String resourceName) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal class ResolveEventHolder
{
	// Fields
	private ModuleResolveEventHandler ModuleResolve; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf6c8
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: 
private class ResourceCloseHandler
{
	// Fields
	private Module module; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf6d0
	public Void .ctor(Module module) { }
	// Offset : 0x5cf6fc
	public Void OnClose(Object sender, EventArgs e) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyCompanyAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf704
	public Void .ctor(String company) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyConfigurationAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf730
	public Void .ctor(String configuration) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyCopyrightAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf75c
	public Void .ctor(String copyright) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyDefaultAliasAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf788
	public Void .ctor(String defaultAlias) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyDelaySignAttribute : Attribute
{
	// Fields
	private Boolean delay; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf7b4
	public Void .ctor(Boolean delaySign) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyDescriptionAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf7e4
	public Void .ctor(String description) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyFileVersionAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf810
	public Void .ctor(String version) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyInformationalVersionAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf8b4
	public Void .ctor(String informationalVersion) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyKeyFileAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5cf8e0
	public Void .ctor(String keyFile) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class AssemblyName : ICloneable, ISerializable, _AssemblyName, IDeserializationCallback
{
	// Fields
	private String name; // 0x10
	private String codebase; // 0x18
	private Int32 major; // 0x20
	private Int32 minor; // 0x24
	private Int32 build; // 0x28
	private Int32 revision; // 0x2c
	private CultureInfo cultureinfo; // 0x30
	private AssemblyNameFlags flags; // 0x38
	private AssemblyHashAlgorithm hashalg; // 0x3c
	private StrongNameKeyPair keypair; // 0x40
	private Byte[] publicKey; // 0x48
	private Byte[] keyToken; // 0x50
	private AssemblyVersionCompatibility versioncompat; // 0x58
	private Version version; // 0x60
	private ProcessorArchitecture processor_architecture; // 0x68

	// Properties
	public String Name { get; set; }
	public CultureInfo CultureInfo { get; set; }
	public AssemblyNameFlags Flags { get; }
	public String FullName { get; }
	public StrongNameKeyPair KeyPair { get; }
	public Version Version { get; set; }
	private Boolean IsPublicKeyValid { get; }

	// Methods
	// Offset : 0x5cf90c
	public Void .ctor() { }
	// Offset : 0x5cf938
	internal Void .ctor(SerializationInfo si, StreamingContext sc) { }
	// Offset : 0x5cfe68
	public String get_Name() { }
	// Offset : 0x5cfe70
	public Void set_Name(String value) { }
	// Offset : 0x5cfe78
	public CultureInfo get_CultureInfo() { }
	// Offset : 0x5cfe80
	public Void set_CultureInfo(CultureInfo value) { }
	// Offset : 0x5cfe88
	public AssemblyNameFlags get_Flags() { }
	// Offset : 0x5cfe90
	public String get_FullName() { }
	// Offset : 0x5d0314
	public StrongNameKeyPair get_KeyPair() { }
	// Offset : 0x5d0234
	public Version get_Version() { }
	// Offset : 0x5d031c
	public Void set_Version(Version value) { }
	// Offset : 0x5d03f4
	public override String ToString() { }
	// Offset : 0x5d042c
	public Byte[] GetPublicKey() { }
	// Offset : 0x5d0434
	private Boolean get_IsPublicKeyValid() { }
	// Offset : 0x5d023c
	private Byte[] InternalGetPublicKeyToken() { }
	// Offset : 0x5d069c
	private Byte[] ComputePublicKeyToken() { }
	// Offset : 0x5d0768
	public Void SetPublicKey(Byte[] publicKey) { }
	// Offset : 0x5d0788
	public Void SetPublicKeyToken(Byte[] publicKeyToken) { }
	// Offset : 0x5d0790
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x5d0a1c
	public Object Clone() { }
	// Offset : 0x5d0c04
	public Void OnDeserialization(Object sender) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum AssemblyNameFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const AssemblyNameFlags None = 0; // 0x0
	public const AssemblyNameFlags PublicKey = 1; // 0x0
	public const AssemblyNameFlags Retargetable = 256; // 0x0
	public const AssemblyNameFlags EnableJITcompileOptimizer = 16384; // 0x0
	public const AssemblyNameFlags EnableJITcompileTracking = 32768; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyProductAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5d0c0c
	public Void .ctor(String product) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyTitleAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5d0c38
	public Void .ctor(String title) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public sealed class AssemblyTrademarkAttribute : Attribute
{
	// Fields
	private String name; // 0x10

	// Properties

	// Methods
	// Offset : 0x5d0c64
	public Void .ctor(String trademark) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public abstract class Binder
{
	// Fields
	private static Binder default_binder; // 0x0

	// Properties
	internal static Binder DefaultBinder { get; }

	// Methods
	// Offset : 0x5d0c90
	protected Void .ctor() { }
	// Offset : 0x5d0c98
	private static Void .cctor() { }
	// Offset : 0x
	public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] names, out Object state) { }
	// Offset : 0x
	public abstract Object ChangeType(Object value, Type type, CultureInfo culture) { }
	// Offset : 0x
	public abstract Void ReorderArgumentArray(ref Object[] args, Object state) { }
	// Offset : 0x
	public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x
	public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers) { }
	// Offset : 0x5d0d68
	internal static Binder get_DefaultBinder() { }
	// Offset : 0x5d0dd0
	internal static Boolean ConvertArgs(Binder binder, Object[] args, ParameterInfo[] pinfo, CultureInfo culture) { }
	// Offset : 0x5d0ff0
	internal static Int32 GetDerivedLevel(Type type) { }
	// Offset : 0x5d1088
	internal static MethodBase FindMostDerivedMatch(MethodBase[] match) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal sealed class Default : Binder
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5d0d00
	public Void .ctor() { }
	// Offset : 0x5d13d8
	public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] names, out Object state) { }
	// Offset : 0x5d1bb4
	private Void ReorderParameters(String[] names, ref Object[] args, MethodBase selected) { }
	// Offset : 0x5d1e7c
	private static Boolean IsArrayAssignable(Type object_type, Type target_type) { }
	// Offset : 0x5d1f88
	public override Object ChangeType(Object value, Type type, CultureInfo culture) { }
	// Offset : 0x5d27f8
	public override Void ReorderArgumentArray(ref Object[] args, Object state) { }
	// Offset : 0x5d2358
	private static Boolean check_type(Type from, Type to) { }
	// Offset : 0x5d27fc
	private static Boolean check_arguments(Type[] types, ParameterInfo[] args, Boolean allowByRefMatch) { }
	// Offset : 0x5d29e8
	public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x5d15e8
	private MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers, Boolean allowByRefMatch) { }
	// Offset : 0x5d29f0
	private MethodBase GetBetterMethod(MethodBase m1, MethodBase m2, Type[] types) { }
	// Offset : 0x5d2e7c
	private Int32 CompareCloserType(Type t1, Type t2) { }
	// Offset : 0x5d3190
	public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers) { }
	// Offset : 0x5d344c
	private static Int32 check_arguments_with_score(Type[] types, ParameterInfo[] args) { }
	// Offset : 0x5d3554
	private static Int32 check_type_with_score(Type from, Type to) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum BindingFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const BindingFlags Default = 0; // 0x0
	public const BindingFlags IgnoreCase = 1; // 0x0
	public const BindingFlags DeclaredOnly = 2; // 0x0
	public const BindingFlags Instance = 4; // 0x0
	public const BindingFlags Static = 8; // 0x0
	public const BindingFlags Public = 16; // 0x0
	public const BindingFlags NonPublic = 32; // 0x0
	public const BindingFlags FlattenHierarchy = 64; // 0x0
	public const BindingFlags InvokeMethod = 256; // 0x0
	public const BindingFlags CreateInstance = 512; // 0x0
	public const BindingFlags GetField = 1024; // 0x0
	public const BindingFlags SetField = 2048; // 0x0
	public const BindingFlags GetProperty = 4096; // 0x0
	public const BindingFlags SetProperty = 8192; // 0x0
	public const BindingFlags PutDispProperty = 16384; // 0x0
	public const BindingFlags PutRefDispProperty = 32768; // 0x0
	public const BindingFlags ExactBinding = 65536; // 0x0
	public const BindingFlags SuppressChangeType = 131072; // 0x0
	public const BindingFlags OptionalParamBinding = 262144; // 0x0
	public const BindingFlags IgnoreReturn = 16777216; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum CallingConventions
{
	// Fields
	public Int32 value__; // 0x10
	public const CallingConventions Standard = 1; // 0x0
	public const CallingConventions VarArgs = 2; // 0x0
	public const CallingConventions Any = 3; // 0x0
	public const CallingConventions HasThis = 32; // 0x0
	public const CallingConventions ExplicitThis = 64; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public abstract class ConstructorInfo : MethodBase, _ConstructorInfo
{
	// Fields
	public static readonly String ConstructorName; // 0x0
	public static readonly String TypeConstructorName; // 0x8

	// Properties
	public override MemberTypes MemberType { get; }

	// Methods
	// Offset : 0x5d380c
	protected Void .ctor() { }
	// Offset : 0x5d3814
	private static Void .cctor() { }
	// Offset : 0x5d3888
	public override MemberTypes get_MemberType() { }
	// Offset : 0x5d3890
	public Object Invoke(Object[] parameters) { }
	// Offset : 0x
	public abstract Object Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class CustomAttributeData
{
	// Fields
	private ConstructorInfo ctorInfo; // 0x10
	private IList`1 ctorArgs; // 0x18
	private IList`1 namedArgs; // 0x20

	// Properties
	public ConstructorInfo Constructor { get; }
	public IList`1 ConstructorArguments { get; }
	public IList`1 NamedArguments { get; }

	// Methods
	// Offset : 0x5d3930
	internal Void .ctor(ConstructorInfo ctorInfo, Object[] ctorArgs, Object[] namedArgs) { }
	// Offset : 0x5d3a24
	public ConstructorInfo get_Constructor() { }
	// Offset : 0x5d3a2c
	public IList`1 get_ConstructorArguments() { }
	// Offset : 0x5d3a34
	public IList`1 get_NamedArguments() { }
	// Offset : 0x5d3a3c
	public static IList`1 GetCustomAttributes(Assembly target) { }
	// Offset : 0x5d3aa4
	public static IList`1 GetCustomAttributes(MemberInfo target) { }
	// Offset : 0x5d3b0c
	public static IList`1 GetCustomAttributes(Module target) { }
	// Offset : 0x5d3b74
	public static IList`1 GetCustomAttributes(ParameterInfo target) { }
	// Offset : 0x5d3bdc
	public override String ToString() { }
	// Offset : 0x
	private static T[] UnboxValues(Object[] values) { }
	// Offset : 0x5d4674
	public override Boolean Equals(Object obj) { }
	// Offset : 0x5d50b8
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public struct CustomAttributeNamedArgument
{
	// Fields
	private CustomAttributeTypedArgument typedArgument; // 0x10
	private MemberInfo memberInfo; // 0x20

	// Properties

	// Methods
	// Offset : 0x2cc990
	public override String ToString() { }
	// Offset : 0x2cc998
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cc9a0
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public struct CustomAttributeTypedArgument
{
	// Fields
	private Type argumentType; // 0x10
	private Object value; // 0x18

	// Properties

	// Methods
	// Offset : 0x2cc9f4
	public override String ToString() { }
	// Offset : 0x2cc9fc
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cca04
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum EventAttributes
{
	// Fields
	public Int32 value__; // 0x10
	public const EventAttributes None = 0; // 0x0
	public const EventAttributes SpecialName = 512; // 0x0
	public const EventAttributes ReservedMask = 1024; // 0x0
	public const EventAttributes RTSpecialName = 1024; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public abstract class EventInfo : MemberInfo, _EventInfo
{
	// Fields
	private AddEventAdapter cached_add_event; // 0x10

	// Properties
	public abstract EventAttributes Attributes { get; }
	public Type EventHandlerType { get; }
	public override MemberTypes MemberType { get; }

	// Methods
	// Offset : 0x5e9b00
	protected Void .ctor() { }
	// Offset : 0x
	public abstract EventAttributes get_Attributes() { }
	// Offset : 0x5e9b10
	public Type get_EventHandlerType() { }
	// Offset : 0x5e9bf0
	public override MemberTypes get_MemberType() { }
	// Offset : 0x
	public abstract MethodInfo GetAddMethod(Boolean nonPublic) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class AddEventAdapter : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5e9bf8
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x5e9c08
	public virtual Void Invoke(Object _this, Delegate dele) { }
	// Offset : 0x5ea0e8
	public virtual IAsyncResult BeginInvoke(Object _this, Delegate dele, AsyncCallback callback, Object object) { }
	// Offset : 0x5ea118
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum FieldAttributes
{
	// Fields
	public Int32 value__; // 0x10
	public const FieldAttributes FieldAccessMask = 7; // 0x0
	public const FieldAttributes PrivateScope = 0; // 0x0
	public const FieldAttributes Private = 1; // 0x0
	public const FieldAttributes FamANDAssem = 2; // 0x0
	public const FieldAttributes Assembly = 3; // 0x0
	public const FieldAttributes Family = 4; // 0x0
	public const FieldAttributes FamORAssem = 5; // 0x0
	public const FieldAttributes Public = 6; // 0x0
	public const FieldAttributes Static = 16; // 0x0
	public const FieldAttributes InitOnly = 32; // 0x0
	public const FieldAttributes Literal = 64; // 0x0
	public const FieldAttributes NotSerialized = 128; // 0x0
	public const FieldAttributes HasFieldRVA = 256; // 0x0
	public const FieldAttributes SpecialName = 512; // 0x0
	public const FieldAttributes RTSpecialName = 1024; // 0x0
	public const FieldAttributes HasFieldMarshal = 4096; // 0x0
	public const FieldAttributes PinvokeImpl = 8192; // 0x0
	public const FieldAttributes HasDefault = 32768; // 0x0
	public const FieldAttributes ReservedMask = 38144; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public abstract class FieldInfo : MemberInfo, _FieldInfo
{
	// Fields

	// Properties
	public abstract FieldAttributes Attributes { get; }
	public abstract RuntimeFieldHandle FieldHandle { get; }
	public abstract Type FieldType { get; }
	public override MemberTypes MemberType { get; }
	public Boolean IsLiteral { get; }
	public Boolean IsStatic { get; }
	public Boolean IsPublic { get; }
	public Boolean IsNotSerialized { get; }
	internal virtual UnmanagedMarshal UMarshal { get; }

	// Methods
	// Offset : 0x5ea124
	protected Void .ctor() { }
	// Offset : 0x
	public abstract FieldAttributes get_Attributes() { }
	// Offset : 0x
	public abstract RuntimeFieldHandle get_FieldHandle() { }
	// Offset : 0x
	public abstract Type get_FieldType() { }
	// Offset : 0x
	public abstract Object GetValue(Object obj) { }
	// Offset : 0x5ea12c
	public override MemberTypes get_MemberType() { }
	// Offset : 0x5ea134
	public Boolean get_IsLiteral() { }
	// Offset : 0x5e87c0
	public Boolean get_IsStatic() { }
	// Offset : 0x5ea180
	public Boolean get_IsPublic() { }
	// Offset : 0x5ea1d4
	public Boolean get_IsNotSerialized() { }
	// Offset : 0x
	public abstract Void SetValue(Object obj, Object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }
	// Offset : 0x5ea220
	public Void SetValue(Object obj, Object value) { }
	// Offset : 0x5ea288
	private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle) { }
	// Offset : 0x5ea28c
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle) { }
	// Offset : 0x5ea340
	internal virtual Int32 GetFieldOffset() { }
	// Offset : 0x5ea3b4
	private UnmanagedMarshal GetUnmanagedMarshal() { }
	// Offset : 0x5ea3b8
	internal virtual UnmanagedMarshal get_UMarshal() { }
	// Offset : 0x5ea3bc
	internal Object[] GetPseudoCustomAttributes() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum ImageFileMachine
{
	// Fields
	public Int32 value__; // 0x10
	public const ImageFileMachine I386 = 332; // 0x0
	public const ImageFileMachine IA64 = 512; // 0x0
	public const ImageFileMachine AMD64 = 34404; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public class LocalVariableInfo
{
	// Fields
	internal Type type; // 0x10
	internal Boolean is_pinned; // 0x18
	internal UInt16 position; // 0x1a

	// Properties

	// Methods
	// Offset : 0x5de4d8
	internal Void .ctor() { }
	// Offset : 0x5ea6c0
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
public class ManifestResourceInfo
{
	// Fields
	private Assembly _assembly; // 0x10
	private String _filename; // 0x18
	private ResourceLocation _location; // 0x20

	// Properties
	public virtual String FileName { get; }
	public virtual Assembly ReferencedAssembly { get; }
	public virtual ResourceLocation ResourceLocation { get; }

	// Methods
	// Offset : 0x5ea7c0
	internal Void .ctor() { }
	// Offset : 0x5ea7c8
	public virtual String get_FileName() { }
	// Offset : 0x5ea7d0
	public virtual Assembly get_ReferencedAssembly() { }
	// Offset : 0x5ea7d8
	public virtual ResourceLocation get_ResourceLocation() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
internal class MemberInfoSerializationHolder : ISerializable, IObjectReference
{
	// Fields
	private readonly String _memberName; // 0x10
	private readonly String _memberSignature; // 0x18
	private readonly MemberTypes _memberType; // 0x20
	private readonly Type _reflectedType; // 0x28
	private readonly Type[] _genericArguments; // 0x30

	// Properties

	// Methods
	// Offset : 0x5ead40
	private Void .ctor(SerializationInfo info, StreamingContext ctx) { }
	// Offset : 0x5eaee8
	public static Void Serialize(SerializationInfo info, String name, Type klass, String signature, MemberTypes type) { }
	// Offset : 0x5eaef0
	public static Void Serialize(SerializationInfo info, String name, Type klass, String signature, MemberTypes type, Type[] genericArguments) { }
	// Offset : 0x5eb1f8
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x5eb260
	public Object GetRealObject(StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum MemberTypes
{
	// Fields
	public Int32 value__; // 0x10
	public const MemberTypes Constructor = 1; // 0x0
	public const MemberTypes Event = 2; // 0x0
	public const MemberTypes Field = 4; // 0x0
	public const MemberTypes Method = 8; // 0x0
	public const MemberTypes Property = 16; // 0x0
	public const MemberTypes TypeInfo = 32; // 0x0
	public const MemberTypes Custom = 64; // 0x0
	public const MemberTypes NestedType = 128; // 0x0
	public const MemberTypes All = 191; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum MethodAttributes
{
	// Fields
	public Int32 value__; // 0x10
	public const MethodAttributes MemberAccessMask = 7; // 0x0
	public const MethodAttributes PrivateScope = 0; // 0x0
	public const MethodAttributes Private = 1; // 0x0
	public const MethodAttributes FamANDAssem = 2; // 0x0
	public const MethodAttributes Assembly = 3; // 0x0
	public const MethodAttributes Family = 4; // 0x0
	public const MethodAttributes FamORAssem = 5; // 0x0
	public const MethodAttributes Public = 6; // 0x0
	public const MethodAttributes Static = 16; // 0x0
	public const MethodAttributes Final = 32; // 0x0
	public const MethodAttributes Virtual = 64; // 0x0
	public const MethodAttributes HideBySig = 128; // 0x0
	public const MethodAttributes VtableLayoutMask = 256; // 0x0
	public const MethodAttributes CheckAccessOnOverride = 512; // 0x0
	public const MethodAttributes ReuseSlot = 0; // 0x0
	public const MethodAttributes NewSlot = 256; // 0x0
	public const MethodAttributes Abstract = 1024; // 0x0
	public const MethodAttributes SpecialName = 2048; // 0x0
	public const MethodAttributes PinvokeImpl = 8192; // 0x0
	public const MethodAttributes UnmanagedExport = 8; // 0x0
	public const MethodAttributes RTSpecialName = 4096; // 0x0
	public const MethodAttributes ReservedMask = 53248; // 0x0
	public const MethodAttributes HasSecurity = 16384; // 0x0
	public const MethodAttributes RequireSecObject = 32768; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public abstract class MethodBase : MemberInfo, _MethodBase
{
	// Fields

	// Properties
	public abstract RuntimeMethodHandle MethodHandle { get; }
	public abstract MethodAttributes Attributes { get; }
	public virtual CallingConventions CallingConvention { get; }
	public Boolean IsPublic { get; }
	public Boolean IsStatic { get; }
	public Boolean IsVirtual { get; }
	public Boolean IsAbstract { get; }
	public virtual Boolean ContainsGenericParameters { get; }
	public virtual Boolean IsGenericMethodDefinition { get; }
	public virtual Boolean IsGenericMethod { get; }

	// Methods
	// Offset : 0x4ee678
	protected Void .ctor() { }
	// Offset : 0x4ee680
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle) { }
	// Offset : 0x4ee6d4
	private static MethodBase GetMethodFromIntPtr(IntPtr handle, IntPtr declaringType) { }
	// Offset : 0x4ee78c
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle) { }
	// Offset : 0x4ee788
	private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle) { }
	// Offset : 0x
	public abstract ParameterInfo[] GetParameters() { }
	// Offset : 0x4ee8d0
	internal virtual Int32 GetParameterCount() { }
	// Offset : 0x4ee920
	public Object Invoke(Object obj, Object[] parameters) { }
	// Offset : 0x
	public abstract Object Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) { }
	// Offset : 0x
	public abstract RuntimeMethodHandle get_MethodHandle() { }
	// Offset : 0x
	public abstract MethodAttributes get_Attributes() { }
	// Offset : 0x4ee988
	public virtual CallingConventions get_CallingConvention() { }
	// Offset : 0x4ee990
	public Boolean get_IsPublic() { }
	// Offset : 0x4ee9e4
	public Boolean get_IsStatic() { }
	// Offset : 0x4eea30
	public Boolean get_IsVirtual() { }
	// Offset : 0x4eea7c
	public Boolean get_IsAbstract() { }
	// Offset : 0x4eeac8
	internal virtual Int32 get_next_table_index(Object obj, Int32 table, Boolean inc) { }
	// Offset : 0x4eebcc
	public virtual Type[] GetGenericArguments() { }
	// Offset : 0x4eec34
	public virtual Boolean get_ContainsGenericParameters() { }
	// Offset : 0x4eec3c
	public virtual Boolean get_IsGenericMethodDefinition() { }
	// Offset : 0x4eec44
	public virtual Boolean get_IsGenericMethod() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum MethodImplAttributes
{
	// Fields
	public Int32 value__; // 0x10
	public const MethodImplAttributes CodeTypeMask = 3; // 0x0
	public const MethodImplAttributes IL = 0; // 0x0
	public const MethodImplAttributes Native = 1; // 0x0
	public const MethodImplAttributes OPTIL = 2; // 0x0
	public const MethodImplAttributes Runtime = 3; // 0x0
	public const MethodImplAttributes ManagedMask = 4; // 0x0
	public const MethodImplAttributes Unmanaged = 4; // 0x0
	public const MethodImplAttributes Managed = 0; // 0x0
	public const MethodImplAttributes ForwardRef = 16; // 0x0
	public const MethodImplAttributes PreserveSig = 128; // 0x0
	public const MethodImplAttributes InternalCall = 4096; // 0x0
	public const MethodImplAttributes Synchronized = 32; // 0x0
	public const MethodImplAttributes NoInlining = 8; // 0x0
	public const MethodImplAttributes MaxMethodImplVal = 65535; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public abstract class MethodInfo : MethodBase, _MethodInfo
{
	// Fields

	// Properties
	public override MemberTypes MemberType { get; }
	public virtual Type ReturnType { get; }
	public override Boolean IsGenericMethod { get; }
	public override Boolean IsGenericMethodDefinition { get; }
	public override Boolean ContainsGenericParameters { get; }

	// Methods
	// Offset : 0x4eec4c
	protected Void .ctor() { }
	// Offset : 0x
	public abstract MethodInfo GetBaseDefinition() { }
	// Offset : 0x4eec54
	public override MemberTypes get_MemberType() { }
	// Offset : 0x4eec5c
	public virtual Type get_ReturnType() { }
	// Offset : 0x4eec64
	public virtual MethodInfo MakeGenericMethod(Type[] typeArguments) { }
	// Offset : 0x4eed00
	public override Type[] GetGenericArguments() { }
	// Offset : 0x4eed68
	public override Boolean get_IsGenericMethod() { }
	// Offset : 0x4eed70
	public override Boolean get_IsGenericMethodDefinition() { }
	// Offset : 0x4eed78
	public override Boolean get_ContainsGenericParameters() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class Missing : ISerializable
{
	// Fields
	public static readonly Missing Value; // 0x0

	// Properties

	// Methods
	// Offset : 0x4eed80
	internal Void .ctor() { }
	// Offset : 0x4eed88
	private static Void .cctor() { }
	// Offset : 0x4eedec
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public class Module : ISerializable, ICustomAttributeProvider, _Module
{
	// Fields
	private const BindingFlags defaultBindingFlags; // 0x0
	public static readonly TypeFilter FilterTypeName; // 0x0
	public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x8
	private IntPtr _impl; // 0x10
	internal Assembly assembly; // 0x18
	internal String fqname; // 0x20
	internal String name; // 0x28
	internal String scopename; // 0x30
	internal Boolean is_resource; // 0x38
	internal Int32 token; // 0x3c

	// Properties
	public Assembly Assembly { get; }
	public String Name { get; }
	public String ScopeName { get; }

	// Methods
	// Offset : 0x4eedf0
	internal Void .ctor() { }
	// Offset : 0x4eedf8
	private static Void .cctor() { }
	// Offset : 0x4eeeac
	public Assembly get_Assembly() { }
	// Offset : 0x4eeeb4
	public String get_Name() { }
	// Offset : 0x4eeebc
	public String get_ScopeName() { }
	// Offset : 0x4eeec4
	public virtual Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x4eef44
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x4eeffc
	public virtual Type GetType(String className) { }
	// Offset : 0x4ef04c
	public virtual Type GetType(String className, Boolean throwOnError, Boolean ignoreCase) { }
	// Offset : 0x4ef180
	private Type[] InternalGetTypes() { }
	// Offset : 0x4ef184
	public virtual Type[] GetTypes() { }
	// Offset : 0x4ef188
	public virtual Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x4ef208
	public Boolean IsResource() { }
	// Offset : 0x4ef210
	public override String ToString() { }
	// Offset : 0x4ef218
	private static Boolean filter_by_type_name(Type m, Object filterCriteria) { }
	// Offset : 0x4ef3d8
	private static Boolean filter_by_type_name_ignore_case(Type m, Object filterCriteria) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
internal struct MonoEventInfo
{
	// Fields
	public Type declaring_type; // 0x10
	public Type reflected_type; // 0x18
	public String name; // 0x20
	public MethodInfo add_method; // 0x28
	public MethodInfo remove_method; // 0x30
	public MethodInfo raise_method; // 0x38
	public EventAttributes attrs; // 0x40
	public MethodInfo[] other_methods; // 0x48

	// Properties

	// Methods
	// Offset : 0x4f0c70
	private static Void get_event_info(MonoEvent ev, out MonoEventInfo info) { }
	// Offset : 0x4f0890
	internal static MonoEventInfo GetEventInfo(MonoEvent ev) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
internal sealed class MonoEvent : EventInfo, ISerializable
{
	// Fields
	private IntPtr klass; // 0x18
	private IntPtr handle; // 0x20

	// Properties
	public override EventAttributes Attributes { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override String Name { get; }

	// Methods
	// Offset : 0x4f0858
	public Void .ctor() { }
	// Offset : 0x4f0860
	public override EventAttributes get_Attributes() { }
	// Offset : 0x4f08d8
	public override MethodInfo GetAddMethod(Boolean nonPublic) { }
	// Offset : 0x4f0930
	public override Type get_DeclaringType() { }
	// Offset : 0x4f0960
	public override Type get_ReflectedType() { }
	// Offset : 0x4f0990
	public override String get_Name() { }
	// Offset : 0x4f09c0
	public override String ToString() { }
	// Offset : 0x4f0a70
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f0af0
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x4f0b68
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f0be8
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
internal class MonoField : FieldInfo, ISerializable
{
	// Fields
	internal IntPtr klass; // 0x10
	internal RuntimeFieldHandle fhandle; // 0x18
	private String name; // 0x20
	private Type type; // 0x28
	private FieldAttributes attrs; // 0x30

	// Properties
	public override FieldAttributes Attributes { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type FieldType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override String Name { get; }

	// Methods
	// Offset : 0x4f0c74
	public Void .ctor() { }
	// Offset : 0x4f0c7c
	public override FieldAttributes get_Attributes() { }
	// Offset : 0x4f0c84
	public override RuntimeFieldHandle get_FieldHandle() { }
	// Offset : 0x4f0c8c
	public override Type get_FieldType() { }
	// Offset : 0x4f0c94
	private Type GetParentType(Boolean declaring) { }
	// Offset : 0x4f0c9c
	public override Type get_ReflectedType() { }
	// Offset : 0x4f0ca4
	public override Type get_DeclaringType() { }
	// Offset : 0x4f0cac
	public override String get_Name() { }
	// Offset : 0x4f0cb4
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f0d34
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x4f0dac
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f0e2c
	internal override Int32 GetFieldOffset() { }
	// Offset : 0x4f0e30
	private Object GetValueInternal(Object obj) { }
	// Offset : 0x4f0e34
	public override Object GetValue(Object obj) { }
	// Offset : 0x4f1158
	public override String ToString() { }
	// Offset : 0x4f11d4
	private static Void SetValueInternal(FieldInfo fi, Object obj, Object value) { }
	// Offset : 0x4f11d8
	public override Void SetValue(Object obj, Object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }
	// Offset : 0x4f1690
	internal MonoField Clone(String newName) { }
	// Offset : 0x4f1780
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x4f1070
	private Void CheckGeneric() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
internal class MonoGenericMethod : MonoMethod
{
	// Fields

	// Properties
	public override Type ReflectedType { get; }

	// Methods
	// Offset : 0x4f18c0
	internal Void .ctor() { }
	// Offset : 0x4f1940
	public override Type get_ReflectedType() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
internal class MonoGenericCMethod : MonoCMethod
{
	// Fields

	// Properties
	public override Type ReflectedType { get; }

	// Methods
	// Offset : 0x4f1848
	internal Void .ctor() { }
	// Offset : 0x4f18bc
	public override Type get_ReflectedType() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
internal struct MonoMethodInfo
{
	// Fields
	private Type parent; // 0x10
	private Type ret; // 0x18
	internal MethodAttributes attrs; // 0x20
	internal MethodImplAttributes iattrs; // 0x24
	private CallingConventions callconv; // 0x28

	// Properties

	// Methods
	// Offset : 0x4f2e80
	private static Void get_method_info(IntPtr handle, out MonoMethodInfo info) { }
	// Offset : 0x4f2280
	internal static MonoMethodInfo GetMethodInfo(IntPtr handle) { }
	// Offset : 0x4f02dc
	internal static Type GetDeclaringType(IntPtr handle) { }
	// Offset : 0x4f19b4
	internal static Type GetReturnType(IntPtr handle) { }
	// Offset : 0x4f021c
	internal static MethodAttributes GetAttributes(IntPtr handle) { }
	// Offset : 0x4f0278
	internal static CallingConventions GetCallingConvention(IntPtr handle) { }
	// Offset : 0x4f2e84
	private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member) { }
	// Offset : 0x4efb80
	internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
internal class MonoMethod : MethodInfo, ISerializable
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private String name; // 0x18
	private Type reftype; // 0x20

	// Properties
	public override Type ReturnType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override String Name { get; }
	public override Boolean IsGenericMethodDefinition { get; }
	public override Boolean IsGenericMethod { get; }
	public override Boolean ContainsGenericParameters { get; }

	// Methods
	// Offset : 0x4f1938
	internal Void .ctor() { }
	// Offset : 0x4f1944
	internal Void .ctor(RuntimeMethodHandle mhandle) { }
	// Offset : 0x4f0330
	internal static String get_name(MethodBase method) { }
	// Offset : 0x4f197c
	internal static MonoMethod get_base_definition(MonoMethod method) { }
	// Offset : 0x4f1980
	public override MethodInfo GetBaseDefinition() { }
	// Offset : 0x4f1984
	public override Type get_ReturnType() { }
	// Offset : 0x4f19e0
	public override ParameterInfo[] GetParameters() { }
	// Offset : 0x4f1a74
	internal Object InternalInvoke(Object obj, Object[] parameters, out Exception exc) { }
	// Offset : 0x4f1a78
	public override Object Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) { }
	// Offset : 0x4f1e50
	public override RuntimeMethodHandle get_MethodHandle() { }
	// Offset : 0x4f1e80
	public override MethodAttributes get_Attributes() { }
	// Offset : 0x4f1eb0
	public override CallingConventions get_CallingConvention() { }
	// Offset : 0x4f1ee0
	public override Type get_ReflectedType() { }
	// Offset : 0x4f1ee8
	public override Type get_DeclaringType() { }
	// Offset : 0x4f1f18
	public override String get_Name() { }
	// Offset : 0x4f1f40
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f1fc0
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x4f2038
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f20b8
	internal static DllImportAttribute GetDllImportAttribute(IntPtr mhandle) { }
	// Offset : 0x4f20bc
	internal Object[] GetPseudoCustomAttributes() { }
	// Offset : 0x4f22c4
	private static Boolean ShouldPrintFullName(Type type) { }
	// Offset : 0x4f23c4
	public override String ToString() { }
	// Offset : 0x4f299c
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x4f2b08
	public override MethodInfo MakeGenericMethod(Type[] methodInstantiation) { }
	// Offset : 0x4f2cfc
	private MethodInfo MakeGenericMethod_impl(Type[] types) { }
	// Offset : 0x4f2d00
	public override Type[] GetGenericArguments() { }
	// Offset : 0x4f2d04
	public override Boolean get_IsGenericMethodDefinition() { }
	// Offset : 0x4f2d08
	public override Boolean get_IsGenericMethod() { }
	// Offset : 0x4f2d0c
	public override Boolean get_ContainsGenericParameters() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
internal class MonoCMethod : ConstructorInfo, ISerializable
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private String name; // 0x18
	private Type reftype; // 0x20

	// Properties
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override String Name { get; }

	// Methods
	// Offset : 0x4efb08
	public Void .ctor() { }
	// Offset : 0x4efb70
	public override ParameterInfo[] GetParameters() { }
	// Offset : 0x4efb84
	internal Object InternalInvoke(Object obj, Object[] parameters, out Exception exc) { }
	// Offset : 0x4efb88
	public override Object Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) { }
	// Offset : 0x4f0144
	public override Object Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) { }
	// Offset : 0x4f01bc
	public override RuntimeMethodHandle get_MethodHandle() { }
	// Offset : 0x4f01ec
	public override MethodAttributes get_Attributes() { }
	// Offset : 0x4f0248
	public override CallingConventions get_CallingConvention() { }
	// Offset : 0x4f02a4
	public override Type get_ReflectedType() { }
	// Offset : 0x4f02ac
	public override Type get_DeclaringType() { }
	// Offset : 0x4f0308
	public override String get_Name() { }
	// Offset : 0x4f0334
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f03b4
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x4f042c
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f04ac
	public override String ToString() { }
	// Offset : 0x4f0790
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
internal struct MonoPropertyInfo
{
	// Fields
	public Type parent; // 0x10
	public String name; // 0x18
	public MethodInfo get_method; // 0x20
	public MethodInfo set_method; // 0x28
	public PropertyAttributes attrs; // 0x30

	// Properties

	// Methods
	// Offset : 0x4f2ee0
	internal static Void get_property_info(MonoProperty prop, ref MonoPropertyInfo info, PInfo req_info) { }
	// Offset : 0x4f43d4
	internal static Type[] GetTypeModifiers(MonoProperty prop, Boolean optional) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
internal enum PInfo
{
	// Fields
	public Int32 value__; // 0x10
	public const PInfo Attributes = 1; // 0x0
	public const PInfo GetMethod = 2; // 0x0
	public const PInfo SetMethod = 4; // 0x0
	public const PInfo ReflectedType = 8; // 0x0
	public const PInfo DeclaringType = 16; // 0x0
	public const PInfo Name = 32; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
internal class MonoProperty : PropertyInfo, ISerializable
{
	// Fields
	internal IntPtr klass; // 0x10
	internal IntPtr prop; // 0x18
	private MonoPropertyInfo info; // 0x20
	private PInfo cached; // 0x48
	private GetterAdapter cached_getter; // 0x50

	// Properties
	public override PropertyAttributes Attributes { get; }
	public override Boolean CanRead { get; }
	public override Boolean CanWrite { get; }
	public override Type PropertyType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override String Name { get; }

	// Methods
	// Offset : 0x4f2e88
	public Void .ctor() { }
	// Offset : 0x4f2e98
	private Void CachePropertyInfo(PInfo flags) { }
	// Offset : 0x4f2ee4
	public override PropertyAttributes get_Attributes() { }
	// Offset : 0x4f2f28
	public override Boolean get_CanRead() { }
	// Offset : 0x4f2f74
	public override Boolean get_CanWrite() { }
	// Offset : 0x4f2fc0
	public override Type get_PropertyType() { }
	// Offset : 0x4f30e4
	public override Type get_ReflectedType() { }
	// Offset : 0x4f3128
	public override Type get_DeclaringType() { }
	// Offset : 0x4f316c
	public override String get_Name() { }
	// Offset : 0x4f31b0
	public override MethodInfo[] GetAccessors(Boolean nonPublic) { }
	// Offset : 0x4f3348
	public override MethodInfo GetGetMethod(Boolean nonPublic) { }
	// Offset : 0x4f33ac
	public override ParameterInfo[] GetIndexParameters() { }
	// Offset : 0x4f36a8
	public override MethodInfo GetSetMethod(Boolean nonPublic) { }
	// Offset : 0x4f370c
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f3788
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x4f37f4
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x
	private static Object GetterAdapterFrame(Getter`2 getter, Object obj) { }
	// Offset : 0x
	private static Object StaticGetterAdapterFrame(StaticGetter`1 getter, Object obj) { }
	// Offset : 0x4f3870
	private static GetterAdapter CreateGetterDelegate(MethodInfo method) { }
	// Offset : 0x4f3cc0
	public override Object GetValue(Object obj, Object[] index) { }
	// Offset : 0x4f3d28
	public override Object GetValue(Object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture) { }
	// Offset : 0x4f3fa4
	public override Void SetValue(Object obj, Object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture) { }
	// Offset : 0x4f4248
	public override String ToString() { }
	// Offset : 0x4f4358
	public override Type[] GetOptionalCustomModifiers() { }
	// Offset : 0x4f43dc
	public override Type[] GetRequiredCustomModifiers() { }
	// Offset : 0x4f4458
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class GetterAdapter : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4f4520
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x4f4530
	public virtual Object Invoke(Object _this) { }
	// Offset : 0x4f49f4
	public virtual IAsyncResult BeginInvoke(Object _this, AsyncCallback callback, Object object) { }
	// Offset : 0x4f4a18
	public virtual Object EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class Getter`2 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual R Invoke(T _this) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T _this, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual R EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class StaticGetter`1 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual R Invoke() { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual R EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum ParameterAttributes
{
	// Fields
	public Int32 value__; // 0x10
	public const ParameterAttributes None = 0; // 0x0
	public const ParameterAttributes In = 1; // 0x0
	public const ParameterAttributes Out = 2; // 0x0
	public const ParameterAttributes Lcid = 4; // 0x0
	public const ParameterAttributes Retval = 8; // 0x0
	public const ParameterAttributes Optional = 16; // 0x0
	public const ParameterAttributes ReservedMask = 61440; // 0x0
	public const ParameterAttributes HasDefault = 4096; // 0x0
	public const ParameterAttributes HasFieldMarshal = 8192; // 0x0
	public const ParameterAttributes Reserved3 = 16384; // 0x0
	public const ParameterAttributes Reserved4 = 32768; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public class ParameterInfo : ICustomAttributeProvider, _ParameterInfo
{
	// Fields
	protected Type ClassImpl; // 0x10
	protected Object DefaultValueImpl; // 0x18
	protected MemberInfo MemberImpl; // 0x20
	protected String NameImpl; // 0x28
	protected Int32 PositionImpl; // 0x30
	protected ParameterAttributes AttrsImpl; // 0x34
	private UnmanagedMarshal marshalAs; // 0x38

	// Properties
	public virtual Type ParameterType { get; }
	public virtual ParameterAttributes Attributes { get; }
	public Boolean IsIn { get; }
	public Boolean IsOptional { get; }
	public Boolean IsOut { get; }
	public Boolean IsRetval { get; }
	public virtual MemberInfo Member { get; }
	public virtual String Name { get; }
	public virtual Int32 Position { get; }

	// Methods
	// Offset : 0x4f4a24
	protected Void .ctor() { }
	// Offset : 0x4f4a2c
	internal Void .ctor(ParameterBuilder pb, Type type, MemberInfo member, Int32 position) { }
	// Offset : 0x4f35b4
	internal Void .ctor(ParameterInfo pinfo, MemberInfo member) { }
	// Offset : 0x4f4b18
	public override String ToString() { }
	// Offset : 0x4f4e28
	public virtual Type get_ParameterType() { }
	// Offset : 0x4f4e30
	public virtual ParameterAttributes get_Attributes() { }
	// Offset : 0x4f4e38
	public Boolean get_IsIn() { }
	// Offset : 0x4f4e80
	public Boolean get_IsOptional() { }
	// Offset : 0x4f4ec8
	public Boolean get_IsOut() { }
	// Offset : 0x4f4de0
	public Boolean get_IsRetval() { }
	// Offset : 0x4f4f10
	public virtual MemberInfo get_Member() { }
	// Offset : 0x4f4f18
	public virtual String get_Name() { }
	// Offset : 0x4f4f20
	public virtual Int32 get_Position() { }
	// Offset : 0x4f4f28
	public virtual Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f4fa8
	public virtual Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f5028
	internal Object[] GetPseudoCustomAttributes() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public struct ParameterModifier
{
	// Fields
	private Boolean[] _byref; // 0x10

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class Pointer : ISerializable
{
	// Fields
	private Void* data; // 0x10
	private Type type; // 0x18

	// Properties

	// Methods
	// Offset : 0x4f5308
	private Void .ctor() { }
	// Offset : 0x4f5310
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x4f5384
	public static Object Box(Void* ptr, Type type) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum PortableExecutableKinds
{
	// Fields
	public Int32 value__; // 0x10
	public const PortableExecutableKinds NotAPortableExecutableImage = 0; // 0x0
	public const PortableExecutableKinds ILOnly = 1; // 0x0
	public const PortableExecutableKinds Required32Bit = 2; // 0x0
	public const PortableExecutableKinds PE32Plus = 4; // 0x0
	public const PortableExecutableKinds Unmanaged32Bit = 8; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum ProcessorArchitecture
{
	// Fields
	public Int32 value__; // 0x10
	public const ProcessorArchitecture None = 0; // 0x0
	public const ProcessorArchitecture MSIL = 1; // 0x0
	public const ProcessorArchitecture X86 = 2; // 0x0
	public const ProcessorArchitecture IA64 = 3; // 0x0
	public const ProcessorArchitecture Amd64 = 4; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum PropertyAttributes
{
	// Fields
	public Int32 value__; // 0x10
	public const PropertyAttributes None = 0; // 0x0
	public const PropertyAttributes SpecialName = 512; // 0x0
	public const PropertyAttributes ReservedMask = 62464; // 0x0
	public const PropertyAttributes RTSpecialName = 1024; // 0x0
	public const PropertyAttributes HasDefault = 4096; // 0x0
	public const PropertyAttributes Reserved2 = 8192; // 0x0
	public const PropertyAttributes Reserved3 = 16384; // 0x0
	public const PropertyAttributes Reserved4 = 32768; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public abstract class PropertyInfo : MemberInfo, _PropertyInfo
{
	// Fields

	// Properties
	public abstract PropertyAttributes Attributes { get; }
	public abstract Boolean CanRead { get; }
	public abstract Boolean CanWrite { get; }
	public override MemberTypes MemberType { get; }
	public abstract Type PropertyType { get; }

	// Methods
	// Offset : 0x4f2e90
	protected Void .ctor() { }
	// Offset : 0x
	public abstract PropertyAttributes get_Attributes() { }
	// Offset : 0x
	public abstract Boolean get_CanRead() { }
	// Offset : 0x
	public abstract Boolean get_CanWrite() { }
	// Offset : 0x4f549c
	public override MemberTypes get_MemberType() { }
	// Offset : 0x
	public abstract Type get_PropertyType() { }
	// Offset : 0x
	public abstract MethodInfo[] GetAccessors(Boolean nonPublic) { }
	// Offset : 0x4f54a4
	public MethodInfo GetGetMethod() { }
	// Offset : 0x
	public abstract MethodInfo GetGetMethod(Boolean nonPublic) { }
	// Offset : 0x
	public abstract ParameterInfo[] GetIndexParameters() { }
	// Offset : 0x
	public abstract MethodInfo GetSetMethod(Boolean nonPublic) { }
	// Offset : 0x4f54ec
	public virtual Object GetValue(Object obj, Object[] index) { }
	// Offset : 0x
	public abstract Object GetValue(Object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture) { }
	// Offset : 0x4f5554
	public virtual Void SetValue(Object obj, Object value, Object[] index) { }
	// Offset : 0x
	public abstract Void SetValue(Object obj, Object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture) { }
	// Offset : 0x4f55c4
	public virtual Type[] GetOptionalCustomModifiers() { }
	// Offset : 0x4f562c
	public virtual Type[] GetRequiredCustomModifiers() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum ResourceAttributes
{
	// Fields
	public Int32 value__; // 0x10
	public const ResourceAttributes Public = 1; // 0x0
	public const ResourceAttributes Private = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum ResourceLocation
{
	// Fields
	public Int32 value__; // 0x10
	public const ResourceLocation Embedded = 1; // 0x0
	public const ResourceLocation ContainedInAnotherAssembly = 2; // 0x0
	public const ResourceLocation ContainedInManifestFile = 4; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public class StrongNameKeyPair : ISerializable, IDeserializationCallback
{
	// Fields
	private Byte[] _publicKey; // 0x10
	private String _keyPairContainer; // 0x18
	private Boolean _keyPairExported; // 0x20
	private Byte[] _keyPairArray; // 0x28
	private RSA _rsa; // 0x30

	// Properties

	// Methods
	// Offset : 0x4f5694
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x4f58ec
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x4f5a44
	private Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object sender) { }
	// Offset : 0x4f5a48
	private RSA GetRSA() { }
	// Offset : 0x4f5b1c
	internal StrongName StrongName() { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public class TargetException : Exception
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4f5bc4
	public Void .ctor() { }
	// Offset : 0x4f1068
	public Void .ctor(String message) { }
	// Offset : 0x4f5c24
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class TargetInvocationException : Exception
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4f00e0
	public Void .ctor(Exception inner) { }
	// Offset : 0x4f5c2c
	public Void .ctor(String message, Exception inner) { }
	// Offset : 0x4f5c34
	internal Void .ctor(SerializationInfo info, StreamingContext sc) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class TargetParameterCountException : Exception
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4f5c3c
	public Void .ctor() { }
	// Offset : 0x4f00d8
	public Void .ctor(String message) { }
	// Offset : 0x4f5c9c
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public enum TypeAttributes
{
	// Fields
	public Int32 value__; // 0x10
	public const TypeAttributes VisibilityMask = 7; // 0x0
	public const TypeAttributes NotPublic = 0; // 0x0
	public const TypeAttributes Public = 1; // 0x0
	public const TypeAttributes NestedPublic = 2; // 0x0
	public const TypeAttributes NestedPrivate = 3; // 0x0
	public const TypeAttributes NestedFamily = 4; // 0x0
	public const TypeAttributes NestedAssembly = 5; // 0x0
	public const TypeAttributes NestedFamANDAssem = 6; // 0x0
	public const TypeAttributes NestedFamORAssem = 7; // 0x0
	public const TypeAttributes LayoutMask = 24; // 0x0
	public const TypeAttributes AutoLayout = 0; // 0x0
	public const TypeAttributes SequentialLayout = 8; // 0x0
	public const TypeAttributes ExplicitLayout = 16; // 0x0
	public const TypeAttributes ClassSemanticsMask = 32; // 0x0
	public const TypeAttributes Class = 0; // 0x0
	public const TypeAttributes Interface = 32; // 0x0
	public const TypeAttributes Abstract = 128; // 0x0
	public const TypeAttributes Sealed = 256; // 0x0
	public const TypeAttributes SpecialName = 1024; // 0x0
	public const TypeAttributes Import = 4096; // 0x0
	public const TypeAttributes Serializable = 8192; // 0x0
	public const TypeAttributes StringFormatMask = 196608; // 0x0
	public const TypeAttributes AnsiClass = 0; // 0x0
	public const TypeAttributes UnicodeClass = 65536; // 0x0
	public const TypeAttributes AutoClass = 131072; // 0x0
	public const TypeAttributes BeforeFieldInit = 1048576; // 0x0
	public const TypeAttributes ReservedMask = 264192; // 0x0
	public const TypeAttributes RTSpecialName = 2048; // 0x0
	public const TypeAttributes HasSecurity = 262144; // 0x0
	public const TypeAttributes CustomFormatClass = 196608; // 0x0
	public const TypeAttributes CustomFormatMask = 12582912; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public class TypeDelegator : Type
{
	// Fields
	protected Type typeImpl; // 0x18

	// Properties
	public override Assembly Assembly { get; }
	public override String AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override String FullName { get; }
	public override Module Module { get; }
	public override String Name { get; }
	public override String Namespace { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type UnderlyingSystemType { get; }

	// Methods
	// Offset : 0x4f5ca4
	protected Void .ctor() { }
	// Offset : 0x4f5d0c
	public override Assembly get_Assembly() { }
	// Offset : 0x4f5d5c
	public override String get_AssemblyQualifiedName() { }
	// Offset : 0x4f5dac
	public override Type get_BaseType() { }
	// Offset : 0x4f5dfc
	public override String get_FullName() { }
	// Offset : 0x4f5e4c
	public override Module get_Module() { }
	// Offset : 0x4f5e98
	public override String get_Name() { }
	// Offset : 0x4f5ee4
	public override String get_Namespace() { }
	// Offset : 0x4f5f34
	public override RuntimeTypeHandle get_TypeHandle() { }
	// Offset : 0x4f5f84
	public override Type get_UnderlyingSystemType() { }
	// Offset : 0x4f5fd4
	protected override TypeAttributes GetAttributeFlagsImpl() { }
	// Offset : 0x4f6004
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x4f606c
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }
	// Offset : 0x4f60c4
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x4f6118
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f617c
	public override Type GetElementType() { }
	// Offset : 0x4f61cc
	public override EventInfo GetEvent(String name, BindingFlags bindingAttr) { }
	// Offset : 0x4f6234
	public override FieldInfo GetField(String name, BindingFlags bindingAttr) { }
	// Offset : 0x4f629c
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }
	// Offset : 0x4f62f4
	public override Type GetInterface(String name, Boolean ignoreCase) { }
	// Offset : 0x4f635c
	public override Type[] GetInterfaces() { }
	// Offset : 0x4f63ac
	protected override MethodInfo GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x4f6424
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }
	// Offset : 0x4f647c
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }
	// Offset : 0x4f64d4
	protected override PropertyInfo GetPropertyImpl(String name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x4f654c
	protected override Boolean HasElementTypeImpl() { }
	// Offset : 0x4f657c
	public override Object InvokeMember(String name, BindingFlags invokeAttr, Binder binder, Object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters) { }
	// Offset : 0x4f662c
	protected override Boolean IsArrayImpl() { }
	// Offset : 0x4f665c
	protected override Boolean IsByRefImpl() { }
	// Offset : 0x4f668c
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x4f66f0
	protected override Boolean IsPointerImpl() { }
	// Offset : 0x4f6720
	protected override Boolean IsPrimitiveImpl() { }
	// Offset : 0x4f6750
	protected override Boolean IsValueTypeImpl() { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
public interface IResourceReader : IEnumerable, IDisposable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void Close() { }
	// Offset : 0x
	public abstract IDictionaryEnumerator GetEnumerator() { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
[Serializable]
public class MissingManifestResourceException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4f727c
	public Void .ctor() { }
	// Offset : 0x4f72dc
	public Void .ctor(String message) { }
	// Offset : 0x4f72e4
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
public sealed class NeutralResourcesLanguageAttribute : Attribute
{
	// Fields
	private String culture; // 0x10

	// Properties
	public String CultureName { get; }

	// Methods
	// Offset : 0x4f740c
	public Void .ctor(String cultureName) { }
	// Offset : 0x4f74b0
	public String get_CultureName() { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
[Serializable]
public class ResourceManager
{
	// Fields
	private static Hashtable ResourceCache; // 0x0
	private static Hashtable NonExistent; // 0x8
	public static readonly Int32 HeaderVersionNumber; // 0x10
	public static readonly Int32 MagicNumber; // 0x14
	protected String BaseNameField; // 0x10
	protected Assembly MainAssembly; // 0x18
	protected Hashtable ResourceSets; // 0x20
	private Boolean ignoreCase; // 0x28
	private Type resourceSource; // 0x30
	private Type resourceSetType; // 0x38
	private String resourceDir; // 0x40
	private CultureInfo neutral_culture; // 0x48

	// Properties

	// Methods
	// Offset : 0x4f74b8
	protected Void .ctor() { }
	// Offset : 0x4f753c
	public Void .ctor(String baseName, Assembly assembly) { }
	// Offset : 0x4f7c0c
	private static Void .cctor() { }
	// Offset : 0x4f7680
	private static Hashtable GetResourceSets(Assembly assembly, String basename) { }
	// Offset : 0x4f7ce0
	public virtual String GetString(String name, CultureInfo culture) { }
	// Offset : 0x4f7ff8
	protected virtual String GetResourceFileName(CultureInfo culture) { }
	// Offset : 0x4f8168
	private String GetResourceFilePath(CultureInfo culture) { }
	// Offset : 0x4f824c
	private Stream GetManifestResourceStreamNoCase(Assembly ass, String fn) { }
	// Offset : 0x4f8568
	protected virtual ResourceSet InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents) { }
	// Offset : 0x4f7a70
	protected static CultureInfo GetNeutralResourcesLanguage(Assembly a) { }
	// Offset : 0x4f9038
	protected static Version GetSatelliteContractVersion(Assembly a) { }
	// Offset : 0x4f91b4
	private MissingManifestResourceException AssemblyResourceMissing(String fileName) { }
	// Offset : 0x4f83f8
	private String GetManifestResourceName(String fn) { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
internal enum PredefinedResourceType
{
	// Fields
	public Int32 value__; // 0x10
	public const PredefinedResourceType Null = 0; // 0x0
	public const PredefinedResourceType String = 1; // 0x0
	public const PredefinedResourceType Bool = 2; // 0x0
	public const PredefinedResourceType Char = 3; // 0x0
	public const PredefinedResourceType Byte = 4; // 0x0
	public const PredefinedResourceType SByte = 5; // 0x0
	public const PredefinedResourceType Int16 = 6; // 0x0
	public const PredefinedResourceType UInt16 = 7; // 0x0
	public const PredefinedResourceType Int32 = 8; // 0x0
	public const PredefinedResourceType UInt32 = 9; // 0x0
	public const PredefinedResourceType Int64 = 10; // 0x0
	public const PredefinedResourceType UInt64 = 11; // 0x0
	public const PredefinedResourceType Single = 12; // 0x0
	public const PredefinedResourceType Double = 13; // 0x0
	public const PredefinedResourceType Decimal = 14; // 0x0
	public const PredefinedResourceType DateTime = 15; // 0x0
	public const PredefinedResourceType TimeSpan = 16; // 0x0
	public const PredefinedResourceType ByteArray = 32; // 0x0
	public const PredefinedResourceType Stream = 33; // 0x0
	public const PredefinedResourceType FistCustom = 64; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Resources
public sealed class ResourceReader : IEnumerable, IDisposable, IResourceReader
{
	// Fields
	private BinaryReader reader; // 0x10
	private Object readerLock; // 0x18
	private IFormatter formatter; // 0x20
	internal Int32 resourceCount; // 0x28
	private Int32 typeCount; // 0x2c
	private String[] typeNames; // 0x30
	private Int32[] hashes; // 0x38
	private ResourceInfo[] infos; // 0x40
	private Int32 dataSectionOffset; // 0x48
	private Int64 nameSectionOffset; // 0x50
	private Int32 resource_ver; // 0x58
	private ResourceCacheItem[] cache; // 0x60
	private Object cache_lock; // 0x68

	// Properties

	// Methods
	// Offset : 0x4f9338
	public Void .ctor(Stream stream) { }
	// Offset : 0x4fa308
	public Void .ctor(String fileName) { }
	// Offset : 0x4fa434
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x4fa510
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x4f950c
	private Void ReadHeaders() { }
	// Offset : 0x4fa578
	private Void CreateResourceInfo(Int64 position, ref ResourceInfo info) { }
	// Offset : 0x4fa864
	private Int32 Read7BitEncodedInt() { }
	// Offset : 0x4fa8f0
	private Object ReadValueVer2(Int32 type_index) { }
	// Offset : 0x4fb200
	private Object ReadValueVer1(Type type) { }
	// Offset : 0x4fb060
	private Object ReadNonPredefinedValue(Type exp_type) { }
	// Offset : 0x4fb9f0
	private Void LoadResourceValues(ResourceCacheItem[] store) { }
	// Offset : 0x4fbd18
	public Void Close() { }
	// Offset : 0x4fbd20
	public IDictionaryEnumerator GetEnumerator() { }
	// Offset : 0x4fa518
	private Void Dispose(Boolean disposing) { }
}

// Dll : mscorlib.dll
// Namespace: 
private struct ResourceInfo
{
	// Fields
	public readonly Int64 ValuePosition; // 0x10
	public readonly String ResourceName; // 0x18
	public readonly Int32 TypeIndex; // 0x20

	// Properties

	// Methods
	// Offset : 0x2cba1c
	public Void .ctor(String resourceName, Int64 valuePosition, Int32 type_index) { }
}

// Dll : mscorlib.dll
// Namespace: 
private struct ResourceCacheItem
{
	// Fields
	public readonly String ResourceName; // 0x10
	public readonly Object ResourceValue; // 0x18

	// Properties

	// Methods
	// Offset : 0x2cb974
	public Void .ctor(String name, Object value) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal sealed class ResourceEnumerator : IEnumerator, IDictionaryEnumerator
{
	// Fields
	private ResourceReader reader; // 0x10
	private Int32 index; // 0x18
	private Boolean finished; // 0x1c

	// Properties
	public DictionaryEntry Entry { get; }
	public Object Key { get; }
	public Object Value { get; }
	public Object Current { get; }

	// Methods
	// Offset : 0x4fbde0
	internal Void .ctor(ResourceReader readerToEnumerate) { }
	// Offset : 0x4fbf74
	public DictionaryEntry get_Entry() { }
	// Offset : 0x4fc06c
	public Object get_Key() { }
	// Offset : 0x4fc180
	public Object get_Value() { }
	// Offset : 0x4fc294
	public Object get_Current() { }
	// Offset : 0x4fc300
	public Boolean MoveNext() { }
	// Offset : 0x4fc3e0
	public Void Reset() { }
	// Offset : 0x4fbe18
	private Void FillCache() { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
[Serializable]
public class ResourceSet : IEnumerable, IDisposable
{
	// Fields
	protected IResourceReader Reader; // 0x10
	protected Hashtable Table; // 0x18
	private Boolean resources_read; // 0x20
	private Boolean disposed; // 0x21

	// Properties

	// Methods
	// Offset : 0x4fc488
	protected Void .ctor() { }
	// Offset : 0x4fc4fc
	public Void .ctor(Stream stream) { }
	// Offset : 0x4fc594
	internal Void .ctor(UnmanagedMemoryStream stream) { }
	// Offset : 0x4fc62c
	public Void .ctor(String fileName) { }
	// Offset : 0x4fc6c4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x4fc704
	public Void Dispose() { }
	// Offset : 0x4fc754
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x4fc84c
	public virtual IDictionaryEnumerator GetEnumerator() { }
	// Offset : 0x4fc938
	private Object GetObjectInternal(String name, Boolean ignoreCase) { }
	// Offset : 0x4fce78
	public virtual Object GetObject(String name) { }
	// Offset : 0x4fce80
	public virtual Object GetObject(String name, Boolean ignoreCase) { }
	// Offset : 0x4fce88
	private String GetStringInternal(String name, Boolean ignoreCase) { }
	// Offset : 0x4fcf98
	public virtual String GetString(String name, Boolean ignoreCase) { }
	// Offset : 0x4fcfa0
	protected virtual Void ReadResources() { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
[Serializable]
internal class RuntimeResourceSet : ResourceSet
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4fd480
	public Void .ctor(UnmanagedMemoryStream stream) { }
	// Offset : 0x4fd484
	public Void .ctor(Stream stream) { }
	// Offset : 0x4fd488
	public Void .ctor(String fileName) { }
	// Offset : 0x4fd48c
	public override Object GetObject(String name) { }
	// Offset : 0x4fd650
	public override Object GetObject(String name, Boolean ignoreCase) { }
	// Offset : 0x4fd538
	private Object CloneDisposableObjectIfPossible(Object value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
public sealed class SatelliteContractVersionAttribute : Attribute
{
	// Fields
	private Version ver; // 0x10

	// Properties
	public String Version { get; }

	// Methods
	// Offset : 0x4fd700
	public Void .ctor(String version) { }
	// Offset : 0x4f9308
	public String get_Version() { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
internal enum Win32ResourceType
{
	// Fields
	public Int32 value__; // 0x10
	public const Win32ResourceType RT_CURSOR = 1; // 0x0
	public const Win32ResourceType RT_FONT = 8; // 0x0
	public const Win32ResourceType RT_BITMAP = 2; // 0x0
	public const Win32ResourceType RT_ICON = 3; // 0x0
	public const Win32ResourceType RT_MENU = 4; // 0x0
	public const Win32ResourceType RT_DIALOG = 5; // 0x0
	public const Win32ResourceType RT_STRING = 6; // 0x0
	public const Win32ResourceType RT_FONTDIR = 7; // 0x0
	public const Win32ResourceType RT_ACCELERATOR = 9; // 0x0
	public const Win32ResourceType RT_RCDATA = 10; // 0x0
	public const Win32ResourceType RT_MESSAGETABLE = 11; // 0x0
	public const Win32ResourceType RT_GROUP_CURSOR = 12; // 0x0
	public const Win32ResourceType RT_GROUP_ICON = 14; // 0x0
	public const Win32ResourceType RT_VERSION = 16; // 0x0
	public const Win32ResourceType RT_DLGINCLUDE = 17; // 0x0
	public const Win32ResourceType RT_PLUGPLAY = 19; // 0x0
	public const Win32ResourceType RT_VXD = 20; // 0x0
	public const Win32ResourceType RT_ANICURSOR = 21; // 0x0
	public const Win32ResourceType RT_ANIICON = 22; // 0x0
	public const Win32ResourceType RT_HTML = 23; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Resources
internal class NameOrId
{
	// Fields
	private String name; // 0x10
	private Int32 id; // 0x18

	// Properties
	public Boolean IsName { get; }
	public Int32 Id { get; }

	// Methods
	// Offset : 0x4f72ec
	public Boolean get_IsName() { }
	// Offset : 0x4f72fc
	public Int32 get_Id() { }
	// Offset : 0x4f7304
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
internal abstract class Win32Resource
{
	// Fields
	private NameOrId type; // 0x10
	private NameOrId name; // 0x18

	// Properties
	public Win32ResourceType ResourceType { get; }

	// Methods
	// Offset : 0x4fd77c
	public Win32ResourceType get_ResourceType() { }
	// Offset : 0x4fd7cc
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Resources
internal class Win32VersionResource : Win32Resource
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum CompilationRelaxations
{
	// Fields
	public Int32 value__; // 0x10
	public const CompilationRelaxations NoStringInterning = 8; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
[Serializable]
public class CompilationRelaxationsAttribute : Attribute
{
	// Fields
	private Int32 relax; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fda14
	public Void .ctor(Int32 relaxations) { }
	// Offset : 0x4fda40
	public Void .ctor(CompilationRelaxations relaxations) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class DefaultDependencyAttribute : Attribute
{
	// Fields
	private LoadHint hint; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fdb2c
	public Void .ctor(LoadHint loadHintArgument) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
public static class IsVolatile
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum LoadHint
{
	// Fields
	public Int32 value__; // 0x10
	public const LoadHint Default = 0; // 0x0
	public const LoadHint Always = 1; // 0x0
	public const LoadHint Sometimes = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class StringFreezingAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4fdcb0
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.ConstrainedExecution
[Serializable]
public enum Cer
{
	// Fields
	public Int32 value__; // 0x10
	public const Cer None = 0; // 0x0
	public const Cer MayFail = 1; // 0x0
	public const Cer Success = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.ConstrainedExecution
[Serializable]
public enum Consistency
{
	// Fields
	public Int32 value__; // 0x10
	public const Consistency MayCorruptAppDomain = 1; // 0x0
	public const Consistency MayCorruptInstance = 2; // 0x0
	public const Consistency MayCorruptProcess = 0; // 0x0
	public const Consistency WillNotCorruptState = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.ConstrainedExecution
public abstract class CriticalFinalizerObject
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4fdcb8
	protected Void .ctor() { }
	// Offset : 0x4fdcc0
	protected override Void Finalize() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.ConstrainedExecution
public sealed class ReliabilityContractAttribute : Attribute
{
	// Fields
	private Consistency consistency; // 0x10
	private Cer cer; // 0x14

	// Properties

	// Methods
	// Offset : 0x4fdcc8
	public Void .ctor(Consistency consistencyGuarantee, Cer cer) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Hosting
[Serializable]
public sealed class ActivationArguments
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
[Serializable]
public class COMException : ExternalException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4fdd00
	public Void .ctor() { }
	// Offset : 0x4fdd78
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x4fdd88
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
[Serializable]
public enum CallingConvention
{
	// Fields
	public Int32 value__; // 0x10
	public const CallingConvention Winapi = 1; // 0x0
	public const CallingConvention Cdecl = 2; // 0x0
	public const CallingConvention StdCall = 3; // 0x0
	public const CallingConvention ThisCall = 4; // 0x0
	public const CallingConvention FastCall = 5; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
[Serializable]
public enum CharSet
{
	// Fields
	public Int32 value__; // 0x10
	public const CharSet None = 1; // 0x0
	public const CharSet Ansi = 2; // 0x0
	public const CharSet Unicode = 3; // 0x0
	public const CharSet Auto = 4; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class ClassInterfaceAttribute : Attribute
{
	// Fields
	private ClassInterfaceType ciType; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fe16c
	public Void .ctor(ClassInterfaceType classInterfaceType) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ClassInterfaceType
{
	// Fields
	public Int32 value__; // 0x10
	public const ClassInterfaceType None = 0; // 0x0
	public const ClassInterfaceType AutoDispatch = 1; // 0x0
	public const ClassInterfaceType AutoDual = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class ComDefaultInterfaceAttribute : Attribute
{
	// Fields
	private Type _type; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fe198
	public Void .ctor(Type defaultInterface) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ComInterfaceType
{
	// Fields
	public Int32 value__; // 0x10
	public const ComInterfaceType InterfaceIsDual = 0; // 0x0
	public const ComInterfaceType InterfaceIsIUnknown = 1; // 0x0
	public const ComInterfaceType InterfaceIsIDispatch = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class DispIdAttribute : Attribute
{
	// Fields
	private Int32 id; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fe1fc
	public Void .ctor(Int32 dispId) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class ErrorWrapper
{
	// Fields
	private Int32 errorCode; // 0x10

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
[Serializable]
public class ExternalException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4fdd04
	public Void .ctor() { }
	// Offset : 0x4fdd80
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public struct GCHandle
{
	// Fields
	private Int32 handle; // 0x10

	// Properties
	public Boolean IsAllocated { get; }
	public Object Target { get; }

	// Methods
	// Offset : 0x2cba28
	private Void .ctor(Object value, GCHandleType type) { }
	// Offset : 0x2cba60
	public Boolean get_IsAllocated() { }
	// Offset : 0x2cba70
	public Object get_Target() { }
	// Offset : 0x4fe378
	public static GCHandle Alloc(Object value, GCHandleType type) { }
	// Offset : 0x2cba78
	public Void Free() { }
	// Offset : 0x4fe374
	private static Object GetTarget(Int32 handle) { }
	// Offset : 0x4fe2c0
	private static Int32 GetTargetHandle(Object obj, Int32 handle, GCHandleType type) { }
	// Offset : 0x4fe3c8
	private static Void FreeHandle(Int32 handle) { }
	// Offset : 0x2cbaa0
	public override Boolean Equals(Object o) { }
	// Offset : 0x2cbaa8
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
[Serializable]
public enum GCHandleType
{
	// Fields
	public Int32 value__; // 0x10
	public const GCHandleType Weak = 0; // 0x0
	public const GCHandleType WeakTrackResurrection = 1; // 0x0
	public const GCHandleType Normal = 2; // 0x0
	public const GCHandleType Pinned = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class InterfaceTypeAttribute : Attribute
{
	// Fields
	private ComInterfaceType intType; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fe488
	public Void .ctor(ComInterfaceType interfaceType) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public static class Marshal
{
	// Fields
	public static readonly Int32 SystemMaxDBCSCharSize; // 0x0
	public static readonly Int32 SystemDefaultCharSize; // 0x4

	// Properties

	// Methods
	// Offset : 0x4fe4b4
	private static Void .cctor() { }
	// Offset : 0x4fe540
	private static Void copy_from_unmanaged(IntPtr source, Int32 startIndex, Array destination, Int32 length) { }
	// Offset : 0x4fe544
	public static Void Copy(IntPtr source, Byte[] destination, Int32 startIndex, Int32 length) { }
	// Offset : 0x4fe5d0
	public static Void Copy(IntPtr source, Char[] destination, Int32 startIndex, Int32 length) { }
	// Offset : 0x4fe65c
	public static Byte ReadByte(IntPtr ptr, Int32 ofs) { }
	// Offset : 0x4fe660
	public static Void WriteByte(IntPtr ptr, Int32 ofs, Byte val) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
[Serializable]
public class MarshalDirectiveException : SystemException
{
	// Fields
	private const Int32 ErrorCode; // 0x0

	// Properties

	// Methods
	// Offset : 0x4fe690
	public Void .ctor() { }
	// Offset : 0x4fe704
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class PreserveSigAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4f22bc
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public abstract class SafeHandle : CriticalFinalizerObject, IDisposable
{
	// Fields
	protected IntPtr handle; // 0x10
	private IntPtr invalid_handle_value; // 0x18
	private Int32 refcount; // 0x20
	private Boolean owns_handle; // 0x24

	// Properties
	public abstract Boolean IsInvalid { get; }

	// Methods
	// Offset : 0x4fe70c
	protected Void .ctor(IntPtr invalidHandleValue, Boolean ownsHandle) { }
	// Offset : 0x4fe754
	public Void Close() { }
	// Offset : 0x4fe8a8
	public Void DangerousAddRef(ref Boolean success) { }
	// Offset : 0x4fe99c
	public IntPtr DangerousGetHandle() { }
	// Offset : 0x4fea54
	public Void DangerousRelease() { }
	// Offset : 0x4feba4
	public Void Dispose() { }
	// Offset : 0x4febf4
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x
	protected abstract Boolean ReleaseHandle() { }
	// Offset : 0x4fec00
	protected Void SetHandle(IntPtr handle) { }
	// Offset : 0x
	public abstract Boolean get_IsInvalid() { }
	// Offset : 0x4fec08
	protected override Void Finalize() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class TypeLibImportClassAttribute : Attribute
{
	// Fields
	private String _importClass; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fecdc
	public Void .ctor(Type importClass) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class TypeLibVersionAttribute : Attribute
{
	// Fields
	private Int32 major; // 0x10
	private Int32 minor; // 0x14

	// Properties

	// Methods
	// Offset : 0x4fed3c
	public Void .ctor(Int32 major, Int32 minor) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public sealed class UnmanagedFunctionPointerAttribute : Attribute
{
	// Fields
	private CallingConvention call_conv; // 0x10

	// Properties

	// Methods
	// Offset : 0x4fed74
	public Void .ctor(CallingConvention callingConvention) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
[Serializable]
public enum UnmanagedType
{
	// Fields
	public Int32 value__; // 0x10
	public const UnmanagedType Bool = 2; // 0x0
	public const UnmanagedType I1 = 3; // 0x0
	public const UnmanagedType U1 = 4; // 0x0
	public const UnmanagedType I2 = 5; // 0x0
	public const UnmanagedType U2 = 6; // 0x0
	public const UnmanagedType I4 = 7; // 0x0
	public const UnmanagedType U4 = 8; // 0x0
	public const UnmanagedType I8 = 9; // 0x0
	public const UnmanagedType U8 = 10; // 0x0
	public const UnmanagedType R4 = 11; // 0x0
	public const UnmanagedType R8 = 12; // 0x0
	public const UnmanagedType Currency = 15; // 0x0
	public const UnmanagedType BStr = 19; // 0x0
	public const UnmanagedType LPStr = 20; // 0x0
	public const UnmanagedType LPWStr = 21; // 0x0
	public const UnmanagedType LPTStr = 22; // 0x0
	public const UnmanagedType ByValTStr = 23; // 0x0
	public const UnmanagedType IUnknown = 25; // 0x0
	public const UnmanagedType IDispatch = 26; // 0x0
	public const UnmanagedType Struct = 27; // 0x0
	public const UnmanagedType Interface = 28; // 0x0
	public const UnmanagedType SafeArray = 29; // 0x0
	public const UnmanagedType ByValArray = 30; // 0x0
	public const UnmanagedType SysInt = 31; // 0x0
	public const UnmanagedType SysUInt = 32; // 0x0
	public const UnmanagedType VBByRefStr = 34; // 0x0
	public const UnmanagedType AnsiBStr = 35; // 0x0
	public const UnmanagedType TBStr = 36; // 0x0
	public const UnmanagedType VariantBool = 37; // 0x0
	public const UnmanagedType FunctionPtr = 38; // 0x0
	public const UnmanagedType AsAny = 40; // 0x0
	public const UnmanagedType LPArray = 42; // 0x0
	public const UnmanagedType LPStruct = 43; // 0x0
	public const UnmanagedType CustomMarshaler = 44; // 0x0
	public const UnmanagedType Error = 45; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _Activator
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _Assembly
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _AssemblyBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _AssemblyName
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _ConstructorBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _ConstructorInfo
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _CustomAttributeBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _EnumBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _EventBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _EventInfo
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _FieldBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _FieldInfo
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _ILGenerator
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _LocalBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _MethodBase
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _MethodBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _MethodInfo
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _Module
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _ModuleBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _ParameterBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _ParameterInfo
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _PropertyBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _PropertyInfo
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _Thread
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.InteropServices
public interface _TypeBuilder
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Activation
internal class ActivationServices
{
	// Fields
	private static IActivator _constructionActivator; // 0x0

	// Properties
	private static IActivator ConstructionActivator { get; }

	// Methods
	// Offset : 0x4ff1b0
	private static IActivator get_ConstructionActivator() { }
	// Offset : 0x4ff240
	public static IMessage RemoteActivate(IConstructionCallMessage ctorCall) { }
	// Offset : 0x4ff478
	public static Object CreateProxyFromAttributes(Type type, Object[] activationAttributes) { }
	// Offset : 0x4ff69c
	public static ConstructionCall CreateConstructionCall(Type type, String activationUrl, Object[] activationAttributes) { }
	// Offset : 0x5004e8
	public static IMessage CreateInstanceFromMessage(IConstructionCallMessage ctorCall) { }
	// Offset : 0x500b10
	public static Object AllocateUninitializedClassInstance(Type type) { }
	// Offset : 0x500b14
	public static Void EnableProxyActivation(Type type, Boolean enable) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Activation
internal class AppDomainLevelActivator : IActivator
{
	// Fields
	private String _activationUrl; // 0x10
	private IActivator _next; // 0x18

	// Properties
	public IActivator NextActivator { get; }

	// Methods
	// Offset : 0x500484
	public Void .ctor(String activationUrl, IActivator next) { }
	// Offset : 0x500b1c
	public IActivator get_NextActivator() { }
	// Offset : 0x500b24
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ConstructionLevelActivator : IActivator
{
	// Fields

	// Properties
	public IActivator NextActivator { get; }

	// Methods
	// Offset : 0x4ff238
	public Void .ctor() { }
	// Offset : 0x5011a0
	public IActivator get_NextActivator() { }
	// Offset : 0x5011a8
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ContextLevelActivator : IActivator
{
	// Fields
	private IActivator m_NextActivator; // 0x10

	// Properties
	public IActivator NextActivator { get; }

	// Methods
	// Offset : 0x5004bc
	public Void .ctor(IActivator next) { }
	// Offset : 0x501580
	public IActivator get_NextActivator() { }
	// Offset : 0x501588
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Activation
public interface IActivator
{
	// Fields

	// Properties
	public abstract IActivator NextActivator { get; }

	// Methods
	// Offset : 0x
	public abstract IActivator get_NextActivator() { }
	// Offset : 0x
	public abstract IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Activation
public interface IConstructionCallMessage : IMessage, IMethodCallMessage, IMethodMessage
{
	// Fields

	// Properties
	public abstract Type ActivationType { get; }
	public abstract String ActivationTypeName { get; }
	public abstract IActivator Activator { get; set; }
	public abstract Object[] CallSiteActivationAttributes { get; }
	public abstract IList ContextProperties { get; }

	// Methods
	// Offset : 0x
	public abstract Type get_ActivationType() { }
	// Offset : 0x
	public abstract String get_ActivationTypeName() { }
	// Offset : 0x
	public abstract IActivator get_Activator() { }
	// Offset : 0x
	public abstract Void set_Activator(IActivator value) { }
	// Offset : 0x
	public abstract Object[] get_CallSiteActivationAttributes() { }
	// Offset : 0x
	public abstract IList get_ContextProperties() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Activation
public interface IConstructionReturnMessage : IMessage, IMethodMessage, IMethodReturnMessage
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivationAttribute : Attribute, IContextAttribute
{
	// Fields
	private IList _contextProperties; // 0x10

	// Properties

	// Methods
	// Offset : 0x5024d8
	public Void .ctor(IList contextProperties) { }
	// Offset : 0x502504
	public Boolean IsContextOK(Context ctx, IConstructionCallMessage ctor) { }
	// Offset : 0x50250c
	public Void GetPropertiesForNewContext(IConstructionCallMessage ctor) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivator : MarshalByRefObject, IActivator
{
	// Fields

	// Properties
	public IActivator NextActivator { get; }

	// Methods
	// Offset : 0x5029b8
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }
	// Offset : 0x502f70
	public override Object InitializeLifetimeService() { }
	// Offset : 0x503334
	public IActivator get_NextActivator() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Activation
[Serializable]
public sealed class UrlAttribute : ContextAttribute
{
	// Fields
	private String url; // 0x18

	// Properties
	public String UrlValue { get; }

	// Methods
	// Offset : 0x4ff694
	public String get_UrlValue() { }
	// Offset : 0x50339c
	public override Boolean Equals(Object o) { }
	// Offset : 0x503448
	public override Int32 GetHashCode() { }
	// Offset : 0x503478
	public override Void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg) { }
	// Offset : 0x50347c
	public override Boolean IsContextOK(Context ctx, IConstructionCallMessage msg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
[Serializable]
internal class ChannelInfo : IChannelInfo
{
	// Fields
	private Object[] channelData; // 0x10

	// Properties
	public Object[] ChannelData { get; }

	// Methods
	// Offset : 0x504298
	public Void .ctor() { }
	// Offset : 0x504854
	public Void .ctor(Object remoteChannelData) { }
	// Offset : 0x50491c
	public Object[] get_ChannelData() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
public sealed class ChannelServices
{
	// Fields
	private static ArrayList registeredChannels; // 0x0
	private static ArrayList delayedClientChannels; // 0x8
	private static CrossContextChannel _crossContextSink; // 0x10
	internal static String CrossContextUrl; // 0x18
	private static IList oldStartModeTypes; // 0x20

	// Properties
	internal static CrossContextChannel CrossContextChannel { get; }

	// Methods
	// Offset : 0x504de0
	private static Void .cctor() { }
	// Offset : 0x504f88
	internal static CrossContextChannel get_CrossContextChannel() { }
	// Offset : 0x504ff0
	internal static IMessageSink CreateClientChannelSinkChain(String url, Object remoteChannelData, out String objectUri) { }
	// Offset : 0x505a74
	internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, String url, Object[] channelDataArray, out String objectUri) { }
	// Offset : 0x505cc4
	public static Void RegisterChannel(IChannel chnl) { }
	// Offset : 0x505d2c
	public static Void RegisterChannel(IChannel chnl, Boolean ensureSecurity) { }
	// Offset : 0x506948
	internal static Void RegisterChannelConfig(ChannelData channel) { }
	// Offset : 0x5078e0
	private static Object CreateProvider(ProviderData prov) { }
	// Offset : 0x507d2c
	public static IMessage SyncDispatchMessage(IMessage msg) { }
	// Offset : 0x507e04
	private static ReturnMessage CheckIncomingMessage(IMessage msg) { }
	// Offset : 0x5081b8
	internal static IMessage CheckReturnMessage(IMessage callMsg, IMessage retMsg) { }
	// Offset : 0x508924
	private static Boolean IsLocalCall(IMessage callMsg) { }
	// Offset : 0x50430c
	internal static Object[] GetCurrentChannelInfo() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainData
{
	// Fields
	private Object _ContextID; // 0x10
	private Int32 _DomainID; // 0x18
	private String _processGuid; // 0x20

	// Properties
	internal Int32 DomainID { get; }
	internal String ProcessID { get; }

	// Methods
	// Offset : 0x508b8c
	internal Void .ctor(Int32 domainId) { }
	// Offset : 0x508dd0
	internal Int32 get_DomainID() { }
	// Offset : 0x508dc8
	internal String get_ProcessID() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainChannel : IChannel, IChannelReceiver, IChannelSender
{
	// Fields
	private static Object s_lock; // 0x0

	// Properties
	public virtual String ChannelName { get; }
	public virtual Int32 ChannelPriority { get; }
	public virtual Object ChannelData { get; }

	// Methods
	// Offset : 0x50892c
	public Void .ctor() { }
	// Offset : 0x508934
	private static Void .cctor() { }
	// Offset : 0x5089a0
	internal static Void RegisterCrossAppDomainChannel() { }
	// Offset : 0x508ab0
	public virtual String get_ChannelName() { }
	// Offset : 0x508af8
	public virtual Int32 get_ChannelPriority() { }
	// Offset : 0x508b00
	public virtual Object get_ChannelData() { }
	// Offset : 0x508c30
	public virtual Void StartListening(Object data) { }
	// Offset : 0x508c34
	public virtual IMessageSink CreateMessageSink(String url, Object data, out String uri) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
internal class CrossAppDomainSink : IMessageSink
{
	// Fields
	private static Hashtable s_sinks; // 0x0
	private static MethodInfo processMessageMethod; // 0x8
	private Int32 _domainID; // 0x10

	// Properties
	internal Int32 TargetDomainId { get; }

	// Methods
	// Offset : 0x509128
	internal Void .ctor(Int32 domainID) { }
	// Offset : 0x509154
	private static Void .cctor() { }
	// Offset : 0x508dd8
	internal static CrossAppDomainSink GetSink(Int32 domainID) { }
	// Offset : 0x50922c
	internal Int32 get_TargetDomainId() { }
	// Offset : 0x509234
	private static ProcessMessageRes ProcessMessageInDomain(Byte[] arrRequest, CADMethodCallMessage cadMsg) { }
	// Offset : 0x5093d0
	public virtual IMessage SyncProcessMessage(IMessage msgRequest) { }
	// Offset : 0x509838
	public virtual IMessageCtrl AsyncProcessMessage(IMessage reqMsg, IMessageSink replySink) { }
	// Offset : 0x5098e8
	public Void SendAsyncMessage(Object data) { }
}

// Dll : mscorlib.dll
// Namespace: 
private struct ProcessMessageRes
{
	// Fields
	public Byte[] arrResponse; // 0x10
	public CADMethodReturnMessage cadMrm; // 0x18

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
internal class CADSerializer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x50495c
	internal static IMessage DeserializeMessage(MemoryStream mem, IMethodCallMessage msg) { }
	// Offset : 0x504ad0
	internal static MemoryStream SerializeMessage(IMessage msg) { }
	// Offset : 0x504bf4
	internal static MemoryStream SerializeObject(Object obj) { }
	// Offset : 0x504d18
	internal static Object DeserializeObject(MemoryStream mem) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
internal class AsyncRequest
{
	// Fields
	internal IMessageSink ReplySink; // 0x10
	internal IMessage MsgRequest; // 0x18

	// Properties

	// Methods
	// Offset : 0x504924
	public Void .ctor(IMessage msgRequest, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
public interface IChannel
{
	// Fields

	// Properties
	public abstract String ChannelName { get; }
	public abstract Int32 ChannelPriority { get; }

	// Methods
	// Offset : 0x
	public abstract String get_ChannelName() { }
	// Offset : 0x
	public abstract Int32 get_ChannelPriority() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
public interface IChannelDataStore
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
public interface IChannelReceiver : IChannel
{
	// Fields

	// Properties
	public abstract Object ChannelData { get; }

	// Methods
	// Offset : 0x
	public abstract Object get_ChannelData() { }
	// Offset : 0x
	public abstract Void StartListening(Object data) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
public interface IChannelSender : IChannel
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract IMessageSink CreateMessageSink(String url, Object remoteChannelData, out String objectURI) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
public interface IClientChannelSinkProvider
{
	// Fields

	// Properties
	public abstract IClientChannelSinkProvider Next { set; }

	// Methods
	// Offset : 0x
	public abstract Void set_Next(IClientChannelSinkProvider value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
public interface ISecurableChannel
{
	// Fields

	// Properties
	public abstract Boolean IsSecured { set; }

	// Methods
	// Offset : 0x
	public abstract Void set_IsSecured(Boolean value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
public interface IServerChannelSinkProvider
{
	// Fields

	// Properties
	public abstract IServerChannelSinkProvider Next { set; }

	// Methods
	// Offset : 0x
	public abstract Void set_Next(IServerChannelSinkProvider value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Channels
public class SinkProviderData
{
	// Fields
	private String sinkName; // 0x10
	private ArrayList children; // 0x18
	private Hashtable properties; // 0x20

	// Properties
	public IList Children { get; }
	public IDictionary Properties { get; }

	// Methods
	// Offset : 0x509aa0
	public Void .ctor(String name) { }
	// Offset : 0x509b3c
	public IList get_Children() { }
	// Offset : 0x509b44
	public IDictionary get_Properties() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public class Context
{
	// Fields
	private Int32 domain_id; // 0x10
	private Int32 context_id; // 0x14
	private UIntPtr static_data; // 0x18
	private static IMessageSink default_server_context_sink; // 0x0
	private IMessageSink server_context_sink_chain; // 0x20
	private IMessageSink client_context_sink_chain; // 0x28
	private Object[] datastore; // 0x30
	private ArrayList context_properties; // 0x38
	private Boolean frozen; // 0x40
	private static Int32 global_count; // 0x8
	private static Hashtable namedSlots; // 0x10
	private static DynamicPropertyCollection global_dynamic_properties; // 0x18
	private DynamicPropertyCollection context_dynamic_properties; // 0x48
	private ContextCallbackObject callback_object; // 0x50

	// Properties
	public static Context DefaultContext { get; }
	public virtual Int32 ContextID { get; }
	public virtual IContextProperty[] ContextProperties { get; }
	internal Boolean IsDefaultContext { get; }
	internal Boolean NeedsContextSink { get; }
	internal static Boolean HasGlobalDynamicSinks { get; }
	internal Boolean HasDynamicSinks { get; }
	internal Boolean HasExitSinks { get; }

	// Methods
	// Offset : 0x50e8b0
	public Void .ctor() { }
	// Offset : 0x50e960
	private static Void .cctor() { }
	// Offset : 0x50e9cc
	protected override Void Finalize() { }
	// Offset : 0x50e9d4
	public static Context get_DefaultContext() { }
	// Offset : 0x50e9dc
	public virtual Int32 get_ContextID() { }
	// Offset : 0x50e9e4
	public virtual IContextProperty[] get_ContextProperties() { }
	// Offset : 0x50eb30
	internal Boolean get_IsDefaultContext() { }
	// Offset : 0x50eb40
	internal Boolean get_NeedsContextSink() { }
	// Offset : 0x50ec14
	public static Boolean RegisterDynamicProperty(IDynamicProperty prop, ContextBoundObject obj, Context ctx) { }
	// Offset : 0x50eed0
	public static Boolean UnregisterDynamicProperty(String name, ContextBoundObject obj, Context ctx) { }
	// Offset : 0x50eca8
	private static DynamicPropertyCollection GetDynamicPropertyCollection(ContextBoundObject obj, Context ctx) { }
	// Offset : 0x50ef64
	internal static Void NotifyGlobalDynamicSinks(Boolean start, IMessage req_msg, Boolean client_site, Boolean async) { }
	// Offset : 0x50f08c
	internal static Boolean get_HasGlobalDynamicSinks() { }
	// Offset : 0x50f140
	internal Void NotifyDynamicSinks(Boolean start, IMessage req_msg, Boolean client_site, Boolean async) { }
	// Offset : 0x50f1cc
	internal Boolean get_HasDynamicSinks() { }
	// Offset : 0x50f1e0
	internal Boolean get_HasExitSinks() { }
	// Offset : 0x50f6e0
	public virtual IContextProperty GetProperty(String name) { }
	// Offset : 0x50fb6c
	public virtual Void SetProperty(IContextProperty prop) { }
	// Offset : 0x50fce0
	public virtual Void Freeze() { }
	// Offset : 0x5100e0
	public override String ToString() { }
	// Offset : 0x50134c
	internal IMessageSink GetServerContextSinkChain() { }
	// Offset : 0x50f2a4
	internal IMessageSink GetClientContextSinkChain() { }
	// Offset : 0x509d2c
	internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, Boolean forceInternalExecute) { }
	// Offset : 0x510184
	internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject) { }
	// Offset : 0x5024d0
	internal static Context SwitchToContext(Context newContext) { }
	// Offset : 0x50199c
	internal static Context CreateNewContext(IConstructionCallMessage msg) { }
	// Offset : 0x5105cc
	public Void DoCallBack(CrossContextDelegate deleg) { }
	// Offset : 0x510704
	public static LocalDataStoreSlot AllocateDataSlot() { }
	// Offset : 0x510764
	public static LocalDataStoreSlot AllocateNamedDataSlot(String name) { }
	// Offset : 0x5108dc
	public static Void FreeNamedDataSlot(String name) { }
	// Offset : 0x510a54
	public static Object GetData(LocalDataStoreSlot slot) { }
	// Offset : 0x510bbc
	public static LocalDataStoreSlot GetNamedDataSlot(String name) { }
	// Offset : 0x510d70
	public static Void SetData(LocalDataStoreSlot slot, Object data) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
internal class DynamicPropertyCollection
{
	// Fields
	private ArrayList _properties; // 0x10

	// Properties
	public Boolean HasProperties { get; }

	// Methods
	// Offset : 0x666ca0
	public Void .ctor() { }
	// Offset : 0x666d08
	public Boolean get_HasProperties() { }
	// Offset : 0x666d64
	public Boolean RegisterDynamicProperty(IDynamicProperty prop) { }
	// Offset : 0x667368
	public Boolean UnregisterDynamicProperty(String name) { }
	// Offset : 0x667508
	public Void NotifyMessage(Boolean start, IMessage msg, Boolean client_site, Boolean async) { }
	// Offset : 0x667090
	private Int32 FindProperty(String name) { }
}

// Dll : mscorlib.dll
// Namespace: 
private class DynamicPropertyReg
{
	// Fields
	public IDynamicProperty Property; // 0x10
	public IDynamicMessageSink Sink; // 0x18

	// Properties

	// Methods
	// Offset : 0x667360
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
internal class ContextCallbackObject : ContextBoundObject
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5106f8
	public Void .ctor() { }
	// Offset : 0x510700
	public Void DoCallBack(CrossContextDelegate deleg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
[Serializable]
public class ContextAttribute : Attribute, IContextAttribute, IContextProperty
{
	// Fields
	protected String AttributeName; // 0x10

	// Properties
	public virtual String Name { get; }

	// Methods
	// Offset : 0x510f98
	public Void .ctor(String name) { }
	// Offset : 0x510fc4
	public virtual String get_Name() { }
	// Offset : 0x510fcc
	public override Boolean Equals(Object o) { }
	// Offset : 0x511098
	public virtual Void Freeze(Context newContext) { }
	// Offset : 0x51109c
	public override Int32 GetHashCode() { }
	// Offset : 0x5110b0
	public virtual Void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg) { }
	// Offset : 0x511280
	public virtual Boolean IsContextOK(Context ctx, IConstructionCallMessage ctorMsg) { }
	// Offset : 0x511434
	public virtual Boolean IsNewContextOK(Context newCtx) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
internal class CrossContextChannel : IMessageSink
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x504f80
	public Void .ctor() { }
	// Offset : 0x5083cc
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x51143c
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: 
private class ContextRestoreSink : IMessageSink
{
	// Fields
	private IMessageSink _next; // 0x10
	private Context _context; // 0x18
	private IMessage _call; // 0x20

	// Properties

	// Methods
	// Offset : 0x511a00
	public Void .ctor(IMessageSink next, Context context, IMessage call) { }
	// Offset : 0x511a40
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x511d9c
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public interface IContextAttribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void GetPropertiesForNewContext(IConstructionCallMessage msg) { }
	// Offset : 0x
	public abstract Boolean IsContextOK(Context ctx, IConstructionCallMessage msg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public interface IContextProperty
{
	// Fields

	// Properties
	public abstract String Name { get; }

	// Methods
	// Offset : 0x
	public abstract String get_Name() { }
	// Offset : 0x
	public abstract Void Freeze(Context newContext) { }
	// Offset : 0x
	public abstract Boolean IsNewContextOK(Context newCtx) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeClientContextSink
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract IMessageSink GetClientContextSink(IMessageSink nextSink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeDynamicSink
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract IDynamicMessageSink GetDynamicSink() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeEnvoySink
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeObjectSink
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeServerContextSink
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract IMessageSink GetServerContextSink(IMessageSink nextSink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public interface IDynamicMessageSink
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void ProcessMessageFinish(IMessage replyMsg, Boolean bCliSide, Boolean bAsync) { }
	// Offset : 0x
	public abstract Void ProcessMessageStart(IMessage reqMsg, Boolean bCliSide, Boolean bAsync) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public interface IDynamicProperty
{
	// Fields

	// Properties
	public abstract String Name { get; }

	// Methods
	// Offset : 0x
	public abstract String get_Name() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
[Serializable]
public class SynchronizationAttribute : ContextAttribute, IContributeClientContextSink, IContributeServerContextSink
{
	// Fields
	private Boolean _bReEntrant; // 0x18
	private Int32 _flavor; // 0x1c
	private Int32 _lockCount; // 0x20
	private Mutex _mutex; // 0x28
	private Thread _ownerThread; // 0x30

	// Properties
	public virtual Boolean IsReEntrant { get; }
	public virtual Boolean Locked { set; }

	// Methods
	// Offset : 0x667cdc
	public Void .ctor() { }
	// Offset : 0x667ce8
	public Void .ctor(Int32 flag, Boolean reEntrant) { }
	// Offset : 0x667de0
	public virtual Boolean get_IsReEntrant() { }
	// Offset : 0x667de8
	public virtual Void set_Locked(Boolean value) { }
	// Offset : 0x6680c4
	internal Void AcquireLock() { }
	// Offset : 0x667fb4
	internal Void ReleaseLock() { }
	// Offset : 0x6681d4
	public override Void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg) { }
	// Offset : 0x668384
	public virtual IMessageSink GetClientContextSink(IMessageSink nextSink) { }
	// Offset : 0x66842c
	public virtual IMessageSink GetServerContextSink(IMessageSink nextSink) { }
	// Offset : 0x6684d4
	public override Boolean IsContextOK(Context ctx, IConstructionCallMessage msg) { }
	// Offset : 0x6685e4
	internal static Void ExitContext() { }
	// Offset : 0x668748
	internal static Void EnterContext() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedClientContextSink : IMessageSink
{
	// Fields
	private IMessageSink _next; // 0x10
	private SynchronizationAttribute _att; // 0x18

	// Properties

	// Methods
	// Offset : 0x6683f4
	public Void .ctor(IMessageSink next, SynchronizationAttribute att) { }
	// Offset : 0x6688ac
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// Offset : 0x668a84
	public IMessage SyncProcessMessage(IMessage msg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedServerContextSink : IMessageSink
{
	// Fields
	private IMessageSink _next; // 0x10
	private SynchronizationAttribute _att; // 0x18

	// Properties

	// Methods
	// Offset : 0x66849c
	public Void .ctor(IMessageSink next, SynchronizationAttribute att) { }
	// Offset : 0x668ed4
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// Offset : 0x66901c
	public IMessage SyncProcessMessage(IMessage msg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedContextReplySink : IMessageSink
{
	// Fields
	private IMessageSink _next; // 0x10
	private Boolean _newLock; // 0x18
	private SynchronizationAttribute _att; // 0x20

	// Properties

	// Methods
	// Offset : 0x668a3c
	public Void .ctor(IMessageSink next, SynchronizationAttribute att, Boolean newLock) { }
	// Offset : 0x668ca8
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// Offset : 0x668d10
	public IMessage SyncProcessMessage(IMessage msg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Lifetime
public interface ILease
{
	// Fields

	// Properties
	public abstract TimeSpan CurrentLeaseTime { get; }
	public abstract LeaseState CurrentState { get; }
	public abstract TimeSpan InitialLeaseTime { set; }
	public abstract TimeSpan RenewOnCallTime { get; set; }
	public abstract TimeSpan SponsorshipTimeout { set; }

	// Methods
	// Offset : 0x
	public abstract TimeSpan get_CurrentLeaseTime() { }
	// Offset : 0x
	public abstract LeaseState get_CurrentState() { }
	// Offset : 0x
	public abstract Void set_InitialLeaseTime(TimeSpan value) { }
	// Offset : 0x
	public abstract TimeSpan get_RenewOnCallTime() { }
	// Offset : 0x
	public abstract Void set_RenewOnCallTime(TimeSpan value) { }
	// Offset : 0x
	public abstract Void set_SponsorshipTimeout(TimeSpan value) { }
	// Offset : 0x
	public abstract TimeSpan Renew(TimeSpan renewalTime) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Lifetime
public interface ISponsor
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract TimeSpan Renewal(ILease lease) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Lifetime
internal class Lease : MarshalByRefObject, ILease
{
	// Fields
	private DateTime _leaseExpireTime; // 0x18
	private LeaseState _currentState; // 0x28
	private TimeSpan _initialLeaseTime; // 0x30
	private TimeSpan _renewOnCallTime; // 0x38
	private TimeSpan _sponsorshipTimeout; // 0x40
	private ArrayList _sponsors; // 0x48
	private Queue _renewingSponsors; // 0x50
	private RenewalDelegate _renewalDelegate; // 0x58

	// Properties
	public TimeSpan CurrentLeaseTime { get; }
	public LeaseState CurrentState { get; }
	public TimeSpan InitialLeaseTime { set; }
	public TimeSpan RenewOnCallTime { get; set; }
	public TimeSpan SponsorshipTimeout { set; }

	// Methods
	// Offset : 0x669d58
	public Void .ctor() { }
	// Offset : 0x669f54
	public TimeSpan get_CurrentLeaseTime() { }
	// Offset : 0x669fd4
	public LeaseState get_CurrentState() { }
	// Offset : 0x669fdc
	public Void Activate() { }
	// Offset : 0x669fe8
	public Void set_InitialLeaseTime(TimeSpan value) { }
	// Offset : 0x66a164
	public TimeSpan get_RenewOnCallTime() { }
	// Offset : 0x66a16c
	public Void set_RenewOnCallTime(TimeSpan value) { }
	// Offset : 0x66a270
	public Void set_SponsorshipTimeout(TimeSpan value) { }
	// Offset : 0x66a374
	public TimeSpan Renew(TimeSpan renewalTime) { }
	// Offset : 0x66a414
	public Void Unregister(ISponsor obj) { }
	// Offset : 0x66a58c
	internal Void UpdateState() { }
	// Offset : 0x66a6dc
	private Void CheckNextSponsor() { }
	// Offset : 0x66aa34
	private Void ProcessSponsorResponse(Object state, Boolean timedOut) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class RenewalDelegate : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x66aa00
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x66acf4
	public virtual TimeSpan Invoke(ILease lease) { }
	// Offset : 0x66aa10
	public virtual IAsyncResult BeginInvoke(ILease lease, AsyncCallback callback, Object object) { }
	// Offset : 0x66acb8
	public virtual TimeSpan EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseManager
{
	// Fields
	private ArrayList _objects; // 0x10
	private Timer _timer; // 0x18

	// Properties

	// Methods
	// Offset : 0x66b1b8
	public Void .ctor() { }
	// Offset : 0x66b220
	public Void SetPollTime(TimeSpan timeSpan) { }
	// Offset : 0x66b304
	public Void TrackLifetime(ServerIdentity identity) { }
	// Offset : 0x66b458
	public Void StartManager() { }
	// Offset : 0x66b5a0
	public Void StopManager() { }
	// Offset : 0x66b5d4
	public Void ManageLeases(Object state) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseSink : IMessageSink
{
	// Fields
	private IMessageSink _nextSink; // 0x10

	// Properties

	// Methods
	// Offset : 0x66b8f8
	public Void .ctor(IMessageSink nextSink) { }
	// Offset : 0x66b924
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x66bdac
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// Offset : 0x66ba1c
	private Void RenewLease(IMessage msg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Lifetime
[Serializable]
public enum LeaseState
{
	// Fields
	public Int32 value__; // 0x10
	public const LeaseState Null = 0; // 0x0
	public const LeaseState Initial = 1; // 0x0
	public const LeaseState Active = 2; // 0x0
	public const LeaseState Renewing = 3; // 0x0
	public const LeaseState Expired = 4; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Lifetime
public sealed class LifetimeServices
{
	// Fields
	private static TimeSpan _leaseManagerPollTime; // 0x0
	private static TimeSpan _leaseTime; // 0x8
	private static TimeSpan _renewOnCallTime; // 0x10
	private static TimeSpan _sponsorshipTimeout; // 0x18
	private static LeaseManager _leaseManager; // 0x20

	// Properties
	public static TimeSpan LeaseManagerPollTime { get; set; }
	public static TimeSpan LeaseTime { get; set; }
	public static TimeSpan RenewOnCallTime { get; set; }
	public static TimeSpan SponsorshipTimeout { get; set; }

	// Methods
	// Offset : 0x66c354
	private static Void .cctor() { }
	// Offset : 0x66b538
	public static TimeSpan get_LeaseManagerPollTime() { }
	// Offset : 0x66c448
	public static Void set_LeaseManagerPollTime(TimeSpan value) { }
	// Offset : 0x669e1c
	public static TimeSpan get_LeaseTime() { }
	// Offset : 0x66c4d4
	public static Void set_LeaseTime(TimeSpan value) { }
	// Offset : 0x669e84
	public static TimeSpan get_RenewOnCallTime() { }
	// Offset : 0x66c540
	public static Void set_RenewOnCallTime(TimeSpan value) { }
	// Offset : 0x669eec
	public static TimeSpan get_SponsorshipTimeout() { }
	// Offset : 0x66c5ac
	public static Void set_SponsorshipTimeout(TimeSpan value) { }
	// Offset : 0x66c618
	internal static Void TrackLifetime(ServerIdentity identity) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal enum ArgInfoType
{
	// Fields
	public Byte value__; // 0x10
	public const ArgInfoType In = 0; // 0x0
	public const ArgInfoType Out = 1; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class ArgInfo
{
	// Fields
	private Int32[] _paramMap; // 0x10
	private Int32 _inoutArgCount; // 0x18
	private MethodBase _method; // 0x20

	// Properties

	// Methods
	// Offset : 0x66c698
	public Void .ctor(MethodBase method, ArgInfoType type) { }
	// Offset : 0x66c948
	public Int32 GetInOutArgCount() { }
	// Offset : 0x66c950
	public Object[] GetInOutArgs(Object[] args) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public class AsyncResult : IAsyncResult, IMessageSink
{
	// Fields
	private Object async_state; // 0x10
	private WaitHandle handle; // 0x18
	private Object async_delegate; // 0x20
	private IntPtr data; // 0x28
	private Object object_data; // 0x30
	private Boolean sync_completed; // 0x38
	private Boolean completed; // 0x39
	private Boolean endinvoke_called; // 0x3a
	private Object async_callback; // 0x40
	private ExecutionContext current; // 0x48
	private ExecutionContext original; // 0x50
	private Int32 gchandle; // 0x58
	private MonoMethodMessage call_message; // 0x60
	private IMessageCtrl message_ctrl; // 0x68
	private IMessage reply_message; // 0x70

	// Properties
	public virtual Object AsyncState { get; }
	public virtual WaitHandle AsyncWaitHandle { get; }
	public virtual Boolean CompletedSynchronously { get; }
	public virtual Boolean IsCompleted { get; }
	public Boolean EndInvokeCalled { get; set; }
	public virtual Object AsyncDelegate { get; }
	public IMessageSink NextSink { get; }
	internal MonoMethodMessage CallMessage { get; set; }

	// Methods
	// Offset : 0x66caa8
	internal Void .ctor() { }
	// Offset : 0x66cab0
	public virtual Object get_AsyncState() { }
	// Offset : 0x66cab8
	public virtual WaitHandle get_AsyncWaitHandle() { }
	// Offset : 0x66cb98
	public virtual Boolean get_CompletedSynchronously() { }
	// Offset : 0x66cba0
	public virtual Boolean get_IsCompleted() { }
	// Offset : 0x66cba8
	public Boolean get_EndInvokeCalled() { }
	// Offset : 0x66cbb0
	public Void set_EndInvokeCalled(Boolean value) { }
	// Offset : 0x66cbbc
	public virtual Object get_AsyncDelegate() { }
	// Offset : 0x66cbc4
	public IMessageSink get_NextSink() { }
	// Offset : 0x66cbcc
	public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// Offset : 0x66cc34
	public virtual IMessage GetReplyMessage() { }
	// Offset : 0x66cc3c
	public virtual Void SetMessageCtrl(IMessageCtrl mc) { }
	// Offset : 0x66cc44
	internal Void SetCompletedSynchronously(Boolean completed) { }
	// Offset : 0x66cc50
	internal IMessage EndInvoke() { }
	// Offset : 0x66cd00
	public virtual IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x66cf44
	internal MonoMethodMessage get_CallMessage() { }
	// Offset : 0x66cf4c
	internal Void set_CallMessage(MonoMethodMessage value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class CADArgHolder
{
	// Fields
	public Int32 index; // 0x10

	// Properties

	// Methods
	// Offset : 0x66cf54
	public Void .ctor(Int32 i) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class CADObjRef
{
	// Fields
	private ObjRef objref; // 0x10
	public Int32 SourceDomain; // 0x18

	// Properties
	public String TypeName { get; }
	public String URI { get; }

	// Methods
	// Offset : 0x66e020
	public Void .ctor(ObjRef o, Int32 sourceDomain) { }
	// Offset : 0x66e6e4
	public String get_TypeName() { }
	// Offset : 0x66e800
	public String get_URI() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class CADMessageBase
{
	// Fields
	protected Object[] _args; // 0x10
	protected Byte[] _serializedArgs; // 0x18
	protected Int32 _propertyCount; // 0x20
	protected CADArgHolder _callContext; // 0x28

	// Properties

	// Methods
	// Offset : 0x66cf80
	public Void .ctor() { }
	// Offset : 0x66cf88
	internal static Int32 MarshalProperties(IDictionary dict, ref ArrayList args) { }
	// Offset : 0x66d958
	internal static Void UnmarshalProperties(IDictionary dict, Int32 count, ArrayList args) { }
	// Offset : 0x66db04
	private static Boolean IsPossibleToIgnoreMarshal(Object obj) { }
	// Offset : 0x66dda4
	protected Object MarshalArgument(Object arg, ref ArrayList args) { }
	// Offset : 0x66e05c
	protected Object UnmarshalArgument(Object arg, ArrayList args) { }
	// Offset : 0x66e998
	internal Object[] MarshalArguments(Object[] arguments, ref ArrayList args) { }
	// Offset : 0x66eae0
	internal Object[] UnmarshalArguments(Object[] arguments, ArrayList args) { }
	// Offset : 0x66ec28
	protected Void SaveLogicalCallContext(IMethodMessage msg, ref ArrayList serializeList) { }
	// Offset : 0x66efb4
	internal LogicalCallContext GetLogicalCallContext(ArrayList args) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodCallMessage : CADMessageBase
{
	// Fields
	private String _uri; // 0x30
	internal RuntimeMethodHandle MethodHandle; // 0x38
	internal String FullTypeName; // 0x40

	// Properties
	internal String Uri { get; }
	internal Int32 PropertiesCount { get; }

	// Methods
	// Offset : 0x66f0ac
	internal Void .ctor(IMethodCallMessage callMsg) { }
	// Offset : 0x66f580
	internal String get_Uri() { }
	// Offset : 0x66f588
	internal static CADMethodCallMessage Create(IMessage callMsg) { }
	// Offset : 0x66f60c
	internal ArrayList GetArguments() { }
	// Offset : 0x66f738
	internal Object[] GetArgs(ArrayList args) { }
	// Offset : 0x66f74c
	internal Int32 get_PropertiesCount() { }
	// Offset : 0x66f754
	private static Type[] GetSignature(MethodBase methodBase, Boolean load) { }
	// Offset : 0x66f990
	internal MethodBase GetMethod() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodReturnMessage : CADMessageBase
{
	// Fields
	private Object _returnValue; // 0x30
	private CADArgHolder _exception; // 0x38

	// Properties
	internal Int32 PropertiesCount { get; }

	// Methods
	// Offset : 0x6701a0
	internal Void .ctor(IMethodReturnMessage retMsg) { }
	// Offset : 0x6706a8
	internal static CADMethodReturnMessage Create(IMessage callMsg) { }
	// Offset : 0x67072c
	internal ArrayList GetArguments() { }
	// Offset : 0x670858
	internal Object[] GetArgs(ArrayList args) { }
	// Offset : 0x67086c
	internal Object GetReturnValue(ArrayList args) { }
	// Offset : 0x670880
	internal Exception GetException(ArrayList args) { }
	// Offset : 0x670994
	internal Int32 get_PropertiesCount() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public sealed class CallContext
{
	// Fields
	private static Hashtable datastore; // 0xffffffffffffffff

	// Properties

	// Methods
	// Offset : 0x67099c
	private Void .ctor() { }
	// Offset : 0x6709a4
	internal static LogicalCallContext CreateLogicalCallContext(Boolean createEmpty) { }
	// Offset : 0x670f68
	internal static Object SetCurrentCallContext(LogicalCallContext ctx) { }
	// Offset : 0x6710d0
	internal static Void RestoreCallContext(Object oldContext) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public interface ILogicalThreadAffinative
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextTerminatorSink : IMessageSink
{
	// Fields
	private Context _context; // 0x10

	// Properties

	// Methods
	// Offset : 0x671424
	public Void .ctor(Context ctx) { }
	// Offset : 0x671450
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x6716dc
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextReplySink : IMessageSink
{
	// Fields
	private IMessageSink _replySink; // 0x10
	private Context _context; // 0x18

	// Properties

	// Methods
	// Offset : 0x671230
	public Void .ctor(Context ctx, IMessageSink replySink) { }
	// Offset : 0x671268
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x6713bc
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class ConstructionCall : MethodCall, IConstructionCallMessage, IMessage, IMethodCallMessage, IMethodMessage
{
	// Fields
	private IActivator _activator; // 0x68
	private Object[] _activationAttributes; // 0x70
	private IList _contextProperties; // 0x78
	private Type _activationType; // 0x80
	private String _activationTypeName; // 0x88
	private Boolean _isContextOk; // 0x90
	private RemotingProxy _sourceProxy; // 0x98
	private static Dictionary`2 <>f__switch$map20; // 0x0

	// Properties
	internal Boolean IsContextOk { get; set; }
	public Type ActivationType { get; }
	public String ActivationTypeName { get; }
	public IActivator Activator { get; set; }
	public Object[] CallSiteActivationAttributes { get; }
	public IList ContextProperties { get; }
	public override IDictionary Properties { get; }
	internal RemotingProxy SourceProxy { get; }

	// Methods
	// Offset : 0x6719b0
	internal Void .ctor(Type type) { }
	// Offset : 0x671a28
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x671b58
	internal override Void InitDictionary() { }
	// Offset : 0x671cb0
	internal Boolean get_IsContextOk() { }
	// Offset : 0x671cb8
	internal Void set_IsContextOk(Boolean value) { }
	// Offset : 0x671cc4
	public Type get_ActivationType() { }
	// Offset : 0x671d5c
	public String get_ActivationTypeName() { }
	// Offset : 0x671d64
	public IActivator get_Activator() { }
	// Offset : 0x671d6c
	public Void set_Activator(IActivator value) { }
	// Offset : 0x671d74
	public Object[] get_CallSiteActivationAttributes() { }
	// Offset : 0x671d7c
	internal Void SetActivationAttributes(Object[] attributes) { }
	// Offset : 0x671d84
	public IList get_ContextProperties() { }
	// Offset : 0x671df0
	internal override Void InitMethodProperty(String key, Object value) { }
	// Offset : 0x6728d0
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x673024
	public override IDictionary get_Properties() { }
	// Offset : 0x67307c
	internal RemotingProxy get_SourceProxy() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class ConstructionCallDictionary : MethodDictionary
{
	// Fields
	public static String[] InternalKeys; // 0x0
	private static Dictionary`2 <>f__switch$map23; // 0x8
	private static Dictionary`2 <>f__switch$map24; // 0x10

	// Properties

	// Methods
	// Offset : 0x671bd0
	public Void .ctor(IConstructionCallMessage message) { }
	// Offset : 0x6730b8
	private static Void .cctor() { }
	// Offset : 0x6734c0
	protected override Object GetMethodProperty(String key) { }
	// Offset : 0x674710
	protected override Void SetMethodProperty(String key, Object value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class ConstructionResponse : MethodResponse, IConstructionReturnMessage, IMessage, IMethodMessage, IMethodReturnMessage
{
	// Fields

	// Properties
	public override IDictionary Properties { get; }

	// Methods
	// Offset : 0x67508c
	internal Void .ctor(Object resultObject, LogicalCallContext callCtx, IMethodCallMessage msg) { }
	// Offset : 0x6751b4
	internal Void .ctor(Exception e, IMethodCallMessage msg) { }
	// Offset : 0x67530c
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6753e4
	public override IDictionary get_Properties() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class EnvoyTerminatorSink : IMessageSink
{
	// Fields
	public static EnvoyTerminatorSink Instance; // 0x0

	// Properties

	// Methods
	// Offset : 0x675470
	public Void .ctor() { }
	// Offset : 0x675478
	private static Void .cctor() { }
	// Offset : 0x6754dc
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x675604
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class ErrorMessage : IMessage, IMethodCallMessage, IMethodMessage
{
	// Fields
	private String _uri; // 0x10

	// Properties
	public Int32 ArgCount { get; }
	public Object[] Args { get; }
	public MethodBase MethodBase { get; }
	public String MethodName { get; }
	public Object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public String TypeName { get; }
	public String Uri { get; }
	public LogicalCallContext LogicalCallContext { get; }

	// Methods
	// Offset : 0x675740
	public Void .ctor() { }
	// Offset : 0x675798
	public Int32 get_ArgCount() { }
	// Offset : 0x6757a0
	public Object[] get_Args() { }
	// Offset : 0x6757a8
	public MethodBase get_MethodBase() { }
	// Offset : 0x6757b0
	public String get_MethodName() { }
	// Offset : 0x6757f8
	public Object get_MethodSignature() { }
	// Offset : 0x675800
	public virtual IDictionary get_Properties() { }
	// Offset : 0x675808
	public String get_TypeName() { }
	// Offset : 0x675850
	public String get_Uri() { }
	// Offset : 0x675858
	public Object GetArg(Int32 arg_num) { }
	// Offset : 0x675860
	public LogicalCallContext get_LogicalCallContext() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class Header
{
	// Fields
	public String HeaderNamespace; // 0x10
	public Boolean MustUnderstand; // 0x18
	public String Name; // 0x20
	public Object Value; // 0x28

	// Properties

	// Methods
	// Offset : 0x675868
	public Void .ctor(String _Name, Object _Value) { }
	// Offset : 0x6758ac
	public Void .ctor(String _Name, Object _Value, Boolean _MustUnderstand) { }
	// Offset : 0x6758f4
	public Void .ctor(String _Name, Object _Value, Boolean _MustUnderstand, String _HeaderNamespace) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal interface IInternalMessage
{
	// Fields

	// Properties
	public abstract Identity TargetIdentity { get; set; }
	public abstract String Uri { get; set; }

	// Methods
	// Offset : 0x
	public abstract Identity get_TargetIdentity() { }
	// Offset : 0x
	public abstract Void set_TargetIdentity(Identity value) { }
	// Offset : 0x
	public abstract String get_Uri() { }
	// Offset : 0x
	public abstract Void set_Uri(String value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public interface IMessage
{
	// Fields

	// Properties
	public abstract IDictionary Properties { get; }

	// Methods
	// Offset : 0x
	public abstract IDictionary get_Properties() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public interface IMessageCtrl
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public interface IMessageSink
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x
	public abstract IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodCallMessage : IMessage, IMethodMessage
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodMessage : IMessage
{
	// Fields

	// Properties
	public abstract Int32 ArgCount { get; }
	public abstract Object[] Args { get; }
	public abstract LogicalCallContext LogicalCallContext { get; }
	public abstract MethodBase MethodBase { get; }
	public abstract String MethodName { get; }
	public abstract Object MethodSignature { get; }
	public abstract String TypeName { get; }
	public abstract String Uri { get; }

	// Methods
	// Offset : 0x
	public abstract Int32 get_ArgCount() { }
	// Offset : 0x
	public abstract Object[] get_Args() { }
	// Offset : 0x
	public abstract LogicalCallContext get_LogicalCallContext() { }
	// Offset : 0x
	public abstract MethodBase get_MethodBase() { }
	// Offset : 0x
	public abstract String get_MethodName() { }
	// Offset : 0x
	public abstract Object get_MethodSignature() { }
	// Offset : 0x
	public abstract String get_TypeName() { }
	// Offset : 0x
	public abstract String get_Uri() { }
	// Offset : 0x
	public abstract Object GetArg(Int32 argNum) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodReturnMessage : IMessage, IMethodMessage
{
	// Fields

	// Properties
	public abstract Exception Exception { get; }
	public abstract Int32 OutArgCount { get; }
	public abstract Object[] OutArgs { get; }
	public abstract Object ReturnValue { get; }

	// Methods
	// Offset : 0x
	public abstract Exception get_Exception() { }
	// Offset : 0x
	public abstract Int32 get_OutArgCount() { }
	// Offset : 0x
	public abstract Object[] get_OutArgs() { }
	// Offset : 0x
	public abstract Object get_ReturnValue() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public interface IRemotingFormatter : IFormatter
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal interface ISerializationRootObject
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public sealed class LogicalCallContext : ICloneable, ISerializable
{
	// Fields
	private Hashtable _data; // 0x10
	private CallContextRemotingData _remotingData; // 0x18

	// Properties
	public Boolean HasInfo { get; }
	internal Hashtable Datastore { get; }

	// Methods
	// Offset : 0x670e4c
	internal Void .ctor() { }
	// Offset : 0x675e4c
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x66ef58
	public Boolean get_HasInfo() { }
	// Offset : 0x67604c
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x670eb4
	public Void SetData(String name, Object data) { }
	// Offset : 0x676424
	public Object Clone() { }
	// Offset : 0x6710c8
	internal Hashtable get_Datastore() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CallContextRemotingData : ICloneable
{
	// Fields
	private String _logicalCallID; // 0x10

	// Properties

	// Methods
	// Offset : 0x6711b4
	public Void .ctor() { }
	// Offset : 0x6711bc
	public Object Clone() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class MethodCall : ISerializable, IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, ISerializationRootObject
{
	// Fields
	private String _uri; // 0x10
	private String _typeName; // 0x18
	private String _methodName; // 0x20
	private Object[] _args; // 0x28
	private Type[] _methodSignature; // 0x30
	private MethodBase _methodBase; // 0x38
	private LogicalCallContext _callContext; // 0x40
	private Identity _targetIdentity; // 0x48
	private Type[] _genericArguments; // 0x50
	protected IDictionary ExternalProperties; // 0x58
	protected IDictionary InternalProperties; // 0x60
	private static Dictionary`2 <>f__switch$map1F; // 0x0

	// Properties
	private String System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	public Int32 ArgCount { get; }
	public Object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public String MethodName { get; }
	public Object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public String TypeName { get; }
	public String Uri { get; set; }
	private Type[] GenericArguments { get; }

	// Methods
	// Offset : 0x676898
	public Void .ctor(Header[] h1) { }
	// Offset : 0x671a2c
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x677390
	internal Void .ctor(CADMethodCallMessage msg) { }
	// Offset : 0x671a20
	internal Void .ctor() { }
	// Offset : 0x677500
	private String System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }
	// Offset : 0x677510
	private Void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(String value) { }
	// Offset : 0x677520
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }
	// Offset : 0x677528
	private Void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }
	// Offset : 0x67226c
	internal virtual Void InitMethodProperty(String key, Object value) { }
	// Offset : 0x672ad8
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x677530
	public Int32 get_ArgCount() { }
	// Offset : 0x67755c
	public Object[] get_Args() { }
	// Offset : 0x677564
	public LogicalCallContext get_LogicalCallContext() { }
	// Offset : 0x6775cc
	public MethodBase get_MethodBase() { }
	// Offset : 0x6775fc
	public String get_MethodName() { }
	// Offset : 0x67765c
	public Object get_MethodSignature() { }
	// Offset : 0x673028
	public virtual IDictionary get_Properties() { }
	// Offset : 0x677800
	internal virtual Void InitDictionary() { }
	// Offset : 0x677904
	public String get_TypeName() { }
	// Offset : 0x677508
	public String get_Uri() { }
	// Offset : 0x677518
	public Void set_Uri(String value) { }
	// Offset : 0x67799c
	public Object GetArg(Int32 argNum) { }
	// Offset : 0x6779f0
	public virtual Void Init() { }
	// Offset : 0x6769bc
	public Void ResolveMethod() { }
	// Offset : 0x677ab8
	private Type CastTo(String clientType, Type serverType) { }
	// Offset : 0x6784d4
	private static String GetTypeNameFromAssemblyQualifiedName(String aqname) { }
	// Offset : 0x678460
	private Type[] get_GenericArguments() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class MethodCallDictionary : MethodDictionary
{
	// Fields
	public static String[] InternalKeys; // 0x0

	// Properties

	// Methods
	// Offset : 0x677878
	public Void .ctor(IMethodMessage message) { }
	// Offset : 0x6785b4
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class MethodDictionary : IEnumerable, ICollection, IDictionary
{
	// Fields
	private IDictionary _internalProperties; // 0x10
	protected IMethodMessage _message; // 0x18
	private String[] _methodKeys; // 0x20
	private Boolean _ownProperties; // 0x28
	private static Dictionary`2 <>f__switch$map21; // 0x0
	private static Dictionary`2 <>f__switch$map22; // 0x8

	// Properties
	internal Boolean HasInternalProperties { get; }
	internal IDictionary InternalProperties { get; }
	public String[] MethodKeys { set; }
	public Boolean IsFixedSize { get; }
	public Boolean IsReadOnly { get; }
	public Object Item { get; set; }
	public ICollection Keys { get; }
	public ICollection Values { get; }
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public Object SyncRoot { get; }

	// Methods
	// Offset : 0x673084
	public Void .ctor(IMethodMessage message) { }
	// Offset : 0x678818
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x66d7a4
	internal Boolean get_HasInternalProperties() { }
	// Offset : 0x66d8d8
	internal IDictionary get_InternalProperties() { }
	// Offset : 0x6730b0
	public Void set_MethodKeys(String[] value) { }
	// Offset : 0x6789c4
	protected virtual IDictionary AllocInternalProperties() { }
	// Offset : 0x671c5c
	public IDictionary GetInternalProperties() { }
	// Offset : 0x678a2c
	private Boolean IsOverridenKey(String key) { }
	// Offset : 0x678b10
	public Boolean get_IsFixedSize() { }
	// Offset : 0x678b18
	public Boolean get_IsReadOnly() { }
	// Offset : 0x678b20
	public Object get_Item(Object key) { }
	// Offset : 0x678d48
	public Void set_Item(Object key, Object value) { }
	// Offset : 0x673e1c
	protected virtual Object GetMethodProperty(String key) { }
	// Offset : 0x674bac
	protected virtual Void SetMethodProperty(String key, Object value) { }
	// Offset : 0x678fb8
	public ICollection get_Keys() { }
	// Offset : 0x679510
	public ICollection get_Values() { }
	// Offset : 0x678d4c
	public Void Add(Object key, Object value) { }
	// Offset : 0x679a40
	public Void Clear() { }
	// Offset : 0x679b34
	public Boolean Contains(Object key) { }
	// Offset : 0x679d38
	public Void Remove(Object key) { }
	// Offset : 0x679f6c
	public Int32 get_Count() { }
	// Offset : 0x67a084
	public Boolean get_IsSynchronized() { }
	// Offset : 0x67a08c
	public Object get_SyncRoot() { }
	// Offset : 0x67a090
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x67a198
	public IDictionaryEnumerator GetEnumerator() { }
}

// Dll : mscorlib.dll
// Namespace: 
private class DictionaryEnumerator : IEnumerator, IDictionaryEnumerator
{
	// Fields
	private MethodDictionary _methodDictionary; // 0x10
	private IDictionaryEnumerator _hashtableEnum; // 0x18
	private Int32 _posMethod; // 0x20

	// Properties
	public Object Current { get; }
	public DictionaryEntry Entry { get; }
	public Object Key { get; }
	public Object Value { get; }

	// Methods
	// Offset : 0x678878
	public Void .ctor(MethodDictionary methodDictionary) { }
	// Offset : 0x67a1f8
	public Object get_Current() { }
	// Offset : 0x67a44c
	public Boolean MoveNext() { }
	// Offset : 0x67a6ec
	public Void Reset() { }
	// Offset : 0x67a224
	public DictionaryEntry get_Entry() { }
	// Offset : 0x67a7e0
	public Object get_Key() { }
	// Offset : 0x67a80c
	public Object get_Value() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class MethodResponse : ISerializable, IInternalMessage, IMessage, IMethodMessage, IMethodReturnMessage, ISerializationRootObject
{
	// Fields
	private String _methodName; // 0x10
	private String _uri; // 0x18
	private String _typeName; // 0x20
	private MethodBase _methodBase; // 0x28
	private Object _returnValue; // 0x30
	private Exception _exception; // 0x38
	private Type[] _methodSignature; // 0x40
	private ArgInfo _inArgInfo; // 0x48
	private Object[] _args; // 0x50
	private Object[] _outArgs; // 0x58
	private IMethodCallMessage _callMsg; // 0x60
	private LogicalCallContext _callContext; // 0x68
	private Identity _targetIdentity; // 0x70
	protected IDictionary ExternalProperties; // 0x78
	protected IDictionary InternalProperties; // 0x80
	private static Dictionary`2 <>f__switch$map25; // 0x0

	// Properties
	private String System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	public Int32 ArgCount { get; }
	public Object[] Args { get; }
	public Exception Exception { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public String MethodName { get; }
	public Object MethodSignature { get; }
	public Int32 OutArgCount { get; }
	public Object[] OutArgs { get; }
	public virtual IDictionary Properties { get; }
	public Object ReturnValue { get; }
	public String TypeName { get; }
	public String Uri { get; set; }

	// Methods
	// Offset : 0x6751b8
	internal Void .ctor(Exception e, IMethodCallMessage msg) { }
	// Offset : 0x675098
	internal Void .ctor(Object returnValue, Object[] outArgs, LogicalCallContext callCtx, IMethodCallMessage msg) { }
	// Offset : 0x67a838
	internal Void .ctor(IMethodCallMessage msg, CADMethodReturnMessage retmsg) { }
	// Offset : 0x675310
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x67b284
	private String System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }
	// Offset : 0x67b384
	private Void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(String value) { }
	// Offset : 0x67b394
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }
	// Offset : 0x67b39c
	private Void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }
	// Offset : 0x67abc4
	internal Void InitMethodProperty(String key, Object value) { }
	// Offset : 0x67b3a4
	public Int32 get_ArgCount() { }
	// Offset : 0x67b3bc
	public Object[] get_Args() { }
	// Offset : 0x67b3c4
	public Exception get_Exception() { }
	// Offset : 0x67b3cc
	public LogicalCallContext get_LogicalCallContext() { }
	// Offset : 0x67b434
	public MethodBase get_MethodBase() { }
	// Offset : 0x67b570
	public String get_MethodName() { }
	// Offset : 0x67b768
	public Object get_MethodSignature() { }
	// Offset : 0x67b8e0
	public Int32 get_OutArgCount() { }
	// Offset : 0x67b98c
	public Object[] get_OutArgs() { }
	// Offset : 0x6753e8
	public virtual IDictionary get_Properties() { }
	// Offset : 0x67bba0
	public Object get_ReturnValue() { }
	// Offset : 0x67b66c
	public String get_TypeName() { }
	// Offset : 0x67b288
	public String get_Uri() { }
	// Offset : 0x67b38c
	public Void set_Uri(String value) { }
	// Offset : 0x67bba8
	public Object GetArg(Int32 argNum) { }
	// Offset : 0x67bbf8
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class MethodReturnDictionary : MethodDictionary
{
	// Fields
	public static String[] InternalReturnKeys; // 0x0
	public static String[] InternalExceptionKeys; // 0x8

	// Properties

	// Methods
	// Offset : 0x67ba48
	public Void .ctor(IMethodReturnMessage message) { }
	// Offset : 0x67c164
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class MonoMethodMessage : IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, IMethodReturnMessage
{
	// Fields
	private MonoMethod method; // 0x10
	private Object[] args; // 0x18
	private Byte[] arg_types; // 0x20
	public LogicalCallContext ctx; // 0x28
	public Object rval; // 0x30
	public Exception exc; // 0x38
	private AsyncResult asyncResult; // 0x40
	private CallType call_type; // 0x48
	private String uri; // 0x50
	private MethodCallDictionary properties; // 0x58
	private Type[] methodSignature; // 0x60
	private Identity identity; // 0x68

	// Properties
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	public IDictionary Properties { get; }
	public Int32 ArgCount { get; }
	public Object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public String MethodName { get; }
	public Object MethodSignature { get; }
	public String TypeName { get; }
	public String Uri { get; set; }
	public Exception Exception { get; }
	public Int32 OutArgCount { get; }
	public Object[] OutArgs { get; }
	public Object ReturnValue { get; }
	public AsyncResult AsyncResult { get; }
	internal CallType CallType { get; }

	// Methods
	// Offset : 0x67c490
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }
	// Offset : 0x67c498
	private Void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }
	// Offset : 0x67c4a0
	public IDictionary get_Properties() { }
	// Offset : 0x67c50c
	public Int32 get_ArgCount() { }
	// Offset : 0x67c5d8
	public Object[] get_Args() { }
	// Offset : 0x67c5e0
	public LogicalCallContext get_LogicalCallContext() { }
	// Offset : 0x67c5e8
	public MethodBase get_MethodBase() { }
	// Offset : 0x67c5f0
	public String get_MethodName() { }
	// Offset : 0x67c694
	public Object get_MethodSignature() { }
	// Offset : 0x67c834
	public String get_TypeName() { }
	// Offset : 0x67c910
	public String get_Uri() { }
	// Offset : 0x67c918
	public Void set_Uri(String value) { }
	// Offset : 0x67c920
	public Object GetArg(Int32 arg_num) { }
	// Offset : 0x67c970
	public Exception get_Exception() { }
	// Offset : 0x67c978
	public Int32 get_OutArgCount() { }
	// Offset : 0x67ca04
	public Object[] get_OutArgs() { }
	// Offset : 0x67cb88
	public Object get_ReturnValue() { }
	// Offset : 0x67cb90
	public AsyncResult get_AsyncResult() { }
	// Offset : 0x67c550
	internal CallType get_CallType() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal enum CallType
{
	// Fields
	public Int32 value__; // 0x10
	public const CallType Sync = 0; // 0x0
	public const CallType BeginInvoke = 1; // 0x0
	public const CallType EndInvoke = 2; // 0x0
	public const CallType OneWay = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public class OneWayAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class RemotingSurrogate : ISerializationSurrogate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x67cea4
	public Void .ctor() { }
	// Offset : 0x67ceac
	public virtual Void GetObjectData(Object obj, SerializationInfo si, StreamingContext sc) { }
	// Offset : 0x67d340
	public virtual Object SetObjectData(Object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class ObjRefSurrogate : ISerializationSurrogate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x67cc4c
	public Void .ctor() { }
	// Offset : 0x67cc54
	public virtual Void GetObjectData(Object obj, SerializationInfo si, StreamingContext sc) { }
	// Offset : 0x67ce30
	public virtual Object SetObjectData(Object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public class RemotingSurrogateSelector : ISurrogateSelector
{
	// Fields
	private static Type s_cachedTypeObjRef; // 0x0
	private static ObjRefSurrogate _objRefSurrogate; // 0x8
	private static RemotingSurrogate _objRemotingSurrogate; // 0x10
	private ISurrogateSelector _next; // 0x10

	// Properties

	// Methods
	// Offset : 0x67d3a8
	public Void .ctor() { }
	// Offset : 0x67d3b0
	private static Void .cctor() { }
	// Offset : 0x67d488
	public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector ssout) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public class ReturnMessage : IInternalMessage, IMessage, IMethodMessage, IMethodReturnMessage
{
	// Fields
	private Object[] _outArgs; // 0x10
	private Object[] _args; // 0x18
	private Int32 _outArgsCount; // 0x20
	private LogicalCallContext _callCtx; // 0x28
	private Object _returnValue; // 0x30
	private String _uri; // 0x38
	private Exception _exception; // 0x40
	private MethodBase _methodBase; // 0x48
	private String _methodName; // 0x50
	private Type[] _methodSignature; // 0x58
	private String _typeName; // 0x60
	private MethodReturnDictionary _properties; // 0x68
	private Identity _targetIdentity; // 0x70
	private ArgInfo _inArgInfo; // 0x78

	// Properties
	private String System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	public Int32 ArgCount { get; }
	public Object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public String MethodName { get; }
	public Object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public String TypeName { get; }
	public String Uri { get; set; }
	public Exception Exception { get; }
	public Int32 OutArgCount { get; }
	public Object[] OutArgs { get; }
	public virtual Object ReturnValue { get; }

	// Methods
	// Offset : 0x67d6a0
	public Void .ctor(Object ret, Object[] outArgs, Int32 outArgsCount, LogicalCallContext callCtx, IMethodCallMessage mcm) { }
	// Offset : 0x67d878
	public Void .ctor(Exception e, IMethodCallMessage mcm) { }
	// Offset : 0x67da2c
	private String System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }
	// Offset : 0x67da3c
	private Void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(String value) { }
	// Offset : 0x67da4c
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }
	// Offset : 0x67da54
	private Void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }
	// Offset : 0x67da5c
	public Int32 get_ArgCount() { }
	// Offset : 0x67da88
	public Object[] get_Args() { }
	// Offset : 0x67da90
	public LogicalCallContext get_LogicalCallContext() { }
	// Offset : 0x67daf8
	public MethodBase get_MethodBase() { }
	// Offset : 0x67db00
	public String get_MethodName() { }
	// Offset : 0x67db54
	public Object get_MethodSignature() { }
	// Offset : 0x67dcf0
	public virtual IDictionary get_Properties() { }
	// Offset : 0x67dd5c
	public String get_TypeName() { }
	// Offset : 0x67da34
	public String get_Uri() { }
	// Offset : 0x67da44
	public Void set_Uri(String value) { }
	// Offset : 0x67ddec
	public Object GetArg(Int32 argNum) { }
	// Offset : 0x67de40
	public Exception get_Exception() { }
	// Offset : 0x67de48
	public Int32 get_OutArgCount() { }
	// Offset : 0x67dee8
	public Object[] get_OutArgs() { }
	// Offset : 0x67df98
	public virtual Object get_ReturnValue() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class ServerContextTerminatorSink : IMessageSink
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x67dfa0
	public Void .ctor() { }
	// Offset : 0x67dfa8
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x67e158
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectTerminatorSink : IMessageSink
{
	// Fields
	private IMessageSink _nextSink; // 0x10

	// Properties

	// Methods
	// Offset : 0x67e440
	public Void .ctor(IMessageSink nextSink) { }
	// Offset : 0x67e46c
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x67e674
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectReplySink : IMessageSink
{
	// Fields
	private IMessageSink _replySink; // 0x10
	private ServerIdentity _identity; // 0x18

	// Properties

	// Methods
	// Offset : 0x67e288
	public Void .ctor(ServerIdentity identity, IMessageSink replySink) { }
	// Offset : 0x67e2c0
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x67e3d8
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
internal class StackBuilderSink : IMessageSink
{
	// Fields
	private MarshalByRefObject _target; // 0x10
	private RealProxy _rp; // 0x18

	// Properties

	// Methods
	// Offset : 0x67e8c4
	public Void .ctor(MarshalByRefObject obj, Boolean forceInternalExecute) { }
	// Offset : 0x67e978
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x680064
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// Offset : 0x6801a8
	private Void ExecuteAsyncMessage(Object ob) { }
	// Offset : 0x67eab4
	private Void CheckParameters(IMessage msg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Metadata
public class SoapAttribute : Attribute
{
	// Fields
	private Boolean _useAttribute; // 0x10
	protected String ProtXmlNamespace; // 0x18
	protected Object ReflectInfo; // 0x20

	// Properties
	public virtual Boolean UseAttribute { get; }
	public virtual String XmlNamespace { get; }

	// Methods
	// Offset : 0x6804ac
	public Void .ctor() { }
	// Offset : 0x6804b4
	public virtual Boolean get_UseAttribute() { }
	// Offset : 0x6804bc
	public virtual String get_XmlNamespace() { }
	// Offset : 0x6804c4
	internal virtual Void SetReflectionObject(Object reflectionObject) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapFieldAttribute : SoapAttribute
{
	// Fields
	private String _elementName; // 0x28
	private Boolean _isElement; // 0x30

	// Properties
	public String XmlElementName { get; }

	// Methods
	// Offset : 0x669d40
	public Void .ctor() { }
	// Offset : 0x6804cc
	public String get_XmlElementName() { }
	// Offset : 0x6804d4
	public Boolean IsInteropXmlElement() { }
	// Offset : 0x6804dc
	internal override Void SetReflectionObject(Object reflectionObject) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapMethodAttribute : SoapAttribute
{
	// Fields
	private String _responseElement; // 0x28
	private String _responseNamespace; // 0x30
	private String _returnElement; // 0x38
	private String _soapAction; // 0x40
	private Boolean _useAttribute; // 0x48
	private String _namespace; // 0x50

	// Properties
	public override Boolean UseAttribute { get; }
	public override String XmlNamespace { get; }

	// Methods
	// Offset : 0x669d48
	public Void .ctor() { }
	// Offset : 0x6805e8
	public override Boolean get_UseAttribute() { }
	// Offset : 0x6805f0
	public override String get_XmlNamespace() { }
	// Offset : 0x6805f8
	internal override Void SetReflectionObject(Object reflectionObject) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapParameterAttribute : SoapAttribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x669d50
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapTypeAttribute : SoapAttribute
{
	// Fields
	private Boolean _useAttribute; // 0x28
	private String _xmlElementName; // 0x30
	private String _xmlNamespace; // 0x38
	private String _xmlTypeName; // 0x40
	private String _xmlTypeNamespace; // 0x48
	private Boolean _isType; // 0x50
	private Boolean _isElement; // 0x51

	// Properties
	public override Boolean UseAttribute { get; }
	public String XmlElementName { get; }
	public override String XmlNamespace { get; }
	public String XmlTypeName { get; }
	public String XmlTypeNamespace { get; }
	internal Boolean IsInteropXmlElement { get; }
	internal Boolean IsInteropXmlType { get; }

	// Methods
	// Offset : 0x669d38
	public Void .ctor() { }
	// Offset : 0x680a44
	public override Boolean get_UseAttribute() { }
	// Offset : 0x680a4c
	public String get_XmlElementName() { }
	// Offset : 0x680a54
	public override String get_XmlNamespace() { }
	// Offset : 0x680a5c
	public String get_XmlTypeName() { }
	// Offset : 0x680a64
	public String get_XmlTypeNamespace() { }
	// Offset : 0x680a6c
	internal Boolean get_IsInteropXmlElement() { }
	// Offset : 0x680a74
	internal Boolean get_IsInteropXmlType() { }
	// Offset : 0x680a7c
	internal override Void SetReflectionObject(Object reflectionObject) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Proxies
public class ProxyAttribute : Attribute, IContextAttribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x682cac
	public virtual MarshalByRefObject CreateInstance(Type serverType) { }
	// Offset : 0x682e5c
	public virtual RealProxy CreateProxy(ObjRef objRef, Type serverType, Object serverObject, Context serverContext) { }
	// Offset : 0x682ff0
	public Void GetPropertiesForNewContext(IConstructionCallMessage msg) { }
	// Offset : 0x682ff4
	public Boolean IsContextOK(Context ctx, IConstructionCallMessage msg) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Proxies
internal class TransparentProxy
{
	// Fields
	public RealProxy _rp; // 0x10

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Proxies
public abstract class RealProxy
{
	// Fields
	private Type class_to_proxy; // 0x10
	internal Context _targetContext; // 0x18
	private MarshalByRefObject _server; // 0x20
	private Int32 _targetDomainId; // 0x28
	internal String _targetUri; // 0x30
	internal Identity _objectIdentity; // 0x38
	private Object _objTP; // 0x40
	private Object _stubData; // 0x48

	// Properties
	internal Identity ObjectIdentity { get; set; }

	// Methods
	// Offset : 0x682ffc
	protected Void .ctor(Type classToProxy) { }
	// Offset : 0x683178
	internal Void .ctor(Type classToProxy, ClientIdentity identity) { }
	// Offset : 0x683054
	protected Void .ctor(Type classToProxy, IntPtr stub, Object stubData) { }
	// Offset : 0x6831dc
	private static Type InternalGetProxyType(Object transparentProxy) { }
	// Offset : 0x6831e0
	public Type GetProxiedType() { }
	// Offset : 0x683294
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x683350
	internal Identity get_ObjectIdentity() { }
	// Offset : 0x683358
	internal Void set_ObjectIdentity(Identity value) { }
	// Offset : 0x
	public abstract IMessage Invoke(IMessage msg) { }
	// Offset : 0x683360
	internal virtual Object InternalGetTransparentProxy(String className) { }
	// Offset : 0x683364
	public virtual Object GetTransparentProxy() { }
	// Offset : 0x683580
	protected Void AttachServer(MarshalByRefObject s) { }
	// Offset : 0x683588
	internal Void SetTargetDomain(Int32 domainId) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Proxies
internal class RemotingProxy : RealProxy, IRemotingTypeInfo
{
	// Fields
	private static MethodInfo _cache_GetTypeMethod; // 0x0
	private static MethodInfo _cache_GetHashCodeMethod; // 0x8
	private IMessageSink _sink; // 0x50
	private Boolean _hasEnvoySink; // 0x58
	private ConstructionCall _ctorCall; // 0x60

	// Properties
	public String TypeName { get; }

	// Methods
	// Offset : 0x683590
	internal Void .ctor(Type type, ClientIdentity identity) { }
	// Offset : 0x682e0c
	internal Void .ctor(Type type, String activationUrl, Object[] activationAttributes) { }
	// Offset : 0x6835f8
	private static Void .cctor() { }
	// Offset : 0x6836e8
	public override IMessage Invoke(IMessage request) { }
	// Offset : 0x683e80
	internal Void AttachIdentity(Identity identity) { }
	// Offset : 0x684320
	public String get_TypeName() { }
	// Offset : 0x684504
	protected override Void Finalize() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Services
public interface ITrackingHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void DisconnectedObject(Object obj) { }
	// Offset : 0x
	public abstract Void MarshaledObject(Object obj, ObjRef or) { }
	// Offset : 0x
	public abstract Void UnmarshaledObject(Object obj, ObjRef or) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Services
public class TrackingServices
{
	// Fields
	private static ArrayList _handlers; // 0x0

	// Properties

	// Methods
	// Offset : 0x68b710
	private static Void .cctor() { }
	// Offset : 0x68944c
	internal static Void NotifyMarshaledObject(Object obj, ObjRef or) { }
	// Offset : 0x688494
	internal static Void NotifyUnmarshaledObject(Object obj, ObjRef or) { }
	// Offset : 0x68b370
	internal static Void NotifyDisconnectedObject(Object obj) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public class ActivatedClientTypeEntry : TypeEntry
{
	// Fields
	private String applicationUrl; // 0x20
	private Type obj_type; // 0x28

	// Properties
	public String ApplicationUrl { get; }
	public IContextAttribute[] ContextAttributes { get; }
	public Type ObjectType { get; }

	// Methods
	// Offset : 0x4feda0
	public Void .ctor(String typeName, String assemblyName, String appUrl) { }
	// Offset : 0x4fef08
	public String get_ApplicationUrl() { }
	// Offset : 0x4fef10
	public IContextAttribute[] get_ContextAttributes() { }
	// Offset : 0x4fef18
	public Type get_ObjectType() { }
	// Offset : 0x4fef20
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public class ActivatedServiceTypeEntry : TypeEntry
{
	// Fields
	private Type obj_type; // 0x20

	// Properties
	public Type ObjectType { get; }

	// Methods
	// Offset : 0x4fefc0
	public Void .ctor(String typeName, String assemblyName) { }
	// Offset : 0x4ff118
	public Type get_ObjectType() { }
	// Offset : 0x4ff120
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
[Serializable]
internal class EnvoyInfo : IEnvoyInfo
{
	// Fields
	private IMessageSink envoySinks; // 0x10

	// Properties
	public IMessageSink EnvoySinks { get; }

	// Methods
	// Offset : 0x6693fc
	public Void .ctor(IMessageSink sinks) { }
	// Offset : 0x669428
	public IMessageSink get_EnvoySinks() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public interface IChannelInfo
{
	// Fields

	// Properties
	public abstract Object[] ChannelData { get; }

	// Methods
	// Offset : 0x
	public abstract Object[] get_ChannelData() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public interface IEnvoyInfo
{
	// Fields

	// Properties
	public abstract IMessageSink EnvoySinks { get; }

	// Methods
	// Offset : 0x
	public abstract IMessageSink get_EnvoySinks() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public interface IRemotingTypeInfo
{
	// Fields

	// Properties
	public abstract String TypeName { get; }

	// Methods
	// Offset : 0x
	public abstract String get_TypeName() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal abstract class Identity
{
	// Fields
	protected String _objectUri; // 0x10
	protected IMessageSink _channelSink; // 0x18
	protected IMessageSink _envoySink; // 0x20
	private DynamicPropertyCollection _clientDynamicProperties; // 0x28
	private DynamicPropertyCollection _serverDynamicProperties; // 0x30
	protected ObjRef _objRef; // 0x38
	private Boolean _disposed; // 0x40

	// Properties
	public IMessageSink ChannelSink { get; set; }
	public IMessageSink EnvoySink { get; }
	public String ObjectUri { get; set; }
	public Boolean IsConnected { get; }
	public Boolean Disposed { get; set; }
	public DynamicPropertyCollection ClientDynamicProperties { get; }
	public DynamicPropertyCollection ServerDynamicProperties { get; }
	public Boolean HasServerDynamicSinks { get; }

	// Methods
	// Offset : 0x66949c
	public Void .ctor(String objectUri) { }
	// Offset : 0x
	public abstract ObjRef CreateObjRef(Type requestedType) { }
	// Offset : 0x6694c8
	public IMessageSink get_ChannelSink() { }
	// Offset : 0x6694d0
	public Void set_ChannelSink(IMessageSink value) { }
	// Offset : 0x6694d8
	public IMessageSink get_EnvoySink() { }
	// Offset : 0x6694e0
	public String get_ObjectUri() { }
	// Offset : 0x6694e8
	public Void set_ObjectUri(String value) { }
	// Offset : 0x6694f0
	public Boolean get_IsConnected() { }
	// Offset : 0x669500
	public Boolean get_Disposed() { }
	// Offset : 0x669508
	public Void set_Disposed(Boolean value) { }
	// Offset : 0x669514
	public DynamicPropertyCollection get_ClientDynamicProperties() { }
	// Offset : 0x66957c
	public DynamicPropertyCollection get_ServerDynamicProperties() { }
	// Offset : 0x6695e4
	public Boolean get_HasServerDynamicSinks() { }
	// Offset : 0x6695f4
	public Void NotifyClientDynamicSinks(Boolean start, IMessage req_msg, Boolean client_site, Boolean async) { }
	// Offset : 0x669678
	public Void NotifyServerDynamicSinks(Boolean start, IMessage req_msg, Boolean client_site, Boolean async) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal class ClientIdentity : Identity
{
	// Fields
	private WeakReference _proxyReference; // 0x48

	// Properties
	public MarshalByRefObject ClientProxy { get; set; }
	public String TargetUri { get; }

	// Methods
	// Offset : 0x50a0f8
	public Void .ctor(String objectUri, ObjRef objRef) { }
	// Offset : 0x50a288
	public MarshalByRefObject get_ClientProxy() { }
	// Offset : 0x50a388
	public Void set_ClientProxy(MarshalByRefObject value) { }
	// Offset : 0x50a3f8
	public override ObjRef CreateObjRef(Type requestedType) { }
	// Offset : 0x50a400
	public String get_TargetUri() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public class InternalRemotingServices
{
	// Fields
	private static Hashtable _soapAttributes; // 0x0

	// Properties

	// Methods
	// Offset : 0x6696fc
	private static Void .cctor() { }
	// Offset : 0x669768
	public static SoapAttribute GetCachedSoapAttribute(Object reflectionObject) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
[Serializable]
public class ObjRef : ISerializable, IObjectReference
{
	// Fields
	private IChannelInfo channel_info; // 0x10
	private String uri; // 0x18
	private IRemotingTypeInfo typeInfo; // 0x20
	private IEnvoyInfo envoyInfo; // 0x28
	private Int32 flags; // 0x30
	private Type _serverType; // 0x38
	private static Int32 MarshalledObjectRef; // 0x0
	private static Int32 WellKnowObjectRef; // 0x4
	private static Dictionary`2 <>f__switch$map26; // 0x8

	// Properties
	internal Boolean IsReferenceToWellKnow { get; }
	public virtual IChannelInfo ChannelInfo { get; }
	public virtual IEnvoyInfo EnvoyInfo { get; set; }
	public virtual IRemotingTypeInfo TypeInfo { get; set; }
	public virtual String URI { get; set; }
	internal Type ServerType { get; }

	// Methods
	// Offset : 0x680fe4
	public Void .ctor() { }
	// Offset : 0x66e84c
	internal Void .ctor(String typeName, String uri, IChannelInfo cinfo) { }
	// Offset : 0x6815cc
	internal Void .ctor(Type type, String url, Object remoteChannelData) { }
	// Offset : 0x6816b8
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x681eb0
	private static Void .cctor() { }
	// Offset : 0x681f14
	internal Boolean get_IsReferenceToWellKnow() { }
	// Offset : 0x681f8c
	public virtual IChannelInfo get_ChannelInfo() { }
	// Offset : 0x681f94
	public virtual IEnvoyInfo get_EnvoyInfo() { }
	// Offset : 0x681f9c
	public virtual Void set_EnvoyInfo(IEnvoyInfo value) { }
	// Offset : 0x681fa4
	public virtual IRemotingTypeInfo get_TypeInfo() { }
	// Offset : 0x681fac
	public virtual Void set_TypeInfo(IRemotingTypeInfo value) { }
	// Offset : 0x681fb4
	public virtual String get_URI() { }
	// Offset : 0x681fbc
	public virtual Void set_URI(String value) { }
	// Offset : 0x681fc4
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6821a0
	public virtual Object GetRealObject(StreamingContext context) { }
	// Offset : 0x68100c
	internal Void UpdateChannelInfo() { }
	// Offset : 0x68225c
	internal Type get_ServerType() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public static class RemotingConfiguration
{
	// Fields
	private static String applicationID; // 0x0
	private static String applicationName; // 0x8
	private static String processGuid; // 0x10
	private static Boolean defaultConfigRead; // 0x18
	private static Boolean defaultDelayedConfigRead; // 0x19
	private static String _errorMode; // 0x20
	private static Hashtable wellKnownClientEntries; // 0x28
	private static Hashtable activatedClientEntries; // 0x30
	private static Hashtable wellKnownServiceEntries; // 0x38
	private static Hashtable activatedServiceEntries; // 0x40
	private static Hashtable channelTemplates; // 0x48
	private static Hashtable clientProviderTemplates; // 0x50
	private static Hashtable serverProviderTemplates; // 0x58

	// Properties
	public static String ApplicationName { get; set; }
	public static String ProcessId { get; }

	// Methods
	// Offset : 0x684818
	private static Void .cctor() { }
	// Offset : 0x68497c
	public static String get_ApplicationName() { }
	// Offset : 0x6849e4
	public static Void set_ApplicationName(String value) { }
	// Offset : 0x684a50
	public static String get_ProcessId() { }
	// Offset : 0x684b18
	internal static Void LoadDefaultDelayedChannels() { }
	// Offset : 0x684ea0
	public static Boolean IsActivationAllowed(Type svrType) { }
	// Offset : 0x684fd8
	public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(Type svrType) { }
	// Offset : 0x68514c
	public static Void RegisterActivatedClientType(ActivatedClientTypeEntry entry) { }
	// Offset : 0x6854f0
	public static Void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry) { }
	// Offset : 0x685654
	public static Void RegisterWellKnownClientType(WellKnownClientTypeEntry entry) { }
	// Offset : 0x685988
	public static Void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry) { }
	// Offset : 0x685c80
	internal static Void RegisterChannelTemplate(ChannelData channel) { }
	// Offset : 0x685d40
	internal static Void RegisterClientProviderTemplate(ProviderData prov) { }
	// Offset : 0x685e00
	internal static Void RegisterServerProviderTemplate(ProviderData prov) { }
	// Offset : 0x685ec0
	internal static Void RegisterChannels(ArrayList channels, Boolean onlyDelayed) { }
	// Offset : 0x687084
	internal static Void RegisterTypes(ArrayList types) { }
	// Offset : 0x687714
	public static Boolean CustomErrorsEnabled(Boolean isLocalRequest) { }
	// Offset : 0x687830
	internal static Void SetCustomErrorsMode(String mode) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal class ConfigHandler : IContentHandler
{
	// Fields
	private ArrayList typeEntries; // 0x10
	private ArrayList channelInstances; // 0x18
	private ChannelData currentChannel; // 0x20
	private Stack currentProviderData; // 0x28
	private String currentClientUrl; // 0x30
	private String appName; // 0x38
	private String currentXmlPath; // 0x40
	private Boolean onlyDelayedChannels; // 0x48
	private static Dictionary`2 <>f__switch$map27; // 0x0
	private static Dictionary`2 <>f__switch$map28; // 0x8

	// Properties

	// Methods
	// Offset : 0x50a44c
	public Void .ctor(Boolean onlyDelayedChannels) { }
	// Offset : 0x50a514
	private Void ValidatePath(String element, String[] paths) { }
	// Offset : 0x50a644
	private Boolean CheckPath(String path) { }
	// Offset : 0x50a7ac
	public Void OnStartParsing(SmallXmlParser parser) { }
	// Offset : 0x50a7b0
	public Void OnProcessingInstruction(String name, String text) { }
	// Offset : 0x50a7b4
	public Void OnIgnorableWhitespace(String s) { }
	// Offset : 0x50a7b8
	public Void OnStartElement(String name, IAttrList attrs) { }
	// Offset : 0x50a9c8
	public Void ParseElement(String name, IAttrList attrs) { }
	// Offset : 0x50df68
	public Void OnEndElement(String name) { }
	// Offset : 0x50bca0
	private Void ReadCustomProviderData(String name, IAttrList attrs) { }
	// Offset : 0x50c1ec
	private Void ReadLifetine(IAttrList attrs) { }
	// Offset : 0x50e068
	private TimeSpan ParseTime(String s) { }
	// Offset : 0x50ca34
	private Void ReadChannel(IAttrList attrs, Boolean isTemplate) { }
	// Offset : 0x50cf80
	private ProviderData ReadProvider(String name, IAttrList attrs, Boolean isTemplate) { }
	// Offset : 0x50d814
	private Void ReadClientActivated(IAttrList attrs) { }
	// Offset : 0x50d980
	private Void ReadServiceActivated(IAttrList attrs) { }
	// Offset : 0x50d4f4
	private Void ReadClientWellKnown(IAttrList attrs) { }
	// Offset : 0x50d5f4
	private Void ReadServiceWellKnown(IAttrList attrs) { }
	// Offset : 0x50da60
	private Void ReadInteropXml(IAttrList attrs, Boolean isElement) { }
	// Offset : 0x50dc80
	private Void ReadPreload(IAttrList attrs) { }
	// Offset : 0x50e4e4
	private String GetNotNull(IAttrList attrs, String name) { }
	// Offset : 0x50e69c
	private String ExtractAssembly(ref String type) { }
	// Offset : 0x50e7c0
	public Void OnChars(String ch) { }
	// Offset : 0x50e7c4
	public Void OnEndParsing(SmallXmlParser parser) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal class ChannelData
{
	// Fields
	internal String Ref; // 0x10
	internal String Type; // 0x18
	internal String Id; // 0x20
	internal String DelayLoadAsClientChannel; // 0x28
	private ArrayList _serverProviders; // 0x30
	private ArrayList _clientProviders; // 0x38
	private Hashtable _customProperties; // 0x40

	// Properties
	internal ArrayList ServerProviders { get; }
	public ArrayList ClientProviders { get; }
	public Hashtable CustomProperties { get; }

	// Methods
	// Offset : 0x503484
	public Void .ctor() { }
	// Offset : 0x50352c
	internal ArrayList get_ServerProviders() { }
	// Offset : 0x503598
	public ArrayList get_ClientProviders() { }
	// Offset : 0x503604
	public Hashtable get_CustomProperties() { }
	// Offset : 0x503670
	public Void CopyFrom(ChannelData other) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal class ProviderData
{
	// Fields
	internal String Ref; // 0x10
	internal String Type; // 0x18
	internal String Id; // 0x20
	internal Hashtable CustomProperties; // 0x28
	internal IList CustomData; // 0x30

	// Properties

	// Methods
	// Offset : 0x669434
	public Void .ctor() { }
	// Offset : 0x6823a4
	public Void CopyFrom(ProviderData other) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal class FormatterData : ProviderData
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x669430
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
[Serializable]
public class RemotingException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x687a0c
	public Void .ctor() { }
	// Offset : 0x667500
	public Void .ctor(String message) { }
	// Offset : 0x687a14
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x687a1c
	public Void .ctor(String message, Exception InnerException) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public sealed class RemotingServices
{
	// Fields
	private static Hashtable uri_hash; // 0x0
	private static BinaryFormatter _serializationFormatter; // 0x8
	private static BinaryFormatter _deserializationFormatter; // 0x10
	internal static String app_id; // 0x18
	private static Int32 next_id; // 0x20
	private static readonly BindingFlags methodBindings; // 0x24
	private static readonly MethodInfo FieldSetterMethod; // 0x28
	private static readonly MethodInfo FieldGetterMethod; // 0x30

	// Properties

	// Methods
	// Offset : 0x687a24
	private static Void .cctor() { }
	// Offset : 0x687d90
	internal static Object InternalExecute(MethodBase method, Object obj, Object[] parameters, out Object[] out_args) { }
	// Offset : 0x677ffc
	internal static MethodBase GetVirtualMethod(Type type, MethodBase method) { }
	// Offset : 0x66dfb0
	public static Boolean IsTransparentProxy(Object proxy) { }
	// Offset : 0x67f1ac
	internal static IMethodReturnMessage InternalExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg) { }
	// Offset : 0x687d94
	public static Object Connect(Type classToProxy, String url) { }
	// Offset : 0x6779f4
	public static Type GetServerTypeForUri(String URI) { }
	// Offset : 0x66e930
	public static Object Unmarshal(ObjRef objectRef) { }
	// Offset : 0x6881a8
	public static Object Unmarshal(ObjRef objectRef, Boolean fRefine) { }
	// Offset : 0x66dfb4
	public static ObjRef Marshal(MarshalByRefObject Obj) { }
	// Offset : 0x688848
	public static ObjRef Marshal(MarshalByRefObject Obj, String ObjURI, Type RequestedType) { }
	// Offset : 0x688d5c
	private static String NewUri() { }
	// Offset : 0x67d00c
	public static RealProxy GetRealProxy(Object proxy) { }
	// Offset : 0x678000
	public static MethodBase GetMethodBaseFromMethodMessage(IMethodMessage msg) { }
	// Offset : 0x677d28
	internal static MethodBase GetMethodBaseFromName(Type type, String methodName, Type[] signature) { }
	// Offset : 0x6899b8
	private static MethodBase FindInterfaceMethod(Type type, String methodName, Type[] signature) { }
	// Offset : 0x67d1b8
	public static Void GetObjectData(Object obj, SerializationInfo info, StreamingContext context) { }
	// Offset : 0x689b68
	public static Boolean IsMethodOverloaded(IMethodMessage msg) { }
	// Offset : 0x67cb98
	public static Boolean IsOneWay(MethodBase method) { }
	// Offset : 0x689df4
	internal static Object CreateClientProxy(ActivatedClientTypeEntry entry, Object[] activationAttributes) { }
	// Offset : 0x68a060
	internal static Object CreateClientProxy(Type objectType, String url, Object[] activationAttributes) { }
	// Offset : 0x68a31c
	internal static Object CreateClientProxyForContextBound(Type type, Object[] activationAttributes) { }
	// Offset : 0x687eb0
	internal static Identity GetIdentityForUri(String uri) { }
	// Offset : 0x68a5ac
	private static String RemoveAppNameFromUri(String uri) { }
	// Offset : 0x68a6bc
	internal static ClientIdentity GetOrCreateClientIdentity(ObjRef objRef, Type proxyType, out Object clientProxy) { }
	// Offset : 0x68a1f4
	private static IMessageSink GetClientChannelSinkChain(String url, Object channelData, out String objectUri) { }
	// Offset : 0x68aca0
	internal static ClientActivatedIdentity CreateContextBoundObjectIdentity(Type objectType) { }
	// Offset : 0x689800
	internal static ClientActivatedIdentity CreateClientActivatedServerIdentity(MarshalByRefObject realObject, Type objectType, String objectUri) { }
	// Offset : 0x685b80
	internal static ServerIdentity CreateWellKnownServerIdentity(Type objectType, String objectUri, WellKnownObjectMode mode) { }
	// Offset : 0x689000
	private static Void RegisterServerIdentity(ServerIdentity identity) { }
	// Offset : 0x682ed4
	internal static Object GetProxyForRemoteObject(ObjRef objref, Type classToProxy) { }
	// Offset : 0x687e2c
	internal static Object GetRemoteObject(ObjRef objRef, Type proxyType) { }
	// Offset : 0x687d30
	private static Void RegisterInternalChannels() { }
	// Offset : 0x6845fc
	internal static Void DisposeIdentity(Identity ident) { }
	// Offset : 0x66beb8
	internal static Identity GetMessageTargetIdentity(IMessage msg) { }
	// Offset : 0x68aefc
	internal static Void SetMessageTargetIdentity(IMessage msg, Identity ident) { }
	// Offset : 0x68a51c
	private static String GetNormalizedUri(String uri) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal abstract class ServerIdentity : Identity
{
	// Fields
	protected Type _objectType; // 0x48
	protected MarshalByRefObject _serverObject; // 0x50
	protected IMessageSink _serverSink; // 0x58
	protected Context _context; // 0x60
	protected Lease _lease; // 0x68

	// Properties
	public Type ObjectType { get; }
	public Lease Lease { get; }
	public Context Context { get; set; }

	// Methods
	// Offset : 0x68b0d8
	public Void .ctor(String objectUri, Context context, Type objectType) { }
	// Offset : 0x6881a0
	public Type get_ObjectType() { }
	// Offset : 0x68926c
	public Void StartTrackingLifetime(ILease lease) { }
	// Offset : 0x68b11c
	public virtual Void OnLifetimeExpired() { }
	// Offset : 0x68b1ac
	public override ObjRef CreateObjRef(Type requestedType) { }
	// Offset : 0x68ad44
	public Void AttachServerObject(MarshalByRefObject serverObject, Context context) { }
	// Offset : 0x66b450
	public Lease get_Lease() { }
	// Offset : 0x684318
	public Context get_Context() { }
	// Offset : 0x68b368
	public Void set_Context(Context value) { }
	// Offset : 0x
	public abstract IMessage SyncObjectProcessMessage(IMessage msg) { }
	// Offset : 0x
	public abstract IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
	// Offset : 0x68b120
	protected Void DisposeServerObject() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal class ClientActivatedIdentity : ServerIdentity
{
	// Fields
	private MarshalByRefObject _targetThis; // 0x70

	// Properties

	// Methods
	// Offset : 0x509b4c
	public Void .ctor(String objectUri, Type objectType) { }
	// Offset : 0x509b60
	public MarshalByRefObject GetServerObject() { }
	// Offset : 0x509b68
	public Void SetClientProxy(MarshalByRefObject obj) { }
	// Offset : 0x509b70
	public override Void OnLifetimeExpired() { }
	// Offset : 0x509be4
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }
	// Offset : 0x509fa4
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal class SingletonIdentity : ServerIdentity
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x68aeb8
	public Void .ctor(String objectUri, Context context, Type objectType) { }
	// Offset : 0x68bd5c
	public MarshalByRefObject GetServerObject() { }
	// Offset : 0x68bfb4
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }
	// Offset : 0x68c0f0
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal class SingleCallIdentity : ServerIdentity
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x68ae74
	public Void .ctor(String objectUri, Context context, Type objectType) { }
	// Offset : 0x68b77c
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }
	// Offset : 0x68baec
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
internal class DisposerReplySink : IMessageSink
{
	// Fields
	private IMessageSink _next; // 0x10
	private IDisposable _disposable; // 0x18

	// Properties

	// Methods
	// Offset : 0x6691c0
	public Void .ctor(IMessageSink next, IDisposable disposable) { }
	// Offset : 0x6691f8
	public IMessage SyncProcessMessage(IMessage msg) { }
	// Offset : 0x669394
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public class SoapServices
{
	// Fields
	private static Hashtable _xmlTypes; // 0x0
	private static Hashtable _xmlElements; // 0x8
	private static Hashtable _soapActions; // 0x10
	private static Hashtable _soapActionsMethods; // 0x18
	private static Hashtable _typeInfos; // 0x20

	// Properties
	public static String XmlNsForClrTypeWithAssembly { get; }
	public static String XmlNsForClrTypeWithNs { get; }
	public static String XmlNsForClrTypeWithNsAndAssembly { get; }

	// Methods
	// Offset : 0x68c238
	private static Void .cctor() { }
	// Offset : 0x68c32c
	public static String get_XmlNsForClrTypeWithAssembly() { }
	// Offset : 0x68c374
	public static String get_XmlNsForClrTypeWithNs() { }
	// Offset : 0x68c3bc
	public static String get_XmlNsForClrTypeWithNsAndAssembly() { }
	// Offset : 0x680da8
	public static String CodeXmlNamespaceForClrTypeNamespace(String typeNamespace, String assemblyName) { }
	// Offset : 0x68c4d0
	private static String GetNameKey(String name, String namspace) { }
	// Offset : 0x68c56c
	private static String GetAssemblyName(MethodBase mb) { }
	// Offset : 0x68c788
	public static Boolean GetXmlElementForInteropType(Type type, out String xmlElement, out String xmlNamespace) { }
	// Offset : 0x680960
	public static String GetXmlNamespaceForMethodCall(MethodBase mb) { }
	// Offset : 0x68087c
	public static String GetXmlNamespaceForMethodResponse(MethodBase mb) { }
	// Offset : 0x68c89c
	public static Boolean GetXmlTypeForInteropType(Type type, out String xmlType, out String xmlTypeNamespace) { }
	// Offset : 0x68c9b4
	public static Void PreLoad(Assembly assembly) { }
	// Offset : 0x68caa4
	public static Void PreLoad(Type type) { }
	// Offset : 0x68d270
	public static Void RegisterInteropXmlElement(String xmlElement, String xmlNamespace, Type type) { }
	// Offset : 0x68d094
	public static Void RegisterInteropXmlType(String xmlType, String xmlTypeNamespace, Type type) { }
	// Offset : 0x68c404
	private static String EncodeNs(String ns) { }
}

// Dll : mscorlib.dll
// Namespace: 
private class TypeInfo
{
	// Fields
	public Hashtable Attributes; // 0x10
	public Hashtable Elements; // 0x18

	// Properties

	// Methods
	// Offset : 0x68d44c
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public class TypeEntry
{
	// Fields
	private String assembly_name; // 0x10
	private String type_name; // 0x18

	// Properties
	public String AssemblyName { get; set; }
	public String TypeName { get; set; }

	// Methods
	// Offset : 0x68d454
	protected Void .ctor() { }
	// Offset : 0x68d45c
	public String get_AssemblyName() { }
	// Offset : 0x68d464
	public Void set_AssemblyName(String value) { }
	// Offset : 0x68d46c
	public String get_TypeName() { }
	// Offset : 0x68d474
	public Void set_TypeName(String value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
[Serializable]
internal class TypeInfo : IRemotingTypeInfo
{
	// Fields
	private String serverType; // 0x10
	private String[] serverHierarchy; // 0x18
	private String[] interfacesImplemented; // 0x20

	// Properties
	public String TypeName { get; }

	// Methods
	// Offset : 0x68106c
	public Void .ctor(Type type) { }
	// Offset : 0x68d47c
	public String get_TypeName() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public class WellKnownClientTypeEntry : TypeEntry
{
	// Fields
	private Type obj_type; // 0x20
	private String obj_url; // 0x28
	private String app_url; // 0x30

	// Properties
	public String ApplicationUrl { get; }
	public Type ObjectType { get; }
	public String ObjectUrl { get; }

	// Methods
	// Offset : 0x68d484
	public Void .ctor(String typeName, String assemblyName, String objectUrl) { }
	// Offset : 0x68d5d0
	public String get_ApplicationUrl() { }
	// Offset : 0x685980
	public Type get_ObjectType() { }
	// Offset : 0x68d5d8
	public String get_ObjectUrl() { }
	// Offset : 0x68d5e0
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
[Serializable]
public enum WellKnownObjectMode
{
	// Fields
	public Int32 value__; // 0x10
	public const WellKnownObjectMode Singleton = 1; // 0x0
	public const WellKnownObjectMode SingleCall = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting
public class WellKnownServiceTypeEntry : TypeEntry
{
	// Fields
	private Type obj_type; // 0x20
	private String obj_uri; // 0x28
	private WellKnownObjectMode obj_mode; // 0x30

	// Properties
	public WellKnownObjectMode Mode { get; }
	public Type ObjectType { get; }
	public String ObjectUri { get; }

	// Methods
	// Offset : 0x4c9824
	public Void .ctor(String typeName, String assemblyName, String objectUri, WellKnownObjectMode mode) { }
	// Offset : 0x4c9990
	public WellKnownObjectMode get_Mode() { }
	// Offset : 0x4c9998
	public Type get_ObjectType() { }
	// Offset : 0x4c99a0
	public String get_ObjectUri() { }
	// Offset : 0x4c99a8
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class BinaryCommon
{
	// Fields
	public static Byte[] BinaryHeader; // 0x0
	private static Type[] _typeCodesToType; // 0x8
	private static Byte[] _typeCodeMap; // 0x10
	public static Boolean UseReflectionSerialization; // 0x18

	// Properties

	// Methods
	// Offset : 0x4cb18c
	private static Void .cctor() { }
	// Offset : 0x4cbe98
	public static Boolean IsPrimitive(Type type) { }
	// Offset : 0x4cbff4
	public static Byte GetTypeCode(Type type) { }
	// Offset : 0x4cc110
	public static Type GetTypeFromCode(Int32 code) { }
	// Offset : 0x4cc1b0
	public static Void CheckSerializable(Type type, ISurrogateSelector selector, StreamingContext context) { }
	// Offset : 0x4cc384
	public static Void SwapBytes(Byte[] byteArray, Int32 size, Int32 dataSize) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum BinaryElement
{
	// Fields
	public Byte value__; // 0x10
	public const BinaryElement Header = 0; // 0x0
	public const BinaryElement RefTypeObject = 1; // 0x0
	public const BinaryElement UntypedRuntimeObject = 2; // 0x0
	public const BinaryElement UntypedExternalObject = 3; // 0x0
	public const BinaryElement RuntimeObject = 4; // 0x0
	public const BinaryElement ExternalObject = 5; // 0x0
	public const BinaryElement String = 6; // 0x0
	public const BinaryElement GenericArray = 7; // 0x0
	public const BinaryElement BoxedPrimitiveTypeValue = 8; // 0x0
	public const BinaryElement ObjectReference = 9; // 0x0
	public const BinaryElement NullValue = 10; // 0x0
	public const BinaryElement End = 11; // 0x0
	public const BinaryElement Assembly = 12; // 0x0
	public const BinaryElement ArrayFiller8b = 13; // 0x0
	public const BinaryElement ArrayFiller32b = 14; // 0x0
	public const BinaryElement ArrayOfPrimitiveType = 15; // 0x0
	public const BinaryElement ArrayOfObject = 16; // 0x0
	public const BinaryElement ArrayOfString = 17; // 0x0
	public const BinaryElement Method = 18; // 0x0
	public const BinaryElement _Unknown4 = 19; // 0x0
	public const BinaryElement _Unknown5 = 20; // 0x0
	public const BinaryElement MethodCall = 21; // 0x0
	public const BinaryElement MethodResponse = 22; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum TypeTag
{
	// Fields
	public Byte value__; // 0x10
	public const TypeTag PrimitiveType = 0; // 0x0
	public const TypeTag String = 1; // 0x0
	public const TypeTag ObjectType = 2; // 0x0
	public const TypeTag RuntimeType = 3; // 0x0
	public const TypeTag GenericType = 4; // 0x0
	public const TypeTag ArrayOfObject = 5; // 0x0
	public const TypeTag ArrayOfString = 6; // 0x0
	public const TypeTag ArrayOfPrimitiveType = 7; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum MethodFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const MethodFlags NoArguments = 1; // 0x0
	public const MethodFlags PrimitiveArguments = 2; // 0x0
	public const MethodFlags ArgumentsInSimpleArray = 4; // 0x0
	public const MethodFlags ArgumentsInMultiArray = 8; // 0x0
	public const MethodFlags ExcludeLogicalCallContext = 16; // 0x0
	public const MethodFlags IncludesLogicalCallContext = 64; // 0x0
	public const MethodFlags IncludesSignature = 128; // 0x0
	public const MethodFlags FormatMask = 15; // 0x0
	public const MethodFlags GenericArguments = 32768; // 0x0
	public const MethodFlags NeedsInfoArrayMask = 32972; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum ReturnTypeTag
{
	// Fields
	public Byte value__; // 0x10
	public const ReturnTypeTag Null = 2; // 0x0
	public const ReturnTypeTag PrimitiveType = 8; // 0x0
	public const ReturnTypeTag ObjectType = 16; // 0x0
	public const ReturnTypeTag Exception = 32; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
public sealed class BinaryFormatter : IRemotingFormatter, IFormatter
{
	// Fields
	private FormatterAssemblyStyle assembly_format; // 0x10
	private SerializationBinder binder; // 0x18
	private StreamingContext context; // 0x20
	private ISurrogateSelector surrogate_selector; // 0x30
	private FormatterTypeStyle type_format; // 0x38
	private TypeFilterLevel filter_level; // 0x3c
	private static ISurrogateSelector <DefaultSurrogateSelector>k__BackingField; // 0x0

	// Properties
	public static ISurrogateSelector DefaultSurrogateSelector { get; }
	public FormatterAssemblyStyle AssemblyFormat { set; }
	public SerializationBinder Binder { get; }
	public StreamingContext Context { get; }
	public ISurrogateSelector SurrogateSelector { get; set; }
	public TypeFilterLevel FilterLevel { get; }

	// Methods
	// Offset : 0x4cc8bc
	public Void .ctor() { }
	// Offset : 0x4cc990
	public Void .ctor(ISurrogateSelector selector, StreamingContext context) { }
	// Offset : 0x4cc934
	public static ISurrogateSelector get_DefaultSurrogateSelector() { }
	// Offset : 0x4cc9dc
	public Void set_AssemblyFormat(FormatterAssemblyStyle value) { }
	// Offset : 0x4cc9e4
	public SerializationBinder get_Binder() { }
	// Offset : 0x4cc9ec
	public StreamingContext get_Context() { }
	// Offset : 0x4cc9f8
	public ISurrogateSelector get_SurrogateSelector() { }
	// Offset : 0x4cca00
	public Void set_SurrogateSelector(ISurrogateSelector value) { }
	// Offset : 0x4cca08
	public TypeFilterLevel get_FilterLevel() { }
	// Offset : 0x4cca10
	public Object Deserialize(Stream serializationStream) { }
	// Offset : 0x4ccc64
	public Object Deserialize(Stream serializationStream, HeaderHandler handler) { }
	// Offset : 0x4cca18
	private Object NoCheckDeserialize(Stream serializationStream, HeaderHandler handler) { }
	// Offset : 0x4ce9ec
	public Object DeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage) { }
	// Offset : 0x4ce9f0
	private Object NoCheckDeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage) { }
	// Offset : 0x4cebe0
	public Void Serialize(Stream serializationStream, Object graph) { }
	// Offset : 0x4cebe8
	public Void Serialize(Stream serializationStream, Object graph, Header[] headers) { }
	// Offset : 0x4cede4
	private Void WriteBinaryHeader(BinaryWriter writer, Boolean hasHeaders) { }
	// Offset : 0x4ccc68
	private Void ReadBinaryHeader(BinaryReader reader, out Boolean hasHeaders) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class CodeGenerator
{
	// Fields
	private static Object monitor; // 0x0
	private static ModuleBuilder _module; // 0x8

	// Properties

	// Methods
	// Offset : 0x4d1a04
	private static Void .cctor() { }
	// Offset : 0x4d1b3c
	public static Type GenerateMetadataType(Type type, StreamingContext context) { }
	// Offset : 0x4d1c48
	public static Type GenerateMetadataTypeInternal(Type type, StreamingContext context) { }
	// Offset : 0x4d49b0
	public static Void LoadFromPtr(ILGenerator ig, Type t) { }
	// Offset : 0x4d4354
	private static Void EmitWriteTypeSpec(ILGenerator gen, Type type, String member) { }
	// Offset : 0x4d3bf4
	private static Void EmitLoadTypeAssembly(ILGenerator gen, Type type, String member) { }
	// Offset : 0x4d3dec
	private static Void EmitWrite(ILGenerator gen, Type type) { }
	// Offset : 0x4d5108
	public static Void EmitWritePrimitiveValue(ILGenerator gen, Type type) { }
	// Offset : 0x4d5664
	public static Type EnumToUnderlying(Type t) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MessageFormatter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4cef20
	public static Void WriteMethodCall(BinaryWriter writer, Object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat) { }
	// Offset : 0x4d0270
	public static Void WriteMethodResponse(BinaryWriter writer, Object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat) { }
	// Offset : 0x4ccd74
	public static Object ReadMethodCall(BinaryElement elem, BinaryReader reader, Boolean hasHeaders, HeaderHandler headerHandler, BinaryFormatter formatter) { }
	// Offset : 0x4ceb60
	public static Object ReadMethodResponse(BinaryReader reader, Boolean hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter) { }
	// Offset : 0x4cdabc
	public static Object ReadMethodResponse(BinaryElement elem, BinaryReader reader, Boolean hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter) { }
	// Offset : 0x4d6f24
	private static Boolean AllTypesArePrimitive(Object[] objects) { }
	// Offset : 0x4d76f4
	public static Boolean IsMethodPrimitive(Type type) { }
	// Offset : 0x4d6a50
	private static Object[] GetExtraProperties(IDictionary properties, String[] internalKeys) { }
	// Offset : 0x4d7f5c
	private static Boolean IsInternalKey(String key, String[] internalKeys) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectReader
{
	// Fields
	private ISurrogateSelector _surrogateSelector; // 0x10
	private StreamingContext _context; // 0x18
	private SerializationBinder _binder; // 0x28
	private TypeFilterLevel _filterLevel; // 0x30
	private ObjectManager _manager; // 0x38
	private Hashtable _registeredAssemblies; // 0x40
	private Hashtable _typeMetadataCache; // 0x48
	private Object _lastObject; // 0x50
	private Int64 _lastObjectID; // 0x58
	private Int64 _rootObjectID; // 0x60
	private Byte[] arrayBuffer; // 0x68
	private Int32 ArrayBufferLength; // 0x70

	// Properties
	public Object CurrentObject { get; }

	// Methods
	// Offset : 0x4ce6e0
	public Void .ctor(BinaryFormatter formatter) { }
	// Offset : 0x4d7ed4
	public Void ReadObjectGraph(BinaryReader reader, Boolean readHeaders, out Object result, out Header[] headers) { }
	// Offset : 0x4ce80c
	public Void ReadObjectGraph(BinaryElement elem, BinaryReader reader, Boolean readHeaders, out Object result, out Header[] headers) { }
	// Offset : 0x4d80fc
	private Boolean ReadNextObject(BinaryElement element, BinaryReader reader) { }
	// Offset : 0x4d81f4
	public Boolean ReadNextObject(BinaryReader reader) { }
	// Offset : 0x4d81ec
	public Object get_CurrentObject() { }
	// Offset : 0x4d8328
	private Void ReadObject(BinaryElement element, BinaryReader reader, out Int64 objectId, out Object value, out SerializationInfo info) { }
	// Offset : 0x4d9054
	private Void ReadAssembly(BinaryReader reader) { }
	// Offset : 0x4d8aec
	private Void ReadObjectInstance(BinaryReader reader, Boolean isRuntimeObject, Boolean hasTypeInfo, out Int64 objectId, out Object value, out SerializationInfo info) { }
	// Offset : 0x4d88a4
	private Void ReadRefTypeObjectInstance(BinaryReader reader, out Int64 objectId, out Object value, out SerializationInfo info) { }
	// Offset : 0x4daa5c
	private Void ReadObjectContent(BinaryReader reader, TypeMetadata metadata, Int64 objectId, out Object objectInstance, out SerializationInfo info) { }
	// Offset : 0x4d86ec
	private Void RegisterObject(Int64 objectId, Object objectInstance, SerializationInfo info, Int64 parentObjectId, MemberInfo parentObjectMemeber, Int32[] indices) { }
	// Offset : 0x4d8ba4
	private Void ReadStringIntance(BinaryReader reader, out Int64 objectId, out Object value) { }
	// Offset : 0x4d8c40
	private Void ReadGenericArray(BinaryReader reader, out Int64 objectId, out Object val) { }
	// Offset : 0x4d9028
	private Object ReadBoxedPrimitiveTypeValue(BinaryReader reader) { }
	// Offset : 0x4d919c
	private Void ReadArrayOfPrimitiveType(BinaryReader reader, out Int64 objectId, out Object val) { }
	// Offset : 0x4db8d0
	private Void BlockRead(BinaryReader reader, Array array, Int32 dataSize) { }
	// Offset : 0x4d9e08
	private Void ReadArrayOfObject(BinaryReader reader, out Int64 objectId, out Object array) { }
	// Offset : 0x4d9eb0
	private Void ReadArrayOfString(BinaryReader reader, out Int64 objectId, out Object array) { }
	// Offset : 0x4dbad4
	private Void ReadSimpleArray(BinaryReader reader, Type elementType, out Int64 objectId, out Object val) { }
	// Offset : 0x4d9f58
	private TypeMetadata ReadTypeMetadata(BinaryReader reader, Boolean isRuntimeObject, Boolean hasTypeInfo) { }
	// Offset : 0x4dafa8
	private Void ReadValue(BinaryReader reader, Object parentObject, Int64 parentObjectId, SerializationInfo info, Type valueType, String fieldName, MemberInfo memberInfo, Int32[] indices) { }
	// Offset : 0x4dbea4
	private Void SetObjectValue(Object parentObject, String fieldName, MemberInfo memberInfo, SerializationInfo info, Object value, Type valueType, Int32[] indices) { }
	// Offset : 0x4dc314
	private Void RecordFixup(Int64 parentObjectId, Int64 childObjectId, Object parentObject, SerializationInfo info, String fieldName, MemberInfo memberInfo, Int32[] indices) { }
	// Offset : 0x4dbc7c
	private Type GetDeserializationType(Int64 assemblyId, String className) { }
	// Offset : 0x4db3bc
	public Type ReadType(BinaryReader reader, TypeTag code) { }
	// Offset : 0x4d7810
	public static Object ReadPrimitiveTypeValue(BinaryReader reader, Type type) { }
}

// Dll : mscorlib.dll
// Namespace: 
private class TypeMetadata
{
	// Fields
	public Type Type; // 0x10
	public Type[] MemberTypes; // 0x18
	public String[] MemberNames; // 0x20
	public MemberInfo[] MemberInfos; // 0x28
	public Int32 FieldCount; // 0x30
	public Boolean NeedsSerializationInfo; // 0x34

	// Properties

	// Methods
	// Offset : 0x4dbc74
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: 
private class ArrayNullFiller
{
	// Fields
	public Int32 NullCount; // 0x10

	// Properties

	// Methods
	// Offset : 0x4d9170
	public Void .ctor(Int32 count) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class TypeMetadata
{
	// Fields
	public String TypeAssemblyName; // 0x10
	public String InstanceTypeName; // 0x18

	// Properties
	public abstract Boolean RequiresTypes { get; }

	// Methods
	// Offset : 0x4d19f4
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Void WriteAssemblies(ObjectWriter ow, BinaryWriter writer) { }
	// Offset : 0x
	public abstract Void WriteTypeData(ObjectWriter ow, BinaryWriter writer, Boolean writeTypes) { }
	// Offset : 0x
	public abstract Void WriteObjectData(ObjectWriter ow, BinaryWriter writer, Object data) { }
	// Offset : 0x4e14fc
	public virtual Boolean IsCompatible(TypeMetadata other) { }
	// Offset : 0x
	public abstract Boolean get_RequiresTypes() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class ClrTypeMetadata : TypeMetadata
{
	// Fields
	public Type InstanceType; // 0x20

	// Properties
	public override Boolean RequiresTypes { get; }

	// Methods
	// Offset : 0x4d1928
	public Void .ctor(Type instanceType) { }
	// Offset : 0x4d19fc
	public override Boolean get_RequiresTypes() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class SerializableTypeMetadata : TypeMetadata
{
	// Fields
	private Type[] types; // 0x20
	private String[] names; // 0x28

	// Properties
	public override Boolean RequiresTypes { get; }

	// Methods
	// Offset : 0x4ddff8
	public Void .ctor(Type itype, SerializationInfo info) { }
	// Offset : 0x4e0dc4
	public override Boolean IsCompatible(TypeMetadata other) { }
	// Offset : 0x4e103c
	public override Void WriteAssemblies(ObjectWriter ow, BinaryWriter writer) { }
	// Offset : 0x4e1170
	public override Void WriteTypeData(ObjectWriter ow, BinaryWriter writer, Boolean writeTypes) { }
	// Offset : 0x4e1384
	public override Void WriteObjectData(ObjectWriter ow, BinaryWriter writer, Object data) { }
	// Offset : 0x4e14f4
	public override Boolean get_RequiresTypes() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MemberTypeMetadata : ClrTypeMetadata
{
	// Fields
	private MemberInfo[] members; // 0x28

	// Properties

	// Methods
	// Offset : 0x4d59ec
	public Void .ctor(Type type, StreamingContext context) { }
	// Offset : 0x4d5a1c
	public override Void WriteAssemblies(ObjectWriter ow, BinaryWriter writer) { }
	// Offset : 0x4d5c9c
	public override Void WriteTypeData(ObjectWriter ow, BinaryWriter writer, Boolean writeTypes) { }
	// Offset : 0x4d6500
	public override Void WriteObjectData(ObjectWriter ow, BinaryWriter writer, Object data) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectWriter
{
	// Fields
	private ObjectIDGenerator _idGenerator; // 0x10
	private Hashtable _cachedMetadata; // 0x18
	private Queue _pendingObjects; // 0x20
	private Hashtable _assemblyCache; // 0x28
	private static Hashtable _cachedTypes; // 0x0
	internal static Assembly CorlibAssembly; // 0x8
	internal static String CorlibAssemblyName; // 0x10
	private ISurrogateSelector _surrogateSelector; // 0x30
	private StreamingContext _context; // 0x38
	private FormatterAssemblyStyle _assemblyFormat; // 0x48
	private FormatterTypeStyle _typeFormat; // 0x4c
	private Byte[] arrayBuffer; // 0x50
	private Int32 ArrayBufferLength; // 0x58
	private SerializationObjectManager _manager; // 0x60

	// Properties

	// Methods
	// Offset : 0x4d16e8
	public Void .ctor(ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat) { }
	// Offset : 0x4dc8d8
	private static Void .cctor() { }
	// Offset : 0x4d180c
	public Void WriteObjectGraph(BinaryWriter writer, Object obj, Header[] headers) { }
	// Offset : 0x4dca4c
	public Void QueueObject(Object obj) { }
	// Offset : 0x4dcaa4
	public Void WriteQueuedObjects(BinaryWriter writer) { }
	// Offset : 0x4dcbc8
	public Void WriteObjectInstance(BinaryWriter writer, Object obj, Boolean isValueObject) { }
	// Offset : 0x4dcb60
	public static Void WriteSerializationEnd(BinaryWriter writer) { }
	// Offset : 0x4dd024
	private Void WriteObject(BinaryWriter writer, Int64 id, Object obj) { }
	// Offset : 0x4dd504
	private Void GetObjectData(Object obj, out TypeMetadata metadata, out Object data) { }
	// Offset : 0x4de540
	private TypeMetadata CreateMemberTypeMetadata(Type type) { }
	// Offset : 0x4dcddc
	private Void WriteArray(BinaryWriter writer, Int64 id, Array array) { }
	// Offset : 0x4dfbd4
	private Void WriteGenericArray(BinaryWriter writer, Int64 id, Array array) { }
	// Offset : 0x4de6ac
	private Void WriteObjectArray(BinaryWriter writer, Int64 id, Array array) { }
	// Offset : 0x4de808
	private Void WriteStringArray(BinaryWriter writer, Int64 id, Array array) { }
	// Offset : 0x4de964
	private Void WritePrimitiveTypeArray(BinaryWriter writer, Int64 id, Array array) { }
	// Offset : 0x4e0550
	private Void BlockWrite(BinaryWriter writer, Array array, Int32 dataSize) { }
	// Offset : 0x4e0208
	private Void WriteSingleDimensionArrayElements(BinaryWriter writer, Array array, Type elementType) { }
	// Offset : 0x4e0734
	private Void WriteNullFiller(BinaryWriter writer, Int32 numNulls) { }
	// Offset : 0x4e088c
	private Void WriteObjectReference(BinaryWriter writer, Int64 id) { }
	// Offset : 0x4d674c
	public Void WriteValue(BinaryWriter writer, Type valueType, Object val) { }
	// Offset : 0x4dcd1c
	private Void WriteString(BinaryWriter writer, Int64 id, String str) { }
	// Offset : 0x4d5c30
	public Int32 WriteAssembly(BinaryWriter writer, Assembly assembly) { }
	// Offset : 0x4dde14
	public Int32 WriteAssemblyName(BinaryWriter writer, String assembly) { }
	// Offset : 0x4e0ad0
	public Int32 GetAssemblyId(Assembly assembly) { }
	// Offset : 0x4e0b2c
	public Int32 GetAssemblyNameId(String assembly) { }
	// Offset : 0x4e0910
	private Int32 RegisterAssembly(String assembly, out Boolean firstTime) { }
	// Offset : 0x4d6fb0
	public static Void WritePrimitiveValue(BinaryWriter writer, Object value) { }
	// Offset : 0x4d60d4
	public static Void WriteTypeCode(BinaryWriter writer, Type type) { }
	// Offset : 0x4d3f84
	public static TypeTag GetTypeTag(Type type) { }
	// Offset : 0x4d6180
	public Void WriteTypeSpec(BinaryWriter writer, Type type) { }
}

// Dll : mscorlib.dll
// Namespace: 
private class MetadataReference
{
	// Fields
	public TypeMetadata Metadata; // 0x10
	public Int64 ObjectID; // 0x18

	// Properties

	// Methods
	// Offset : 0x4ddddc
	public Void .ctor(TypeMetadata metadata, Int64 id) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public enum FormatterAssemblyStyle
{
	// Fields
	public Int32 value__; // 0x10
	public const FormatterAssemblyStyle Simple = 0; // 0x0
	public const FormatterAssemblyStyle Full = 1; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public enum FormatterTypeStyle
{
	// Fields
	public Int32 value__; // 0x10
	public const FormatterTypeStyle TypesWhenNeeded = 0; // 0x0
	public const FormatterTypeStyle TypesAlways = 1; // 0x0
	public const FormatterTypeStyle XsdString = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization.Formatters
public enum TypeFilterLevel
{
	// Fields
	public Int32 value__; // 0x10
	public const TypeFilterLevel Low = 2; // 0x0
	public const TypeFilterLevel Full = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public class FormatterConverter : IFormatterConverter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4ca39c
	public Void .ctor() { }
	// Offset : 0x4ca3a4
	public Object Convert(Object value, Type type) { }
	// Offset : 0x4ca41c
	public Boolean ToBoolean(Object value) { }
	// Offset : 0x4ca4cc
	public Int16 ToInt16(Object value) { }
	// Offset : 0x4ca57c
	public Int32 ToInt32(Object value) { }
	// Offset : 0x4ca62c
	public Int64 ToInt64(Object value) { }
	// Offset : 0x4ca6dc
	public String ToString(Object value) { }
	// Offset : 0x4ca78c
	public UInt32 ToUInt32(Object value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public sealed class FormatterServices
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4ca83c
	public static Object[] GetObjectData(Object obj, MemberInfo[] members) { }
	// Offset : 0x4cab88
	public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context) { }
	// Offset : 0x4cadf4
	private static Void GetFields(Type reflectedType, Type type, ArrayList fields) { }
	// Offset : 0x4cb08c
	public static Object GetUninitializedObject(Type type) { }
	// Offset : 0x4cb188
	public static Object GetSafeUninitializedObject(Type type) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public interface IDeserializationCallback
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnDeserialization(Object sender) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public interface IFormatter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Object Deserialize(Stream serializationStream) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public interface IFormatterConverter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Object Convert(Object value, Type type) { }
	// Offset : 0x
	public abstract Boolean ToBoolean(Object value) { }
	// Offset : 0x
	public abstract Int16 ToInt16(Object value) { }
	// Offset : 0x
	public abstract Int32 ToInt32(Object value) { }
	// Offset : 0x
	public abstract Int64 ToInt64(Object value) { }
	// Offset : 0x
	public abstract String ToString(Object value) { }
	// Offset : 0x
	public abstract UInt32 ToUInt32(Object value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public interface IObjectReference
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Object GetRealObject(StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public interface ISerializationSurrogate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void GetObjectData(Object obj, SerializationInfo info, StreamingContext context) { }
	// Offset : 0x
	public abstract Object SetObjectData(Object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public interface ISurrogateSelector
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
[Serializable]
public class ObjectIDGenerator
{
	// Fields
	private Hashtable table; // 0x10
	private Int64 current; // 0x18
	private static InstanceComparer comparer; // 0x0

	// Properties
	internal Int64 NextId { get; }

	// Methods
	// Offset : 0x4dc7ac
	public Void .ctor() { }
	// Offset : 0x4e1708
	private static Void .cctor() { }
	// Offset : 0x4e177c
	public virtual Int64 GetId(Object obj, out Boolean firstTime) { }
	// Offset : 0x4dcd08
	internal Int64 get_NextId() { }
}

// Dll : mscorlib.dll
// Namespace: 
private class InstanceComparer : IComparer, IHashCodeProvider
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4e1774
	public Void .ctor() { }
	// Offset : 0x4e18f0
	private Int32 System.Collections.IComparer.Compare(Object o1, Object o2) { }
	// Offset : 0x4e1994
	private Int32 System.Collections.IHashCodeProvider.GetHashCode(Object o) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public class ObjectManager
{
	// Fields
	private ObjectRecord _objectRecordChain; // 0x10
	private ObjectRecord _lastObjectRecord; // 0x18
	private ArrayList _deserializedRecords; // 0x20
	private ArrayList _onDeserializedCallbackRecords; // 0x28
	private Hashtable _objectRecords; // 0x30
	private Boolean _finalFixup; // 0x38
	private ISurrogateSelector _selector; // 0x40
	private StreamingContext _context; // 0x48
	private Int32 _registeredObjectsCount; // 0x58

	// Properties

	// Methods
	// Offset : 0x4d8034
	public Void .ctor(ISurrogateSelector selector, StreamingContext context) { }
	// Offset : 0x4e19a0
	public virtual Void DoFixups() { }
	// Offset : 0x4e2d18
	internal ObjectRecord GetObjectRecord(Int64 objectID) { }
	// Offset : 0x4e2f90
	public virtual Object GetObject(Int64 objectID) { }
	// Offset : 0x4e3128
	public virtual Void RaiseDeserializationEvent() { }
	// Offset : 0x4dad4c
	public Void RaiseOnDeserializingEvent(Object obj) { }
	// Offset : 0x4e3448
	private Void RaiseOnDeserializedEvent(Object obj) { }
	// Offset : 0x4e361c
	private Void AddFixup(BaseFixupRecord record) { }
	// Offset : 0x4e36dc
	public virtual Void RecordArrayElementFixup(Int64 arrayToBeFixed, Int32 index, Int64 objectRequired) { }
	// Offset : 0x4e3808
	public virtual Void RecordArrayElementFixup(Int64 arrayToBeFixed, Int32[] indices, Int64 objectRequired) { }
	// Offset : 0x4e3964
	public virtual Void RecordDelayedFixup(Int64 objectToBeFixed, String memberName, Int64 objectRequired) { }
	// Offset : 0x4e3ac0
	public virtual Void RecordFixup(Int64 objectToBeFixed, MemberInfo member, Int64 objectRequired) { }
	// Offset : 0x4e3c1c
	private Void RegisterObjectInternal(Object obj, ObjectRecord record) { }
	// Offset : 0x4db254
	public Void RegisterObject(Object obj, Int64 objectID, SerializationInfo info, Int64 idOfContainingObj, MemberInfo member, Int32[] arrayIndex) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
internal abstract class BaseFixupRecord
{
	// Fields
	protected internal ObjectRecord ObjectToBeFixed; // 0x10
	protected internal ObjectRecord ObjectRequired; // 0x18
	public BaseFixupRecord NextSameContainer; // 0x20
	public BaseFixupRecord NextSameRequired; // 0x28

	// Properties

	// Methods
	// Offset : 0x4c9c24
	public Void .ctor(ObjectRecord objectToBeFixed, ObjectRecord objectRequired) { }
	// Offset : 0x4c9d70
	public Boolean DoFixup(ObjectManager manager, Boolean strict) { }
	// Offset : 0x
	protected abstract Void FixupImpl(ObjectManager manager) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
internal class ArrayFixupRecord : BaseFixupRecord
{
	// Fields
	private Int32 _index; // 0x30

	// Properties

	// Methods
	// Offset : 0x4c9be4
	public Void .ctor(ObjectRecord objectToBeFixed, Int32 index, ObjectRecord objectRequired) { }
	// Offset : 0x4c9c5c
	protected override Void FixupImpl(ObjectManager manager) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
internal class MultiArrayFixupRecord : BaseFixupRecord
{
	// Fields
	private Int32[] _indices; // 0x30

	// Properties

	// Methods
	// Offset : 0x4e1504
	public Void .ctor(ObjectRecord objectToBeFixed, Int32[] indices, ObjectRecord objectRequired) { }
	// Offset : 0x4e1544
	protected override Void FixupImpl(ObjectManager manager) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
internal class FixupRecord : BaseFixupRecord
{
	// Fields
	public MemberInfo _member; // 0x30

	// Properties

	// Methods
	// Offset : 0x4ca118
	public Void .ctor(ObjectRecord objectToBeFixed, MemberInfo member, ObjectRecord objectRequired) { }
	// Offset : 0x4ca158
	protected override Void FixupImpl(ObjectManager manager) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
internal class DelayedFixupRecord : BaseFixupRecord
{
	// Fields
	public String _memberName; // 0x30

	// Properties

	// Methods
	// Offset : 0x4c9fc4
	public Void .ctor(ObjectRecord objectToBeFixed, String memberName, ObjectRecord objectRequired) { }
	// Offset : 0x4ca004
	protected override Void FixupImpl(ObjectManager manager) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
internal enum ObjectRecordStatus
{
	// Fields
	public Byte value__; // 0x10
	public const ObjectRecordStatus Unregistered = 0; // 0x0
	public const ObjectRecordStatus ReferenceUnsolved = 1; // 0x0
	public const ObjectRecordStatus ReferenceSolvingDelayed = 2; // 0x0
	public const ObjectRecordStatus ReferenceSolved = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
internal class ObjectRecord
{
	// Fields
	public ObjectRecordStatus Status; // 0x10
	public Object OriginalObject; // 0x18
	public Object ObjectInstance; // 0x20
	public Int64 ObjectID; // 0x28
	public SerializationInfo Info; // 0x30
	public Int64 IdOfContainingObj; // 0x38
	public ISerializationSurrogate Surrogate; // 0x40
	public ISurrogateSelector SurrogateSelector; // 0x48
	public MemberInfo Member; // 0x50
	public Int32[] ArrayIndex; // 0x58
	public BaseFixupRecord FixupChainAsContainer; // 0x60
	public BaseFixupRecord FixupChainAsRequired; // 0x68
	public ObjectRecord Next; // 0x70

	// Properties
	public Boolean IsInstanceReady { get; }
	public Boolean IsUnsolvedObjectReference { get; }
	public Boolean IsRegistered { get; }
	public Boolean HasPendingFixups { get; }

	// Methods
	// Offset : 0x4e2f88
	public Void .ctor() { }
	// Offset : 0x4ca1b0
	public Void SetMemberValue(ObjectManager manager, MemberInfo member, Object value) { }
	// Offset : 0x4e1598
	public Void SetArrayValue(ObjectManager manager, Object value, Int32[] indices) { }
	// Offset : 0x4ca054
	public Void SetMemberValue(ObjectManager manager, String memberName, Object value) { }
	// Offset : 0x4c9f40
	public Boolean get_IsInstanceReady() { }
	// Offset : 0x4e1dc0
	public Boolean get_IsUnsolvedObjectReference() { }
	// Offset : 0x4c9f30
	public Boolean get_IsRegistered() { }
	// Offset : 0x4e1dd0
	public Boolean DoFixups(Boolean asContainer, ObjectManager manager, Boolean strict) { }
	// Offset : 0x4e4034
	public Void RemoveFixup(BaseFixupRecord fixupToRemove, Boolean asContainer) { }
	// Offset : 0x4e3fb4
	private Void UnchainFixup(BaseFixupRecord fixup, BaseFixupRecord prevFixup, Boolean asContainer) { }
	// Offset : 0x4e367c
	public Void ChainFixup(BaseFixupRecord fixup, Boolean asContainer) { }
	// Offset : 0x4e1f38
	public Boolean LoadData(ObjectManager manager, ISurrogateSelector selector, StreamingContext context) { }
	// Offset : 0x4e3fa4
	public Boolean get_HasPendingFixups() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public sealed class OnDeserializedAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public sealed class OnDeserializingAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public sealed class OnSerializedAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public sealed class OnSerializingAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
[Serializable]
public abstract class SerializationBinder
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4e40bc
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Type BindToType(String assemblyName, String typeName) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
internal sealed class SerializationCallbacks
{
	// Fields
	private readonly ArrayList onSerializingList; // 0x10
	private readonly ArrayList onSerializedList; // 0x18
	private readonly ArrayList onDeserializingList; // 0x20
	private readonly ArrayList onDeserializedList; // 0x28
	private static Hashtable cache; // 0x0
	private static Object cache_lock; // 0x8

	// Properties
	public Boolean HasSerializedCallbacks { get; }
	public Boolean HasDeserializedCallbacks { get; }

	// Methods
	// Offset : 0x4e40c4
	public Void .ctor(Type type) { }
	// Offset : 0x4e454c
	private static Void .cctor() { }
	// Offset : 0x4e45e0
	public Boolean get_HasSerializedCallbacks() { }
	// Offset : 0x4e2d08
	public Boolean get_HasDeserializedCallbacks() { }
	// Offset : 0x4e41f8
	private static ArrayList GetMethodsByAttribute(Type type, Type attr) { }
	// Offset : 0x4e45f0
	private static Void Invoke(ArrayList list, Object target, StreamingContext context) { }
	// Offset : 0x4e4d30
	public Void RaiseOnSerializing(Object target, StreamingContext contex) { }
	// Offset : 0x4e4dc0
	public Void RaiseOnSerialized(Object target, StreamingContext contex) { }
	// Offset : 0x4e34fc
	public Void RaiseOnDeserializing(Object target, StreamingContext contex) { }
	// Offset : 0x4e358c
	public Void RaiseOnDeserialized(Object target, StreamingContext contex) { }
	// Offset : 0x4e2940
	public static SerializationCallbacks GetSerializationCallbacks(Type t) { }
}

// Dll : mscorlib.dll
// Namespace: 
public sealed class CallbackHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4e4e50
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x4e4a54
	public virtual Void Invoke(StreamingContext context) { }
	// Offset : 0x4e4e60
	public virtual IAsyncResult BeginInvoke(StreamingContext context, AsyncCallback callback, Object object) { }
	// Offset : 0x4e4eec
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public struct SerializationEntry
{
	// Fields
	private String name; // 0x10
	private Type objectType; // 0x18
	private Object value; // 0x20

	// Properties
	public String Name { get; }
	public Type ObjectType { get; }
	public Object Value { get; }

	// Methods
	// Offset : 0x2cb378
	internal Void .ctor(String name, Type type, Object value) { }
	// Offset : 0x2cb384
	public String get_Name() { }
	// Offset : 0x2cb38c
	public Type get_ObjectType() { }
	// Offset : 0x2cb394
	public Object get_Value() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
[Serializable]
public class SerializationException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4e4f1c
	public Void .ctor() { }
	// Offset : 0x4c9fbc
	public Void .ctor(String message) { }
	// Offset : 0x4e4f70
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public sealed class SerializationInfo
{
	// Fields
	private Hashtable serialized; // 0x10
	private ArrayList values; // 0x18
	private String assemblyName; // 0x20
	private String fullTypeName; // 0x28
	private IFormatterConverter converter; // 0x30

	// Properties
	public String AssemblyName { get; }
	public String FullTypeName { get; }
	public Int32 MemberCount { get; }

	// Methods
	// Offset : 0x4dae00
	public Void .ctor(Type type, IFormatterConverter converter) { }
	// Offset : 0x4e0db4
	public String get_AssemblyName() { }
	// Offset : 0x4e0dbc
	public String get_FullTypeName() { }
	// Offset : 0x4e0bcc
	public Int32 get_MemberCount() { }
	// Offset : 0x4dc5a4
	public Void AddValue(String name, Object value, Type type) { }
	// Offset : 0x4e4f78
	public Object GetValue(String name, Type type) { }
	// Offset : 0x4e5244
	public Void SetType(Type type) { }
	// Offset : 0x4e0c1c
	public SerializationInfoEnumerator GetEnumerator() { }
	// Offset : 0x4e53d0
	public Void AddValue(String name, Int16 value) { }
	// Offset : 0x4e5494
	public Void AddValue(String name, Int32 value) { }
	// Offset : 0x4e5558
	public Void AddValue(String name, Boolean value) { }
	// Offset : 0x4e561c
	public Void AddValue(String name, DateTime value) { }
	// Offset : 0x4e56ec
	public Void AddValue(String name, Single value) { }
	// Offset : 0x4e57b0
	public Void AddValue(String name, UInt32 value) { }
	// Offset : 0x4e5874
	public Void AddValue(String name, Int64 value) { }
	// Offset : 0x4e5938
	public Void AddValue(String name, UInt64 value) { }
	// Offset : 0x4e59fc
	public Void AddValue(String name, Object value) { }
	// Offset : 0x4e5ab8
	public Boolean GetBoolean(String name) { }
	// Offset : 0x4e5bf8
	public Int16 GetInt16(String name) { }
	// Offset : 0x4e5d38
	public Int32 GetInt32(String name) { }
	// Offset : 0x4e5e78
	public Int64 GetInt64(String name) { }
	// Offset : 0x4e5fb8
	public String GetString(String name) { }
	// Offset : 0x4e610c
	public UInt32 GetUInt32(String name) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public sealed class SerializationInfoEnumerator : IEnumerator
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public SerializationEntry Current { get; }
	public String Name { get; }
	public Type ObjectType { get; }
	public Object Value { get; }

	// Methods
	// Offset : 0x4e536c
	internal Void .ctor(ArrayList list) { }
	// Offset : 0x4e624c
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x4e6334
	public SerializationEntry get_Current() { }
	// Offset : 0x4e0ca4
	public String get_Name() { }
	// Offset : 0x4e0c80
	public Type get_ObjectType() { }
	// Offset : 0x4e14d0
	public Object get_Value() { }
	// Offset : 0x4e0cc8
	public Boolean MoveNext() { }
	// Offset : 0x4e6444
	public Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
public sealed class SerializationObjectManager
{
	// Fields
	private readonly StreamingContext context; // 0x10
	private readonly Hashtable seen; // 0x20
	private CallbackHandler callbacks; // 0x28

	// Properties

	// Methods
	// Offset : 0x4dc858
	public Void .ctor(StreamingContext context) { }
	// Offset : 0x4de23c
	public Void RegisterObject(Object obj) { }
	// Offset : 0x4dcbac
	public Void RaiseOnSerializedEvent() { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class <RegisterObject>c__AnonStorey3
{
	// Fields
	internal SerializationCallbacks sc; // 0x10
	internal Object obj; // 0x18

	// Properties

	// Methods
	// Offset : 0x4e6530
	public Void .ctor() { }
	// Offset : 0x4e6538
	internal Void <>m__2(StreamingContext ctx) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
[Serializable]
public struct StreamingContext
{
	// Fields
	private StreamingContextStates state; // 0x10
	private Object additional; // 0x18

	// Properties
	public Object Context { get; }
	public StreamingContextStates State { get; }

	// Methods
	// Offset : 0x2cb40c
	public Void .ctor(StreamingContextStates state) { }
	// Offset : 0x2cb418
	public Void .ctor(StreamingContextStates state, Object additional) { }
	// Offset : 0x2cb424
	public Object get_Context() { }
	// Offset : 0x2cb42c
	public StreamingContextStates get_State() { }
	// Offset : 0x2cb434
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cb43c
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Serialization
[Serializable]
public enum StreamingContextStates
{
	// Fields
	public Int32 value__; // 0x10
	public const StreamingContextStates CrossProcess = 1; // 0x0
	public const StreamingContextStates CrossMachine = 2; // 0x0
	public const StreamingContextStates File = 4; // 0x0
	public const StreamingContextStates Persistence = 8; // 0x0
	public const StreamingContextStates Remoting = 16; // 0x0
	public const StreamingContextStates Other = 32; // 0x0
	public const StreamingContextStates Clone = 64; // 0x0
	public const StreamingContextStates CrossAppDomain = 128; // 0x0
	public const StreamingContextStates All = 255; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography.X509Certificates
[Serializable]
public class X509Certificate : ISerializable, IDeserializationCallback
{
	// Fields
	private X509Certificate x509; // 0x10
	private Boolean hideDates; // 0x18
	private Byte[] cachedCertificateHash; // 0x20
	private String issuer_name; // 0x28
	private String subject_name; // 0x30

	// Properties
	public String Issuer { get; }
	public String Subject { get; }

	// Methods
	// Offset : 0x6ec020
	internal Void .ctor(Byte[] data, Boolean dates) { }
	// Offset : 0x6ec09c
	public Void .ctor(Byte[] data) { }
	// Offset : 0x6ec0a4
	public Void .ctor() { }
	// Offset : 0x6ec0ac
	public Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6ec220
	private Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object sender) { }
	// Offset : 0x6ec224
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6ec2d0
	private String tostr(Byte[] data) { }
	// Offset : 0x6ec3e4
	public virtual Boolean Equals(X509Certificate other) { }
	// Offset : 0x6ec658
	public virtual Byte[] GetCertHash() { }
	// Offset : 0x6ec76c
	public virtual String GetCertHashString() { }
	// Offset : 0x6ec7b4
	public virtual String GetEffectiveDateString() { }
	// Offset : 0x6ec8bc
	public virtual String GetExpirationDateString() { }
	// Offset : 0x6ec9c4
	public override Int32 GetHashCode() { }
	// Offset : 0x6ecad8
	public virtual String GetIssuerName() { }
	// Offset : 0x6ecb9c
	public virtual String GetName() { }
	// Offset : 0x6ecc60
	public virtual Byte[] GetPublicKey() { }
	// Offset : 0x6ecd24
	public virtual Byte[] GetRawCertData() { }
	// Offset : 0x6ecde8
	public override String ToString() { }
	// Offset : 0x6ecdf0
	public virtual String ToString(Boolean fVerbose) { }
	// Offset : 0x6ed164
	public String get_Issuer() { }
	// Offset : 0x6ed060
	public String get_Subject() { }
	// Offset : 0x6ed268
	public override Boolean Equals(Object obj) { }
	// Offset : 0x6ed32c
	public virtual Void Import(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) { }
	// Offset : 0x6ed70c
	public virtual Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography.X509Certificates
[Serializable]
public enum X509KeyStorageFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const X509KeyStorageFlags DefaultKeySet = 0; // 0x0
	public const X509KeyStorageFlags UserKeySet = 1; // 0x0
	public const X509KeyStorageFlags MachineKeySet = 2; // 0x0
	public const X509KeyStorageFlags Exportable = 4; // 0x0
	public const X509KeyStorageFlags UserProtected = 8; // 0x0
	public const X509KeyStorageFlags PersistKeySet = 16; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class AsymmetricAlgorithm : IDisposable
{
	// Fields
	protected Int32 KeySizeValue; // 0x10
	protected KeySizes[] LegalKeySizesValue; // 0x18

	// Properties
	public virtual Int32 KeySize { get; set; }

	// Methods
	// Offset : 0x4e8684
	protected Void .ctor() { }
	// Offset : 0x4e868c
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x4e86dc
	public virtual Int32 get_KeySize() { }
	// Offset : 0x4e86e4
	public virtual Void set_KeySize(Int32 value) { }
	// Offset : 0x4e87a0
	public Void Clear() { }
	// Offset : 0x
	protected abstract Void Dispose(Boolean disposing) { }
	// Offset : 0x
	public abstract Void FromXmlString(String xmlString) { }
	// Offset : 0x
	public abstract String ToXmlString(Boolean includePrivateParameters) { }
	// Offset : 0x4e87e4
	internal static Byte[] GetNamedParam(String xml, String param) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class AsymmetricKeyExchangeFormatter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4e8994
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Byte[] CreateKeyExchange(Byte[] data) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class AsymmetricSignatureDeformatter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4e899c
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Void SetHashAlgorithm(String strName) { }
	// Offset : 0x
	public abstract Void SetKey(AsymmetricAlgorithm key) { }
	// Offset : 0x
	public abstract Boolean VerifySignature(Byte[] rgbHash, Byte[] rgbSignature) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class AsymmetricSignatureFormatter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4e89a4
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Void SetHashAlgorithm(String strName) { }
	// Offset : 0x
	public abstract Void SetKey(AsymmetricAlgorithm key) { }
	// Offset : 0x
	public abstract Byte[] CreateSignature(Byte[] rgbHash) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
internal static class Base64Constants
{
	// Fields
	public static readonly Byte[] EncodeTable; // 0x0
	public static readonly Byte[] DecodeTable; // 0x8

	// Properties

	// Methods
	// Offset : 0x4e89ac
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
[Serializable]
public enum CipherMode
{
	// Fields
	public Int32 value__; // 0x10
	public const CipherMode CBC = 1; // 0x0
	public const CipherMode ECB = 2; // 0x0
	public const CipherMode OFB = 3; // 0x0
	public const CipherMode CFB = 4; // 0x0
	public const CipherMode CTS = 5; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class CryptoConfig
{
	// Fields
	private static Object lockObject; // 0x0
	private static Hashtable algorithms; // 0x8
	private static Hashtable oid; // 0x10

	// Properties

	// Methods
	// Offset : 0x4e8a60
	private static Void .cctor() { }
	// Offset : 0x4e8acc
	private static Void Initialize() { }
	// Offset : 0x4ea814
	public static Object CreateFromName(String name) { }
	// Offset : 0x4ea87c
	public static Object CreateFromName(String name, Object[] args) { }
	// Offset : 0x4eab88
	public static String MapNameToOID(String name) { }
	// Offset : 0x4eada8
	public static Byte[] EncodeOID(String str) { }
	// Offset : 0x4eb278
	private static Byte[] EncodeLongNumber(Int64 x) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class CryptoStream : Stream
{
	// Fields
	private Stream _stream; // 0x10
	private ICryptoTransform _transform; // 0x18
	private CryptoStreamMode _mode; // 0x20
	private Byte[] _currentBlock; // 0x28
	private Boolean _disposed; // 0x30
	private Boolean _flushedFinalBlock; // 0x31
	private Int32 _partialCount; // 0x34
	private Boolean _endOfStream; // 0x38
	private Byte[] _waitingBlock; // 0x40
	private Int32 _waitingCount; // 0x48
	private Byte[] _transformedBlock; // 0x50
	private Int32 _transformedPos; // 0x58
	private Int32 _transformedCount; // 0x5c
	private Byte[] _workingBlock; // 0x60
	private Int32 _workingCount; // 0x68

	// Properties
	public override Boolean CanRead { get; }
	public override Boolean CanSeek { get; }
	public override Boolean CanWrite { get; }
	public override Int64 Length { get; }
	public override Int64 Position { get; set; }

	// Methods
	// Offset : 0x4eb420
	public Void .ctor(Stream stream, ICryptoTransform transform, CryptoStreamMode mode) { }
	// Offset : 0x4eb85c
	protected override Void Finalize() { }
	// Offset : 0x4eb8f8
	public override Boolean get_CanRead() { }
	// Offset : 0x4eb908
	public override Boolean get_CanSeek() { }
	// Offset : 0x4eb910
	public override Boolean get_CanWrite() { }
	// Offset : 0x4eb920
	public override Int64 get_Length() { }
	// Offset : 0x4eb994
	public override Int64 get_Position() { }
	// Offset : 0x4eba08
	public override Void set_Position(Int64 value) { }
	// Offset : 0x4eba7c
	public override Void Close() { }
	// Offset : 0x4ebd80
	public override Int32 Read([In] [Out] Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x4ec9f0
	public override Void Write(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x4ed4d0
	public override Void Flush() { }
	// Offset : 0x4ebaec
	public Void FlushFinalBlock() { }
	// Offset : 0x4ed520
	public override Int64 Seek(Int64 offset, SeekOrigin origin) { }
	// Offset : 0x4ed594
	public override Void SetLength(Int64 value) { }
	// Offset : 0x4ed608
	protected override Void Dispose(Boolean disposing) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
[Serializable]
public enum CryptoStreamMode
{
	// Fields
	public Int32 value__; // 0x10
	public const CryptoStreamMode Read = 0; // 0x0
	public const CryptoStreamMode Write = 1; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
[Serializable]
public class CryptographicException : SystemException, _Exception
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3d210c
	public Void .ctor() { }
	// Offset : 0x3d2180
	public Void .ctor(String message) { }
	// Offset : 0x3d21b4
	public Void .ctor(String message, Exception inner) { }
	// Offset : 0x3d21e8
	public Void .ctor(String format, String insert) { }
	// Offset : 0x3d2288
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
[Serializable]
public class CryptographicUnexpectedOperationException : CryptographicException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3d2290
	public Void .ctor() { }
	// Offset : 0x3d231c
	public Void .ctor(String message) { }
	// Offset : 0x3d2368
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class CspParameters
{
	// Fields
	private CspProviderFlags _Flags; // 0x10
	public String KeyContainerName; // 0x18
	public Int32 KeyNumber; // 0x20
	public String ProviderName; // 0x28
	public Int32 ProviderType; // 0x30

	// Properties
	public CspProviderFlags Flags { get; set; }

	// Methods
	// Offset : 0x3d2370
	public Void .ctor() { }
	// Offset : 0x3d23ac
	public Void .ctor(Int32 dwTypeIn) { }
	// Offset : 0x3d23e8
	public Void .ctor(Int32 dwTypeIn, String strProviderNameIn) { }
	// Offset : 0x3d2424
	public Void .ctor(Int32 dwTypeIn, String strProviderNameIn, String strContainerNameIn) { }
	// Offset : 0x3d2470
	public CspProviderFlags get_Flags() { }
	// Offset : 0x3d2478
	public Void set_Flags(CspProviderFlags value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
[Serializable]
public enum CspProviderFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const CspProviderFlags UseMachineKeyStore = 1; // 0x0
	public const CspProviderFlags UseDefaultKeyContainer = 2; // 0x0
	public const CspProviderFlags UseExistingKey = 8; // 0x0
	public const CspProviderFlags NoFlags = 0; // 0x0
	public const CspProviderFlags NoPrompt = 64; // 0x0
	public const CspProviderFlags UseArchivableKey = 16; // 0x0
	public const CspProviderFlags UseNonExportableKey = 4; // 0x0
	public const CspProviderFlags UseUserProtectedKey = 32; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class DES : SymmetricAlgorithm
{
	// Fields
	internal static readonly Byte[,] weakKeys; // 0x0
	internal static readonly Byte[,] semiWeakKeys; // 0x8

	// Properties
	public override Byte[] Key { get; set; }

	// Methods
	// Offset : 0x3d2480
	protected Void .ctor() { }
	// Offset : 0x3d2658
	private static Void .cctor() { }
	// Offset : 0x3d273c
	public static DES Create() { }
	// Offset : 0x3d27a4
	public static DES Create(String algName) { }
	// Offset : 0x3d2898
	public static Boolean IsWeakKey(Byte[] rgbKey) { }
	// Offset : 0x3d2b14
	public static Boolean IsSemiWeakKey(Byte[] rgbKey) { }
	// Offset : 0x3d2d90
	public override Byte[] get_Key() { }
	// Offset : 0x3d2e9c
	public override Void set_Key(Byte[] value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
internal class DESTransform : SymmetricTransform
{
	// Fields
	internal static readonly Int32 KEY_BIT_SIZE; // 0x0
	internal static readonly Int32 KEY_BYTE_SIZE; // 0x4
	internal static readonly Int32 BLOCK_BIT_SIZE; // 0x8
	internal static readonly Int32 BLOCK_BYTE_SIZE; // 0xc
	private Byte[] keySchedule; // 0x58
	private Byte[] byteBuff; // 0x60
	private UInt32[] dwordBuff; // 0x68
	private static readonly UInt32[] spBoxes; // 0x10
	private static readonly Byte[] PC1; // 0x18
	private static readonly Byte[] leftRotTotal; // 0x20
	private static readonly Byte[] PC2; // 0x28
	internal static readonly UInt32[] ipTab; // 0x30
	internal static readonly UInt32[] fpTab; // 0x38

	// Properties

	// Methods
	// Offset : 0x3d3184
	internal Void .ctor(SymmetricAlgorithm symmAlgo, Boolean encryption, Byte[] key, Byte[] iv) { }
	// Offset : 0x3d3b9c
	private static Void .cctor() { }
	// Offset : 0x3d3d70
	private UInt32 CipherFunct(UInt32 r, Int32 n) { }
	// Offset : 0x3d41d8
	internal static Void Permutation(Byte[] input, Byte[] output, UInt32[] permTab, Boolean preSwap) { }
	// Offset : 0x3d4788
	private static Void BSwap(Byte[] byteBuff) { }
	// Offset : 0x3d3638
	internal Void SetKey(Byte[] key) { }
	// Offset : 0x3d49ac
	public Void ProcessBlock(Byte[] input, Byte[] output) { }
	// Offset : 0x3d4dd0
	protected override Void ECB(Byte[] input, Byte[] output) { }
	// Offset : 0x3d3564
	internal static Byte[] GetStrongKey() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class DESCryptoServiceProvider : DES
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3d30a4
	public Void .ctor() { }
	// Offset : 0x3d3108
	public override ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV) { }
	// Offset : 0x3d3408
	public override ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV) { }
	// Offset : 0x3d3484
	public override Void GenerateIV() { }
	// Offset : 0x3d34fc
	public override Void GenerateKey() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class DSA : AsymmetricAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3d4e84
	protected Void .ctor() { }
	// Offset : 0x3d4e8c
	public static DSA Create() { }
	// Offset : 0x3d4ed4
	public static DSA Create(String algName) { }
	// Offset : 0x
	public abstract Byte[] CreateSignature(Byte[] rgbHash) { }
	// Offset : 0x
	public abstract DSAParameters ExportParameters(Boolean includePrivateParameters) { }
	// Offset : 0x3d4fc8
	internal Void ZeroizePrivateKey(DSAParameters parameters) { }
	// Offset : 0x3d4fe4
	public override Void FromXmlString(String xmlString) { }
	// Offset : 0x
	public abstract Void ImportParameters(DSAParameters parameters) { }
	// Offset : 0x3d538c
	public override String ToXmlString(Boolean includePrivateParameters) { }
	// Offset : 0x
	public abstract Boolean VerifySignature(Byte[] rgbHash, Byte[] rgbSignature) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class DSACryptoServiceProvider : DSA, ICspAsymmetricAlgorithm
{
	// Fields
	private KeyPairPersistence store; // 0x20
	private Boolean persistKey; // 0x28
	private Boolean persisted; // 0x29
	private Boolean privateKeyExportable; // 0x2a
	private Boolean m_disposed; // 0x2b
	private DSAManaged dsa; // 0x30
	private static Boolean useMachineKeyStore; // 0x0

	// Properties
	public override Int32 KeySize { get; }
	public Boolean PublicOnly { get; }

	// Methods
	// Offset : 0x3d5b70
	public Void .ctor() { }
	// Offset : 0x3d5ea8
	public Void .ctor(Int32 dwKeySize) { }
	// Offset : 0x3d5b7c
	public Void .ctor(Int32 dwKeySize, CspParameters parameters) { }
	// Offset : 0x3d5eb0
	private static Void .cctor() { }
	// Offset : 0x3d5eb4
	protected override Void Finalize() { }
	// Offset : 0x3d5f94
	public override Int32 get_KeySize() { }
	// Offset : 0x3d5fe0
	public Boolean get_PublicOnly() { }
	// Offset : 0x3d6010
	public override DSAParameters ExportParameters(Boolean includePrivateParameters) { }
	// Offset : 0x3d60fc
	public override Void ImportParameters(DSAParameters parameters) { }
	// Offset : 0x3d619c
	public override Byte[] CreateSignature(Byte[] rgbHash) { }
	// Offset : 0x3d61f0
	public override Boolean VerifySignature(Byte[] rgbHash, Byte[] rgbSignature) { }
	// Offset : 0x3d5f2c
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x3d6254
	private Void OnKeyGenerated(Object sender, EventArgs e) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
[Serializable]
public struct DSAParameters
{
	// Fields
	public Int32 Counter; // 0x10
	public Byte[] G; // 0x18
	public Byte[] J; // 0x20
	public Byte[] P; // 0x28
	public Byte[] Q; // 0x30
	public Byte[] Seed; // 0x38
	public Byte[] X; // 0x40
	public Byte[] Y; // 0x48

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class DSASignatureDeformatter : AsymmetricSignatureDeformatter
{
	// Fields
	private DSA dsa; // 0x10

	// Properties

	// Methods
	// Offset : 0x3d6320
	public Void .ctor() { }
	// Offset : 0x3d6328
	public Void .ctor(AsymmetricAlgorithm key) { }
	// Offset : 0x3d6378
	public override Void SetHashAlgorithm(String strName) { }
	// Offset : 0x3d64c0
	public override Void SetKey(AsymmetricAlgorithm key) { }
	// Offset : 0x3d65d4
	public override Boolean VerifySignature(Byte[] rgbHash, Byte[] rgbSignature) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class DSASignatureFormatter : AsymmetricSignatureFormatter
{
	// Fields
	private DSA dsa; // 0x10

	// Properties

	// Methods
	// Offset : 0x3d6754
	public Void .ctor() { }
	// Offset : 0x3d675c
	public override Byte[] CreateSignature(Byte[] rgbHash) { }
	// Offset : 0x3d682c
	public override Void SetHashAlgorithm(String strName) { }
	// Offset : 0x3d6974
	public override Void SetKey(AsymmetricAlgorithm key) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class HMAC : KeyedHashAlgorithm
{
	// Fields
	private Boolean _disposed; // 0x30
	private String _hashName; // 0x38
	private HashAlgorithm _algo; // 0x40
	private BlockProcessor _block; // 0x48
	private Int32 _blockSizeValue; // 0x50

	// Properties
	protected Int32 BlockSizeValue { get; set; }
	public String HashName { set; }
	public override Byte[] Key { get; set; }
	internal BlockProcessor Block { get; }

	// Methods
	// Offset : 0x3d6a88
	protected Void .ctor() { }
	// Offset : 0x3d6ae4
	protected Int32 get_BlockSizeValue() { }
	// Offset : 0x3d6aec
	protected Void set_BlockSizeValue(Int32 value) { }
	// Offset : 0x3d6af4
	public Void set_HashName(String value) { }
	// Offset : 0x3d6c14
	public override Byte[] get_Key() { }
	// Offset : 0x3d6dc8
	public override Void set_Key(Byte[] value) { }
	// Offset : 0x3d70e0
	internal BlockProcessor get_Block() { }
	// Offset : 0x3d7164
	private Byte[] KeySetup(Byte[] key, Byte padding) { }
	// Offset : 0x3d72c4
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x3d7344
	protected override Void HashCore(Byte[] rgb, Int32 ib, Int32 cb) { }
	// Offset : 0x3d7450
	protected override Byte[] HashFinal() { }
	// Offset : 0x3d7b20
	public override Void Initialize() { }
	// Offset : 0x3d7c94
	public static HMAC Create() { }
	// Offset : 0x3d7cdc
	public static HMAC Create(String algorithmName) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class HMACMD5 : HMAC
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3d7dd0
	public Void .ctor() { }
	// Offset : 0x3d7e00
	public Void .ctor(Byte[] key) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class HMACRIPEMD160 : HMAC
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3d7eb8
	public Void .ctor() { }
	// Offset : 0x3d7ee8
	public Void .ctor(Byte[] key) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class HMACSHA1 : HMAC
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3d7fa0
	public Void .ctor() { }
	// Offset : 0x3d7fd0
	public Void .ctor(Byte[] key) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class HMACSHA256 : HMAC
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3d8088
	public Void .ctor() { }
	// Offset : 0x3d80b8
	public Void .ctor(Byte[] key) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class HMACSHA384 : HMAC
{
	// Fields
	private static Boolean legacy_mode; // 0x0
	private Boolean legacy; // 0x54

	// Properties
	public Boolean ProduceLegacyHmacValues { set; }

	// Methods
	// Offset : 0x3d8170
	public Void .ctor() { }
	// Offset : 0x3d8218
	public Void .ctor(Byte[] key) { }
	// Offset : 0x3d8350
	private static Void .cctor() { }
	// Offset : 0x3d8310
	public Void set_ProduceLegacyHmacValues(Boolean value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class HMACSHA512 : HMAC
{
	// Fields
	private static Boolean legacy_mode; // 0x0
	private Boolean legacy; // 0x54

	// Properties
	public Boolean ProduceLegacyHmacValues { set; }

	// Methods
	// Offset : 0x3d83f8
	public Void .ctor() { }
	// Offset : 0x3d84a0
	public Void .ctor(Byte[] key) { }
	// Offset : 0x3d85d8
	private static Void .cctor() { }
	// Offset : 0x3d8598
	public Void set_ProduceLegacyHmacValues(Boolean value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class HashAlgorithm : IDisposable, ICryptoTransform
{
	// Fields
	protected internal Byte[] HashValue; // 0x10
	protected Int32 HashSizeValue; // 0x18
	protected Int32 State; // 0x1c
	private Boolean disposed; // 0x20

	// Properties
	public virtual Boolean CanTransformMultipleBlocks { get; }
	public virtual Boolean CanReuseTransform { get; }
	public virtual Byte[] Hash { get; }
	public virtual Int32 HashSize { get; }
	public virtual Int32 InputBlockSize { get; }
	public virtual Int32 OutputBlockSize { get; }

	// Methods
	// Offset : 0x3d8680
	protected Void .ctor() { }
	// Offset : 0x3d86a8
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x3d86fc
	public virtual Boolean get_CanTransformMultipleBlocks() { }
	// Offset : 0x3d8704
	public virtual Boolean get_CanReuseTransform() { }
	// Offset : 0x3d870c
	public Void Clear() { }
	// Offset : 0x3d6eec
	public Byte[] ComputeHash(Byte[] buffer) { }
	// Offset : 0x3d8754
	public Byte[] ComputeHash(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x3d89a8
	public Byte[] ComputeHash(Stream inputStream) { }
	// Offset : 0x3d6b20
	public static HashAlgorithm Create(String hashName) { }
	// Offset : 0x3d8b48
	public virtual Byte[] get_Hash() { }
	// Offset : 0x
	protected abstract Void HashCore(Byte[] array, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x
	protected abstract Byte[] HashFinal() { }
	// Offset : 0x3d8be4
	public virtual Int32 get_HashSize() { }
	// Offset : 0x
	public abstract Void Initialize() { }
	// Offset : 0x3d8bec
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x3d8bf8
	public virtual Int32 get_InputBlockSize() { }
	// Offset : 0x3d8c00
	public virtual Int32 get_OutputBlockSize() { }
	// Offset : 0x3d76e0
	public Int32 TransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x3d7914
	public Byte[] TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public interface ICryptoTransform : IDisposable
{
	// Fields

	// Properties
	public abstract Boolean CanReuseTransform { get; }
	public abstract Boolean CanTransformMultipleBlocks { get; }
	public abstract Int32 InputBlockSize { get; }
	public abstract Int32 OutputBlockSize { get; }

	// Methods
	// Offset : 0x
	public abstract Boolean get_CanReuseTransform() { }
	// Offset : 0x
	public abstract Boolean get_CanTransformMultipleBlocks() { }
	// Offset : 0x
	public abstract Int32 get_InputBlockSize() { }
	// Offset : 0x
	public abstract Int32 get_OutputBlockSize() { }
	// Offset : 0x
	public abstract Int32 TransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x
	public abstract Byte[] TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public interface ICspAsymmetricAlgorithm
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class KeySizes
{
	// Fields
	private Int32 _maxSize; // 0x10
	private Int32 _minSize; // 0x14
	private Int32 _skipSize; // 0x18

	// Properties
	public Int32 MaxSize { get; }
	public Int32 MinSize { get; }
	public Int32 SkipSize { get; }

	// Methods
	// Offset : 0x3d2618
	public Void .ctor(Int32 minSize, Int32 maxSize, Int32 skipSize) { }
	// Offset : 0x3d8c08
	public Int32 get_MaxSize() { }
	// Offset : 0x3d8c10
	public Int32 get_MinSize() { }
	// Offset : 0x3d8c18
	public Int32 get_SkipSize() { }
	// Offset : 0x3d8c20
	internal Boolean IsLegal(Int32 keySize) { }
	// Offset : 0x3d8c70
	internal static Boolean IsLegalKeySize(KeySizes[] legalKeys, Int32 size) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class KeyedHashAlgorithm : HashAlgorithm
{
	// Fields
	protected Byte[] KeyValue; // 0x28

	// Properties
	public virtual Byte[] Key { get; set; }

	// Methods
	// Offset : 0x3d6abc
	protected Void .ctor() { }
	// Offset : 0x3d8d34
	protected override Void Finalize() { }
	// Offset : 0x3d6cf0
	public virtual Byte[] get_Key() { }
	// Offset : 0x3d6f90
	public virtual Void set_Key(Byte[] value) { }
	// Offset : 0x3d7308
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x3d8dd4
	private Void ZeroizeKey() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class MACTripleDES : KeyedHashAlgorithm
{
	// Fields
	private TripleDES tdes; // 0x30
	private MACAlgorithm mac; // 0x38
	private Boolean m_disposed; // 0x40

	// Properties

	// Methods
	// Offset : 0x3d8df0
	public Void .ctor() { }
	// Offset : 0x3d8e54
	private Void Setup(String strTripleDES, Byte[] rgbKey) { }
	// Offset : 0x3d9008
	protected override Void Finalize() { }
	// Offset : 0x3d90a0
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x3d912c
	public override Void Initialize() { }
	// Offset : 0x3d91e4
	protected override Void HashCore(Byte[] rgbData, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x3d92ec
	protected override Byte[] HashFinal() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class MD5 : HashAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3d9394
	protected Void .ctor() { }
	// Offset : 0x3d93c4
	public static MD5 Create() { }
	// Offset : 0x3d940c
	public static MD5 Create(String algName) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class MD5CryptoServiceProvider : MD5
{
	// Fields
	private UInt32[] _H; // 0x28
	private UInt32[] buff; // 0x30
	private UInt64 count; // 0x38
	private Byte[] _ProcessingBuffer; // 0x40
	private Int32 _ProcessingBufferCount; // 0x48
	private static readonly UInt32[] K; // 0x0

	// Properties

	// Methods
	// Offset : 0x3d9500
	public Void .ctor() { }
	// Offset : 0x3d969c
	private static Void .cctor() { }
	// Offset : 0x3d9718
	protected override Void Finalize() { }
	// Offset : 0x3d9728
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x3d97a4
	protected override Void HashCore(Byte[] rgb, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x3dbd60
	protected override Byte[] HashFinal() { }
	// Offset : 0x3d959c
	public override Void Initialize() { }
	// Offset : 0x3d98b0
	private Void ProcessBlock(Byte[] inputBuffer, Int32 inputOffset) { }
	// Offset : 0x3dbe84
	private Void ProcessFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x3dc0ac
	internal Void AddLength(UInt64 length, Byte[] buffer, Int32 position) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
[Serializable]
public enum PaddingMode
{
	// Fields
	public Int32 value__; // 0x10
	public const PaddingMode None = 1; // 0x0
	public const PaddingMode PKCS7 = 2; // 0x0
	public const PaddingMode Zeros = 3; // 0x0
	public const PaddingMode ANSIX923 = 4; // 0x0
	public const PaddingMode ISO10126 = 5; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class RC2 : SymmetricAlgorithm
{
	// Fields
	protected Int32 EffectiveKeySizeValue; // 0x50

	// Properties
	public virtual Int32 EffectiveKeySize { get; }
	public override Int32 KeySize { get; set; }

	// Methods
	// Offset : 0x3dc264
	protected Void .ctor() { }
	// Offset : 0x3dc404
	public static RC2 Create() { }
	// Offset : 0x3dc44c
	public static RC2 Create(String AlgName) { }
	// Offset : 0x3dc540
	public virtual Int32 get_EffectiveKeySize() { }
	// Offset : 0x3dc558
	public override Int32 get_KeySize() { }
	// Offset : 0x3dc560
	public override Void set_KeySize(Int32 value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class RC2CryptoServiceProvider : RC2
{
	// Fields

	// Properties
	public override Int32 EffectiveKeySize { get; }

	// Methods
	// Offset : 0x3dc58c
	public Void .ctor() { }
	// Offset : 0x3dc590
	public override Int32 get_EffectiveKeySize() { }
	// Offset : 0x3dc5a8
	public override ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV) { }
	// Offset : 0x3dcdfc
	public override ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV) { }
	// Offset : 0x3dce78
	public override Void GenerateIV() { }
	// Offset : 0x3dcea8
	public override Void GenerateKey() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
internal class RC2Transform : SymmetricTransform
{
	// Fields
	private UInt16 R0; // 0x58
	private UInt16 R1; // 0x5a
	private UInt16 R2; // 0x5c
	private UInt16 R3; // 0x5e
	private UInt16[] K; // 0x60
	private Int32 j; // 0x68
	private static readonly Byte[] pitable; // 0x0

	// Properties

	// Methods
	// Offset : 0x3dc624
	public Void .ctor(RC2 rc2Algo, Boolean encryption, Byte[] key, Byte[] iv) { }
	// Offset : 0x3dced8
	private static Void .cctor() { }
	// Offset : 0x3dcf54
	protected override Void ECB(Byte[] input, Byte[] output) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class RIPEMD160 : HashAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3de198
	protected Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class RIPEMD160Managed : RIPEMD160
{
	// Fields
	private Byte[] _ProcessingBuffer; // 0x28
	private UInt32[] _X; // 0x30
	private UInt32[] _HashValue; // 0x38
	private UInt64 _Length; // 0x40
	private Int32 _ProcessingBufferCount; // 0x48

	// Properties

	// Methods
	// Offset : 0x3de1c8
	public Void .ctor() { }
	// Offset : 0x3de28c
	public override Void Initialize() { }
	// Offset : 0x3de408
	protected override Void HashCore(Byte[] rgb, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x3de70c
	protected override Byte[] HashFinal() { }
	// Offset : 0x3dea68
	protected override Void Finalize() { }
	// Offset : 0x3de520
	private Void ProcessBlock(Byte[] buffer, Int32 offset) { }
	// Offset : 0x3deb08
	private Void Compress() { }
	// Offset : 0x3de87c
	private Void CompressFinal(UInt64 length) { }
	// Offset : 0x3e2f54
	private UInt32 ROL(UInt32 x, Int32 n) { }
	// Offset : 0x3e2f64
	private UInt32 F(UInt32 x, UInt32 y, UInt32 z) { }
	// Offset : 0x3e2f70
	private UInt32 G(UInt32 x, UInt32 y, UInt32 z) { }
	// Offset : 0x3e2f80
	private UInt32 H(UInt32 x, UInt32 y, UInt32 z) { }
	// Offset : 0x3e2f8c
	private UInt32 I(UInt32 x, UInt32 y, UInt32 z) { }
	// Offset : 0x3e2f9c
	private UInt32 J(UInt32 x, UInt32 y, UInt32 z) { }
	// Offset : 0x3e2c8c
	private Void FF(ref UInt32 a, UInt32 b, ref UInt32 c, UInt32 d, UInt32 e, UInt32 x, Int32 s) { }
	// Offset : 0x3e2cc8
	private Void GG(ref UInt32 a, UInt32 b, ref UInt32 c, UInt32 d, UInt32 e, UInt32 x, Int32 s) { }
	// Offset : 0x3e2d14
	private Void HH(ref UInt32 a, UInt32 b, ref UInt32 c, UInt32 d, UInt32 e, UInt32 x, Int32 s) { }
	// Offset : 0x3e2d5c
	private Void II(ref UInt32 a, UInt32 b, ref UInt32 c, UInt32 d, UInt32 e, UInt32 x, Int32 s) { }
	// Offset : 0x3e2da8
	private Void JJ(ref UInt32 a, UInt32 b, ref UInt32 c, UInt32 d, UInt32 e, UInt32 x, Int32 s) { }
	// Offset : 0x3e2f18
	private Void FFF(ref UInt32 a, UInt32 b, ref UInt32 c, UInt32 d, UInt32 e, UInt32 x, Int32 s) { }
	// Offset : 0x3e2ecc
	private Void GGG(ref UInt32 a, UInt32 b, ref UInt32 c, UInt32 d, UInt32 e, UInt32 x, Int32 s) { }
	// Offset : 0x3e2e84
	private Void HHH(ref UInt32 a, UInt32 b, ref UInt32 c, UInt32 d, UInt32 e, UInt32 x, Int32 s) { }
	// Offset : 0x3e2e38
	private Void III(ref UInt32 a, UInt32 b, ref UInt32 c, UInt32 d, UInt32 e, UInt32 x, Int32 s) { }
	// Offset : 0x3e2df0
	private Void JJJ(ref UInt32 a, UInt32 b, ref UInt32 c, UInt32 d, UInt32 e, UInt32 x, Int32 s) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class RNGCryptoServiceProvider : RandomNumberGenerator
{
	// Fields
	private static Object _lock; // 0x0
	private IntPtr _handle; // 0x10

	// Properties

	// Methods
	// Offset : 0x3e2fa8
	public Void .ctor() { }
	// Offset : 0x3e30d8
	private static Void .cctor() { }
	// Offset : 0x3e3030
	private Void Check() { }
	// Offset : 0x3e314c
	private static Boolean RngOpen() { }
	// Offset : 0x3e302c
	private static IntPtr RngInitialize(Byte[] seed) { }
	// Offset : 0x3e3150
	private static IntPtr RngGetBytes(IntPtr handle, Byte[] data) { }
	// Offset : 0x3e3154
	private static Void RngClose(IntPtr handle) { }
	// Offset : 0x3e3158
	public override Void GetBytes(Byte[] data) { }
	// Offset : 0x3e32ec
	public override Void GetNonZeroBytes(Byte[] data) { }
	// Offset : 0x3e34a8
	protected override Void Finalize() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class RSA : AsymmetricAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3e3584
	protected Void .ctor() { }
	// Offset : 0x3e358c
	public static RSA Create() { }
	// Offset : 0x3e35d4
	public static RSA Create(String algName) { }
	// Offset : 0x
	public abstract Byte[] EncryptValue(Byte[] rgb) { }
	// Offset : 0x
	public abstract Byte[] DecryptValue(Byte[] rgb) { }
	// Offset : 0x
	public abstract RSAParameters ExportParameters(Boolean includePrivateParameters) { }
	// Offset : 0x
	public abstract Void ImportParameters(RSAParameters parameters) { }
	// Offset : 0x3e36c8
	internal Void ZeroizePrivateKey(RSAParameters parameters) { }
	// Offset : 0x3e377c
	public override Void FromXmlString(String xmlString) { }
	// Offset : 0x3e3be4
	public override String ToXmlString(Boolean includePrivateParameters) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class RSACryptoServiceProvider : RSA, ICspAsymmetricAlgorithm
{
	// Fields
	private KeyPairPersistence store; // 0x20
	private Boolean persistKey; // 0x28
	private Boolean persisted; // 0x29
	private Boolean privateKeyExportable; // 0x2a
	private Boolean m_disposed; // 0x2b
	private RSAManaged rsa; // 0x30
	private static Boolean useMachineKeyStore; // 0x0

	// Properties
	public override Int32 KeySize { get; }
	public Boolean PublicOnly { get; }

	// Methods
	// Offset : 0x3e4314
	public Void .ctor() { }
	// Offset : 0x3e4658
	public Void .ctor(CspParameters parameters) { }
	// Offset : 0x3e4694
	public Void .ctor(Int32 dwKeySize) { }
	// Offset : 0x3e46d0
	private static Void .cctor() { }
	// Offset : 0x3e434c
	private Void Common(Int32 dwKeySize, CspParameters p) { }
	// Offset : 0x3e4728
	protected override Void Finalize() { }
	// Offset : 0x3e46d4
	public override Int32 get_KeySize() { }
	// Offset : 0x3e4808
	public Boolean get_PublicOnly() { }
	// Offset : 0x3e4838
	public override Byte[] DecryptValue(Byte[] rgb) { }
	// Offset : 0x3e491c
	public override Byte[] EncryptValue(Byte[] rgb) { }
	// Offset : 0x3e4970
	public override RSAParameters ExportParameters(Boolean includePrivateParameters) { }
	// Offset : 0x3e4a48
	public override Void ImportParameters(RSAParameters parameters) { }
	// Offset : 0x3e47a0
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x3e4ae8
	private Void OnKeyGenerated(Object sender, EventArgs e) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class RSAPKCS1KeyExchangeFormatter : AsymmetricKeyExchangeFormatter
{
	// Fields
	private RSA rsa; // 0x10
	private RandomNumberGenerator random; // 0x18

	// Properties

	// Methods
	// Offset : 0x3e4bb4
	public Void .ctor(AsymmetricAlgorithm key) { }
	// Offset : 0x3e4cf8
	public override Byte[] CreateKeyExchange(Byte[] rgbData) { }
	// Offset : 0x3e4be4
	private Void SetRSAKey(AsymmetricAlgorithm key) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter
{
	// Fields
	private RSA rsa; // 0x10
	private String hashName; // 0x18

	// Properties

	// Methods
	// Offset : 0x3e4f14
	public Void .ctor() { }
	// Offset : 0x3e4f1c
	public Void .ctor(AsymmetricAlgorithm key) { }
	// Offset : 0x3e4f6c
	public override Void SetHashAlgorithm(String strName) { }
	// Offset : 0x3e5004
	public override Void SetKey(AsymmetricAlgorithm key) { }
	// Offset : 0x3e5118
	public override Boolean VerifySignature(Byte[] rgbHash, Byte[] rgbSignature) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class RSAPKCS1SignatureFormatter : AsymmetricSignatureFormatter
{
	// Fields
	private RSA rsa; // 0x10
	private HashAlgorithm hash; // 0x18

	// Properties

	// Methods
	// Offset : 0x3e5274
	public Void .ctor() { }
	// Offset : 0x3e527c
	public override Byte[] CreateSignature(Byte[] rgbHash) { }
	// Offset : 0x3e53a4
	public override Void SetHashAlgorithm(String strName) { }
	// Offset : 0x3e53cc
	public override Void SetKey(AsymmetricAlgorithm key) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
[Serializable]
public struct RSAParameters
{
	// Fields
	public Byte[] P; // 0x10
	public Byte[] Q; // 0x18
	public Byte[] D; // 0x20
	public Byte[] DP; // 0x28
	public Byte[] DQ; // 0x30
	public Byte[] InverseQ; // 0x38
	public Byte[] Modulus; // 0x40
	public Byte[] Exponent; // 0x48

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class RandomNumberGenerator
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3e3024
	protected Void .ctor() { }
	// Offset : 0x3e4e24
	public static RandomNumberGenerator Create() { }
	// Offset : 0x3e54e0
	public static RandomNumberGenerator Create(String rngName) { }
	// Offset : 0x
	public abstract Void GetBytes(Byte[] data) { }
	// Offset : 0x
	public abstract Void GetNonZeroBytes(Byte[] data) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class Rijndael : SymmetricAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3e55d4
	protected Void .ctor() { }
	// Offset : 0x3e577c
	public static Rijndael Create() { }
	// Offset : 0x3e57c4
	public static Rijndael Create(String algName) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class RijndaelManaged : Rijndael
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3e58b8
	public Void .ctor() { }
	// Offset : 0x3e58bc
	public override Void GenerateIV() { }
	// Offset : 0x3e58ec
	public override Void GenerateKey() { }
	// Offset : 0x3e591c
	public override ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV) { }
	// Offset : 0x3e5a68
	public override ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
internal class RijndaelTransform : SymmetricTransform
{
	// Fields
	private UInt32[] expandedKey; // 0x58
	private Int32 Nb; // 0x60
	private Int32 Nk; // 0x64
	private Int32 Nr; // 0x68
	private static readonly UInt32[] Rcon; // 0x0
	private static readonly Byte[] SBox; // 0x8
	private static readonly Byte[] iSBox; // 0x10
	private static readonly UInt32[] T0; // 0x18
	private static readonly UInt32[] T1; // 0x20
	private static readonly UInt32[] T2; // 0x28
	private static readonly UInt32[] T3; // 0x30
	private static readonly UInt32[] iT0; // 0x38
	private static readonly UInt32[] iT1; // 0x40
	private static readonly UInt32[] iT2; // 0x48
	private static readonly UInt32[] iT3; // 0x50

	// Properties

	// Methods
	// Offset : 0x3e5ae4
	public Void .ctor(Rijndael algo, Boolean encryption, Byte[] key, Byte[] iv) { }
	// Offset : 0x3e6a1c
	private static Void .cctor() { }
	// Offset : 0x3e662c
	public Void Clear() { }
	// Offset : 0x3e6c88
	protected override Void ECB(Byte[] input, Byte[] output) { }
	// Offset : 0x3e68a0
	private UInt32 SubByte(UInt32 a) { }
	// Offset : 0x3e6cf4
	private Void Encrypt128(Byte[] indata, Byte[] outdata, UInt32[] ekey) { }
	// Offset : 0x3ebf8c
	private Void Encrypt192(Byte[] indata, Byte[] outdata, UInt32[] ekey) { }
	// Offset : 0x3f440c
	private Void Encrypt256(Byte[] indata, Byte[] outdata, UInt32[] ekey) { }
	// Offset : 0x3fe864
	private Void Decrypt128(Byte[] indata, Byte[] outdata, UInt32[] ekey) { }
	// Offset : 0x403ac0
	private Void Decrypt192(Byte[] indata, Byte[] outdata, UInt32[] ekey) { }
	// Offset : 0x40b948
	private Void Decrypt256(Byte[] indata, Byte[] outdata, UInt32[] ekey) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class RijndaelManagedTransform : IDisposable, ICryptoTransform
{
	// Fields
	private RijndaelTransform _st; // 0x10
	private Int32 _bs; // 0x18

	// Properties
	public Boolean CanTransformMultipleBlocks { get; }
	public Boolean CanReuseTransform { get; }
	public Int32 InputBlockSize { get; }
	public Int32 OutputBlockSize { get; }

	// Methods
	// Offset : 0x3e5998
	internal Void .ctor(Rijndael algo, Boolean encryption, Byte[] key, Byte[] iv) { }
	// Offset : 0x3e6600
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x3e6670
	public Boolean get_CanTransformMultipleBlocks() { }
	// Offset : 0x3e66bc
	public Boolean get_CanReuseTransform() { }
	// Offset : 0x3e6708
	public Int32 get_InputBlockSize() { }
	// Offset : 0x3e6758
	public Int32 get_OutputBlockSize() { }
	// Offset : 0x3e67a8
	public Int32 TransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x3e6830
	public Byte[] TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class SHA1 : HashAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e3e10
	protected Void .ctor() { }
	// Offset : 0x6e3e3c
	public static SHA1 Create() { }
	// Offset : 0x6e3e84
	public static SHA1 Create(String hashName) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
internal class SHA1Internal
{
	// Fields
	private UInt32[] _H; // 0x10
	private UInt64 count; // 0x18
	private Byte[] _ProcessingBuffer; // 0x20
	private Int32 _ProcessingBufferCount; // 0x28
	private UInt32[] buff; // 0x30

	// Properties

	// Methods
	// Offset : 0x6e3fe8
	public Void .ctor() { }
	// Offset : 0x6e4154
	public Void HashCore(Byte[] rgb, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x6e4288
	public Byte[] HashFinal() { }
	// Offset : 0x6e43d8
	public Void Initialize() { }
	// Offset : 0x6e4510
	private Void ProcessBlock(Byte[] inputBuffer, UInt32 inputOffset) { }
	// Offset : 0x6e4fc8
	private static Void InitialiseBuff(UInt32[] buff, Byte[] input, UInt32 inputOffset) { }
	// Offset : 0x6e5e14
	private static Void FillBuff(UInt32[] buff) { }
	// Offset : 0x6e4d8c
	private Void ProcessFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x6e649c
	internal Void AddLength(UInt64 length, Byte[] buffer, Int32 position) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class SHA1CryptoServiceProvider : SHA1
{
	// Fields
	private SHA1Internal sha; // 0x28

	// Properties

	// Methods
	// Offset : 0x6e3f78
	public Void .ctor() { }
	// Offset : 0x6e4078
	protected override Void Finalize() { }
	// Offset : 0x6e40f4
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x6e4100
	protected override Void HashCore(Byte[] rgb, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x6e4258
	protected override Byte[] HashFinal() { }
	// Offset : 0x6e43ac
	public override Void Initialize() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class SHA1Managed : SHA1
{
	// Fields
	private SHA1Internal sha; // 0x28

	// Properties

	// Methods
	// Offset : 0x6e6654
	public Void .ctor() { }
	// Offset : 0x6e66c4
	protected override Void HashCore(Byte[] rgb, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x6e6718
	protected override Byte[] HashFinal() { }
	// Offset : 0x6e6748
	public override Void Initialize() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class SHA256 : HashAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e6774
	protected Void .ctor() { }
	// Offset : 0x6e67a0
	public static SHA256 Create() { }
	// Offset : 0x6e67e8
	public static SHA256 Create(String hashName) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class SHA256Managed : SHA256
{
	// Fields
	private UInt32[] _H; // 0x28
	private UInt64 count; // 0x30
	private Byte[] _ProcessingBuffer; // 0x38
	private Int32 _ProcessingBufferCount; // 0x40
	private UInt32[] buff; // 0x48

	// Properties

	// Methods
	// Offset : 0x6e68dc
	public Void .ctor() { }
	// Offset : 0x6e699c
	protected override Void HashCore(Byte[] rgb, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x6e71fc
	protected override Byte[] HashFinal() { }
	// Offset : 0x6e754c
	public override Void Initialize() { }
	// Offset : 0x6e6aa8
	private Void ProcessBlock(Byte[] inputBuffer, Int32 inputOffset) { }
	// Offset : 0x6e7324
	private Void ProcessFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x6e772c
	internal Void AddLength(UInt64 length, Byte[] buffer, Int32 position) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class SHA384 : HashAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e78e4
	protected Void .ctor() { }
	// Offset : 0x6e7910
	public static SHA384 Create() { }
	// Offset : 0x6e7958
	public static SHA384 Create(String hashName) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class SHA384Managed : SHA384
{
	// Fields
	private Byte[] xBuf; // 0x28
	private Int32 xBufOff; // 0x30
	private UInt64 byteCount1; // 0x38
	private UInt64 byteCount2; // 0x40
	private UInt64 H1; // 0x48
	private UInt64 H2; // 0x50
	private UInt64 H3; // 0x58
	private UInt64 H4; // 0x60
	private UInt64 H5; // 0x68
	private UInt64 H6; // 0x70
	private UInt64 H7; // 0x78
	private UInt64 H8; // 0x80
	private UInt64[] W; // 0x88
	private Int32 wOff; // 0x90

	// Properties

	// Methods
	// Offset : 0x6e7a4c
	public Void .ctor() { }
	// Offset : 0x6e7b00
	private Void Initialize(Boolean reuse) { }
	// Offset : 0x6e7c24
	public override Void Initialize() { }
	// Offset : 0x6e7c2c
	protected override Void HashCore(Byte[] rgb, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x6e80bc
	protected override Byte[] HashFinal() { }
	// Offset : 0x6e7dc4
	private Void update(Byte input) { }
	// Offset : 0x6e7e6c
	private Void processWord(Byte[] input, Int32 inOff) { }
	// Offset : 0x6e8638
	private Void unpackWord(UInt64 word, Byte[] output, Int32 outOff) { }
	// Offset : 0x6e8200
	private Void adjustByteCounts() { }
	// Offset : 0x6e8220
	private Void processLength(UInt64 lowW, UInt64 hiW) { }
	// Offset : 0x6e82c0
	private Void processBlock() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class SHA512 : HashAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e87e8
	protected Void .ctor() { }
	// Offset : 0x6e8814
	public static SHA512 Create() { }
	// Offset : 0x6e885c
	public static SHA512 Create(String hashName) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class SHA512Managed : SHA512
{
	// Fields
	private Byte[] xBuf; // 0x28
	private Int32 xBufOff; // 0x30
	private UInt64 byteCount1; // 0x38
	private UInt64 byteCount2; // 0x40
	private UInt64 H1; // 0x48
	private UInt64 H2; // 0x50
	private UInt64 H3; // 0x58
	private UInt64 H4; // 0x60
	private UInt64 H5; // 0x68
	private UInt64 H6; // 0x70
	private UInt64 H7; // 0x78
	private UInt64 H8; // 0x80
	private UInt64[] W; // 0x88
	private Int32 wOff; // 0x90

	// Properties

	// Methods
	// Offset : 0x6e8950
	public Void .ctor() { }
	// Offset : 0x6e8a04
	private Void Initialize(Boolean reuse) { }
	// Offset : 0x6e8b28
	public override Void Initialize() { }
	// Offset : 0x6e8b30
	protected override Void HashCore(Byte[] rgb, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x6e8fc0
	protected override Byte[] HashFinal() { }
	// Offset : 0x6e8cc8
	private Void update(Byte input) { }
	// Offset : 0x6e8d70
	private Void processWord(Byte[] input, Int32 inOff) { }
	// Offset : 0x6e9590
	private Void unpackWord(UInt64 word, Byte[] output, Int32 outOff) { }
	// Offset : 0x6e9124
	private Void adjustByteCounts() { }
	// Offset : 0x6e9144
	private Void processLength(UInt64 lowW, UInt64 hiW) { }
	// Offset : 0x6e91e4
	private Void processBlock() { }
	// Offset : 0x6e97a4
	private UInt64 rotateRight(UInt64 x, Int32 n) { }
	// Offset : 0x6e9770
	private UInt64 Ch(UInt64 x, UInt64 y, UInt64 z) { }
	// Offset : 0x6e9790
	private UInt64 Maj(UInt64 x, UInt64 y, UInt64 z) { }
	// Offset : 0x6e9780
	private UInt64 Sum0(UInt64 x) { }
	// Offset : 0x6e9760
	private UInt64 Sum1(UInt64 x) { }
	// Offset : 0x6e9750
	private UInt64 Sigma0(UInt64 x) { }
	// Offset : 0x6e9740
	private UInt64 Sigma1(UInt64 x) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
internal static class SHAConstants
{
	// Fields
	public static readonly UInt32[] K1; // 0x0
	public static readonly UInt64[] K2; // 0x8

	// Properties

	// Methods
	// Offset : 0x6e97b0
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class SignatureDescription
{
	// Fields
	private String _DeformatterAlgorithm; // 0x10
	private String _DigestAlgorithm; // 0x18
	private String _FormatterAlgorithm; // 0x20
	private String _KeyAlgorithm; // 0x28

	// Properties
	public String DeformatterAlgorithm { set; }
	public String DigestAlgorithm { set; }
	public String FormatterAlgorithm { set; }
	public String KeyAlgorithm { set; }

	// Methods
	// Offset : 0x6e9864
	public Void .ctor() { }
	// Offset : 0x6e986c
	public Void set_DeformatterAlgorithm(String value) { }
	// Offset : 0x6e9874
	public Void set_DigestAlgorithm(String value) { }
	// Offset : 0x6e987c
	public Void set_FormatterAlgorithm(String value) { }
	// Offset : 0x6e9884
	public Void set_KeyAlgorithm(String value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
internal class DSASignatureDescription : SignatureDescription
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3d66ac
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
internal class RSAPKCS1SHA1SignatureDescription : SignatureDescription
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3e4e6c
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class SymmetricAlgorithm : IDisposable
{
	// Fields
	protected Int32 BlockSizeValue; // 0x10
	protected Byte[] IVValue; // 0x18
	protected Int32 KeySizeValue; // 0x20
	protected Byte[] KeyValue; // 0x28
	protected KeySizes[] LegalBlockSizesValue; // 0x30
	protected KeySizes[] LegalKeySizesValue; // 0x38
	protected Int32 FeedbackSizeValue; // 0x40
	protected CipherMode ModeValue; // 0x44
	protected PaddingMode PaddingValue; // 0x48
	private Boolean m_disposed; // 0x4c

	// Properties
	public virtual Int32 BlockSize { get; set; }
	public virtual Int32 FeedbackSize { get; }
	public virtual Byte[] IV { get; set; }
	public virtual Byte[] Key { get; set; }
	public virtual Int32 KeySize { get; set; }
	public virtual KeySizes[] LegalKeySizes { get; }
	public virtual CipherMode Mode { get; set; }
	public virtual PaddingMode Padding { get; set; }

	// Methods
	// Offset : 0x6e988c
	protected Void .ctor() { }
	// Offset : 0x6e98c0
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x6e9910
	protected override Void Finalize() { }
	// Offset : 0x6e99ac
	public Void Clear() { }
	// Offset : 0x6e99f0
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x6e9a38
	public virtual Int32 get_BlockSize() { }
	// Offset : 0x6e9a40
	public virtual Void set_BlockSize(Int32 value) { }
	// Offset : 0x6e9b0c
	public virtual Int32 get_FeedbackSize() { }
	// Offset : 0x6e9b14
	public virtual Byte[] get_IV() { }
	// Offset : 0x6e9c20
	public virtual Void set_IV(Byte[] value) { }
	// Offset : 0x6e9d98
	public virtual Byte[] get_Key() { }
	// Offset : 0x6e9ea4
	public virtual Void set_Key(Byte[] value) { }
	// Offset : 0x6ea028
	public virtual Int32 get_KeySize() { }
	// Offset : 0x6ea030
	public virtual Void set_KeySize(Int32 value) { }
	// Offset : 0x6ea0f0
	public virtual KeySizes[] get_LegalKeySizes() { }
	// Offset : 0x6ea0f8
	public virtual CipherMode get_Mode() { }
	// Offset : 0x6ea100
	public virtual Void set_Mode(CipherMode value) { }
	// Offset : 0x6ea234
	public virtual PaddingMode get_Padding() { }
	// Offset : 0x6ea23c
	public virtual Void set_Padding(PaddingMode value) { }
	// Offset : 0x6ea370
	public virtual ICryptoTransform CreateDecryptor() { }
	// Offset : 0x
	public abstract ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV) { }
	// Offset : 0x6ea424
	public virtual ICryptoTransform CreateEncryptor() { }
	// Offset : 0x
	public abstract ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV) { }
	// Offset : 0x
	public abstract Void GenerateIV() { }
	// Offset : 0x
	public abstract Void GenerateKey() { }
	// Offset : 0x6ea4d8
	public static SymmetricAlgorithm Create(String algName) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public class ToBase64Transform : IDisposable, ICryptoTransform
{
	// Fields
	private Boolean m_disposed; // 0x10

	// Properties
	public Boolean CanTransformMultipleBlocks { get; }
	public virtual Boolean CanReuseTransform { get; }
	public Int32 InputBlockSize { get; }
	public Int32 OutputBlockSize { get; }

	// Methods
	// Offset : 0x6ea5cc
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x6ea61c
	protected override Void Finalize() { }
	// Offset : 0x6ea6b8
	public Boolean get_CanTransformMultipleBlocks() { }
	// Offset : 0x6ea6c0
	public virtual Boolean get_CanReuseTransform() { }
	// Offset : 0x6ea6c8
	public Int32 get_InputBlockSize() { }
	// Offset : 0x6ea6d0
	public Int32 get_OutputBlockSize() { }
	// Offset : 0x6ea6d8
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x6ea6f0
	public Int32 TransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x6ea994
	internal static Void InternalTransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x6eac1c
	public Byte[] TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x6eadec
	internal static Byte[] InternalTransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public abstract class TripleDES : SymmetricAlgorithm
{
	// Fields

	// Properties
	public override Byte[] Key { get; set; }

	// Methods
	// Offset : 0x6eb204
	protected Void .ctor() { }
	// Offset : 0x6eb3b0
	public override Byte[] get_Key() { }
	// Offset : 0x6eb6e0
	public override Void set_Key(Byte[] value) { }
	// Offset : 0x6eb4c8
	public static Boolean IsWeakKey(Byte[] rgbKey) { }
	// Offset : 0x6eb850
	public static TripleDES Create() { }
	// Offset : 0x6eb898
	public static TripleDES Create(String str) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
public sealed class TripleDESCryptoServiceProvider : TripleDES
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6eb98c
	public Void .ctor() { }
	// Offset : 0x6eb990
	public override Void GenerateIV() { }
	// Offset : 0x6eb9c0
	public override Void GenerateKey() { }
	// Offset : 0x6eba6c
	public override ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV) { }
	// Offset : 0x6ebe18
	public override ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Cryptography
internal class TripleDESTransform : SymmetricTransform
{
	// Fields
	private DESTransform E1; // 0x58
	private DESTransform D2; // 0x60
	private DESTransform E3; // 0x68
	private DESTransform D1; // 0x70
	private DESTransform E2; // 0x78
	private DESTransform D3; // 0x80

	// Properties

	// Methods
	// Offset : 0x6ebae8
	public Void .ctor(TripleDES algo, Boolean encryption, Byte[] key, Byte[] iv) { }
	// Offset : 0x6ebe94
	protected override Void ECB(Byte[] input, Byte[] output) { }
	// Offset : 0x6eb9e4
	internal static Byte[] GetStrongKey() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Permissions
[Serializable]
public abstract class CodeAccessSecurityAttribute : SecurityAttribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Permissions
internal interface IBuiltInPermission
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Permissions
public interface IUnrestrictedPermission
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Permissions
[Serializable]
public enum PermissionState
{
	// Fields
	public Int32 value__; // 0x10
	public const PermissionState Unrestricted = 1; // 0x0
	public const PermissionState None = 0; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Permissions
[Serializable]
public enum SecurityAction
{
	// Fields
	public Int32 value__; // 0x10
	public const SecurityAction Demand = 2; // 0x0
	public const SecurityAction Assert = 3; // 0x0
	public const SecurityAction Deny = 4; // 0x0
	public const SecurityAction PermitOnly = 5; // 0x0
	public const SecurityAction LinkDemand = 6; // 0x0
	public const SecurityAction InheritanceDemand = 7; // 0x0
	public const SecurityAction RequestMinimum = 8; // 0x0
	public const SecurityAction RequestOptional = 9; // 0x0
	public const SecurityAction RequestRefuse = 10; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Permissions
[Serializable]
public sealed class SecurityPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission
{
	// Fields
	private SecurityPermissionFlag flags; // 0x10

	// Properties
	public SecurityPermissionFlag Flags { set; }

	// Methods
	// Offset : 0x6ed7a4
	public Void .ctor(SecurityPermissionFlag flag) { }
	// Offset : 0x6ed7d4
	public Void set_Flags(SecurityPermissionFlag value) { }
	// Offset : 0x6ed9c4
	public Boolean IsUnrestricted() { }
	// Offset : 0x6ed9d8
	public override Boolean IsSubsetOf(IPermission target) { }
	// Offset : 0x6edaf8
	public override SecurityElement ToXml() { }
	// Offset : 0x6edae8
	private Boolean IsEmpty() { }
	// Offset : 0x6eda3c
	private SecurityPermission Cast(IPermission target) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Permissions
[Serializable]
public sealed class SecurityPermissionAttribute : CodeAccessSecurityAttribute
{
	// Fields
	private SecurityPermissionFlag m_Flags; // 0x10

	// Properties
	public Boolean SkipVerification { set; }

	// Methods
	// Offset : 0x6eddc4
	public Void set_SkipVerification(Boolean value) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Permissions
[Serializable]
public enum SecurityPermissionFlag
{
	// Fields
	public Int32 value__; // 0x10
	public const SecurityPermissionFlag NoFlags = 0; // 0x0
	public const SecurityPermissionFlag Assertion = 1; // 0x0
	public const SecurityPermissionFlag UnmanagedCode = 2; // 0x0
	public const SecurityPermissionFlag SkipVerification = 4; // 0x0
	public const SecurityPermissionFlag Execution = 8; // 0x0
	public const SecurityPermissionFlag ControlThread = 16; // 0x0
	public const SecurityPermissionFlag ControlEvidence = 32; // 0x0
	public const SecurityPermissionFlag ControlPolicy = 64; // 0x0
	public const SecurityPermissionFlag SerializationFormatter = 128; // 0x0
	public const SecurityPermissionFlag ControlDomainPolicy = 256; // 0x0
	public const SecurityPermissionFlag ControlPrincipal = 512; // 0x0
	public const SecurityPermissionFlag ControlAppDomain = 1024; // 0x0
	public const SecurityPermissionFlag RemotingConfiguration = 2048; // 0x0
	public const SecurityPermissionFlag Infrastructure = 4096; // 0x0
	public const SecurityPermissionFlag BindingRedirects = 8192; // 0x0
	public const SecurityPermissionFlag AllFlags = 16383; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Permissions
[Serializable]
public sealed class StrongNamePublicKeyBlob
{
	// Fields
	internal Byte[] pubkey; // 0x10

	// Properties

	// Methods
	// Offset : 0x6edde0
	public override Boolean Equals(Object obj) { }
	// Offset : 0x6edf3c
	public override Int32 GetHashCode() { }
	// Offset : 0x6edff0
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
[Serializable]
public sealed class ApplicationTrust : ISecurityEncodable
{
	// Fields
	private IList`1 fullTrustAssemblies; // 0x10

	// Properties

	// Methods
	// Offset : 0x6ee104
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
[Serializable]
public abstract class CodeGroup
{
	// Fields
	private PolicyStatement m_policy; // 0x10
	private IMembershipCondition m_membershipCondition; // 0x18
	private String m_description; // 0x20
	private String m_name; // 0x28
	private ArrayList m_children; // 0x30
	private static Dictionary`2 <>f__switch$map2A; // 0x0

	// Properties
	public String Description { get; }
	public IMembershipCondition MembershipCondition { get; }
	public String Name { get; }
	public IList Children { get; }

	// Methods
	// Offset : 0x6ee17c
	public String get_Description() { }
	// Offset : 0x6ee184
	public IMembershipCondition get_MembershipCondition() { }
	// Offset : 0x6ee18c
	public String get_Name() { }
	// Offset : 0x6ee194
	public IList get_Children() { }
	// Offset : 0x6ee19c
	public override Boolean Equals(Object o) { }
	// Offset : 0x6ee240
	public Boolean Equals(CodeGroup cg, Boolean compareChildren) { }
	// Offset : 0x6ee8d4
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
[Serializable]
public sealed class Evidence : IEnumerable, ICollection
{
	// Fields
	private Boolean _locked; // 0x10
	private ArrayList hostEvidenceList; // 0x18
	private ArrayList assemblyEvidenceList; // 0x20
	private Int32 _hashCode; // 0x28

	// Properties
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public Object SyncRoot { get; }
	internal ArrayList HostEvidenceList { get; }
	internal ArrayList AssemblyEvidenceList { get; }

	// Methods
	// Offset : 0x6ee9a0
	public Void .ctor() { }
	// Offset : 0x6ee9a8
	public Int32 get_Count() { }
	// Offset : 0x6eea38
	public Boolean get_IsSynchronized() { }
	// Offset : 0x6eea40
	public Object get_SyncRoot() { }
	// Offset : 0x6eea44
	internal ArrayList get_HostEvidenceList() { }
	// Offset : 0x6eead8
	internal ArrayList get_AssemblyEvidenceList() { }
	// Offset : 0x6eeb6c
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x6eecb8
	public override Boolean Equals(Object obj) { }
	// Offset : 0x6ef130
	public IEnumerator GetEnumerator() { }
	// Offset : 0x6ef24c
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: 
private class EvidenceEnumerator : IEnumerator
{
	// Fields
	private IEnumerator currentEnum; // 0x10
	private IEnumerator hostEnum; // 0x18
	private IEnumerator assemblyEnum; // 0x20

	// Properties
	public Object Current { get; }

	// Methods
	// Offset : 0x6ef210
	public Void .ctor(IEnumerator hostenum, IEnumerator assemblyenum) { }
	// Offset : 0x6ef42c
	public Boolean MoveNext() { }
	// Offset : 0x6ef5e4
	public Void Reset() { }
	// Offset : 0x6ef798
	public Object get_Current() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
[Serializable]
public sealed class Hash : ISerializable, IBuiltInEvidence
{
	// Fields
	private Assembly assembly; // 0x10
	private Byte[] data; // 0x18

	// Properties

	// Methods
	// Offset : 0x6ef880
	internal Void .ctor() { }
	// Offset : 0x6ef888
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6ef9bc
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6efc38
	public override String ToString() { }
	// Offset : 0x6efa70
	private Byte[] GetData() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
internal interface IBuiltInEvidence
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
public interface IIdentityPermissionFactory
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
public interface IMembershipCondition : ISecurityEncodable, ISecurityPolicyEncodable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Boolean Equals(Object obj) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
[Serializable]
public sealed class PolicyLevel
{
	// Fields
	private String label; // 0x10
	private CodeGroup root_code_group; // 0x18
	private ArrayList full_trust_assemblies; // 0x20
	private ArrayList named_permission_sets; // 0x28
	private String _location; // 0x30
	private PolicyLevelType _type; // 0x38
	private Hashtable fullNames; // 0x40
	private SecurityElement xml; // 0x48

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
[Serializable]
public sealed class PolicyStatement : ISecurityEncodable, ISecurityPolicyEncodable
{
	// Fields
	private PermissionSet perms; // 0x10
	private PolicyStatementAttribute attrs; // 0x18

	// Properties
	public PermissionSet PermissionSet { get; }

	// Methods
	// Offset : 0x6f0180
	public PermissionSet get_PermissionSet() { }
	// Offset : 0x6f01fc
	public override Boolean Equals(Object obj) { }
	// Offset : 0x6ee944
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
[Serializable]
public enum PolicyStatementAttribute
{
	// Fields
	public Int32 value__; // 0x10
	public const PolicyStatementAttribute Nothing = 0; // 0x0
	public const PolicyStatementAttribute Exclusive = 1; // 0x0
	public const PolicyStatementAttribute LevelFinal = 2; // 0x0
	public const PolicyStatementAttribute All = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Policy
[Serializable]
public sealed class StrongName : IBuiltInEvidence, IIdentityPermissionFactory
{
	// Fields
	private StrongNamePublicKeyBlob publickey; // 0x10
	private String name; // 0x18
	private Version version; // 0x20

	// Properties
	public String Name { get; }
	public StrongNamePublicKeyBlob PublicKey { get; }
	public Version Version { get; }

	// Methods
	// Offset : 0x6f02d0
	public String get_Name() { }
	// Offset : 0x6f02d8
	public StrongNamePublicKeyBlob get_PublicKey() { }
	// Offset : 0x6f02e0
	public Version get_Version() { }
	// Offset : 0x6f02e8
	public override Boolean Equals(Object o) { }
	// Offset : 0x6f03f0
	public override Int32 GetHashCode() { }
	// Offset : 0x6f041c
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security.Principal
public interface IIdentity
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Principal
public interface IPrincipal
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Principal
[Serializable]
public enum PrincipalPolicy
{
	// Fields
	public Int32 value__; // 0x10
	public const PrincipalPolicy UnauthenticatedPrincipal = 0; // 0x0
	public const PrincipalPolicy NoPrincipal = 1; // 0x0
	public const PrincipalPolicy WindowsPrincipal = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Principal
[Serializable]
public enum WindowsAccountType
{
	// Fields
	public Int32 value__; // 0x10
	public const WindowsAccountType Normal = 0; // 0x0
	public const WindowsAccountType Guest = 1; // 0x0
	public const WindowsAccountType System = 2; // 0x0
	public const WindowsAccountType Anonymous = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security.Principal
[Serializable]
public class WindowsIdentity : IDisposable, ISerializable, IDeserializationCallback, IIdentity
{
	// Fields
	private IntPtr _token; // 0x10
	private String _type; // 0x18
	private WindowsAccountType _account; // 0x20
	private Boolean _authenticated; // 0x24
	private String _name; // 0x28
	private SerializationInfo _info; // 0x30
	private static IntPtr invalidWindows; // 0x0

	// Properties

	// Methods
	// Offset : 0x6f05f8
	public Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6f0624
	private static Void .cctor() { }
	// Offset : 0x6f0674
	private Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object sender) { }
	// Offset : 0x6f09e4
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6f0b50
	public Void Dispose() { }
	// Offset : 0x6f0b94
	internal static IntPtr GetCurrentToken() { }
	// Offset : 0x6f096c
	private static String GetTokenName(IntPtr token) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security
public sealed class AllowPartiallyTrustedCallersAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4e8208
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security
[Serializable]
public abstract class CodeAccessPermission : IPermission, ISecurityEncodable, IStackWalk
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4e8210
	protected Void .ctor() { }
	// Offset : 0x4e8218
	public override Boolean Equals(Object obj) { }
	// Offset : 0x4e8340
	public override Int32 GetHashCode() { }
	// Offset : 0x
	public abstract Boolean IsSubsetOf(IPermission target) { }
	// Offset : 0x4e8348
	public override String ToString() { }
	// Offset : 0x
	public abstract SecurityElement ToXml() { }
	// Offset : 0x4e83a0
	internal SecurityElement Element(Int32 version) { }
	// Offset : 0x4e858c
	internal static Void ThrowInvalidPermission(IPermission target, Type expected) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security
public interface IPermission : ISecurityEncodable
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security
public interface ISecurityEncodable
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security
public interface ISecurityPolicyEncodable
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security
public interface IStackWalk
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security
[Serializable]
public class PermissionSet
{
	// Fields
	private PolicyLevel <Resolver>k__BackingField; // 0x10
	private Boolean <DeclarativeSecurity>k__BackingField; // 0x18

	// Properties
	internal Boolean DeclarativeSecurity { set; }

	// Methods
	// Offset : 0x6ed720
	public Void .ctor() { }
	// Offset : 0x6ed728
	internal Void .ctor(String xml) { }
	// Offset : 0x6ed730
	public Void .ctor(PermissionState state) { }
	// Offset : 0x6ed738
	internal Void SetReadOnly(Boolean value) { }
	// Offset : 0x6ed73c
	internal Void set_DeclarativeSecurity(Boolean value) { }
	// Offset : 0x6ed748
	internal static PermissionSet CreateFromBinaryFormat(Byte[] data) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security
[Serializable]
public enum PolicyLevelType
{
	// Fields
	public Int32 value__; // 0x10
	public const PolicyLevelType User = 0; // 0x0
	public const PolicyLevelType Machine = 1; // 0x0
	public const PolicyLevelType Enterprise = 2; // 0x0
	public const PolicyLevelType AppDomain = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security
public sealed class SecurityContext
{
	// Fields
	private Boolean _capture; // 0x10
	private IntPtr _winid; // 0x18
	private CompressedStack _stack; // 0x20
	private Boolean _suppressFlow; // 0x28

	// Properties
	internal Boolean FlowSuppressed { get; }
	internal CompressedStack CompressedStack { get; }

	// Methods
	// Offset : 0x6f0b98
	internal Void .ctor() { }
	// Offset : 0x6f0ba0
	internal Void .ctor(SecurityContext sc) { }
	// Offset : 0x6f0c10
	public static SecurityContext Capture() { }
	// Offset : 0x6f0d28
	internal Boolean get_FlowSuppressed() { }
	// Offset : 0x6f0d30
	internal CompressedStack get_CompressedStack() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security
public sealed class SecurityCriticalAttribute : Attribute
{
	// Fields
	private SecurityCriticalScope _scope; // 0x10

	// Properties

	// Methods
	// Offset : 0x6f0d38
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security
public enum SecurityCriticalScope
{
	// Fields
	public Int32 value__; // 0x10
	public const SecurityCriticalScope Explicit = 0; // 0x0
	public const SecurityCriticalScope Everything = 1; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security
[Serializable]
public sealed class SecurityElement
{
	// Fields
	private String text; // 0x10
	private String tag; // 0x18
	private ArrayList attributes; // 0x20
	private ArrayList children; // 0x28
	private static readonly Char[] invalid_tag_chars; // 0x0
	private static readonly Char[] invalid_text_chars; // 0x8
	private static readonly Char[] invalid_attr_name_chars; // 0x10
	private static readonly Char[] invalid_attr_value_chars; // 0x18
	private static readonly Char[] invalid_chars; // 0x20

	// Properties
	public ArrayList Children { get; }
	public String Tag { get; }
	public String Text { set; }

	// Methods
	// Offset : 0x6efe40
	public Void .ctor(String tag) { }
	// Offset : 0x6efe48
	public Void .ctor(String tag, String text) { }
	// Offset : 0x6f1258
	private static Void .cctor() { }
	// Offset : 0x6f14e8
	public ArrayList get_Children() { }
	// Offset : 0x6f14f0
	public String get_Tag() { }
	// Offset : 0x6f1118
	public Void set_Text(String value) { }
	// Offset : 0x6edc08
	public Void AddAttribute(String name, String value) { }
	// Offset : 0x6effb0
	public Void AddChild(SecurityElement child) { }
	// Offset : 0x6f1e78
	public static String Escape(String str) { }
	// Offset : 0x6f1580
	private static String Unescape(String str) { }
	// Offset : 0x6f21d8
	public static Boolean IsValidAttributeName(String name) { }
	// Offset : 0x6f2260
	public static Boolean IsValidAttributeValue(String value) { }
	// Offset : 0x6f0d60
	public static Boolean IsValidTag(String tag) { }
	// Offset : 0x6f14f8
	public static Boolean IsValidText(String text) { }
	// Offset : 0x6f22e8
	public SecurityElement SearchForChildByTag(String tag) { }
	// Offset : 0x6f00a4
	public override String ToString() { }
	// Offset : 0x6f24cc
	private Void ToXml(ref StringBuilder s, Int32 level) { }
	// Offset : 0x6f179c
	internal SecurityAttribute GetAttribute(String name) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal class SecurityAttribute
{
	// Fields
	private String _name; // 0x10
	private String _value; // 0x18

	// Properties
	public String Name { get; }
	public String Value { get; }

	// Methods
	// Offset : 0x6f1cbc
	public Void .ctor(String name, String value) { }
	// Offset : 0x6f2ce8
	public String get_Name() { }
	// Offset : 0x6f2cf0
	public String get_Value() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security
[Serializable]
public class SecurityException : SystemException
{
	// Fields
	private String permissionState; // 0x60
	private Type permissionType; // 0x68
	private String _granted; // 0x70
	private String _refused; // 0x78
	private Object _demanded; // 0x80
	private IPermission _firstperm; // 0x88
	private MethodInfo _method; // 0x90
	private Evidence _evidence; // 0x98

	// Properties
	public Object Demanded { get; }
	public IPermission FirstPermissionThatFailed { get; }
	public String PermissionState { get; }
	public Type PermissionType { get; }
	public String GrantedSet { get; }
	public String RefusedSet { get; }

	// Methods
	// Offset : 0x6f2cf8
	public Void .ctor() { }
	// Offset : 0x6f0134
	public Void .ctor(String message) { }
	// Offset : 0x6f2db8
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6f2f50
	public Object get_Demanded() { }
	// Offset : 0x6f2f58
	public IPermission get_FirstPermissionThatFailed() { }
	// Offset : 0x6f2f60
	public String get_PermissionState() { }
	// Offset : 0x6f2f68
	public Type get_PermissionType() { }
	// Offset : 0x6f2f70
	public String get_GrantedSet() { }
	// Offset : 0x6f2f78
	public String get_RefusedSet() { }
	// Offset : 0x6f2f80
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6f309c
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System.Security
internal struct RuntimeDeclSecurityEntry
{
	// Fields
	public IntPtr blob; // 0x10
	public Int32 size; // 0x18
	public Int32 index; // 0x1c

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security
internal class RuntimeSecurityFrame
{
	// Fields
	public AppDomain domain; // 0x10
	public MethodInfo method; // 0x18
	public RuntimeDeclSecurityEntry assert; // 0x20
	public RuntimeDeclSecurityEntry deny; // 0x30
	public RuntimeDeclSecurityEntry permitonly; // 0x40

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Security
internal struct SecurityFrame
{
	// Fields
	private AppDomain _domain; // 0x10
	private MethodInfo _method; // 0x18
	private PermissionSet _assert; // 0x20
	private PermissionSet _deny; // 0x28
	private PermissionSet _permitonly; // 0x30

	// Properties
	public Assembly Assembly { get; }
	public AppDomain Domain { get; }

	// Methods
	// Offset : 0x2cf6e0
	internal Void .ctor(RuntimeSecurityFrame frame) { }
	// Offset : 0x6f3d18
	private static Array _GetSecurityStack(Int32 skip) { }
	// Offset : 0x2cf6f4
	internal Void InitFromRuntimeFrame(RuntimeSecurityFrame frame) { }
	// Offset : 0x2cf6fc
	public Assembly get_Assembly() { }
	// Offset : 0x2cf704
	public AppDomain get_Domain() { }
	// Offset : 0x2cf70c
	public override String ToString() { }
	// Offset : 0x6f430c
	public static ArrayList GetStack(Int32 skipFrames) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security
public static class SecurityManager
{
	// Fields
	private static Object _lockObject; // 0x0
	private static Hashtable _declsecCache; // 0x8
	private static SecurityPermission _execution; // 0x10

	// Properties
	public static Boolean SecurityEnabled { get; }

	// Methods
	// Offset : 0x6f44f4
	private static Void .cctor() { }
	// Offset : 0x6f45b4
	public static Boolean get_SecurityEnabled() { }
	// Offset : 0x6f3d1c
	internal static PermissionSet Decode(IntPtr permissions, Int32 length) { }
	// Offset : 0x6f45b8
	internal static PermissionSet Decode(Byte[] encodedPermissions) { }
}

// Dll : mscorlib.dll
// Namespace: System.Security
public sealed class UnverifiableCodeAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6f4734
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public class ASCIIEncoding : Encoding
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6feeb0
	public Void .ctor() { }
	// Offset : 0x6fef50
	public override Int32 GetByteCount(Char[] chars, Int32 index, Int32 count) { }
	// Offset : 0x6ff0d8
	public override Int32 GetByteCount(String chars) { }
	// Offset : 0x6ff164
	public override Int32 GetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x6ff190
	private Int32 GetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex, ref EncoderFallbackBuffer buffer, ref Char[] fallback_chars) { }
	// Offset : 0x6ff7d8
	public override Int32 GetBytes(String chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x6ff804
	private Int32 GetBytes(String chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex, ref EncoderFallbackBuffer buffer, ref Char[] fallback_chars) { }
	// Offset : 0x6ffe18
	public override Int32 GetCharCount(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x6fffa0
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
	// Offset : 0x6fffc4
	private Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex, ref DecoderFallbackBuffer buffer) { }
	// Offset : 0x700424
	public override Int32 GetMaxByteCount(Int32 charCount) { }
	// Offset : 0x7004f0
	public override Int32 GetMaxCharCount(Int32 byteCount) { }
	// Offset : 0x7005bc
	public override String GetString(Byte[] bytes, Int32 byteIndex, Int32 byteCount) { }
	// Offset : 0x7007f0
	public override Int32 GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) { }
	// Offset : 0x700978
	public override Int32 GetByteCount(Char* chars, Int32 count) { }
	// Offset : 0x700980
	public override Decoder GetDecoder() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public abstract class Decoder
{
	// Fields
	private DecoderFallback fallback; // 0x10
	private DecoderFallbackBuffer fallback_buffer; // 0x18

	// Properties
	public DecoderFallback Fallback { set; }
	public DecoderFallbackBuffer FallbackBuffer { get; }

	// Methods
	// Offset : 0x701988
	protected Void .ctor() { }
	// Offset : 0x701a3c
	public Void set_Fallback(DecoderFallback value) { }
	// Offset : 0x701ac8
	public DecoderFallbackBuffer get_FallbackBuffer() { }
	// Offset : 0x
	public abstract Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public sealed class DecoderExceptionFallback : DecoderFallback
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x701b28
	public Void .ctor() { }
	// Offset : 0x701b98
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }
	// Offset : 0x701bfc
	public override Boolean Equals(Object value) { }
	// Offset : 0x701c60
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
public sealed class DecoderExceptionFallbackBuffer : DecoderFallbackBuffer
{
	// Fields

	// Properties
	public override Int32 Remaining { get; }

	// Methods
	// Offset : 0x701bf4
	public Void .ctor() { }
	// Offset : 0x701c70
	public override Int32 get_Remaining() { }
	// Offset : 0x701c78
	public override Boolean Fallback(Byte[] bytesUnknown, Int32 index) { }
	// Offset : 0x701d38
	public override Char GetNextChar() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public abstract class DecoderFallback
{
	// Fields
	private static DecoderFallback exception_fallback; // 0x0
	private static DecoderFallback replacement_fallback; // 0x8
	private static DecoderFallback standard_safe_fallback; // 0x10

	// Properties
	public static DecoderFallback ExceptionFallback { get; }
	public static DecoderFallback ReplacementFallback { get; }
	internal static DecoderFallback StandardSafeFallback { get; }

	// Methods
	// Offset : 0x701b90
	protected Void .ctor() { }
	// Offset : 0x701d40
	private static Void .cctor() { }
	// Offset : 0x701eb4
	public static DecoderFallback get_ExceptionFallback() { }
	// Offset : 0x701f1c
	public static DecoderFallback get_ReplacementFallback() { }
	// Offset : 0x701f84
	internal static DecoderFallback get_StandardSafeFallback() { }
	// Offset : 0x
	public abstract DecoderFallbackBuffer CreateFallbackBuffer() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
public abstract class DecoderFallbackBuffer
{
	// Fields

	// Properties
	public abstract Int32 Remaining { get; }

	// Methods
	// Offset : 0x701c68
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Int32 get_Remaining() { }
	// Offset : 0x
	public abstract Boolean Fallback(Byte[] bytesUnknown, Int32 index) { }
	// Offset : 0x
	public abstract Char GetNextChar() { }
	// Offset : 0x701fec
	public virtual Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public sealed class DecoderFallbackException : ArgumentException
{
	// Fields
	private Byte[] bytes_unknown; // 0x68
	private Int32 index; // 0x70

	// Properties

	// Methods
	// Offset : 0x701ff0
	public Void .ctor() { }
	// Offset : 0x702004
	public Void .ctor(String message) { }
	// Offset : 0x701cf4
	public Void .ctor(String message, Byte[] bytesUnknown, Int32 index) { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public sealed class DecoderReplacementFallback : DecoderFallback
{
	// Fields
	private String replacement; // 0x10

	// Properties
	public String DefaultString { get; }

	// Methods
	// Offset : 0x7019ec
	public Void .ctor() { }
	// Offset : 0x701dfc
	public Void .ctor(String replacement) { }
	// Offset : 0x702014
	public String get_DefaultString() { }
	// Offset : 0x70201c
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }
	// Offset : 0x702128
	public override Boolean Equals(Object value) { }
	// Offset : 0x7021d8
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
public sealed class DecoderReplacementFallbackBuffer : DecoderFallbackBuffer
{
	// Fields
	private Boolean fallback_assigned; // 0x10
	private Int32 current; // 0x14
	private String replacement; // 0x18

	// Properties
	public override Int32 Remaining { get; }

	// Methods
	// Offset : 0x70207c
	public Void .ctor(DecoderReplacementFallback fallback) { }
	// Offset : 0x702208
	public override Int32 get_Remaining() { }
	// Offset : 0x702258
	public override Boolean Fallback(Byte[] bytesUnknown, Int32 index) { }
	// Offset : 0x70239c
	public override Char GetNextChar() { }
	// Offset : 0x70242c
	public override Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public sealed class EncoderExceptionFallback : EncoderFallback
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x702438
	public Void .ctor() { }
	// Offset : 0x7024a8
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }
	// Offset : 0x70250c
	public override Boolean Equals(Object value) { }
	// Offset : 0x702570
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer
{
	// Fields

	// Properties
	public override Int32 Remaining { get; }

	// Methods
	// Offset : 0x702504
	public Void .ctor() { }
	// Offset : 0x702580
	public override Int32 get_Remaining() { }
	// Offset : 0x702588
	public override Boolean Fallback(Char charUnknown, Int32 index) { }
	// Offset : 0x702648
	public override Boolean Fallback(Char charUnknownHigh, Char charUnknownLow, Int32 index) { }
	// Offset : 0x702718
	public override Char GetNextChar() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public abstract class EncoderFallback
{
	// Fields
	private static EncoderFallback exception_fallback; // 0x0
	private static EncoderFallback replacement_fallback; // 0x8
	private static EncoderFallback standard_safe_fallback; // 0x10

	// Properties
	public static EncoderFallback ExceptionFallback { get; }
	public static EncoderFallback ReplacementFallback { get; }
	internal static EncoderFallback StandardSafeFallback { get; }

	// Methods
	// Offset : 0x7024a0
	protected Void .ctor() { }
	// Offset : 0x702720
	private static Void .cctor() { }
	// Offset : 0x7028e4
	public static EncoderFallback get_ExceptionFallback() { }
	// Offset : 0x70294c
	public static EncoderFallback get_ReplacementFallback() { }
	// Offset : 0x7029b4
	internal static EncoderFallback get_StandardSafeFallback() { }
	// Offset : 0x
	public abstract EncoderFallbackBuffer CreateFallbackBuffer() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
public abstract class EncoderFallbackBuffer
{
	// Fields

	// Properties
	public abstract Int32 Remaining { get; }

	// Methods
	// Offset : 0x702578
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Int32 get_Remaining() { }
	// Offset : 0x
	public abstract Boolean Fallback(Char charUnknown, Int32 index) { }
	// Offset : 0x
	public abstract Boolean Fallback(Char charUnknownHigh, Char charUnknownLow, Int32 index) { }
	// Offset : 0x
	public abstract Char GetNextChar() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public sealed class EncoderFallbackException : ArgumentException
{
	// Fields
	private Char char_unknown; // 0x68
	private Char char_unknown_high; // 0x6a
	private Char char_unknown_low; // 0x6c
	private Int32 index; // 0x70

	// Properties

	// Methods
	// Offset : 0x702a1c
	public Void .ctor() { }
	// Offset : 0x702a30
	public Void .ctor(String message) { }
	// Offset : 0x702600
	internal Void .ctor(Char charUnknown, Int32 index) { }
	// Offset : 0x7026c8
	internal Void .ctor(Char charUnknownHigh, Char charUnknownLow, Int32 index) { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public sealed class EncoderReplacementFallback : EncoderFallback
{
	// Fields
	private String replacement; // 0x10

	// Properties
	public String DefaultString { get; }

	// Methods
	// Offset : 0x7027dc
	public Void .ctor() { }
	// Offset : 0x70282c
	public Void .ctor(String replacement) { }
	// Offset : 0x702a40
	public String get_DefaultString() { }
	// Offset : 0x702a48
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }
	// Offset : 0x702b54
	public override Boolean Equals(Object value) { }
	// Offset : 0x702c04
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer
{
	// Fields
	private String replacement; // 0x10
	private Int32 current; // 0x18
	private Boolean fallback_assigned; // 0x1c

	// Properties
	public override Int32 Remaining { get; }

	// Methods
	// Offset : 0x702aa8
	public Void .ctor(EncoderReplacementFallback fallback) { }
	// Offset : 0x702c34
	public override Int32 get_Remaining() { }
	// Offset : 0x702c74
	public override Boolean Fallback(Char charUnknown, Int32 index) { }
	// Offset : 0x702d80
	public override Boolean Fallback(Char charUnknownHigh, Char charUnknownLow, Int32 index) { }
	// Offset : 0x702c7c
	private Boolean Fallback(Int32 index) { }
	// Offset : 0x702d88
	public override Char GetNextChar() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public abstract class Encoding : ICloneable
{
	// Fields
	internal Int32 codePage; // 0x10
	internal Int32 windows_code_page; // 0x14
	private Boolean is_readonly; // 0x18
	private DecoderFallback decoder_fallback; // 0x20
	private EncoderFallback encoder_fallback; // 0x28
	private static Assembly i18nAssembly; // 0x0
	private static Boolean i18nDisabled; // 0x8
	private static EncodingInfo[] encoding_infos; // 0x10
	private static readonly Object[] encodings; // 0x18
	internal String body_name; // 0x30
	internal String encoding_name; // 0x38
	internal String header_name; // 0x40
	internal Boolean is_mail_news_display; // 0x48
	internal Boolean is_mail_news_save; // 0x49
	internal Boolean is_browser_save; // 0x4a
	internal Boolean is_browser_display; // 0x4b
	internal String web_name; // 0x50
	private static Encoding asciiEncoding; // 0x20
	private static Encoding bigEndianEncoding; // 0x28
	private static Encoding defaultEncoding; // 0x30
	private static Encoding utf7Encoding; // 0x38
	private static Encoding utf8EncodingWithMarkers; // 0x40
	private static Encoding utf8EncodingWithoutMarkers; // 0x48
	private static Encoding unicodeEncoding; // 0x50
	private static Encoding isoLatin1Encoding; // 0x58
	private static Encoding utf8EncodingUnsafe; // 0x60
	private static Encoding utf32Encoding; // 0x68
	private static Encoding bigEndianUTF32Encoding; // 0x70
	private static readonly Object lockobj; // 0x78

	// Properties
	public Boolean IsReadOnly { get; }
	public DecoderFallback DecoderFallback { get; set; }
	public EncoderFallback EncoderFallback { get; }
	public static Encoding ASCII { get; }
	public static Encoding BigEndianUnicode { get; }
	public static Encoding Default { get; }
	private static Encoding ISOLatin1 { get; }
	public static Encoding UTF7 { get; }
	public static Encoding UTF8 { get; }
	internal static Encoding UTF8Unmarked { get; }
	internal static Encoding UTF8UnmarkedUnsafe { get; }
	public static Encoding Unicode { get; }
	public static Encoding UTF32 { get; }
	internal static Encoding BigEndianUTF32 { get; }

	// Methods
	// Offset : 0x702e10
	protected Void .ctor() { }
	// Offset : 0x702e20
	protected Void .ctor(Int32 codePage) { }
	// Offset : 0x702f74
	private static Void .cctor() { }
	// Offset : 0x703ea8
	internal static String _(String arg) { }
	// Offset : 0x703eac
	public Boolean get_IsReadOnly() { }
	// Offset : 0x703eb4
	public DecoderFallback get_DecoderFallback() { }
	// Offset : 0x703ebc
	public Void set_DecoderFallback(DecoderFallback value) { }
	// Offset : 0x703f7c
	public EncoderFallback get_EncoderFallback() { }
	// Offset : 0x703f84
	internal Void SetFallbackInternal(EncoderFallback e, DecoderFallback d) { }
	// Offset : 0x703f98
	public override Boolean Equals(Object value) { }
	// Offset : 0x
	public abstract Int32 GetByteCount(Char[] chars, Int32 index, Int32 count) { }
	// Offset : 0x7040d0
	public virtual Int32 GetByteCount(String s) { }
	// Offset : 0x7041d4
	public virtual Int32 GetByteCount(Char[] chars) { }
	// Offset : 0x
	public abstract Int32 GetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x70429c
	public virtual Int32 GetBytes(String s, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x704528
	public virtual Byte[] GetBytes(String s) { }
	// Offset : 0x7046c0
	public virtual Byte[] GetBytes(Char[] chars, Int32 index, Int32 count) { }
	// Offset : 0x7047b0
	public virtual Byte[] GetBytes(Char[] chars) { }
	// Offset : 0x
	public abstract Int32 GetCharCount(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x
	public abstract Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
	// Offset : 0x7048a4
	public virtual Char[] GetChars(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x704998
	public virtual Decoder GetDecoder() { }
	// Offset : 0x704a44
	private static Object InvokeI18N(String name, Object[] args) { }
	// Offset : 0x705048
	public static Encoding GetEncoding(Int32 codepage) { }
	// Offset : 0x7067cc
	public virtual Object Clone() { }
	// Offset : 0x7068a8
	public static Encoding GetEncoding(String name) { }
	// Offset : 0x706ea8
	public override Int32 GetHashCode() { }
	// Offset : 0x
	public abstract Int32 GetMaxByteCount(Int32 charCount) { }
	// Offset : 0x
	public abstract Int32 GetMaxCharCount(Int32 byteCount) { }
	// Offset : 0x706f5c
	public virtual Byte[] GetPreamble() { }
	// Offset : 0x706fa8
	public virtual String GetString(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x70701c
	public virtual String GetString(Byte[] bytes) { }
	// Offset : 0x705a98
	public static Encoding get_ASCII() { }
	// Offset : 0x7063fc
	public static Encoding get_BigEndianUnicode() { }
	// Offset : 0x7070f8
	internal static String InternalCodePage(ref Int32 code_page) { }
	// Offset : 0x70570c
	public static Encoding get_Default() { }
	// Offset : 0x706590
	private static Encoding get_ISOLatin1() { }
	// Offset : 0x705c24
	public static Encoding get_UTF7() { }
	// Offset : 0x705db0
	public static Encoding get_UTF8() { }
	// Offset : 0x7070fc
	internal static Encoding get_UTF8Unmarked() { }
	// Offset : 0x707434
	internal static Encoding get_UTF8UnmarkedUnsafe() { }
	// Offset : 0x706268
	public static Encoding get_Unicode() { }
	// Offset : 0x705f40
	public static Encoding get_UTF32() { }
	// Offset : 0x7060d4
	internal static Encoding get_BigEndianUTF32() { }
	// Offset : 0x7076a4
	public virtual Int32 GetByteCount(Char* chars, Int32 count) { }
	// Offset : 0x707810
	public virtual Int32 GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class ForwardingDecoder : Decoder
{
	// Fields
	private Encoding encoding; // 0x20

	// Properties

	// Methods
	// Offset : 0x7049f8
	public Void .ctor(Encoding enc) { }
	// Offset : 0x707a8c
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public sealed class EncodingInfo
{
	// Fields
	private readonly Int32 codepage; // 0x10
	private Encoding encoding; // 0x18

	// Properties

	// Methods
	// Offset : 0x707b14
	public override Boolean Equals(Object value) { }
	// Offset : 0x707b94
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
internal class Latin1Encoding : Encoding
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x70728c
	public Void .ctor() { }
	// Offset : 0x707b9c
	public override Int32 GetByteCount(Char[] chars, Int32 index, Int32 count) { }
	// Offset : 0x707d04
	public override Int32 GetByteCount(String s) { }
	// Offset : 0x707d94
	public override Int32 GetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x707dc0
	private Int32 GetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex, ref EncoderFallbackBuffer buffer, ref Char[] fallback_chars) { }
	// Offset : 0x70840c
	public override Int32 GetBytes(String s, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x708438
	private Int32 GetBytes(String s, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex, ref EncoderFallbackBuffer buffer, ref Char[] fallback_chars) { }
	// Offset : 0x708a74
	public override Int32 GetCharCount(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x708bdc
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
	// Offset : 0x708ea0
	public override Int32 GetMaxByteCount(Int32 charCount) { }
	// Offset : 0x708f5c
	public override Int32 GetMaxCharCount(Int32 byteCount) { }
	// Offset : 0x709018
	public override String GetString(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x709220
	public override String GetString(Byte[] bytes) { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public sealed class StringBuilder : ISerializable
{
	// Fields
	private const Int32 constDefaultCapacity; // 0x0
	private Int32 _length; // 0x10
	private String _str; // 0x18
	private String _cached_str; // 0x20
	private Int32 _maxCapacity; // 0x28

	// Properties
	public Int32 Capacity { get; set; }
	public Int32 Length { get; set; }
	public Char Chars { get; set; }

	// Methods
	// Offset : 0x7092ec
	public Void .ctor(String value, Int32 startIndex, Int32 length, Int32 capacity) { }
	// Offset : 0x7092f4
	private Void .ctor(String value, Int32 startIndex, Int32 length, Int32 capacity, Int32 maxCapacity) { }
	// Offset : 0x70965c
	public Void .ctor() { }
	// Offset : 0x709714
	public Void .ctor(Int32 capacity) { }
	// Offset : 0x709664
	public Void .ctor(String value) { }
	// Offset : 0x7097a0
	public Void .ctor(String value, Int32 capacity) { }
	// Offset : 0x709860
	private Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x709aa0
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x709bc0
	public Int32 get_Capacity() { }
	// Offset : 0x7099b8
	public Void set_Capacity(Int32 value) { }
	// Offset : 0x709efc
	public Int32 get_Length() { }
	// Offset : 0x709f04
	public Void set_Length(Int32 value) { }
	// Offset : 0x70a0c0
	public Char get_Chars(Int32 index) { }
	// Offset : 0x70a170
	public Void set_Chars(Int32 index, Char value) { }
	// Offset : 0x709c2c
	public override String ToString() { }
	// Offset : 0x70a238
	public String ToString(Int32 startIndex, Int32 length) { }
	// Offset : 0x70a318
	public StringBuilder Remove(Int32 startIndex, Int32 length) { }
	// Offset : 0x70a434
	public StringBuilder Replace(String oldValue, String newValue) { }
	// Offset : 0x70a440
	public StringBuilder Replace(String oldValue, String newValue, Int32 startIndex, Int32 count) { }
	// Offset : 0x70a7a0
	public StringBuilder Append(String value) { }
	// Offset : 0x70a910
	public StringBuilder Append(Int32 value) { }
	// Offset : 0x70a948
	public StringBuilder Append(Int64 value) { }
	// Offset : 0x70a980
	public StringBuilder Append(Object value) { }
	// Offset : 0x70a9e4
	public StringBuilder Append(Char value) { }
	// Offset : 0x709fd4
	public StringBuilder Append(Char value, Int32 repeatCount) { }
	// Offset : 0x70aa84
	public StringBuilder Append(Char[] value, Int32 startIndex, Int32 charCount) { }
	// Offset : 0x70abd4
	public StringBuilder Append(String value, Int32 startIndex, Int32 count) { }
	// Offset : 0x70ad58
	public StringBuilder AppendLine() { }
	// Offset : 0x70ad84
	public StringBuilder AppendLine(String value) { }
	// Offset : 0x70adc4
	public StringBuilder AppendFormat(String format, Object[] args) { }
	// Offset : 0x70addc
	public StringBuilder AppendFormat(IFormatProvider provider, String format, Object[] args) { }
	// Offset : 0x70ae74
	public StringBuilder AppendFormat(String format, Object arg0) { }
	// Offset : 0x70af40
	public StringBuilder AppendFormat(String format, Object arg0, Object arg1) { }
	// Offset : 0x70b060
	public StringBuilder AppendFormat(String format, Object arg0, Object arg1, Object arg2) { }
	// Offset : 0x70b1cc
	public StringBuilder Insert(Int32 index, String value) { }
	// Offset : 0x70b348
	public StringBuilder Insert(Int32 index, Char value) { }
	// Offset : 0x70b478
	public StringBuilder Insert(Int32 index, String value, Int32 count) { }
	// Offset : 0x709d30
	private Void InternalEnsureCapacity(Int32 size) { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public sealed class UTF32Encoding : Encoding
{
	// Fields
	private Boolean bigEndian; // 0x58
	private Boolean byteOrderMark; // 0x59

	// Properties

	// Methods
	// Offset : 0x70b574
	public Void .ctor() { }
	// Offset : 0x707694
	public Void .ctor(Boolean bigEndian, Boolean byteOrderMark) { }
	// Offset : 0x70b584
	public Void .ctor(Boolean bigEndian, Boolean byteOrderMark, Boolean throwOnInvalidCharacters) { }
	// Offset : 0x70b758
	public override Int32 GetByteCount(Char[] chars, Int32 index, Int32 count) { }
	// Offset : 0x70b9b0
	public override Int32 GetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x70c04c
	public override Int32 GetCharCount(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x70c1b4
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
	// Offset : 0x70c600
	public override Int32 GetMaxByteCount(Int32 charCount) { }
	// Offset : 0x70c6bc
	public override Int32 GetMaxCharCount(Int32 byteCount) { }
	// Offset : 0x70c778
	public override Decoder GetDecoder() { }
	// Offset : 0x70c818
	public override Byte[] GetPreamble() { }
	// Offset : 0x70c928
	public override Boolean Equals(Object value) { }
	// Offset : 0x70ca0c
	public override Int32 GetHashCode() { }
	// Offset : 0x70ca4c
	public override Int32 GetByteCount(Char* chars, Int32 count) { }
	// Offset : 0x70cae4
	public override Int32 GetByteCount(String s) { }
	// Offset : 0x70cae8
	public override Int32 GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) { }
	// Offset : 0x70caec
	public override Int32 GetBytes(String s, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x70caf0
	public override String GetString(Byte[] bytes, Int32 index, Int32 count) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class UTF32Decoder : Decoder
{
	// Fields
	private Boolean bigEndian; // 0x20
	private Int32 leftOverByte; // 0x24
	private Int32 leftOverLength; // 0x28

	// Properties

	// Methods
	// Offset : 0x70c7e4
	public Void .ctor(Boolean bigEndian) { }
	// Offset : 0x70caf4
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public class UTF7Encoding : Encoding
{
	// Fields
	private Boolean allowOptionals; // 0x58
	private static readonly Byte[] encodingRules; // 0x0
	private static readonly SByte[] base64Values; // 0x8

	// Properties

	// Methods
	// Offset : 0x7072f4
	public Void .ctor() { }
	// Offset : 0x70d1b4
	public Void .ctor(Boolean allowOptionals) { }
	// Offset : 0x70d268
	private static Void .cctor() { }
	// Offset : 0x70d31c
	public override Int32 GetHashCode() { }
	// Offset : 0x70d348
	public override Boolean Equals(Object value) { }
	// Offset : 0x70d490
	private static Int32 InternalGetByteCount(Char[] chars, Int32 index, Int32 count, Boolean flush, Int32 leftOver, Boolean isInShifted, Boolean allowOptionals) { }
	// Offset : 0x70d7a4
	public override Int32 GetByteCount(Char[] chars, Int32 index, Int32 count) { }
	// Offset : 0x70d844
	private static Int32 InternalGetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex, Boolean flush, ref Int32 leftOver, ref Boolean isInShifted, Boolean allowOptionals) { }
	// Offset : 0x70dfe4
	public override Int32 GetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x70e0b4
	private static Int32 InternalGetCharCount(Byte[] bytes, Int32 index, Int32 count, Int32 leftOver) { }
	// Offset : 0x70e374
	public override Int32 GetCharCount(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x70e3f4
	private static Int32 InternalGetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex, ref Int32 leftOver) { }
	// Offset : 0x70e9b8
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
	// Offset : 0x70eadc
	public override Int32 GetMaxByteCount(Int32 charCount) { }
	// Offset : 0x70ebd0
	public override Int32 GetMaxCharCount(Int32 byteCount) { }
	// Offset : 0x70ec8c
	public override Decoder GetDecoder() { }
	// Offset : 0x70ed0c
	public override Int32 GetByteCount(Char* chars, Int32 count) { }
	// Offset : 0x70ed10
	public override Int32 GetByteCount(String s) { }
	// Offset : 0x70ed14
	public override Int32 GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) { }
	// Offset : 0x70ed18
	public override Int32 GetBytes(String s, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x70ed1c
	public override String GetString(Byte[] bytes, Int32 index, Int32 count) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class UTF7Decoder : Decoder
{
	// Fields
	private Int32 leftOver; // 0x20

	// Properties

	// Methods
	// Offset : 0x70ece8
	public Void .ctor() { }
	// Offset : 0x70ed20
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public class UTF8Encoding : Encoding
{
	// Fields
	private Boolean emitIdentifier; // 0x58

	// Properties

	// Methods
	// Offset : 0x70edc8
	public Void .ctor() { }
	// Offset : 0x7072fc
	public Void .ctor(Boolean encoderShouldEmitUTF8Identifier) { }
	// Offset : 0x707308
	public Void .ctor(Boolean encoderShouldEmitUTF8Identifier, Boolean throwOnInvalidBytes) { }
	// Offset : 0x70edd4
	private static Int32 InternalGetByteCount(Char[] chars, Int32 index, Int32 count, ref Char leftOver, Boolean flush) { }
	// Offset : 0x70efa0
	private static Int32 InternalGetByteCount(Char* chars, Int32 count, ref Char leftOver, Boolean flush) { }
	// Offset : 0x70f0a8
	public override Int32 GetByteCount(Char[] chars, Int32 index, Int32 count) { }
	// Offset : 0x70f0e0
	public override Int32 GetByteCount(Char* chars, Int32 count) { }
	// Offset : 0x70f19c
	private static Int32 InternalGetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex, ref Char leftOver, Boolean flush) { }
	// Offset : 0x70f420
	private static Int32 InternalGetBytes(Char* chars, Int32 count, Byte* bytes, Int32 bcount, ref Char leftOver, Boolean flush) { }
	// Offset : 0x70f6e0
	public override Int32 GetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x70f720
	public override Int32 GetBytes(String s, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x70f9b0
	public override Int32 GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) { }
	// Offset : 0x70fae8
	private static Int32 InternalGetCharCount(Byte[] bytes, Int32 index, Int32 count, UInt32 leftOverBits, UInt32 leftOverCount, Object provider, ref DecoderFallbackBuffer fallbackBuffer, ref Byte[] bufferArg, Boolean flush) { }
	// Offset : 0x70fccc
	private static Int32 InternalGetCharCount(Byte* bytes, Int32 count, UInt32 leftOverBits, UInt32 leftOverCount, Object provider, ref DecoderFallbackBuffer fallbackBuffer, ref Byte[] bufferArg, Boolean flush) { }
	// Offset : 0x70ff5c
	private static Int32 Fallback(Object provider, ref DecoderFallbackBuffer buffer, ref Byte[] bufferArg, Byte* bytes, Int64 index, UInt32 size) { }
	// Offset : 0x710278
	private static Void Fallback(Object provider, ref DecoderFallbackBuffer buffer, ref Byte[] bufferArg, Byte* bytes, Int64 byteIndex, UInt32 size, Char* chars, ref Int32 charIndex) { }
	// Offset : 0x7105e8
	public override Int32 GetCharCount(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x710634
	private static Int32 InternalGetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex, ref UInt32 leftOverBits, ref UInt32 leftOverCount, Object provider, ref DecoderFallbackBuffer fallbackBuffer, ref Byte[] bufferArg, Boolean flush) { }
	// Offset : 0x7108ec
	private static Int32 InternalGetChars(Byte* bytes, Int32 byteCount, Char* chars, Int32 charCount, ref UInt32 leftOverBits, ref UInt32 leftOverCount, Object provider, ref DecoderFallbackBuffer fallbackBuffer, ref Byte[] bufferArg, Boolean flush) { }
	// Offset : 0x710cdc
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
	// Offset : 0x710d38
	public override Int32 GetMaxByteCount(Int32 charCount) { }
	// Offset : 0x710df4
	public override Int32 GetMaxCharCount(Int32 byteCount) { }
	// Offset : 0x710eb0
	public override Decoder GetDecoder() { }
	// Offset : 0x710f54
	public override Byte[] GetPreamble() { }
	// Offset : 0x711038
	public override Boolean Equals(Object value) { }
	// Offset : 0x711190
	public override Int32 GetHashCode() { }
	// Offset : 0x711194
	public override Int32 GetByteCount(String chars) { }
	// Offset : 0x711198
	public override String GetString(Byte[] bytes, Int32 index, Int32 count) { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class UTF8Decoder : Decoder
{
	// Fields
	private UInt32 leftOverBits; // 0x20
	private UInt32 leftOverCount; // 0x24

	// Properties

	// Methods
	// Offset : 0x710f20
	public Void .ctor(DecoderFallback fallback) { }
	// Offset : 0x71119c
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
}

// Dll : mscorlib.dll
// Namespace: System.Text
[Serializable]
public class UnicodeEncoding : Encoding
{
	// Fields
	private Boolean bigEndian; // 0x58
	private Boolean byteOrderMark; // 0x59

	// Properties

	// Methods
	// Offset : 0x7111f4
	public Void .ctor() { }
	// Offset : 0x7070e8
	public Void .ctor(Boolean bigEndian, Boolean byteOrderMark) { }
	// Offset : 0x711228
	public Void .ctor(Boolean bigEndian, Boolean byteOrderMark, Boolean throwOnInvalidBytes) { }
	// Offset : 0x711398
	public override Int32 GetByteCount(Char[] chars, Int32 index, Int32 count) { }
	// Offset : 0x711500
	public override Int32 GetByteCount(String s) { }
	// Offset : 0x711598
	public override Int32 GetByteCount(Char* chars, Int32 count) { }
	// Offset : 0x711660
	public override Int32 GetBytes(Char[] chars, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x7119c0
	public override Int32 GetBytes(String s, Int32 charIndex, Int32 charCount, Byte[] bytes, Int32 byteIndex) { }
	// Offset : 0x711c4c
	public override Int32 GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) { }
	// Offset : 0x7118d4
	private Int32 GetBytesInternal(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) { }
	// Offset : 0x711ff0
	public override Int32 GetCharCount(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x712158
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
	// Offset : 0x7124c0
	public override String GetString(Byte[] bytes, Int32 index, Int32 count) { }
	// Offset : 0x7123cc
	private Int32 GetCharsInternal(Byte* bytes, Int32 byteCount, Char* chars, Int32 charCount) { }
	// Offset : 0x7126cc
	public override Int32 GetMaxByteCount(Int32 charCount) { }
	// Offset : 0x712788
	public override Int32 GetMaxCharCount(Int32 byteCount) { }
	// Offset : 0x712844
	public override Decoder GetDecoder() { }
	// Offset : 0x7128e4
	public override Byte[] GetPreamble() { }
	// Offset : 0x7129ec
	public override Boolean Equals(Object value) { }
	// Offset : 0x712ad8
	public override Int32 GetHashCode() { }
	// Offset : 0x711d78
	private static Void CopyChars(Byte* src, Byte* dest, Int32 count, Boolean bigEndian) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class UnicodeDecoder : Decoder
{
	// Fields
	private Boolean bigEndian; // 0x20
	private Int32 leftOverByte; // 0x24

	// Properties

	// Methods
	// Offset : 0x7128b0
	public Void .ctor(Boolean bigEndian) { }
	// Offset : 0x712adc
	public override Int32 GetChars(Byte[] bytes, Int32 byteIndex, Int32 byteCount, Char[] chars, Int32 charIndex) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
[Serializable]
public sealed class CompressedStack : ISerializable
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties

	// Methods
	// Offset : 0x712e6c
	internal Void .ctor(Int32 length) { }
	// Offset : 0x712ef0
	internal Void .ctor(CompressedStack cs) { }
	// Offset : 0x713004
	public CompressedStack CreateCopy() { }
	// Offset : 0x713064
	public static CompressedStack Capture() { }
	// Offset : 0x7132d0
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x713358
	internal Boolean IsEmpty() { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public enum EventResetMode
{
	// Fields
	public Int32 value__; // 0x10
	public const EventResetMode AutoReset = 0; // 0x0
	public const EventResetMode ManualReset = 1; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public class EventWaitHandle : WaitHandle
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7133b4
	public Void .ctor(Boolean initialState, EventResetMode mode) { }
	// Offset : 0x713494
	private Boolean IsManualReset(EventResetMode mode) { }
	// Offset : 0x713534
	public Boolean Reset() { }
	// Offset : 0x713638
	public Boolean Set() { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
[Serializable]
public sealed class ExecutionContext : ISerializable
{
	// Fields
	private SecurityContext _sc; // 0x10
	private Boolean _suppressFlow; // 0x18
	private Boolean _capture; // 0x19

	// Properties
	internal SecurityContext SecurityContext { get; set; }
	internal Boolean FlowSuppressed { get; }

	// Methods
	// Offset : 0x713684
	internal Void .ctor() { }
	// Offset : 0x71368c
	internal Void .ctor(ExecutionContext ec) { }
	// Offset : 0x71372c
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x7137a4
	public static ExecutionContext Capture() { }
	// Offset : 0x713980
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x713a1c
	internal SecurityContext get_SecurityContext() { }
	// Offset : 0x713978
	internal Void set_SecurityContext(SecurityContext value) { }
	// Offset : 0x713970
	internal Boolean get_FlowSuppressed() { }
	// Offset : 0x713a88
	public static Boolean IsFlowSuppressed() { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public static class Interlocked
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x713b04
	public static Int32 CompareExchange(ref Int32 location1, Int32 value, Int32 comparand) { }
	// Offset : 0x713b08
	public static Single CompareExchange(ref Single location1, Single value, Single comparand) { }
	// Offset : 0x713b0c
	public static Int32 Increment(ref Int32 location) { }
	// Offset : 0x
	public static T CompareExchange(ref T location1, T value, T comparand) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public sealed class ManualResetEvent : EventWaitHandle
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x713b10
	public Void .ctor(Boolean initialState) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public static class Monitor
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x705040
	public static Void Enter(Object obj) { }
	// Offset : 0x705044
	public static Void Exit(Object obj) { }
	// Offset : 0x713b1c
	private static Void Monitor_pulse(Object obj) { }
	// Offset : 0x713b20
	private static Boolean Monitor_test_synchronised(Object obj) { }
	// Offset : 0x713b24
	public static Void Pulse(Object obj) { }
	// Offset : 0x713bf0
	private static Boolean Monitor_wait(Object obj, Int32 ms) { }
	// Offset : 0x713bf4
	public static Boolean Wait(Object obj, Int32 millisecondsTimeout) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public sealed class Mutex : WaitHandle
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x713d08
	public Void .ctor(Boolean initiallyOwned) { }
	// Offset : 0x713dc8
	private static IntPtr CreateMutex_internal(Boolean initiallyOwned, String name, out Boolean created) { }
	// Offset : 0x713dd0
	private static Boolean ReleaseMutex_internal(IntPtr handle) { }
	// Offset : 0x713dd4
	public Void ReleaseMutex() { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
internal sealed class NativeEventCalls
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x713528
	public static IntPtr CreateEvent_internal(Boolean manual, Boolean initial, String name, out Boolean created) { }
	// Offset : 0x713680
	public static Boolean SetEvent_internal(IntPtr handle) { }
	// Offset : 0x713634
	public static Boolean ResetEvent_internal(IntPtr handle) { }
	// Offset : 0x713e88
	public static Void CloseEvent_internal(IntPtr handle) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public sealed class RegisteredWaitHandle : MarshalByRefObject
{
	// Fields
	private WaitHandle _waitObject; // 0x18
	private WaitOrTimerCallback _callback; // 0x20
	private TimeSpan _timeout; // 0x28
	private Object _state; // 0x30
	private Boolean _executeOnlyOnce; // 0x38
	private WaitHandle _finalEvent; // 0x40
	private ManualResetEvent _cancelEvent; // 0x48
	private Int32 _callsInProcess; // 0x50
	private Boolean _unregistered; // 0x54

	// Properties

	// Methods
	// Offset : 0x713e8c
	internal Void .ctor(WaitHandle waitObject, WaitOrTimerCallback callback, Object state, TimeSpan timeout, Boolean executeOnlyOnce) { }
	// Offset : 0x713f44
	internal Void Wait(Object state) { }
	// Offset : 0x71453c
	private Void DoCallBack(Object timedOut) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public class SynchronizationContext
{
	// Fields
	private static SynchronizationContext currentContext; // 0xffffffffffffffff

	// Properties
	public static SynchronizationContext Current { get; }

	// Methods
	// Offset : 0x715048
	public Void .ctor() { }
	// Offset : 0x715050
	public static SynchronizationContext get_Current() { }
	// Offset : 0x7150a4
	public static Void SetSynchronizationContext(SynchronizationContext syncContext) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
[Serializable]
public class SynchronizationLockException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7150fc
	public Void .ctor() { }
	// Offset : 0x713be8
	public Void .ctor(String message) { }
	// Offset : 0x715150
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public sealed class Thread : CriticalFinalizerObject, _Thread
{
	// Fields
	private Int32 lock_thread_id; // 0x10
	private IntPtr system_thread_handle; // 0x18
	private Object cached_culture_info; // 0x20
	private IntPtr unused0; // 0x28
	private Boolean threadpool_thread; // 0x30
	private IntPtr name; // 0x38
	private Int32 name_len; // 0x40
	private ThreadState state; // 0x44
	private Object abort_exc; // 0x48
	private Int32 abort_state_handle; // 0x50
	private Int64 thread_id; // 0x58
	private IntPtr start_notify; // 0x60
	private IntPtr stack_ptr; // 0x68
	private UIntPtr static_data; // 0x70
	private IntPtr jit_data; // 0x78
	private IntPtr lock_data; // 0x80
	private Object current_appcontext; // 0x88
	private Int32 stack_size; // 0x90
	private Object start_obj; // 0x98
	private IntPtr appdomain_refs; // 0xa0
	private Int32 interruption_requested; // 0xa8
	private IntPtr suspend_event; // 0xb0
	private IntPtr suspended_event; // 0xb8
	private IntPtr resume_event; // 0xc0
	private IntPtr synch_cs; // 0xc8
	private IntPtr serialized_culture_info; // 0xd0
	private Int32 serialized_culture_info_len; // 0xd8
	private IntPtr serialized_ui_culture_info; // 0xe0
	private Int32 serialized_ui_culture_info_len; // 0xe8
	private Boolean thread_dump_requested; // 0xec
	private IntPtr end_stack; // 0xf0
	private Boolean thread_interrupt_requested; // 0xf8
	private Byte apartment_state; // 0xf9
	private Int32 critical_region_level; // 0xfc
	private Int32 small_id; // 0x100
	private IntPtr manage_callback; // 0x108
	private Object pending_exception; // 0x110
	private ExecutionContext ec_to_set; // 0x118
	private IntPtr interrupt_on_stop; // 0x120
	private IntPtr unused3; // 0x128
	private IntPtr unused4; // 0x130
	private IntPtr unused5; // 0x138
	private IntPtr unused6; // 0x140
	private static Object[] local_slots; // 0xffffffffffffffff
	private static ExecutionContext _ec; // 0xffffffffffffffff
	private MulticastDelegate threadstart; // 0x148
	private Int32 managed_id; // 0x150
	private IPrincipal _principal; // 0x158
	private static Hashtable datastorehash; // 0x0
	private static Object datastore_lock; // 0x8
	private Boolean in_currentculture; // 0x160
	private static Object culture_lock; // 0x10

	// Properties
	public static Context CurrentContext { get; }
	public static Thread CurrentThread { get; }
	public CultureInfo CurrentCulture { get; }
	public CultureInfo CurrentUICulture { get; }
	public Boolean IsBackground { set; }
	public String Name { set; }
	public ExecutionContext ExecutionContext { get; }
	public Int32 ManagedThreadId { get; }

	// Methods
	// Offset : 0x715158
	public Void .ctor(ThreadStart start) { }
	// Offset : 0x71520c
	private static Void .cctor() { }
	// Offset : 0x7152a0
	public static Context get_CurrentContext() { }
	// Offset : 0x7152a8
	private static Thread CurrentThread_internal() { }
	// Offset : 0x713204
	public static Thread get_CurrentThread() { }
	// Offset : 0x7152ac
	internal static Void FreeLocalSlotValues(Int32 slot, Boolean thread_local) { }
	// Offset : 0x7152b4
	public static AppDomain GetDomain() { }
	// Offset : 0x7152bc
	public static Int32 GetDomainID() { }
	// Offset : 0x7152c0
	private IntPtr Thread_internal(MulticastDelegate start) { }
	// Offset : 0x715208
	private Void Thread_init() { }
	// Offset : 0x7152c4
	private CultureInfo GetCachedCurrentCulture() { }
	// Offset : 0x7152c8
	private Byte[] GetSerializedCurrentCulture() { }
	// Offset : 0x7152cc
	private Void SetCachedCurrentCulture(CultureInfo culture) { }
	// Offset : 0x7152d0
	private CultureInfo GetCachedCurrentUICulture() { }
	// Offset : 0x7152d4
	private Byte[] GetSerializedCurrentUICulture() { }
	// Offset : 0x7152d8
	private Void SetCachedCurrentUICulture(CultureInfo culture) { }
	// Offset : 0x7152dc
	public CultureInfo get_CurrentCulture() { }
	// Offset : 0x715628
	public CultureInfo get_CurrentUICulture() { }
	// Offset : 0x715920
	public Void set_IsBackground(Boolean value) { }
	// Offset : 0x71593c
	private Void SetName_internal(String name) { }
	// Offset : 0x715940
	public Void set_Name(String value) { }
	// Offset : 0x715944
	public Void Start() { }
	// Offset : 0x715a78
	private Void Thread_free_internal(IntPtr handle) { }
	// Offset : 0x715a7c
	protected override Void Finalize() { }
	// Offset : 0x715934
	private Void SetState(ThreadState set) { }
	// Offset : 0x715938
	private Void ClrState(ThreadState clr) { }
	// Offset : 0x715af4
	private static Int32 GetNewManagedId() { }
	// Offset : 0x715b50
	private static Int32 GetNewManagedId_internal() { }
	// Offset : 0x713894
	public ExecutionContext get_ExecutionContext() { }
	// Offset : 0x715b54
	public Int32 get_ManagedThreadId() { }
	// Offset : 0x715bd8
	public override Int32 GetHashCode() { }
	// Offset : 0x713260
	public CompressedStack GetCompressedStack() { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
[Serializable]
public sealed class ThreadAbortException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x715bdc
	private Void .ctor() { }
	// Offset : 0x715c44
	private Void .ctor(SerializationInfo info, StreamingContext sc) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
[Serializable]
public class ThreadInterruptedException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x715c4c
	public Void .ctor() { }
	// Offset : 0x715ca0
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public static class ThreadPool
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x714480
	public static Boolean QueueUserWorkItem(WaitCallback callBack, Object state) { }
	// Offset : 0x715ccc
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, Object state, Int64 millisecondsTimeOutInterval, Boolean executeOnlyOnce) { }
	// Offset : 0x715ef0
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, Object state, TimeSpan timeout, Boolean executeOnlyOnce) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
[Serializable]
public enum ThreadState
{
	// Fields
	public Int32 value__; // 0x10
	public const ThreadState Running = 0; // 0x0
	public const ThreadState StopRequested = 1; // 0x0
	public const ThreadState SuspendRequested = 2; // 0x0
	public const ThreadState Background = 4; // 0x0
	public const ThreadState Unstarted = 8; // 0x0
	public const ThreadState Stopped = 16; // 0x0
	public const ThreadState WaitSleepJoin = 32; // 0x0
	public const ThreadState Suspended = 64; // 0x0
	public const ThreadState AbortRequested = 128; // 0x0
	public const ThreadState Aborted = 256; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System.Threading
[Serializable]
public class ThreadStateException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x71620c
	public Void .ctor() { }
	// Offset : 0x716260
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public sealed class Timer : MarshalByRefObject, IDisposable
{
	// Fields
	private static Scheduler scheduler; // 0x0
	private TimerCallback callback; // 0x18
	private Object state; // 0x20
	private Int64 due_time_ms; // 0x28
	private Int64 period_ms; // 0x30
	private Int64 next_run; // 0x38
	private Boolean disposed; // 0x40

	// Properties

	// Methods
	// Offset : 0x716268
	public Void .ctor(TimerCallback callback, Object state, TimeSpan dueTime, TimeSpan period) { }
	// Offset : 0x716394
	private static Void .cctor() { }
	// Offset : 0x7162d8
	private Void Init(TimerCallback callback, Object state, Int64 dueTime, Int64 period) { }
	// Offset : 0x716638
	public Boolean Change(TimeSpan dueTime, TimeSpan period) { }
	// Offset : 0x716660
	public Void Dispose() { }
	// Offset : 0x716470
	private Boolean Change(Int64 dueTime, Int64 period, Boolean first) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class TimerComparer : IComparer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7169ec
	public Void .ctor() { }
	// Offset : 0x7175cc
	public Int32 Compare(Object x, Object y) { }
}

// Dll : mscorlib.dll
// Namespace: 
private sealed class Scheduler
{
	// Fields
	private static Scheduler instance; // 0x0
	private SortedList list; // 0x10

	// Properties
	public static Scheduler Instance { get; }

	// Methods
	// Offset : 0x7168d8
	private Void .ctor() { }
	// Offset : 0x7169f4
	private static Void .cctor() { }
	// Offset : 0x716408
	public static Scheduler get_Instance() { }
	// Offset : 0x7166fc
	public Void Remove(Timer timer) { }
	// Offset : 0x71679c
	public Void Change(Timer timer, Int64 new_next_run) { }
	// Offset : 0x716b08
	private Void Add(Timer timer) { }
	// Offset : 0x716a54
	private Int32 InternalRemove(Timer timer) { }
	// Offset : 0x716d28
	private Void SchedulerThread() { }
	// Offset : 0x7174d8
	private Void ShrinkIfNeeded(ArrayList list, Int32 initial) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public abstract class WaitHandle : MarshalByRefObject, IDisposable
{
	// Fields
	public const Int32 WaitTimeout; // 0x0
	private SafeWaitHandle safe_wait_handle; // 0x18
	protected static readonly IntPtr InvalidHandle; // 0x0
	private Boolean disposed; // 0x20

	// Properties
	public virtual IntPtr Handle { get; set; }

	// Methods
	// Offset : 0x71348c
	protected Void .ctor() { }
	// Offset : 0x718064
	private static Void .cctor() { }
	// Offset : 0x7180c0
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x718110
	private static Void CheckArray(WaitHandle[] handles, Boolean waitAll) { }
	// Offset : 0x71828c
	private static Int32 WaitAny_internal(WaitHandle[] handles, Int32 ms, Boolean exitContext) { }
	// Offset : 0x7142c4
	public static Int32 WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, Boolean exitContext) { }
	// Offset : 0x718294
	public virtual IntPtr get_Handle() { }
	// Offset : 0x7182c4
	public virtual Void set_Handle(IntPtr value) { }
	// Offset : 0x7183b8
	private Boolean WaitOne_internal(IntPtr handle, Int32 ms, Boolean exitContext) { }
	// Offset : 0x7183c0
	protected virtual Void Dispose(Boolean explicitDisposing) { }
	// Offset : 0x718458
	public virtual Boolean WaitOne() { }
	// Offset : 0x718578
	public virtual Boolean WaitOne(Int32 millisecondsTimeout, Boolean exitContext) { }
	// Offset : 0x71357c
	internal Void CheckDisposed() { }
	// Offset : 0x718744
	protected override Void Finalize() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class AccessViolationException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5c65bc
	public Void .ctor() { }
	// Offset : 0x5c6630
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class ActivationContext : IDisposable, ISerializable
{
	// Fields
	private Boolean _disposed; // 0x10

	// Properties

	// Methods
	// Offset : 0x5c6638
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x5c66bc
	protected override Void Finalize() { }
	// Offset : 0x5c66e8
	public Void Dispose() { }
	// Offset : 0x5c66d4
	private Void Dispose(Boolean disposing) { }
}

// Dll : mscorlib.dll
// Namespace: System
public sealed class Activator : _Activator
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public static T CreateInstance() { }
	// Offset : 0x5c6700
	public static Object CreateInstance(Type type) { }
	// Offset : 0x5c69d4
	public static Object CreateInstance(Type type, Object[] args) { }
	// Offset : 0x5c6a40
	public static Object CreateInstance(Type type, Object[] args, Object[] activationAttributes) { }
	// Offset : 0x5c6ad0
	public static Object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes) { }
	// Offset : 0x5c6708
	public static Object CreateInstance(Type type, Boolean nonPublic) { }
	// Offset : 0x5c7264
	private static Void CheckType(Type type) { }
	// Offset : 0x5c7488
	private static Void CheckAbstractType(Type type) { }
	// Offset : 0x5c7484
	internal static Object CreateInstanceInternal(Type type) { }
}

// Dll : mscorlib.dll
// Namespace: System
public sealed class AppDomain : MarshalByRefObject
{
	// Fields
	private IntPtr _mono_app_domain; // 0x18
	private static String _process_guid; // 0x0
	private static Hashtable type_resolve_in_progress; // 0xffffffffffffffff
	private static Hashtable assembly_resolve_in_progress; // 0xffffffffffffffff
	private static Hashtable assembly_resolve_in_progress_refonly; // 0xffffffffffffffff
	private Evidence _evidence; // 0x20
	private PermissionSet _granted; // 0x28
	private PrincipalPolicy _principalPolicy; // 0x30
	private static IPrincipal _principal; // 0xffffffffffffffff
	private static AppDomain default_domain; // 0x8
	private AppDomainManager _domain_manager; // 0x38
	private ActivationContext _activation; // 0x40
	private ApplicationIdentity _applicationIdentity; // 0x48
	private AssemblyLoadEventHandler AssemblyLoad; // 0x50
	private ResolveEventHandler AssemblyResolve; // 0x58
	private EventHandler DomainUnload; // 0x60
	private EventHandler ProcessExit; // 0x68
	private ResolveEventHandler ResourceResolve; // 0x70
	private ResolveEventHandler TypeResolve; // 0x78
	private UnhandledExceptionEventHandler UnhandledException; // 0x80
	private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x88

	// Properties
	public static AppDomain CurrentDomain { get; }

	// Methods
	// Offset : 0x5c759c
	private Void .ctor() { }
	// Offset : 0x5c75a4
	public Void add_UnhandledException(UnhandledExceptionEventHandler value) { }
	// Offset : 0x5c7668
	public Void remove_UnhandledException(UnhandledExceptionEventHandler value) { }
	// Offset : 0x5c772c
	private String getFriendlyName() { }
	// Offset : 0x5c7730
	private static AppDomain getCurDomain() { }
	// Offset : 0x5c7734
	public static AppDomain get_CurrentDomain() { }
	// Offset : 0x5c7738
	internal AssemblyBuilder DefineInternalDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access) { }
	// Offset : 0x5c77b4
	public override Object InitializeLifetimeService() { }
	// Offset : 0x5c77bc
	internal Assembly LoadAssembly(String assemblyRef, Evidence securityEvidence, Boolean refOnly) { }
	// Offset : 0x5c77c4
	internal Assembly LoadSatellite(AssemblyName assemblyRef, Boolean throwOnError) { }
	// Offset : 0x5c78d4
	public Assembly Load(String assemblyString) { }
	// Offset : 0x5c78e0
	internal Assembly Load(String assemblyString, Evidence assemblySecurity, Boolean refonly) { }
	// Offset : 0x5c7a04
	private static AppDomain InternalSetDomainByID(Int32 domain_id) { }
	// Offset : 0x5c7a08
	private static AppDomain InternalSetDomain(AppDomain context) { }
	// Offset : 0x5c7a0c
	internal static Void InternalPushDomainRefByID(Int32 domain_id) { }
	// Offset : 0x5c7a10
	internal static Void InternalPopDomainRef() { }
	// Offset : 0x5c7a14
	internal static Context InternalSetContext(Context context) { }
	// Offset : 0x5c7a18
	internal static Context InternalGetContext() { }
	// Offset : 0x5c7a1c
	internal static Context InternalGetDefaultContext() { }
	// Offset : 0x5c7a20
	internal static String InternalGetProcessGuid(String newguid) { }
	// Offset : 0x5c7a24
	internal static Object InvokeInDomainByID(Int32 domain_id, MethodInfo method, Object obj, Object[] args) { }
	// Offset : 0x5c7c58
	internal static String GetProcessGuid() { }
	// Offset : 0x5c7d0c
	public override String ToString() { }
	// Offset : 0x5c7d10
	internal Assembly DoTypeResolve(Object name_or_tb) { }
	// Offset : 0x5c80d8
	internal Void ProcessMessageInDomain(Byte[] arrRequest, CADMethodCallMessage cadMsg, out Byte[] arrResponse, out CADMethodReturnMessage cadMrm) { }
}

// Dll : mscorlib.dll
// Namespace: System
public class AppDomainManager : MarshalByRefObject
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class AppDomainSetup
{
	// Fields
	private String application_base; // 0x10
	private String application_name; // 0x18
	private String cache_path; // 0x20
	private String configuration_file; // 0x28
	private String dynamic_base; // 0x30
	private String license_file; // 0x38
	private String private_bin_path; // 0x40
	private String private_bin_path_probe; // 0x48
	private String shadow_copy_directories; // 0x50
	private String shadow_copy_files; // 0x58
	private Boolean publisher_policy; // 0x60
	private Boolean path_changed; // 0x61
	private LoaderOptimization loader_optimization; // 0x64
	private Boolean disallow_binding_redirects; // 0x68
	private Boolean disallow_code_downloads; // 0x69
	private ActivationArguments _activationArguments; // 0x70
	private AppDomainInitializer domain_initializer; // 0x78
	private ApplicationTrust application_trust; // 0x80
	private String[] domain_initializer_args; // 0x88
	private SecurityElement application_trust_xml; // 0x90
	private Boolean disallow_appbase_probe; // 0x98
	private Byte[] configuration_bytes; // 0xa0

	// Properties

	// Methods
	// Offset : 0x5c8720
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class ApplicationException : Exception
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5c8728
	public Void .ctor() { }
	// Offset : 0x5c879c
	public Void .ctor(String message) { }
	// Offset : 0x5c87d0
	public Void .ctor(String message, Exception innerException) { }
	// Offset : 0x5c8804
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class ApplicationIdentity : ISerializable
{
	// Fields
	private String _fullName; // 0x10

	// Properties

	// Methods
	// Offset : 0x5c880c
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x5c8890
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class ArgumentException : SystemException
{
	// Fields
	private const Int32 Result; // 0x0
	private String param_name; // 0x60

	// Properties
	public virtual String ParamName { get; }
	public override String Message { get; }

	// Methods
	// Offset : 0x5c8928
	public Void .ctor() { }
	// Offset : 0x5b57b0
	public Void .ctor(String message) { }
	// Offset : 0x5c899c
	public Void .ctor(String message, Exception innerException) { }
	// Offset : 0x5b4398
	public Void .ctor(String message, String paramName) { }
	// Offset : 0x5c89d0
	public Void .ctor(String message, String paramName, Exception innerException) { }
	// Offset : 0x5c8a10
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x5c8aac
	public virtual String get_ParamName() { }
	// Offset : 0x5c8ab4
	public override String get_Message() { }
	// Offset : 0x5c8c24
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class ArgumentNullException : ArgumentException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x5c8ce8
	public Void .ctor() { }
	// Offset : 0x5b42ac
	public Void .ctor(String paramName) { }
	// Offset : 0x5c8d70
	public Void .ctor(String paramName, String message) { }
	// Offset : 0x5c8dc4
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class ArgumentOutOfRangeException : ArgumentException
{
	// Fields
	private Object actual_value; // 0x68

	// Properties
	public override String Message { get; }

	// Methods
	// Offset : 0x5c8dc8
	public Void .ctor() { }
	// Offset : 0x5c8e50
	public Void .ctor(String paramName) { }
	// Offset : 0x5b4344
	public Void .ctor(String paramName, String message) { }
	// Offset : 0x5c8ee8
	public Void .ctor(String paramName, Object actualValue, String message) { }
	// Offset : 0x5c8f4c
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x5c8fe4
	public override String get_Message() { }
	// Offset : 0x5c9098
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class ArithmeticException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5c9130
	public Void .ctor() { }
	// Offset : 0x5c91a4
	public Void .ctor(String message) { }
	// Offset : 0x5c91d8
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class ArrayTypeMismatchException : SystemException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x75c3f4
	public Void .ctor() { }
	// Offset : 0x75c468
	public Void .ctor(String message) { }
	// Offset : 0x75c49c
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
public class AssemblyLoadEventArgs : EventArgs
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public enum AttributeTargets
{
	// Fields
	public Int32 value__; // 0x10
	public const AttributeTargets Assembly = 1; // 0x0
	public const AttributeTargets Module = 2; // 0x0
	public const AttributeTargets Class = 4; // 0x0
	public const AttributeTargets Struct = 8; // 0x0
	public const AttributeTargets Enum = 16; // 0x0
	public const AttributeTargets Constructor = 32; // 0x0
	public const AttributeTargets Method = 64; // 0x0
	public const AttributeTargets Property = 128; // 0x0
	public const AttributeTargets Field = 256; // 0x0
	public const AttributeTargets Event = 512; // 0x0
	public const AttributeTargets Interface = 1024; // 0x0
	public const AttributeTargets Parameter = 2048; // 0x0
	public const AttributeTargets Delegate = 4096; // 0x0
	public const AttributeTargets ReturnValue = 8192; // 0x0
	public const AttributeTargets GenericParameter = 16384; // 0x0
	public const AttributeTargets All = 32767; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
public static class BitConverter
{
	// Fields
	private static readonly Boolean SwappedWordsInDouble; // 0x0
	public static readonly Boolean IsLittleEndian; // 0x1

	// Properties

	// Methods
	// Offset : 0x75d444
	private static Void .cctor() { }
	// Offset : 0x75d4d8
	private static Boolean AmILittleEndian() { }
	// Offset : 0x75d4b8
	private static Boolean DoubleWordsAreSwapped() { }
	// Offset : 0x75d4e0
	public static Int64 DoubleToInt64Bits(Double value) { }
	// Offset : 0x75d7bc
	private static Byte[] GetBytes(Byte* ptr, Int32 count) { }
	// Offset : 0x75d87c
	public static Byte[] GetBytes(UInt32 value) { }
	// Offset : 0x75d554
	public static Byte[] GetBytes(Double value) { }
	// Offset : 0x75d8e8
	private static Void PutBytes(Byte* dst, Byte[] src, Int32 start_index, Int32 count) { }
	// Offset : 0x75da60
	public static Int32 ToInt32(Byte[] value, Int32 startIndex) { }
	// Offset : 0x75d734
	public static Int64 ToInt64(Byte[] value, Int32 startIndex) { }
	// Offset : 0x75dae8
	public static String ToString(Byte[] value) { }
	// Offset : 0x75db9c
	public static String ToString(Byte[] value, Int32 startIndex, Int32 length) { }
}

// Dll : mscorlib.dll
// Namespace: System
public static class Buffer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7600b4
	public static Int32 ByteLength(Array array) { }
	// Offset : 0x760198
	public static Void BlockCopy(Array src, Int32 srcOffset, Array dst, Int32 dstOffset, Int32 count) { }
	// Offset : 0x760194
	private static Int32 ByteLengthInternal(Array array) { }
	// Offset : 0x7603b8
	internal static Boolean BlockCopyInternal(Array src, Int32 src_offset, Array dest, Int32 dest_offset, Int32 count) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class CharEnumerator : IEnumerator, IDisposable, ICloneable, IEnumerator`1
{
	// Fields
	private String str; // 0x10
	private Int32 index; // 0x18
	private Int32 length; // 0x1c

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public Char Current { get; }

	// Methods
	// Offset : 0x762640
	internal Void .ctor(String s) { }
	// Offset : 0x762690
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x7627c8
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x7626fc
	public Char get_Current() { }
	// Offset : 0x7627cc
	public Object Clone() { }
	// Offset : 0x76284c
	public Boolean MoveNext() { }
	// Offset : 0x76286c
	public Void Reset() { }
}

// Dll : mscorlib.dll
// Namespace: System
public static class Console
{
	// Fields
	internal static TextWriter stdout; // 0x0
	private static TextWriter stderr; // 0x8
	private static TextReader stdin; // 0x10
	private static Encoding inputEncoding; // 0x18
	private static Encoding outputEncoding; // 0x20

	// Properties
	public static TextWriter Error { get; }

	// Methods
	// Offset : 0x774278
	private static Void .cctor() { }
	// Offset : 0x77438c
	private static Void SetEncodings(Encoding inputEncoding, Encoding outputEncoding) { }
	// Offset : 0x7749e0
	public static TextWriter get_Error() { }
	// Offset : 0x774a48
	private static Stream Open(IntPtr handle, FileAccess access, Int32 bufferSize) { }
	// Offset : 0x77480c
	public static Stream OpenStandardError(Int32 bufferSize) { }
	// Offset : 0x774944
	public static Stream OpenStandardInput(Int32 bufferSize) { }
	// Offset : 0x7748a8
	public static Stream OpenStandardOutput(Int32 bufferSize) { }
	// Offset : 0x774b68
	public static Void SetOut(TextWriter newOut) { }
	// Offset : 0x774c1c
	public static Void WriteLine(String value) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class ContextBoundObject : MarshalByRefObject
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x774cbc
	protected Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
public static class Convert
{
	// Fields
	public static readonly Object DBNull; // 0x0
	private static readonly Type[] conversionTable; // 0x8

	// Properties

	// Methods
	// Offset : 0x774cc4
	private static Void .cctor() { }
	// Offset : 0x775408
	private static Byte[] InternalFromBase64String(String str, Boolean allowWhitespaceOnly) { }
	// Offset : 0x775410
	public static Byte[] FromBase64String(String s) { }
	// Offset : 0x7754ec
	public static String ToBase64String(Byte[] inArray) { }
	// Offset : 0x7755a0
	public static String ToBase64String(Byte[] inArray, Int32 offset, Int32 length) { }
	// Offset : 0x760520
	public static Boolean ToBoolean(Byte value) { }
	// Offset : 0x775708
	public static Boolean ToBoolean(Decimal value) { }
	// Offset : 0x7757a8
	public static Boolean ToBoolean(Double value) { }
	// Offset : 0x7757b4
	public static Boolean ToBoolean(Single value) { }
	// Offset : 0x7757c0
	public static Boolean ToBoolean(Int32 value) { }
	// Offset : 0x7757cc
	public static Boolean ToBoolean(Int64 value) { }
	// Offset : 0x7757d8
	public static Boolean ToBoolean(SByte value) { }
	// Offset : 0x7757e4
	public static Boolean ToBoolean(Int16 value) { }
	// Offset : 0x7757f0
	public static Boolean ToBoolean(String value) { }
	// Offset : 0x775868
	public static Boolean ToBoolean(String value, IFormatProvider provider) { }
	// Offset : 0x7758e0
	public static Boolean ToBoolean(UInt32 value) { }
	// Offset : 0x7758ec
	public static Boolean ToBoolean(UInt64 value) { }
	// Offset : 0x7758f8
	public static Boolean ToBoolean(UInt16 value) { }
	// Offset : 0x775904
	public static Boolean ToBoolean(Object value) { }
	// Offset : 0x775980
	public static Boolean ToBoolean(Object value, IFormatProvider provider) { }
	// Offset : 0x75f488
	public static Byte ToByte(Boolean value) { }
	// Offset : 0x761290
	public static Byte ToByte(Char value) { }
	// Offset : 0x775b44
	public static Byte ToByte(Decimal value) { }
	// Offset : 0x775cc0
	public static Byte ToByte(Double value) { }
	// Offset : 0x775e10
	public static Byte ToByte(Single value) { }
	// Offset : 0x775f6c
	public static Byte ToByte(Int32 value) { }
	// Offset : 0x776010
	public static Byte ToByte(Int64 value) { }
	// Offset : 0x7760b4
	public static Byte ToByte(SByte value) { }
	// Offset : 0x776158
	public static Byte ToByte(Int16 value) { }
	// Offset : 0x776200
	public static Byte ToByte(String value) { }
	// Offset : 0x776214
	public static Byte ToByte(String value, IFormatProvider provider) { }
	// Offset : 0x77622c
	public static Byte ToByte(UInt32 value) { }
	// Offset : 0x7762d0
	public static Byte ToByte(UInt64 value) { }
	// Offset : 0x776374
	public static Byte ToByte(UInt16 value) { }
	// Offset : 0x77641c
	public static Byte ToByte(Object value, IFormatProvider provider) { }
	// Offset : 0x76059c
	public static Char ToChar(Byte value) { }
	// Offset : 0x7765e0
	public static Char ToChar(Int32 value) { }
	// Offset : 0x776684
	public static Char ToChar(Int64 value) { }
	// Offset : 0x776728
	public static Char ToChar(Single value) { }
	// Offset : 0x77679c
	public static Char ToChar(SByte value) { }
	// Offset : 0x77683c
	public static Char ToChar(Int16 value) { }
	// Offset : 0x7768e0
	public static Char ToChar(String value) { }
	// Offset : 0x776944
	public static Char ToChar(String value, IFormatProvider provider) { }
	// Offset : 0x7769a8
	public static Char ToChar(UInt32 value) { }
	// Offset : 0x776a4c
	public static Char ToChar(UInt64 value) { }
	// Offset : 0x776af0
	public static Char ToChar(UInt16 value) { }
	// Offset : 0x776af4
	public static Char ToChar(Object value, IFormatProvider provider) { }
	// Offset : 0x776cb8
	public static DateTime ToDateTime(String value, IFormatProvider provider) { }
	// Offset : 0x776d60
	public static DateTime ToDateTime(Int16 value) { }
	// Offset : 0x776dd4
	public static DateTime ToDateTime(Int32 value) { }
	// Offset : 0x776e48
	public static DateTime ToDateTime(Int64 value) { }
	// Offset : 0x776ebc
	public static DateTime ToDateTime(Single value) { }
	// Offset : 0x776f30
	public static DateTime ToDateTime(Object value, IFormatProvider provider) { }
	// Offset : 0x777118
	public static DateTime ToDateTime(SByte value) { }
	// Offset : 0x77718c
	public static DateTime ToDateTime(UInt16 value) { }
	// Offset : 0x777200
	public static DateTime ToDateTime(UInt32 value) { }
	// Offset : 0x777274
	public static DateTime ToDateTime(UInt64 value) { }
	// Offset : 0x75f5cc
	public static Decimal ToDecimal(Boolean value) { }
	// Offset : 0x760674
	public static Decimal ToDecimal(Byte value) { }
	// Offset : 0x7772e8
	public static Decimal ToDecimal(Double value) { }
	// Offset : 0x777358
	public static Decimal ToDecimal(Single value) { }
	// Offset : 0x7773c8
	public static Decimal ToDecimal(Int32 value) { }
	// Offset : 0x777430
	public static Decimal ToDecimal(Int64 value) { }
	// Offset : 0x777498
	public static Decimal ToDecimal(SByte value) { }
	// Offset : 0x777500
	public static Decimal ToDecimal(Int16 value) { }
	// Offset : 0x777568
	public static Decimal ToDecimal(String value, IFormatProvider provider) { }
	// Offset : 0x777610
	public static Decimal ToDecimal(UInt32 value) { }
	// Offset : 0x777678
	public static Decimal ToDecimal(UInt64 value) { }
	// Offset : 0x7776e0
	public static Decimal ToDecimal(UInt16 value) { }
	// Offset : 0x777748
	public static Decimal ToDecimal(Object value, IFormatProvider provider) { }
	// Offset : 0x75f6ac
	public static Double ToDouble(Boolean value) { }
	// Offset : 0x760744
	public static Double ToDouble(Byte value) { }
	// Offset : 0x777924
	public static Double ToDouble(Decimal value) { }
	// Offset : 0x77799c
	public static Double ToDouble(Double value) { }
	// Offset : 0x7779a0
	public static Double ToDouble(Single value) { }
	// Offset : 0x7779a8
	public static Double ToDouble(Int32 value) { }
	// Offset : 0x7779b0
	public static Double ToDouble(Int64 value) { }
	// Offset : 0x7779b8
	public static Double ToDouble(SByte value) { }
	// Offset : 0x7779c4
	public static Double ToDouble(Int16 value) { }
	// Offset : 0x7779d0
	public static Double ToDouble(String value, IFormatProvider provider) { }
	// Offset : 0x7779e4
	public static Double ToDouble(UInt32 value) { }
	// Offset : 0x7779ec
	public static Double ToDouble(UInt64 value) { }
	// Offset : 0x7779f4
	public static Double ToDouble(UInt16 value) { }
	// Offset : 0x777a00
	public static Double ToDouble(Object value, IFormatProvider provider) { }
	// Offset : 0x75f72c
	public static Int16 ToInt16(Boolean value) { }
	// Offset : 0x7607b8
	public static Int16 ToInt16(Byte value) { }
	// Offset : 0x7614e0
	public static Int16 ToInt16(Char value) { }
	// Offset : 0x777bc4
	public static Int16 ToInt16(Decimal value) { }
	// Offset : 0x777d40
	public static Int16 ToInt16(Double value) { }
	// Offset : 0x777e6c
	public static Int16 ToInt16(Single value) { }
	// Offset : 0x777fa4
	public static Int16 ToInt16(Int32 value) { }
	// Offset : 0x77804c
	public static Int16 ToInt16(Int64 value) { }
	// Offset : 0x7780f4
	public static Int16 ToInt16(SByte value) { }
	// Offset : 0x7780fc
	public static Int16 ToInt16(Int16 value) { }
	// Offset : 0x778100
	public static Int16 ToInt16(String value, IFormatProvider provider) { }
	// Offset : 0x778110
	public static Int16 ToInt16(UInt32 value) { }
	// Offset : 0x7781b4
	public static Int16 ToInt16(UInt64 value) { }
	// Offset : 0x778258
	public static Int16 ToInt16(UInt16 value) { }
	// Offset : 0x7782fc
	public static Int16 ToInt16(Object value) { }
	// Offset : 0x778378
	public static Int16 ToInt16(Object value, IFormatProvider provider) { }
	// Offset : 0x75f7a0
	public static Int32 ToInt32(Boolean value) { }
	// Offset : 0x760828
	public static Int32 ToInt32(Byte value) { }
	// Offset : 0x7615ec
	public static Int32 ToInt32(Char value) { }
	// Offset : 0x77853c
	public static Int32 ToInt32(Decimal value) { }
	// Offset : 0x7786b8
	public static Int32 ToInt32(Double value) { }
	// Offset : 0x778808
	public static Int32 ToInt32(Single value) { }
	// Offset : 0x778964
	public static Int32 ToInt32(Int64 value) { }
	// Offset : 0x778a10
	public static Int32 ToInt32(SByte value) { }
	// Offset : 0x778a18
	public static Int32 ToInt32(Int16 value) { }
	// Offset : 0x778a20
	public static Int32 ToInt32(String value, IFormatProvider provider) { }
	// Offset : 0x778a30
	public static Int32 ToInt32(UInt32 value) { }
	// Offset : 0x778ad0
	public static Int32 ToInt32(UInt64 value) { }
	// Offset : 0x778b74
	public static Int32 ToInt32(UInt16 value) { }
	// Offset : 0x778b7c
	public static Int32 ToInt32(Object value) { }
	// Offset : 0x778bf8
	public static Int32 ToInt32(Object value, IFormatProvider provider) { }
	// Offset : 0x75f814
	public static Int64 ToInt64(Boolean value) { }
	// Offset : 0x760898
	public static Int64 ToInt64(Byte value) { }
	// Offset : 0x76165c
	public static Int64 ToInt64(Char value) { }
	// Offset : 0x778dbc
	public static Int64 ToInt64(Decimal value) { }
	// Offset : 0x778f58
	public static Int64 ToInt64(Double value) { }
	// Offset : 0x779084
	public static Int64 ToInt64(Single value) { }
	// Offset : 0x7791bc
	public static Int64 ToInt64(Int32 value) { }
	// Offset : 0x7791c4
	public static Int64 ToInt64(Int64 value) { }
	// Offset : 0x7791c8
	public static Int64 ToInt64(SByte value) { }
	// Offset : 0x7791d0
	public static Int64 ToInt64(Int16 value) { }
	// Offset : 0x7791d8
	public static Int64 ToInt64(String value) { }
	// Offset : 0x7791e8
	public static Int64 ToInt64(String value, IFormatProvider provider) { }
	// Offset : 0x7791f8
	public static Int64 ToInt64(UInt32 value) { }
	// Offset : 0x779200
	public static Int64 ToInt64(UInt64 value) { }
	// Offset : 0x7792a0
	public static Int64 ToInt64(UInt16 value) { }
	// Offset : 0x7792a8
	public static Int64 ToInt64(Object value) { }
	// Offset : 0x779324
	public static Int64 ToInt64(Object value, IFormatProvider provider) { }
	// Offset : 0x75f888
	public static SByte ToSByte(Boolean value) { }
	// Offset : 0x760908
	public static SByte ToSByte(Byte value) { }
	// Offset : 0x7616cc
	public static SByte ToSByte(Char value) { }
	// Offset : 0x7794e8
	public static SByte ToSByte(Decimal value) { }
	// Offset : 0x779664
	public static SByte ToSByte(Double value) { }
	// Offset : 0x779790
	public static SByte ToSByte(Single value) { }
	// Offset : 0x7798c8
	public static SByte ToSByte(Int32 value) { }
	// Offset : 0x779970
	public static SByte ToSByte(Int64 value) { }
	// Offset : 0x779a18
	public static SByte ToSByte(Int16 value) { }
	// Offset : 0x779ac4
	public static SByte ToSByte(String value, IFormatProvider provider) { }
	// Offset : 0x779b64
	public static SByte ToSByte(UInt32 value) { }
	// Offset : 0x779c08
	public static SByte ToSByte(UInt64 value) { }
	// Offset : 0x779cac
	public static SByte ToSByte(UInt16 value) { }
	// Offset : 0x779d54
	public static SByte ToSByte(Object value, IFormatProvider provider) { }
	// Offset : 0x75f904
	public static Single ToSingle(Boolean value) { }
	// Offset : 0x760a14
	public static Single ToSingle(Byte value) { }
	// Offset : 0x779f18
	public static Single ToSingle(Decimal value) { }
	// Offset : 0x779f90
	public static Single ToSingle(Double value) { }
	// Offset : 0x779f98
	public static Single ToSingle(Single value) { }
	// Offset : 0x779f9c
	public static Single ToSingle(Int32 value) { }
	// Offset : 0x779fa4
	public static Single ToSingle(Int64 value) { }
	// Offset : 0x779fac
	public static Single ToSingle(SByte value) { }
	// Offset : 0x779fb8
	public static Single ToSingle(Int16 value) { }
	// Offset : 0x779fc4
	public static Single ToSingle(String value, IFormatProvider provider) { }
	// Offset : 0x779fd8
	public static Single ToSingle(UInt32 value) { }
	// Offset : 0x779fe4
	public static Single ToSingle(UInt64 value) { }
	// Offset : 0x779ff0
	public static Single ToSingle(UInt16 value) { }
	// Offset : 0x779ffc
	public static Single ToSingle(Object value, IFormatProvider provider) { }
	// Offset : 0x77a1c0
	public static String ToString(Char value) { }
	// Offset : 0x77a1d8
	public static String ToString(DateTime value, IFormatProvider provider) { }
	// Offset : 0x77a204
	public static String ToString(Decimal value, IFormatProvider provider) { }
	// Offset : 0x77a230
	public static String ToString(Double value, IFormatProvider provider) { }
	// Offset : 0x77a260
	public static String ToString(Int32 value, IFormatProvider provider) { }
	// Offset : 0x77a288
	public static String ToString(Int64 value, IFormatProvider provider) { }
	// Offset : 0x77a2b0
	public static String ToString(Object value) { }
	// Offset : 0x77a318
	public static String ToString(Object value, IFormatProvider provider) { }
	// Offset : 0x77a560
	public static String ToString(UInt64 value, IFormatProvider provider) { }
	// Offset : 0x75f984
	public static UInt16 ToUInt16(Boolean value) { }
	// Offset : 0x760a88
	public static UInt16 ToUInt16(Byte value) { }
	// Offset : 0x761844
	public static UInt16 ToUInt16(Char value) { }
	// Offset : 0x77a588
	public static UInt16 ToUInt16(Decimal value) { }
	// Offset : 0x77a704
	public static UInt16 ToUInt16(Double value) { }
	// Offset : 0x77a828
	public static UInt16 ToUInt16(Single value) { }
	// Offset : 0x77a958
	public static UInt16 ToUInt16(Int32 value) { }
	// Offset : 0x77a9fc
	public static UInt16 ToUInt16(Int64 value) { }
	// Offset : 0x77aaa0
	public static UInt16 ToUInt16(SByte value) { }
	// Offset : 0x77ab40
	public static UInt16 ToUInt16(Int16 value) { }
	// Offset : 0x77abe4
	public static UInt16 ToUInt16(String value, IFormatProvider provider) { }
	// Offset : 0x77abf4
	public static UInt16 ToUInt16(UInt32 value) { }
	// Offset : 0x77ac98
	public static UInt16 ToUInt16(UInt64 value) { }
	// Offset : 0x77ad3c
	public static UInt16 ToUInt16(Object value, IFormatProvider provider) { }
	// Offset : 0x75f9f8
	public static UInt32 ToUInt32(Boolean value) { }
	// Offset : 0x760af8
	public static UInt32 ToUInt32(Byte value) { }
	// Offset : 0x7618b0
	public static UInt32 ToUInt32(Char value) { }
	// Offset : 0x77af00
	public static UInt32 ToUInt32(Decimal value) { }
	// Offset : 0x77b08c
	public static UInt32 ToUInt32(Double value) { }
	// Offset : 0x77b1b0
	public static UInt32 ToUInt32(Single value) { }
	// Offset : 0x77b2e0
	public static UInt32 ToUInt32(Int32 value) { }
	// Offset : 0x77b380
	public static UInt32 ToUInt32(Int64 value) { }
	// Offset : 0x77b424
	public static UInt32 ToUInt32(SByte value) { }
	// Offset : 0x77b4c4
	public static UInt32 ToUInt32(Int16 value) { }
	// Offset : 0x77b564
	public static UInt32 ToUInt32(String value, IFormatProvider provider) { }
	// Offset : 0x77b574
	public static UInt32 ToUInt32(UInt64 value) { }
	// Offset : 0x77b618
	public static UInt32 ToUInt32(UInt16 value) { }
	// Offset : 0x77b620
	public static UInt32 ToUInt32(Object value) { }
	// Offset : 0x77b69c
	public static UInt32 ToUInt32(Object value, IFormatProvider provider) { }
	// Offset : 0x75fa6c
	public static UInt64 ToUInt64(Boolean value) { }
	// Offset : 0x760b68
	public static UInt64 ToUInt64(Byte value) { }
	// Offset : 0x761920
	public static UInt64 ToUInt64(Char value) { }
	// Offset : 0x77b860
	public static UInt64 ToUInt64(Decimal value) { }
	// Offset : 0x77b9ec
	public static UInt64 ToUInt64(Double value) { }
	// Offset : 0x77bb10
	public static UInt64 ToUInt64(Single value) { }
	// Offset : 0x77bc40
	public static UInt64 ToUInt64(Int32 value) { }
	// Offset : 0x77bce0
	public static UInt64 ToUInt64(Int64 value) { }
	// Offset : 0x77bd80
	public static UInt64 ToUInt64(SByte value) { }
	// Offset : 0x77be10
	public static UInt64 ToUInt64(Int16 value) { }
	// Offset : 0x77beb4
	public static UInt64 ToUInt64(String value, IFormatProvider provider) { }
	// Offset : 0x77bec4
	public static UInt64 ToUInt64(UInt32 value) { }
	// Offset : 0x77becc
	public static UInt64 ToUInt64(UInt16 value) { }
	// Offset : 0x77bed4
	public static UInt64 ToUInt64(Object value) { }
	// Offset : 0x77bf50
	public static UInt64 ToUInt64(Object value, IFormatProvider provider) { }
	// Offset : 0x77c114
	public static Object ChangeType(Object value, Type conversionType) { }
	// Offset : 0x75e008
	internal static Object ToType(Object value, Type conversionType, IFormatProvider provider, Boolean try_target_to_type) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class DBNull : IConvertible, ISerializable
{
	// Fields
	public static readonly DBNull Value; // 0x0

	// Properties

	// Methods
	// Offset : 0x6ab39c
	private Void .ctor() { }
	// Offset : 0x6ab3a4
	private Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6ab41c
	private static Void .cctor() { }
	// Offset : 0x6ab480
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x6ab4e8
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x6ab550
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x6ab5b8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x6ab620
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x6ab688
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x6ab6f0
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x6ab758
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x6ab7c0
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x6ab828
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x6ab890
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x6ab8f8
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x6aba24
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x6aba8c
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x6abaf4
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x6abb5c
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6abb64
	public override String ToString() { }
	// Offset : 0x6abbcc
	public String ToString(IFormatProvider provider) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct DateTime : IFormattable, IConvertible, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	private TimeSpan ticks; // 0x10
	private DateTimeKind kind; // 0x18
	public static readonly DateTime MaxValue; // 0x0
	public static readonly DateTime MinValue; // 0x10
	private static readonly String[] ParseTimeFormats; // 0x20
	private static readonly String[] ParseYearDayMonthFormats; // 0x28
	private static readonly String[] ParseYearMonthDayFormats; // 0x30
	private static readonly String[] ParseDayMonthYearFormats; // 0x38
	private static readonly String[] ParseMonthDayYearFormats; // 0x40
	private static readonly String[] MonthDayShortFormats; // 0x48
	private static readonly String[] DayMonthShortFormats; // 0x50
	private static readonly Int32[] daysmonth; // 0x58
	private static readonly Int32[] daysmonthleap; // 0x60
	private static Object to_local_time_span_object; // 0x68
	private static Int64 last_now; // 0x70

	// Properties
	public Int32 Month { get; }
	public Int32 Day { get; }
	public DayOfWeek DayOfWeek { get; }
	public Int32 Hour { get; }
	public Int32 Minute { get; }
	public Int32 Second { get; }
	public static DateTime Now { get; }
	public Int64 Ticks { get; }
	public static DateTime Today { get; }
	public static DateTime UtcNow { get; }
	public Int32 Year { get; }
	public DateTimeKind Kind { get; }

	// Methods
	// Offset : 0x2ce900
	public Void .ctor(Int64 ticks) { }
	// Offset : 0x2ce908
	public Void .ctor(Int32 year, Int32 month, Int32 day) { }
	// Offset : 0x2ce938
	public Void .ctor(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond) { }
	// Offset : 0x2ce940
	internal Void .ctor(Boolean check, TimeSpan value) { }
	// Offset : 0x2ce94c
	public Void .ctor(Int64 ticks, DateTimeKind kind) { }
	// Offset : 0x6ac304
	private static Void .cctor() { }
	// Offset : 0x2ce980
	private Boolean System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// Offset : 0x2ce98c
	private Byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// Offset : 0x2ce998
	private Char System.IConvertible.ToChar(IFormatProvider provider) { }
	// Offset : 0x2ce9a4
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// Offset : 0x2ce9b0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// Offset : 0x2ce9bc
	private Double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// Offset : 0x2ce9c8
	private Int16 System.IConvertible.ToInt16(IFormatProvider provider) { }
	// Offset : 0x2ce9d4
	private Int32 System.IConvertible.ToInt32(IFormatProvider provider) { }
	// Offset : 0x2ce9e0
	private Int64 System.IConvertible.ToInt64(IFormatProvider provider) { }
	// Offset : 0x2ce9ec
	private SByte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// Offset : 0x2ce9f8
	private Single System.IConvertible.ToSingle(IFormatProvider provider) { }
	// Offset : 0x2cea04
	private Object System.IConvertible.ToType(Type targetType, IFormatProvider provider) { }
	// Offset : 0x2cea0c
	private UInt16 System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// Offset : 0x2cea18
	private UInt32 System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// Offset : 0x2cea24
	private UInt64 System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// Offset : 0x6abf4c
	private static Int32 AbsoluteDays(Int32 year, Int32 month, Int32 day) { }
	// Offset : 0x2cea30
	private Int32 FromTicks(Which what) { }
	// Offset : 0x2cea38
	public Int32 get_Month() { }
	// Offset : 0x2cea44
	public Int32 get_Day() { }
	// Offset : 0x2cea50
	public DayOfWeek get_DayOfWeek() { }
	// Offset : 0x2cea98
	public Int32 get_Hour() { }
	// Offset : 0x2ceaa4
	public Int32 get_Minute() { }
	// Offset : 0x2ceab0
	public Int32 get_Second() { }
	// Offset : 0x6ae618
	internal static Int64 GetTimeMonotonic() { }
	// Offset : 0x6ae61c
	internal static Int64 GetNow() { }
	// Offset : 0x6ab200
	public static DateTime get_Now() { }
	// Offset : 0x2ceabc
	public Int64 get_Ticks() { }
	// Offset : 0x6ae6c4
	public static DateTime get_Today() { }
	// Offset : 0x6ae798
	public static DateTime get_UtcNow() { }
	// Offset : 0x2ceac8
	public Int32 get_Year() { }
	// Offset : 0x2cead4
	public DateTimeKind get_Kind() { }
	// Offset : 0x2ceadc
	public DateTime Add(TimeSpan value) { }
	// Offset : 0x2ceae4
	public DateTime AddTicks(Int64 value) { }
	// Offset : 0x2ceaec
	public DateTime AddMilliseconds(Double value) { }
	// Offset : 0x2ceaf4
	public DateTime AddSeconds(Double value) { }
	// Offset : 0x6aeaac
	public static Int32 Compare(DateTime t1, DateTime t2) { }
	// Offset : 0x2ceb08
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2ceb10
	public Int32 CompareTo(DateTime value) { }
	// Offset : 0x2ceb18
	public Boolean Equals(DateTime value) { }
	// Offset : 0x2ceb20
	public Int64 ToBinary() { }
	// Offset : 0x6aee78
	public static DateTime FromBinary(Int64 dateData) { }
	// Offset : 0x6af03c
	public static DateTime SpecifyKind(DateTime value, DateTimeKind kind) { }
	// Offset : 0x6abdfc
	public static Int32 DaysInMonth(Int32 year, Int32 month) { }
	// Offset : 0x2ceb28
	public override Boolean Equals(Object value) { }
	// Offset : 0x2ceb30
	private Void CheckDateTimeKind(DateTimeKind kind) { }
	// Offset : 0x2ceb34
	public override Int32 GetHashCode() { }
	// Offset : 0x6ae2bc
	public static Boolean IsLeapYear(Int32 year) { }
	// Offset : 0x6af164
	public static DateTime Parse(String s) { }
	// Offset : 0x6af1cc
	public static DateTime Parse(String s, IFormatProvider provider) { }
	// Offset : 0x6af244
	public static DateTime Parse(String s, IFormatProvider provider, DateTimeStyles styles) { }
	// Offset : 0x6af34c
	internal static Boolean CoreParse(String s, IFormatProvider provider, DateTimeStyles styles, out DateTime result, out DateTimeOffset dto, Boolean setExceptionOnError, ref Exception exception) { }
	// Offset : 0x6afe24
	private static String[] YearMonthDayFormats(DateTimeFormatInfo dfi, Boolean setExceptionOnError, ref Exception exc) { }
	// Offset : 0x6b2c6c
	private static Int32 _ParseNumber(String s, Int32 valuePos, Int32 min_digits, Int32 digits, Boolean leadingzero, Boolean sloppy_parsing, out Int32 num_parsed) { }
	// Offset : 0x6b2e44
	private static Int32 _ParseEnum(String s, Int32 sPos, String[] values, String[] invValues, Boolean exact, out Int32 num_parsed) { }
	// Offset : 0x6b3204
	private static Boolean _ParseString(String s, Int32 sPos, Int32 maxlength, String value, out Int32 num_parsed) { }
	// Offset : 0x6b3348
	private static Boolean _ParseAmPm(String s, Int32 valuePos, Int32 num, DateTimeFormatInfo dfi, Boolean exact, out Int32 num_parsed, ref Int32 ampm) { }
	// Offset : 0x6b374c
	private static Boolean _ParseTimeSeparator(String s, Int32 sPos, DateTimeFormatInfo dfi, Boolean exact, out Int32 num_parsed) { }
	// Offset : 0x6b3858
	private static Boolean _ParseDateSeparator(String s, Int32 sPos, DateTimeFormatInfo dfi, Boolean exact, out Int32 num_parsed) { }
	// Offset : 0x6b3680
	private static Boolean IsLetter(String s, Int32 pos) { }
	// Offset : 0x6b0234
	private static Boolean _DoParse(String s, String firstPart, String secondPart, Boolean exact, out DateTime result, out DateTimeOffset dto, DateTimeFormatInfo dfi, DateTimeStyles style, Boolean firstPartIsDate, ref Boolean incompleteFormat, ref Boolean longYear) { }
	// Offset : 0x6b3fb4
	public static DateTime ParseExact(String s, String format, IFormatProvider provider, DateTimeStyles style) { }
	// Offset : 0x6b40e8
	public static DateTime ParseExact(String s, String[] formats, IFormatProvider provider, DateTimeStyles style) { }
	// Offset : 0x6b42b0
	private static Void CheckStyle(DateTimeStyles style) { }
	// Offset : 0x6b2a38
	private static Boolean ParseExact(String s, String[] formats, DateTimeFormatInfo dfi, DateTimeStyles style, out DateTime ret, Boolean exact, ref Boolean longYear, Boolean setExceptionOnError, ref Exception exception) { }
	// Offset : 0x2ceb50
	public TimeSpan Subtract(DateTime value) { }
	// Offset : 0x2ceb58
	public DateTime Subtract(TimeSpan value) { }
	// Offset : 0x2ceb60
	public override String ToString() { }
	// Offset : 0x2ceb68
	public String ToString(IFormatProvider provider) { }
	// Offset : 0x2ceb7c
	public String ToString(String format) { }
	// Offset : 0x2ceb88
	public String ToString(String format, IFormatProvider provider) { }
	// Offset : 0x2ceb90
	public DateTime ToLocalTime() { }
	// Offset : 0x2ceb98
	public DateTime ToUniversalTime() { }
	// Offset : 0x6ae620
	public static DateTime op_Addition(DateTime d, TimeSpan t) { }
	// Offset : 0x6b4714
	public static Boolean op_Equality(DateTime d1, DateTime d2) { }
	// Offset : 0x6b478c
	public static Boolean op_GreaterThan(DateTime t1, DateTime t2) { }
	// Offset : 0x6b4804
	public static Boolean op_GreaterThanOrEqual(DateTime t1, DateTime t2) { }
	// Offset : 0x6b39e0
	public static Boolean op_Inequality(DateTime d1, DateTime d2) { }
	// Offset : 0x6b487c
	public static Boolean op_LessThan(DateTime t1, DateTime t2) { }
	// Offset : 0x6b48f4
	public static Boolean op_LessThanOrEqual(DateTime t1, DateTime t2) { }
	// Offset : 0x6b496c
	public static TimeSpan op_Subtraction(DateTime d1, DateTime d2) { }
	// Offset : 0x6b4a18
	public static DateTime op_Subtraction(DateTime d, TimeSpan t) { }
}

// Dll : mscorlib.dll
// Namespace: 
private enum Which
{
	// Fields
	public Int32 value__; // 0x10
	public const Which Day = 0; // 0x0
	public const Which DayYear = 1; // 0x0
	public const Which Month = 2; // 0x0
	public const Which Year = 3; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public enum DateTimeKind
{
	// Fields
	public Int32 value__; // 0x10
	public const DateTimeKind Unspecified = 0; // 0x0
	public const DateTimeKind Utc = 1; // 0x0
	public const DateTimeKind Local = 2; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct DateTimeOffset : IFormattable, IComparable, ISerializable, IComparable`1, IEquatable`1, IDeserializationCallback
{
	// Fields
	public static readonly DateTimeOffset MaxValue; // 0x0
	public static readonly DateTimeOffset MinValue; // 0x18
	private DateTime dt; // 0x10
	private TimeSpan utc_offset; // 0x20

	// Properties
	public DateTime DateTime { get; }
	public TimeSpan Offset { get; }
	public DateTime UtcDateTime { get; }

	// Methods
	// Offset : 0x2ceba0
	public Void .ctor(DateTime dateTime) { }
	// Offset : 0x2ceba8
	public Void .ctor(DateTime dateTime, TimeSpan offset) { }
	// Offset : 0x2cebb0
	public Void .ctor(Int64 ticks, TimeSpan offset) { }
	// Offset : 0x2cebb8
	private Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6b4cbc
	private static Void .cctor() { }
	// Offset : 0x2cebc0
	private Int32 System.IComparable.CompareTo(Object obj) { }
	// Offset : 0x2cebc8
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x2cebd0
	private Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object sender) { }
	// Offset : 0x2cebd4
	public Int32 CompareTo(DateTimeOffset other) { }
	// Offset : 0x2cec08
	public Boolean Equals(DateTimeOffset other) { }
	// Offset : 0x2cec40
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cec48
	public override Int32 GetHashCode() { }
	// Offset : 0x2cec84
	public override String ToString() { }
	// Offset : 0x2cec94
	public String ToString(String format, IFormatProvider formatProvider) { }
	// Offset : 0x2cec9c
	public DateTime get_DateTime() { }
	// Offset : 0x2ceca4
	public TimeSpan get_Offset() { }
	// Offset : 0x2cecac
	public DateTime get_UtcDateTime() { }
}

// Dll : mscorlib.dll
// Namespace: System
internal static class DateTimeUtils
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6b684c
	public static Int32 CountRepeat(String fmt, Int32 p, Char c) { }
	// Offset : 0x6b68dc
	public static Void ZeroPad(StringBuilder output, Int32 digits, Int32 len) { }
	// Offset : 0x6b69ec
	public static Int32 ParseQuotedString(String fmt, Int32 pos, StringBuilder output) { }
	// Offset : 0x6b39d8
	public static String GetStandardPattern(Char format, DateTimeFormatInfo dfi, out Boolean useutc, out Boolean use_invariant) { }
	// Offset : 0x6b555c
	public static String GetStandardPattern(Char format, DateTimeFormatInfo dfi, out Boolean useutc, out Boolean use_invariant, Boolean date_time_offset) { }
	// Offset : 0x6b46f8
	public static String ToString(DateTime dt, String format, DateTimeFormatInfo dfi) { }
	// Offset : 0x6b58e8
	public static String ToString(DateTime dt, Nullable`1 utc_offset, String format, DateTimeFormatInfo dfi) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public enum DayOfWeek
{
	// Fields
	public Int32 value__; // 0x10
	public const DayOfWeek Sunday = 0; // 0x0
	public const DayOfWeek Monday = 1; // 0x0
	public const DayOfWeek Tuesday = 2; // 0x0
	public const DayOfWeek Wednesday = 3; // 0x0
	public const DayOfWeek Thursday = 4; // 0x0
	public const DayOfWeek Friday = 5; // 0x0
	public const DayOfWeek Saturday = 6; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
internal class DelegateData
{
	// Fields
	public Type target_type; // 0x10
	public String method_name; // 0x18

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
internal class DelegateSerializationHolder : ISerializable, IObjectReference
{
	// Fields
	private Delegate _delegate; // 0x10

	// Properties

	// Methods
	// Offset : 0x6bc284
	private Void .ctor(SerializationInfo info, StreamingContext ctx) { }
	// Offset : 0x6bbcb8
	public static Void GetDelegateData(Delegate instance, SerializationInfo info, StreamingContext ctx) { }
	// Offset : 0x6bca40
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6bcaa8
	public Object GetRealObject(StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: 
[Serializable]
private class DelegateEntry
{
	// Fields
	private String type; // 0x10
	private String assembly; // 0x18
	public Object target; // 0x20
	private String targetTypeAssembly; // 0x28
	private String targetTypeName; // 0x30
	private String methodName; // 0x38
	public DelegateEntry delegateEntry; // 0x40

	// Properties

	// Methods
	// Offset : 0x6bc7a8
	public Void .ctor(Delegate del, String targetLabel) { }
	// Offset : 0x6bc4e0
	public Delegate DeserializeDelegate(SerializationInfo info) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class DivideByZeroException : ArithmeticException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x6b83fc
	public Void .ctor() { }
	// Offset : 0x6be174
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class DllNotFoundException : TypeLoadException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x6be17c
	public Void .ctor() { }
	// Offset : 0x6be1ec
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class EntryPointNotFoundException : TypeLoadException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x6bff88
	public Void .ctor() { }
	// Offset : 0x6bfff8
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
internal struct MonoEnumInfo
{
	// Fields
	internal Type utype; // 0x10
	internal Array values; // 0x18
	internal String[] names; // 0x20
	internal Hashtable name_hash; // 0x28
	private static Hashtable cache; // 0xffffffffffffffff
	private static Hashtable global_cache; // 0x0
	private static Object global_cache_monitor; // 0x8
	internal static SByteComparer sbyte_comparer; // 0x10
	internal static ShortComparer short_comparer; // 0x18
	internal static IntComparer int_comparer; // 0x20
	internal static LongComparer long_comparer; // 0x28

	// Properties
	private static Hashtable Cache { get; }

	// Methods
	// Offset : 0x2ce8ec
	private Void .ctor(MonoEnumInfo other) { }
	// Offset : 0x69bb3c
	private static Void .cctor() { }
	// Offset : 0x69bc44
	private static Void get_enum_info(Type enumType, out MonoEnumInfo info) { }
	// Offset : 0x69bc48
	private static Hashtable get_Cache() { }
	// Offset : 0x69bd24
	internal static Void GetInfo(Type enumType, out MonoEnumInfo info) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal class SByteComparer : IComparer`1, IComparer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x69bc34
	public Void .ctor() { }
	// Offset : 0x69c594
	public Int32 Compare(Object x, Object y) { }
	// Offset : 0x69c60c
	public Int32 Compare(SByte ix, SByte iy) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal class ShortComparer : IComparer`1, IComparer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x69bc38
	public Void .ctor() { }
	// Offset : 0x69c618
	public Int32 Compare(Object x, Object y) { }
	// Offset : 0x69c690
	public Int32 Compare(Int16 ix, Int16 iy) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal class IntComparer : IComparer`1, IComparer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x69bc3c
	public Void .ctor() { }
	// Offset : 0x69c444
	public Int32 Compare(Object x, Object y) { }
	// Offset : 0x69c4d0
	public Int32 Compare(Int32 ix, Int32 iy) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal class LongComparer : IComparer`1, IComparer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x69bc40
	public Void .ctor() { }
	// Offset : 0x69c4ec
	public Int32 Compare(Object x, Object y) { }
	// Offset : 0x69c578
	public Int32 Compare(Int64 ix, Int64 iy) { }
}

// Dll : mscorlib.dll
// Namespace: System
public static class Environment
{
	// Fields
	private const Int32 mono_corlib_version; // 0x0
	private static OperatingSystem os; // 0x0

	// Properties
	public static Boolean SocketSecurityEnabled { get; }
	public static String NewLine { get; }
	internal static PlatformID Platform { get; }
	public static OperatingSystem OSVersion { get; }
	public static Int32 TickCount { get; }
	internal static Boolean IsRunningOnWindows { get; }

	// Methods
	// Offset : 0x6c3e50
	public static Boolean get_SocketSecurityEnabled() { }
	// Offset : 0x6be168
	public static String get_NewLine() { }
	// Offset : 0x6c3e54
	internal static PlatformID get_Platform() { }
	// Offset : 0x6c3e58
	internal static String GetOSVersionString() { }
	// Offset : 0x6c3e5c
	public static OperatingSystem get_OSVersion() { }
	// Offset : 0x6c3f10
	public static Int32 get_TickCount() { }
	// Offset : 0x6c3f14
	internal static String internalGetEnvironmentVariable(String variable) { }
	// Offset : 0x6c3f18
	public static String GetEnvironmentVariable(String variable) { }
	// Offset : 0x6c3f1c
	private static String GetWindowsFolderPath(Int32 folder) { }
	// Offset : 0x6c3f20
	public static String GetFolderPath(SpecialFolder folder) { }
	// Offset : 0x6c4214
	private static String ReadXdgUserDir(String config_dir, String home_dir, String key, String fallback) { }
	// Offset : 0x6c3f78
	internal static String InternalGetFolderPath(SpecialFolder folder) { }
	// Offset : 0x6c3f5c
	internal static Boolean get_IsRunningOnWindows() { }
	// Offset : 0x6c4730
	internal static String GetMachineConfigPath() { }
	// Offset : 0x6c472c
	internal static String internalGetHome() { }
}

// Dll : mscorlib.dll
// Namespace: 
public enum SpecialFolder
{
	// Fields
	public Int32 value__; // 0x10
	public const SpecialFolder MyDocuments = 5; // 0x0
	public const SpecialFolder Desktop = 0; // 0x0
	public const SpecialFolder MyComputer = 17; // 0x0
	public const SpecialFolder Programs = 2; // 0x0
	public const SpecialFolder Personal = 5; // 0x0
	public const SpecialFolder Favorites = 6; // 0x0
	public const SpecialFolder Startup = 7; // 0x0
	public const SpecialFolder Recent = 8; // 0x0
	public const SpecialFolder SendTo = 9; // 0x0
	public const SpecialFolder StartMenu = 11; // 0x0
	public const SpecialFolder MyMusic = 13; // 0x0
	public const SpecialFolder DesktopDirectory = 16; // 0x0
	public const SpecialFolder Templates = 21; // 0x0
	public const SpecialFolder ApplicationData = 26; // 0x0
	public const SpecialFolder LocalApplicationData = 28; // 0x0
	public const SpecialFolder InternetCache = 32; // 0x0
	public const SpecialFolder Cookies = 33; // 0x0
	public const SpecialFolder History = 34; // 0x0
	public const SpecialFolder CommonApplicationData = 35; // 0x0
	public const SpecialFolder System = 37; // 0x0
	public const SpecialFolder ProgramFiles = 38; // 0x0
	public const SpecialFolder MyPictures = 39; // 0x0
	public const SpecialFolder CommonProgramFiles = 43; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class EventArgs
{
	// Fields
	public static readonly EventArgs Empty; // 0x0

	// Properties

	// Methods
	// Offset : 0x6c4734
	public Void .ctor() { }
	// Offset : 0x6c473c
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class ExecutionEngineException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6c63d8
	public Void .ctor() { }
	// Offset : 0x6c6438
	public Void .ctor(String message) { }
	// Offset : 0x6c6440
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class FieldAccessException : MemberAccessException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6c6448
	public Void .ctor() { }
	// Offset : 0x6c64b8
	public Void .ctor(String message) { }
	// Offset : 0x6c64e8
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class FlagsAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6c64f0
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class FormatException : SystemException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x6bfc7c
	public Void .ctor() { }
	// Offset : 0x6afdf4
	public Void .ctor(String message) { }
	// Offset : 0x6c64f8
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
public static class GC
{
	// Fields

	// Properties
	public static Int32 MaxGeneration { get; }

	// Methods
	// Offset : 0x6c6500
	public static Int32 get_MaxGeneration() { }
	// Offset : 0x6c6504
	private static Void InternalCollect(Int32 generation) { }
	// Offset : 0x6c6508
	public static Void Collect() { }
	// Offset : 0x6c651c
	public static Void KeepAlive(Object obj) { }
	// Offset : 0x6c6520
	public static Void SuppressFinalize(Object obj) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct Guid : IFormattable, IComparable, IComparable`1, IEquatable`1
{
	// Fields
	private Int32 _a; // 0x10
	private Int16 _b; // 0x14
	private Int16 _c; // 0x16
	private Byte _d; // 0x18
	private Byte _e; // 0x19
	private Byte _f; // 0x1a
	private Byte _g; // 0x1b
	private Byte _h; // 0x1c
	private Byte _i; // 0x1d
	private Byte _j; // 0x1e
	private Byte _k; // 0x1f
	public static readonly Guid Empty; // 0x0
	private static Object _rngAccess; // 0x10
	private static RandomNumberGenerator _rng; // 0x18
	private static RandomNumberGenerator _fastRng; // 0x20

	// Properties

	// Methods
	// Offset : 0x2cfabc
	public Void .ctor(Byte[] b) { }
	// Offset : 0x2cfac4
	public Void .ctor(String g) { }
	// Offset : 0x2cfacc
	public Void .ctor(Int32 a, Int16 b, Int16 c, Byte[] d) { }
	// Offset : 0x2cfad4
	public Void .ctor(Int32 a, Int16 b, Int16 c, Byte d, Byte e, Byte f, Byte g, Byte h, Byte i, Byte j, Byte k) { }
	// Offset : 0x745484
	private static Void .cctor() { }
	// Offset : 0x7450e0
	private static Void CheckNull(Object o) { }
	// Offset : 0x745574
	private static Void CheckLength(Byte[] o, Int32 l) { }
	// Offset : 0x744f90
	private static Void CheckArray(Byte[] o, Int32 l) { }
	// Offset : 0x745684
	private static Int32 Compare(Int32 x, Int32 y) { }
	// Offset : 0x2cfb14
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2cfb1c
	public override Boolean Equals(Object o) { }
	// Offset : 0x2cfb24
	public Int32 CompareTo(Guid value) { }
	// Offset : 0x2cfb2c
	public Boolean Equals(Guid g) { }
	// Offset : 0x2cfb4c
	public override Int32 GetHashCode() { }
	// Offset : 0x745b5c
	private static Char ToHex(Int32 b) { }
	// Offset : 0x745b74
	public static Guid NewGuid() { }
	// Offset : 0x745d48
	internal static Byte[] FastNewGuidArray() { }
	// Offset : 0x745fe0
	private static Void AppendInt(StringBuilder builder, Int32 value) { }
	// Offset : 0x7461d0
	private static Void AppendShort(StringBuilder builder, Int16 value) { }
	// Offset : 0x746304
	private static Void AppendByte(StringBuilder builder, Byte value) { }
	// Offset : 0x2cfb54
	private String BaseToString(Boolean h, Boolean p, Boolean b) { }
	// Offset : 0x2cfb68
	public override String ToString() { }
	// Offset : 0x2cfb7c
	public String ToString(String format) { }
	// Offset : 0x2cfb84
	public String ToString(String format, IFormatProvider provider) { }
	// Offset : 0x746888
	public static Boolean op_Equality(Guid a, Guid b) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal class GuidParser
{
	// Fields
	private String _src; // 0x10
	private Int32 _length; // 0x18
	private Int32 _cur; // 0x1c

	// Properties

	// Methods
	// Offset : 0x74517c
	public Void .ctor(String src) { }
	// Offset : 0x7468bc
	private Void Reset() { }
	// Offset : 0x7468fc
	private Boolean AtEnd() { }
	// Offset : 0x74690c
	private Void ThrowFormatException() { }
	// Offset : 0x746994
	private UInt64 ParseHex(Int32 length, Boolean strictLength) { }
	// Offset : 0x746acc
	private Boolean ParseOptChar(Char c) { }
	// Offset : 0x746b44
	private Void ParseChar(Char c) { }
	// Offset : 0x746b60
	private Guid ParseGuid1() { }
	// Offset : 0x746dac
	private Void ParseHexPrefix() { }
	// Offset : 0x746de8
	private Guid ParseGuid2() { }
	// Offset : 0x7451ac
	public Guid Parse() { }
}

// Dll : mscorlib.dll
// Namespace: System
public interface ICustomFormatter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract String Format(String format, Object arg, IFormatProvider formatProvider) { }
}

// Dll : mscorlib.dll
// Namespace: System
public interface IFormatProvider
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Object GetFormat(Type formatType) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class IndexOutOfRangeException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x692598
	public Void .ctor() { }
	// Offset : 0x6925f8
	public Void .ctor(String message) { }
	// Offset : 0x692600
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class InvalidCastException : SystemException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x698230
	public Void .ctor() { }
	// Offset : 0x6982a4
	public Void .ctor(String message) { }
	// Offset : 0x6982d8
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class InvalidOperationException : SystemException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x6982e0
	public Void .ctor() { }
	// Offset : 0x698354
	public Void .ctor(String message) { }
	// Offset : 0x698388
	public Void .ctor(String message, Exception innerException) { }
	// Offset : 0x6983bc
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public enum LoaderOptimization
{
	// Fields
	public Int32 value__; // 0x10
	public const LoaderOptimization NotSpecified = 0; // 0x0
	public const LoaderOptimization SingleDomain = 1; // 0x0
	public const LoaderOptimization MultiDomain = 2; // 0x0
	public const LoaderOptimization MultiDomainHost = 3; // 0x0
	public const LoaderOptimization DomainMask = 3; // 0x0
	public const LoaderOptimization DisallowBindings = 4; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
public sealed class LocalDataStoreSlot
{
	// Fields
	internal Int32 slot; // 0x10
	internal Boolean thread_local; // 0x14
	private static Object lock_obj; // 0x0
	private static Boolean[] slot_bitmap_thread; // 0x8
	private static Boolean[] slot_bitmap_context; // 0x10

	// Properties

	// Methods
	// Offset : 0x6983c4
	internal Void .ctor(Boolean in_thread) { }
	// Offset : 0x69868c
	private static Void .cctor() { }
	// Offset : 0x6986ec
	protected override Void Finalize() { }
}

// Dll : mscorlib.dll
// Namespace: System
public static class Math
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x698ac4
	public static Single Abs(Single value) { }
	// Offset : 0x698ad4
	public static Int32 Abs(Int32 value) { }
	// Offset : 0x698b7c
	public static Int64 Abs(Int64 value) { }
	// Offset : 0x698c24
	public static Double Ceiling(Double a) { }
	// Offset : 0x698c3c
	public static Double Floor(Double d) { }
	// Offset : 0x698c44
	public static Double Log(Double a, Double newBase) { }
	// Offset : 0x698c80
	public static Single Max(Single val1, Single val2) { }
	// Offset : 0x698cd0
	public static Int32 Max(Int32 val1, Int32 val2) { }
	// Offset : 0x698cdc
	public static Int64 Max(Int64 val1, Int64 val2) { }
	// Offset : 0x698ce8
	public static Single Min(Single val1, Single val2) { }
	// Offset : 0x698d38
	public static Int32 Min(Int32 val1, Int32 val2) { }
	// Offset : 0x698d44
	public static Int64 Min(Int64 val1, Int64 val2) { }
	// Offset : 0x698d50
	public static Decimal Round(Decimal d) { }
	// Offset : 0x698ff4
	public static Double Round(Double a) { }
	// Offset : 0x699074
	public static Double Sin(Double a) { }
	// Offset : 0x699078
	public static Double Cos(Double d) { }
	// Offset : 0x69907c
	public static Double Tan(Double a) { }
	// Offset : 0x699080
	public static Double Acos(Double d) { }
	// Offset : 0x699084
	public static Double Asin(Double d) { }
	// Offset : 0x699088
	public static Double Atan2(Double y, Double x) { }
	// Offset : 0x69908c
	public static Double Log(Double d) { }
	// Offset : 0x699090
	public static Double Pow(Double x, Double y) { }
	// Offset : 0x699094
	public static Double Sqrt(Double d) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class MemberAccessException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6990ac
	public Void .ctor() { }
	// Offset : 0x699120
	public Void .ctor(String message) { }
	// Offset : 0x699154
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class MethodAccessException : MemberAccessException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x69915c
	public Void .ctor() { }
	// Offset : 0x6991e8
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class MissingFieldException : MissingMemberException
{
	// Fields

	// Properties
	public override String Message { get; }

	// Methods
	// Offset : 0x6991f0
	public Void .ctor() { }
	// Offset : 0x6992ac
	public Void .ctor(String message) { }
	// Offset : 0x6992dc
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x69949c
	public override String get_Message() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class MissingMemberException : MemberAccessException
{
	// Fields
	protected String ClassName; // 0x60
	protected String MemberName; // 0x68
	protected Byte[] Signature; // 0x70

	// Properties
	public override String Message { get; }

	// Methods
	// Offset : 0x69960c
	public Void .ctor() { }
	// Offset : 0x699260
	public Void .ctor(String message) { }
	// Offset : 0x6992e0
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x699698
	public Void .ctor(String className, String memberName) { }
	// Offset : 0x6996dc
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x699550
	public override String get_Message() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class MissingMethodException : MissingMemberException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties
	public override String Message { get; }

	// Methods
	// Offset : 0x6997d0
	public Void .ctor() { }
	// Offset : 0x699840
	public Void .ctor(String message) { }
	// Offset : 0x699870
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x699874
	public Void .ctor(String className, String methodName) { }
	// Offset : 0x6998d0
	public override String get_Message() { }
}

// Dll : mscorlib.dll
// Namespace: System
internal class MonoAsyncCall
{
	// Fields
	private Object msg; // 0x10
	private IntPtr cb_method; // 0x18
	private Object cb_target; // 0x20
	private Object state; // 0x28
	private Object res; // 0x30
	private Object out_args; // 0x38
	private Int64 wait_event; // 0x40

	// Properties

	// Methods
	// Offset : 0x699984
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
internal class MonoCustomAttrs
{
	// Fields
	private static Assembly corlib; // 0x0
	private static readonly Type AttributeUsageType; // 0x8
	private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x10

	// Properties

	// Methods
	// Offset : 0x699988
	private static Void .cctor() { }
	// Offset : 0x699a3c
	private static Boolean IsUserCattrProvider(Object obj) { }
	// Offset : 0x699c88
	internal static Object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, Boolean pseudoAttrs) { }
	// Offset : 0x699c90
	internal static Object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType) { }
	// Offset : 0x699f3c
	internal static Object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType) { }
	// Offset : 0x69a150
	internal static Attribute GetCustomAttribute(ICustomAttributeProvider obj, Type attributeType, Boolean inherit) { }
	// Offset : 0x69a2fc
	internal static Object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, Boolean inherit) { }
	// Offset : 0x69b160
	internal static Object[] GetCustomAttributes(ICustomAttributeProvider obj, Boolean inherit) { }
	// Offset : 0x69b32c
	private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj) { }
	// Offset : 0x69b330
	internal static IList`1 GetCustomAttributesData(ICustomAttributeProvider obj) { }
	// Offset : 0x69b3ec
	internal static Boolean IsDefined(ICustomAttributeProvider obj, Type attributeType, Boolean inherit) { }
	// Offset : 0x69b6cc
	internal static Boolean IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType) { }
	// Offset : 0x69b6d0
	private static PropertyInfo GetBasePropertyDefinition(PropertyInfo property) { }
	// Offset : 0x69aefc
	private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj) { }
	// Offset : 0x69ac70
	private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType) { }
}

// Dll : mscorlib.dll
// Namespace: 
private class AttributeInfo
{
	// Fields
	private AttributeUsageAttribute _usage; // 0x10
	private Int32 _inheritanceLevel; // 0x18

	// Properties
	public AttributeUsageAttribute Usage { get; }
	public Int32 InheritanceLevel { get; }

	// Methods
	// Offset : 0x69aef0
	public Void .ctor(AttributeUsageAttribute usage, Int32 inheritanceLevel) { }
	// Offset : 0x69aee0
	public AttributeUsageAttribute get_Usage() { }
	// Offset : 0x69aee8
	public Int32 get_InheritanceLevel() { }
}

// Dll : mscorlib.dll
// Namespace: System
internal class MonoTouchAOTHelper
{
	// Fields
	internal static Boolean FalseFlag; // 0x0

	// Properties

	// Methods
	// Offset : 0x69c6d0
	private static Void .cctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
internal class MonoTypeInfo
{
	// Fields
	public String full_name; // 0x10
	public ConstructorInfo default_ctor; // 0x18

	// Properties

	// Methods
	// Offset : 0x69c7b0
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
internal class MonoType : Type, ISerializable
{
	// Fields
	private MonoTypeInfo type_info; // 0x18

	// Properties
	public override Type UnderlyingSystemType { get; }
	public override Assembly Assembly { get; }
	public override String AssemblyQualifiedName { get; }
	public override Type BaseType { get; }
	public override String FullName { get; }
	public override MemberTypes MemberType { get; }
	public override String Name { get; }
	public override String Namespace { get; }
	public override Module Module { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Boolean ContainsGenericParameters { get; }
	public override Boolean IsGenericParameter { get; }

	// Methods
	// Offset : 0x69c6d4
	private static TypeAttributes get_attributes(Type type) { }
	// Offset : 0x69c6d8
	internal ConstructorInfo GetDefaultConstructor() { }
	// Offset : 0x69c7b4
	protected override TypeAttributes GetAttributeFlagsImpl() { }
	// Offset : 0x69c7b8
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x69cc28
	internal ConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, Type reflected_type) { }
	// Offset : 0x69cc2c
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }
	// Offset : 0x69cc34
	private EventInfo InternalGetEvent(String name, BindingFlags bindingAttr) { }
	// Offset : 0x69cc38
	public override EventInfo GetEvent(String name, BindingFlags bindingAttr) { }
	// Offset : 0x69ccdc
	public override FieldInfo GetField(String name, BindingFlags bindingAttr) { }
	// Offset : 0x69cce0
	internal FieldInfo[] GetFields_internal(BindingFlags bindingAttr, Type reflected_type) { }
	// Offset : 0x69cce4
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }
	// Offset : 0x69ccec
	public override Type GetInterface(String name, Boolean ignoreCase) { }
	// Offset : 0x69cfb4
	public override Type[] GetInterfaces() { }
	// Offset : 0x69cfb8
	internal MethodInfo[] GetMethodsByName(String name, BindingFlags bindingAttr, Boolean ignoreCase, Type reflected_type) { }
	// Offset : 0x69cfc0
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }
	// Offset : 0x69cfd8
	protected override MethodInfo GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x69d3cc
	internal PropertyInfo[] GetPropertiesByName(String name, BindingFlags bindingAttr, Boolean icase, Type reflected_type) { }
	// Offset : 0x69d3d4
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr) { }
	// Offset : 0x69d3ec
	protected override PropertyInfo GetPropertyImpl(String name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// Offset : 0x69d590
	protected override Boolean HasElementTypeImpl() { }
	// Offset : 0x69d644
	protected override Boolean IsArrayImpl() { }
	// Offset : 0x69d6ac
	protected override Boolean IsByRefImpl() { }
	// Offset : 0x69d6b0
	protected override Boolean IsPointerImpl() { }
	// Offset : 0x69d6b4
	protected override Boolean IsPrimitiveImpl() { }
	// Offset : 0x69d6b8
	public override Boolean IsSubclassOf(Type type) { }
	// Offset : 0x69d758
	public override Object InvokeMember(String name, BindingFlags invokeAttr, Binder binder, Object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters) { }
	// Offset : 0x69ebbc
	public override Type GetElementType() { }
	// Offset : 0x69ebc0
	public override Type get_UnderlyingSystemType() { }
	// Offset : 0x69ebc4
	public override Assembly get_Assembly() { }
	// Offset : 0x69ebc8
	public override String get_AssemblyQualifiedName() { }
	// Offset : 0x69ebd4
	private String getFullName(Boolean full_name, Boolean assembly_qualified) { }
	// Offset : 0x69ebe0
	public override Type get_BaseType() { }
	// Offset : 0x69ebe4
	public override String get_FullName() { }
	// Offset : 0x69ec84
	public override Boolean IsDefined(Type attributeType, Boolean inherit) { }
	// Offset : 0x69ed00
	public override Object[] GetCustomAttributes(Boolean inherit) { }
	// Offset : 0x69ed74
	public override Object[] GetCustomAttributes(Type attributeType, Boolean inherit) { }
	// Offset : 0x69ee38
	public override MemberTypes get_MemberType() { }
	// Offset : 0x69eebc
	public override String get_Name() { }
	// Offset : 0x69eec0
	public override String get_Namespace() { }
	// Offset : 0x69eec4
	public override Module get_Module() { }
	// Offset : 0x69eec8
	public override Type get_DeclaringType() { }
	// Offset : 0x69eecc
	public override Type get_ReflectedType() { }
	// Offset : 0x69ef0c
	public override RuntimeTypeHandle get_TypeHandle() { }
	// Offset : 0x69ef14
	public override Int32 GetArrayRank() { }
	// Offset : 0x69ef18
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x69ef20
	public override String ToString() { }
	// Offset : 0x69ef2c
	public override Type[] GetGenericArguments() { }
	// Offset : 0x69ef30
	public override Boolean get_ContainsGenericParameters() { }
	// Offset : 0x69f0f4
	public override Boolean get_IsGenericParameter() { }
	// Offset : 0x69f0f8
	public override Type GetGenericTypeDefinition() { }
	// Offset : 0x69cc20
	private MethodBase CheckMethodSecurity(MethodBase mb) { }
	// Offset : 0x69e8b0
	private Void ReorderParamArrayArguments(ref Object[] args, MethodBase method) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class MulticastNotSupportedException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6a002c
	public Void .ctor() { }
	// Offset : 0x6a008c
	public Void .ctor(String message) { }
	// Offset : 0x6a0094
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
public sealed class NonSerializedAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6a009c
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class NotImplementedException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6a00a4
	public Void .ctor() { }
	// Offset : 0x6a0118
	public Void .ctor(String message) { }
	// Offset : 0x6a014c
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class NotSupportedException : SystemException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x6a0154
	public Void .ctor() { }
	// Offset : 0x691d48
	public Void .ctor(String message) { }
	// Offset : 0x6a01c8
	public Void .ctor(String message, Exception innerException) { }
	// Offset : 0x6a01fc
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class NullReferenceException : SystemException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x6a0204
	public Void .ctor() { }
	// Offset : 0x6a0278
	public Void .ctor(String message) { }
	// Offset : 0x6a02ac
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
internal sealed class NumberFormatter
{
	// Fields
	private static readonly UInt64* MantissaBitsTable; // 0x0
	private static readonly Int32* TensExponentTable; // 0x8
	private static readonly Char* DigitLowerTable; // 0x10
	private static readonly Char* DigitUpperTable; // 0x18
	private static readonly Int64* TenPowersList; // 0x20
	private static readonly Int32* DecHexDigits; // 0x28
	private Thread _thread; // 0x10
	private NumberFormatInfo _nfi; // 0x18
	private Boolean _NaN; // 0x20
	private Boolean _infinity; // 0x21
	private Boolean _isCustomFormat; // 0x22
	private Boolean _specifierIsUpper; // 0x23
	private Boolean _positive; // 0x24
	private Char _specifier; // 0x26
	private Int32 _precision; // 0x28
	private Int32 _defPrecision; // 0x2c
	private Int32 _digitsLen; // 0x30
	private Int32 _offset; // 0x34
	private Int32 _decPointPos; // 0x38
	private UInt32 _val1; // 0x3c
	private UInt32 _val2; // 0x40
	private UInt32 _val3; // 0x44
	private UInt32 _val4; // 0x48
	private Char[] _cbuf; // 0x50
	private Int32 _ind; // 0x58
	private static NumberFormatter threadNumberFormatter; // 0xffffffffffffffff

	// Properties
	public CultureInfo CurrentCulture { set; }
	private Int32 IntegerDigits { get; }
	private Int32 DecimalDigits { get; }
	private Boolean IsFloatingSource { get; }
	private Boolean IsZero { get; }
	private Boolean IsZeroInteger { get; }

	// Methods
	// Offset : 0x6a02b4
	public Void .ctor(Thread current) { }
	// Offset : 0x6a03b4
	private static Void .cctor() { }
	// Offset : 0x6a0414
	private static Void GetFormatterTables(out UInt64* MantissaBitsTable, out Int32* TensExponentTable, out Char* DigitLowerTable, out Char* DigitUpperTable, out Int64* TenPowersList, out Int32* DecHexDigits) { }
	// Offset : 0x6a0418
	private static Int64 GetTenPowerOf(Int32 i) { }
	// Offset : 0x6a048c
	private Void InitDecHexDigits(UInt32 value) { }
	// Offset : 0x6a06f0
	private Void InitDecHexDigits(UInt64 value) { }
	// Offset : 0x6a0814
	private Void InitDecHexDigits(UInt32 hi, UInt64 lo) { }
	// Offset : 0x6a0554
	private static UInt32 FastToDecHex(Int32 val) { }
	// Offset : 0x6a062c
	private static UInt32 ToDecHex(Int32 val) { }
	// Offset : 0x6a09fc
	private static Int32 FastDecHexLen(Int32 val) { }
	// Offset : 0x6a0a24
	private static Int32 DecHexLen(UInt32 val) { }
	// Offset : 0x6a0aec
	private Int32 DecHexLen() { }
	// Offset : 0x6a0c10
	private static Int32 ScaleOrder(Int64 hi) { }
	// Offset : 0x6a0ca4
	private Int32 InitialFloatingPrecision() { }
	// Offset : 0x6a0d00
	private static Int32 ParsePrecision(String format) { }
	// Offset : 0x6a0da4
	private Void Init(String format) { }
	// Offset : 0x6a0ee0
	private Void InitHex(UInt64 value) { }
	// Offset : 0x6a0f4c
	private Void Init(String format, Int32 value, Int32 defPrecision) { }
	// Offset : 0x6a0fd4
	private Void Init(String format, UInt32 value, Int32 defPrecision) { }
	// Offset : 0x6a1054
	private Void Init(String format, Int64 value) { }
	// Offset : 0x6a10d0
	private Void Init(String format, UInt64 value) { }
	// Offset : 0x6a1144
	private Void Init(String format, Double value, Int32 defPrecision) { }
	// Offset : 0x6a155c
	private Void Init(String format, Decimal value) { }
	// Offset : 0x6a1788
	private Void ResetCharBuf(Int32 size) { }
	// Offset : 0x6a180c
	private Void Resize(Int32 len) { }
	// Offset : 0x6a188c
	private Void Append(Char c) { }
	// Offset : 0x6a1924
	private Void Append(Char c, Int32 cnt) { }
	// Offset : 0x6a19e8
	private Void Append(String s) { }
	// Offset : 0x6a1aec
	private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp) { }
	// Offset : 0x6a0344
	public Void set_CurrentCulture(CultureInfo value) { }
	// Offset : 0x6a1b7c
	private Int32 get_IntegerDigits() { }
	// Offset : 0x6a1b8c
	private Int32 get_DecimalDigits() { }
	// Offset : 0x6a1ba0
	private Boolean get_IsFloatingSource() { }
	// Offset : 0x6a1bb4
	private Boolean get_IsZero() { }
	// Offset : 0x6a1bc4
	private Boolean get_IsZeroInteger() { }
	// Offset : 0x6a1be4
	private Void RoundPos(Int32 pos) { }
	// Offset : 0x6a1d5c
	private Boolean RoundDecimal(Int32 decimals) { }
	// Offset : 0x6a1bf0
	private Boolean RoundBits(Int32 shift) { }
	// Offset : 0x6a1ea4
	private Void RemoveTrailingZeros() { }
	// Offset : 0x6a1d70
	private Void AddOneToDecHex() { }
	// Offset : 0x6a1ee4
	private static UInt32 AddOneToDecHex(UInt32 val) { }
	// Offset : 0x6a1438
	private Int32 CountTrailingZeros() { }
	// Offset : 0x6a1f90
	private static Int32 CountTrailingZeros(UInt32 val) { }
	// Offset : 0x6a1fe4
	private static NumberFormatter GetInstance() { }
	// Offset : 0x6a20ac
	private Void Release() { }
	// Offset : 0x6a211c
	internal static Void SetThreadCurrentCulture(CultureInfo culture) { }
	// Offset : 0x6a21d8
	public static String NumberToString(String format, SByte value, IFormatProvider fp) { }
	// Offset : 0x6a24bc
	public static String NumberToString(String format, Byte value, IFormatProvider fp) { }
	// Offset : 0x6a25ac
	public static String NumberToString(String format, UInt16 value, IFormatProvider fp) { }
	// Offset : 0x693730
	public static String NumberToString(String format, Int16 value, IFormatProvider fp) { }
	// Offset : 0x6a269c
	public static String NumberToString(String format, UInt32 value, IFormatProvider fp) { }
	// Offset : 0x695dc0
	public static String NumberToString(String format, Int32 value, IFormatProvider fp) { }
	// Offset : 0x6a278c
	public static String NumberToString(String format, UInt64 value, IFormatProvider fp) { }
	// Offset : 0x697ef0
	public static String NumberToString(String format, Int64 value, IFormatProvider fp) { }
	// Offset : 0x6a2874
	public static String NumberToString(String format, Single value, IFormatProvider fp) { }
	// Offset : 0x6a2c48
	public static String NumberToString(String format, Double value, IFormatProvider fp) { }
	// Offset : 0x6a2e84
	public static String NumberToString(String format, Decimal value, IFormatProvider fp) { }
	// Offset : 0x6a2fa4
	public static String NumberToString(UInt32 value, IFormatProvider fp) { }
	// Offset : 0x69352c
	public static String NumberToString(Int32 value, IFormatProvider fp) { }
	// Offset : 0x6a3194
	public static String NumberToString(UInt64 value, IFormatProvider fp) { }
	// Offset : 0x697cec
	public static String NumberToString(Int64 value, IFormatProvider fp) { }
	// Offset : 0x6a328c
	public static String NumberToString(Single value, IFormatProvider fp) { }
	// Offset : 0x6a3564
	public static String NumberToString(Double value, IFormatProvider fp) { }
	// Offset : 0x6a309c
	private String FastIntegerToString(Int32 value, IFormatProvider fp) { }
	// Offset : 0x6a22c8
	private String IntegerToString(String format, IFormatProvider fp) { }
	// Offset : 0x6a2a90
	private String NumberToString(String format, NumberFormatInfo nfi) { }
	// Offset : 0x6a3920
	public String FormatCurrency(Int32 precision, NumberFormatInfo nfi) { }
	// Offset : 0x6a3e58
	private String FormatDecimal(Int32 precision, NumberFormatInfo nfi) { }
	// Offset : 0x6a4564
	private String FormatHexadecimal(Int32 precision) { }
	// Offset : 0x6a3f84
	public String FormatFixedPoint(Int32 precision, NumberFormatInfo nfi) { }
	// Offset : 0x6a2dcc
	private String FormatRoundtrip(Double origval, NumberFormatInfo nfi) { }
	// Offset : 0x6a29f8
	private String FormatRoundtrip(Single origval, NumberFormatInfo nfi) { }
	// Offset : 0x6a33f0
	private String FormatGeneral(Int32 precision, NumberFormatInfo nfi) { }
	// Offset : 0x6a40a4
	public String FormatNumber(Int32 precision, NumberFormatInfo nfi) { }
	// Offset : 0x6a42dc
	public String FormatPercent(Int32 precision, NumberFormatInfo nfi) { }
	// Offset : 0x6a3f30
	public String FormatExponential(Int32 precision, NumberFormatInfo nfi) { }
	// Offset : 0x6a5478
	private String FormatExponential(Int32 precision, NumberFormatInfo nfi, Int32 expDigits) { }
	// Offset : 0x6a46b8
	public String FormatCustom(String format, NumberFormatInfo nfi) { }
	// Offset : 0x6a653c
	private static Void ZeroTrimEnd(StringBuilder sb, Boolean canEmpty) { }
	// Offset : 0x6a6440
	private static Boolean IsZeroOnly(StringBuilder sb) { }
	// Offset : 0x6a6268
	private static Void AppendNonNegativeNumber(StringBuilder sb, Int32 v) { }
	// Offset : 0x6a637c
	private Void AppendIntegerString(Int32 minLength, StringBuilder sb) { }
	// Offset : 0x6a5358
	private Void AppendIntegerString(Int32 minLength) { }
	// Offset : 0x6a641c
	private Void AppendDecimalString(Int32 precision, StringBuilder sb) { }
	// Offset : 0x6a4fb0
	private Void AppendDecimalString(Int32 precision) { }
	// Offset : 0x6a4d5c
	private Void AppendIntegerStringWithGroupSeparator(Int32[] groups, String groupSeparator) { }
	// Offset : 0x6a5688
	private Void AppendExponent(NumberFormatInfo nfi, Int32 exponent, Int32 minDigits) { }
	// Offset : 0x6a5590
	private Void AppendOneDigit(Int32 start) { }
	// Offset : 0x6a36c8
	private Void FastAppendDigits(Int32 val, Boolean force) { }
	// Offset : 0x6a4fc8
	private Void AppendDigits(Int32 start, Int32 end) { }
	// Offset : 0x6a7000
	private Void AppendDigits(Int32 start, Int32 end, StringBuilder sb) { }
	// Offset : 0x6a5570
	private Void Multiply10(Int32 count) { }
	// Offset : 0x6a6248
	private Void Divide10(Int32 count) { }
	// Offset : 0x6a53c4
	private NumberFormatter GetClone() { }
}

// Dll : mscorlib.dll
// Namespace: 
private class CustomInfo
{
	// Fields
	public Boolean UseGroup; // 0x10
	public Int32 DecimalDigits; // 0x14
	public Int32 DecimalPointPos; // 0x18
	public Int32 DecimalTailSharpDigits; // 0x1c
	public Int32 IntegerDigits; // 0x20
	public Int32 IntegerHeadSharpDigits; // 0x24
	public Int32 IntegerHeadPos; // 0x28
	public Boolean UseExponent; // 0x2c
	public Int32 ExponentDigits; // 0x30
	public Int32 ExponentTailSharpDigits; // 0x34
	public Boolean ExponentNegativeSignOnly; // 0x38
	public Int32 DividePlaces; // 0x3c
	public Int32 Percents; // 0x40
	public Int32 Permilles; // 0x44

	// Properties

	// Methods
	// Offset : 0x6a72d4
	public Void .ctor() { }
	// Offset : 0x6a580c
	public static Void GetActiveSection(String format, ref Boolean positive, Boolean zero, ref Int32 offset, ref Int32 length) { }
	// Offset : 0x6a5c94
	public static CustomInfo Parse(String format, Int32 offset, Int32 length, NumberFormatInfo nfi) { }
	// Offset : 0x6a665c
	public String Format(String format, Int32 offset, Int32 length, NumberFormatInfo nfi, Boolean positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class ObjectDisposedException : InvalidOperationException
{
	// Fields
	private String obj_name; // 0x60
	private String msg; // 0x68

	// Properties
	public override String Message { get; }

	// Methods
	// Offset : 0x691908
	public Void .ctor(String objectName) { }
	// Offset : 0x68ec34
	public Void .ctor(String objectName, String message) { }
	// Offset : 0x6a73c8
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6a7464
	public override String get_Message() { }
	// Offset : 0x6a746c
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class OperatingSystem : ICloneable, ISerializable
{
	// Fields
	private PlatformID _platform; // 0x10
	private Version _version; // 0x18
	private String _servicePack; // 0x20

	// Properties
	public PlatformID Platform { get; }

	// Methods
	// Offset : 0x6a757c
	public Void .ctor(PlatformID platform, Version version) { }
	// Offset : 0x6a765c
	public PlatformID get_Platform() { }
	// Offset : 0x6a7664
	public Object Clone() { }
	// Offset : 0x6a76d8
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6a77c4
	public override String ToString() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class OutOfMemoryException : SystemException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x6a7bc8
	public Void .ctor() { }
	// Offset : 0x6a7c3c
	public Void .ctor(String message) { }
	// Offset : 0x6a7c70
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class OverflowException : ArithmeticException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x6a7c78
	public Void .ctor() { }
	// Offset : 0x6932e4
	public Void .ctor(String message) { }
	// Offset : 0x6a7cec
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public enum PlatformID
{
	// Fields
	public Int32 value__; // 0x10
	public const PlatformID Win32S = 0; // 0x0
	public const PlatformID Win32Windows = 1; // 0x0
	public const PlatformID Win32NT = 2; // 0x0
	public const PlatformID WinCE = 3; // 0x0
	public const PlatformID Unix = 4; // 0x0
	public const PlatformID Xbox = 5; // 0x0
	public const PlatformID MacOSX = 6; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class PlatformNotSupportedException : NotSupportedException
{
	// Fields
	private const Int32 Result; // 0x0

	// Properties

	// Methods
	// Offset : 0x6a7cfc
	public Void .ctor() { }
	// Offset : 0x6a7d88
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class RankException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6a7d90
	public Void .ctor() { }
	// Offset : 0x6a7e04
	public Void .ctor(String message) { }
	// Offset : 0x6a7e38
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
public class ResolveEventArgs : EventArgs
{
	// Fields
	private String m_Name; // 0x10

	// Properties

	// Methods
	// Offset : 0x4f6cd0
	public Void .ctor(String name) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct RuntimeMethodHandle : ISerializable
{
	// Fields
	private IntPtr value; // 0x10

	// Properties
	public IntPtr Value { get; }

	// Methods
	// Offset : 0x2cb470
	internal Void .ctor(IntPtr v) { }
	// Offset : 0x2cb478
	private Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x2cb480
	public IntPtr get_Value() { }
	// Offset : 0x2cb488
	public Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x2cb490
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cb498
	public override Int32 GetHashCode() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class StackOverflowException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6f55a0
	public Void .ctor() { }
	// Offset : 0x6f5614
	public Void .ctor(String message) { }
	// Offset : 0x6f5648
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class StringComparer : IComparer`1, IEqualityComparer`1, IComparer, IEqualityComparer
{
	// Fields
	private static StringComparer invariantCultureIgnoreCase; // 0x0
	private static StringComparer invariantCulture; // 0x8
	private static StringComparer ordinalIgnoreCase; // 0x10
	private static StringComparer ordinal; // 0x18

	// Properties
	public static StringComparer CurrentCultureIgnoreCase { get; }
	public static StringComparer InvariantCultureIgnoreCase { get; }

	// Methods
	// Offset : 0x6fe804
	protected Void .ctor() { }
	// Offset : 0x6fe80c
	private static Void .cctor() { }
	// Offset : 0x6fe940
	public static StringComparer get_CurrentCultureIgnoreCase() { }
	// Offset : 0x6fe9d4
	public static StringComparer get_InvariantCultureIgnoreCase() { }
	// Offset : 0x6fea3c
	public Int32 Compare(Object x, Object y) { }
	// Offset : 0x6fec00
	public Boolean Equals(Object x, Object y) { }
	// Offset : 0x6fed00
	public Int32 GetHashCode(Object obj) { }
	// Offset : 0x
	public abstract Int32 Compare(String x, String y) { }
	// Offset : 0x
	public abstract Boolean Equals(String x, String y) { }
	// Offset : 0x
	public abstract Int32 GetHashCode(String obj) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
internal sealed class CultureAwareComparer : StringComparer
{
	// Fields
	private readonly Boolean _ignoreCase; // 0x10
	private readonly CompareInfo _compareInfo; // 0x18

	// Properties

	// Methods
	// Offset : 0x6aa270
	public Void .ctor(CultureInfo ci, Boolean ignore_case) { }
	// Offset : 0x6aa32c
	public override Int32 Compare(String x, String y) { }
	// Offset : 0x6aa398
	public override Boolean Equals(String x, String y) { }
	// Offset : 0x6aa3b4
	public override Int32 GetHashCode(String s) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
internal sealed class OrdinalComparer : StringComparer
{
	// Fields
	private readonly Boolean _ignoreCase; // 0x10

	// Properties

	// Methods
	// Offset : 0x6a7910
	public Void .ctor(Boolean ignoreCase) { }
	// Offset : 0x6a7990
	public override Int32 Compare(String x, String y) { }
	// Offset : 0x6a7a60
	public override Boolean Equals(String x, String y) { }
	// Offset : 0x6a7b0c
	public override Int32 GetHashCode(String s) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public enum StringComparison
{
	// Fields
	public Int32 value__; // 0x10
	public const StringComparison CurrentCulture = 0; // 0x0
	public const StringComparison CurrentCultureIgnoreCase = 1; // 0x0
	public const StringComparison InvariantCulture = 2; // 0x0
	public const StringComparison InvariantCultureIgnoreCase = 3; // 0x0
	public const StringComparison Ordinal = 4; // 0x0
	public const StringComparison OrdinalIgnoreCase = 5; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
public enum StringSplitOptions
{
	// Fields
	public Int32 value__; // 0x10
	public const StringSplitOptions None = 0; // 0x0
	public const StringSplitOptions RemoveEmptyEntries = 1; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class SystemException : Exception
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6fee08
	public Void .ctor() { }
	// Offset : 0x6f2d84
	public Void .ctor(String message) { }
	// Offset : 0x6f2f48
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x6fee7c
	public Void .ctor(String message, Exception innerException) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class ThreadStaticAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x712e64
	public Void .ctor() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public struct TimeSpan : IComparable, IComparable`1, IEquatable`1
{
	// Fields
	public static readonly TimeSpan MaxValue; // 0x0
	public static readonly TimeSpan MinValue; // 0x8
	public static readonly TimeSpan Zero; // 0x10
	private Int64 _ticks; // 0x10

	// Properties
	public Int32 Days { get; }
	public Int32 Hours { get; }
	public Int32 Milliseconds { get; }
	public Int32 Minutes { get; }
	public Int32 Seconds { get; }
	public Int64 Ticks { get; }
	public Double TotalDays { get; }
	public Double TotalHours { get; }
	public Double TotalMilliseconds { get; }
	public Double TotalMinutes { get; }
	public Double TotalSeconds { get; }

	// Methods
	// Offset : 0x2cf804
	public Void .ctor(Int64 ticks) { }
	// Offset : 0x2cf80c
	public Void .ctor(Int32 hours, Int32 minutes, Int32 seconds) { }
	// Offset : 0x2cf814
	public Void .ctor(Int32 days, Int32 hours, Int32 minutes, Int32 seconds, Int32 milliseconds) { }
	// Offset : 0x718aa4
	private static Void .cctor() { }
	// Offset : 0x718968
	internal static Int64 CalculateTicks(Int32 days, Int32 hours, Int32 minutes, Int32 seconds, Int32 milliseconds) { }
	// Offset : 0x2cf81c
	public Int32 get_Days() { }
	// Offset : 0x2cf848
	public Int32 get_Hours() { }
	// Offset : 0x2cf8a0
	public Int32 get_Milliseconds() { }
	// Offset : 0x2cf8f4
	public Int32 get_Minutes() { }
	// Offset : 0x2cf948
	public Int32 get_Seconds() { }
	// Offset : 0x2cf99c
	public Int64 get_Ticks() { }
	// Offset : 0x2cf9a4
	public Double get_TotalDays() { }
	// Offset : 0x2cf9bc
	public Double get_TotalHours() { }
	// Offset : 0x2cf9d4
	public Double get_TotalMilliseconds() { }
	// Offset : 0x2cf9ec
	public Double get_TotalMinutes() { }
	// Offset : 0x2cfa04
	public Double get_TotalSeconds() { }
	// Offset : 0x2cfa1c
	public TimeSpan Add(TimeSpan ts) { }
	// Offset : 0x718ecc
	public static Int32 Compare(TimeSpan t1, TimeSpan t2) { }
	// Offset : 0x2cfa24
	public Int32 CompareTo(Object value) { }
	// Offset : 0x2cfa2c
	public Int32 CompareTo(TimeSpan value) { }
	// Offset : 0x2cfa34
	public Boolean Equals(TimeSpan obj) { }
	// Offset : 0x2cfa44
	public TimeSpan Duration() { }
	// Offset : 0x2cfa90
	public override Boolean Equals(Object value) { }
	// Offset : 0x719158
	public static TimeSpan FromDays(Double value) { }
	// Offset : 0x7194fc
	public static TimeSpan FromHours(Double value) { }
	// Offset : 0x719574
	public static TimeSpan FromMinutes(Double value) { }
	// Offset : 0x7195e8
	public static TimeSpan FromSeconds(Double value) { }
	// Offset : 0x71965c
	public static TimeSpan FromMilliseconds(Double value) { }
	// Offset : 0x7191d0
	private static TimeSpan From(Double value, Int64 tickMultiplicator) { }
	// Offset : 0x2cfa98
	public override Int32 GetHashCode() { }
	// Offset : 0x2cfaa4
	public TimeSpan Negate() { }
	// Offset : 0x2cfaac
	public TimeSpan Subtract(TimeSpan ts) { }
	// Offset : 0x2cfab4
	public override String ToString() { }
	// Offset : 0x719c1c
	public static TimeSpan op_Addition(TimeSpan t1, TimeSpan t2) { }
	// Offset : 0x719c40
	public static Boolean op_Equality(TimeSpan t1, TimeSpan t2) { }
	// Offset : 0x719c4c
	public static Boolean op_GreaterThan(TimeSpan t1, TimeSpan t2) { }
	// Offset : 0x719c58
	public static Boolean op_GreaterThanOrEqual(TimeSpan t1, TimeSpan t2) { }
	// Offset : 0x719c64
	public static Boolean op_Inequality(TimeSpan t1, TimeSpan t2) { }
	// Offset : 0x719c70
	public static Boolean op_LessThan(TimeSpan t1, TimeSpan t2) { }
	// Offset : 0x719c7c
	public static Boolean op_LessThanOrEqual(TimeSpan t1, TimeSpan t2) { }
	// Offset : 0x719c88
	public static TimeSpan op_Subtraction(TimeSpan t1, TimeSpan t2) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public abstract class TimeZone
{
	// Fields
	private static TimeZone currentTimeZone; // 0x0
	private static Object tz_lock; // 0x8
	private static Int64 timezone_check; // 0x10

	// Properties
	public static TimeZone CurrentTimeZone { get; }

	// Methods
	// Offset : 0x719cac
	protected Void .ctor() { }
	// Offset : 0x719cb4
	private static Void .cctor() { }
	// Offset : 0x719d20
	public static TimeZone get_CurrentTimeZone() { }
	// Offset : 0x
	public abstract DaylightTime GetDaylightChanges(Int32 year) { }
	// Offset : 0x
	public abstract TimeSpan GetUtcOffset(DateTime time) { }
	// Offset : 0x719eec
	public virtual Boolean IsDaylightSavingTime(DateTime time) { }
	// Offset : 0x719fc4
	public static Boolean IsDaylightSavingTime(DateTime time, DaylightTime daylightTimes) { }
	// Offset : 0x71a250
	public virtual DateTime ToLocalTime(DateTime time) { }
	// Offset : 0x71a624
	public virtual DateTime ToUniversalTime(DateTime time) { }
	// Offset : 0x71a80c
	internal TimeSpan GetLocalTimeDiff(DateTime time) { }
	// Offset : 0x71a878
	internal TimeSpan GetLocalTimeDiff(DateTime time, TimeSpan utc_offset) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
internal class CurrentSystemTimeZone : TimeZone, IDeserializationCallback
{
	// Fields
	private String m_standardName; // 0x10
	private String m_daylightName; // 0x18
	private Hashtable m_CachedDaylightChanges; // 0x20
	private Int64 m_ticksOffset; // 0x28
	private TimeSpan utcOffsetWithOutDLS; // 0x30
	private TimeSpan utcOffsetWithDLS; // 0x38
	private static Int32 this_year; // 0x0
	private static DaylightTime this_year_dlt; // 0x8

	// Properties

	// Methods
	// Offset : 0x6aa4bc
	internal Void .ctor() { }
	// Offset : 0x6aa548
	internal Void .ctor(Int64 lnow) { }
	// Offset : 0x6aadb4
	private Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object sender) { }
	// Offset : 0x6aaa74
	private static Boolean GetTimeZoneData(Int32 year, out Int64[] data, out String[] names) { }
	// Offset : 0x6aadbc
	public override DaylightTime GetDaylightChanges(Int32 year) { }
	// Offset : 0x6ab190
	public override TimeSpan GetUtcOffset(DateTime time) { }
	// Offset : 0x6aab7c
	private Void OnDeserialization(DaylightTime dlt) { }
	// Offset : 0x6aaa78
	private DaylightTime GetDaylightTimeFromData(Int64[] data) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public enum TypeCode
{
	// Fields
	public Int32 value__; // 0x10
	public const TypeCode Empty = 0; // 0x0
	public const TypeCode Object = 1; // 0x0
	public const TypeCode DBNull = 2; // 0x0
	public const TypeCode Boolean = 3; // 0x0
	public const TypeCode Char = 4; // 0x0
	public const TypeCode SByte = 5; // 0x0
	public const TypeCode Byte = 6; // 0x0
	public const TypeCode Int16 = 7; // 0x0
	public const TypeCode UInt16 = 8; // 0x0
	public const TypeCode Int32 = 9; // 0x0
	public const TypeCode UInt32 = 10; // 0x0
	public const TypeCode Int64 = 11; // 0x0
	public const TypeCode UInt64 = 12; // 0x0
	public const TypeCode Single = 13; // 0x0
	public const TypeCode Double = 14; // 0x0
	public const TypeCode Decimal = 15; // 0x0
	public const TypeCode DateTime = 16; // 0x0
	public const TypeCode String = 18; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class TypeInitializationException : SystemException
{
	// Fields
	private String type_name; // 0x60

	// Properties

	// Methods
	// Offset : 0x9377f8
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x937894
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class TypeLoadException : SystemException
{
	// Fields
	private const Int32 Result; // 0x0
	private String className; // 0x60
	private String assemblyName; // 0x68

	// Properties
	public override String Message { get; }

	// Methods
	// Offset : 0x937930
	public Void .ctor() { }
	// Offset : 0x9379a4
	public Void .ctor(String message) { }
	// Offset : 0x9379d8
	internal Void .ctor(String className, String assemblyName) { }
	// Offset : 0x937a0c
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x937b00
	public override String get_Message() { }
	// Offset : 0x937c28
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class UnauthorizedAccessException : SystemException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x93bc2c
	public Void .ctor() { }
	// Offset : 0x93bca0
	public Void .ctor(String message) { }
	// Offset : 0x93bcd4
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class UnhandledExceptionEventArgs : EventArgs
{
	// Fields
	private Object exception; // 0x10
	private Boolean m_isTerminating; // 0x18

	// Properties
	public Object ExceptionObject { get; }
	public Boolean IsTerminating { get; }

	// Methods
	// Offset : 0x93bcdc
	public Void .ctor(Object exception, Boolean isTerminating) { }
	// Offset : 0x93bd64
	public Object get_ExceptionObject() { }
	// Offset : 0x93bd6c
	public Boolean get_IsTerminating() { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
internal class UnitySerializationHolder : ISerializable, IObjectReference
{
	// Fields
	private String _data; // 0x10
	private UnityType _unityType; // 0x18
	private String _assemblyName; // 0x20

	// Properties

	// Methods
	// Offset : 0x93c2a0
	private Void .ctor(SerializationInfo info, StreamingContext ctx) { }
	// Offset : 0x93c38c
	public static Void GetTypeData(Type instance, SerializationInfo info, StreamingContext ctx) { }
	// Offset : 0x93c560
	public static Void GetDBNullData(DBNull instance, SerializationInfo info, StreamingContext ctx) { }
	// Offset : 0x93c71c
	public static Void GetModuleData(Module instance, SerializationInfo info, StreamingContext ctx) { }
	// Offset : 0x93c8bc
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x93c924
	public virtual Object GetRealObject(StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: 
private enum UnityType
{
	// Fields
	public Byte value__; // 0x10
	public const UnityType DBNull = 2; // 0x0
	public const UnityType Type = 4; // 0x0
	public const UnityType Module = 5; // 0x0
	public const UnityType Assembly = 6; // 0x0

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class Version : IComparable, ICloneable, IComparable`1, IEquatable`1
{
	// Fields
	private const Int32 UNDEFINED; // 0x0
	private Int32 _Major; // 0x10
	private Int32 _Minor; // 0x14
	private Int32 _Build; // 0x18
	private Int32 _Revision; // 0x1c

	// Properties
	public Int32 Build { get; }
	public Int32 Major { get; }
	public Int32 Minor { get; }
	public Int32 Revision { get; }

	// Methods
	// Offset : 0x93cd44
	public Void .ctor() { }
	// Offset : 0x93cee0
	public Void .ctor(String version) { }
	// Offset : 0x93d108
	public Void .ctor(Int32 major, Int32 minor) { }
	// Offset : 0x93d154
	public Void .ctor(Int32 major, Int32 minor, Int32 build) { }
	// Offset : 0x93d1a4
	public Void .ctor(Int32 major, Int32 minor, Int32 build, Int32 revision) { }
	// Offset : 0x93cd98
	private Void CheckedSet(Int32 defined, Int32 major, Int32 minor, Int32 build, Int32 revision) { }
	// Offset : 0x93d200
	public Int32 get_Build() { }
	// Offset : 0x93d208
	public Int32 get_Major() { }
	// Offset : 0x93d210
	public Int32 get_Minor() { }
	// Offset : 0x93d218
	public Int32 get_Revision() { }
	// Offset : 0x93d220
	public Object Clone() { }
	// Offset : 0x93d31c
	public Int32 CompareTo(Object version) { }
	// Offset : 0x93d4a0
	public override Boolean Equals(Object obj) { }
	// Offset : 0x93d3f0
	public Int32 CompareTo(Version value) { }
	// Offset : 0x93d514
	public Boolean Equals(Version obj) { }
	// Offset : 0x93d5c4
	public override Int32 GetHashCode() { }
	// Offset : 0x93d5e0
	public override String ToString() { }
	// Offset : 0x93d748
	internal static Version CreateFromString(String info) { }
	// Offset : 0x93d59c
	public static Boolean op_Equality(Version v1, Version v2) { }
	// Offset : 0x93d5a4
	public static Boolean op_Inequality(Version v1, Version v2) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public class WeakReference : ISerializable
{
	// Fields
	private Boolean isLongReference; // 0x10
	private GCHandle gcHandle; // 0x14

	// Properties
	public virtual Object Target { get; }
	public virtual Boolean TrackResurrection { get; }

	// Methods
	// Offset : 0x93d9b4
	protected Void .ctor() { }
	// Offset : 0x93d9bc
	public Void .ctor(Object target) { }
	// Offset : 0x93d9fc
	public Void .ctor(Object target, Boolean trackResurrection) { }
	// Offset : 0x93da7c
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x93da48
	private Void AllocateHandle(Object target) { }
	// Offset : 0x93dba0
	public virtual Object get_Target() { }
	// Offset : 0x93dbac
	public virtual Boolean get_TrackResurrection() { }
	// Offset : 0x93dbb4
	protected override Void Finalize() { }
	// Offset : 0x93dc30
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : mscorlib.dll
// Namespace: Mono.Math.Prime
internal sealed class PrimalityTest : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7b028c
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x7b0734
	public virtual Boolean Invoke(BigInteger bi, ConfidenceFactor confidence) { }
	// Offset : 0x7b0c20
	public virtual IAsyncResult BeginInvoke(BigInteger bi, ConfidenceFactor confidence, AsyncCallback callback, Object object) { }
	// Offset : 0x7b0cbc
	public virtual Boolean EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class MemberFilter : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5ea7e0
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x5ea7f0
	public virtual Boolean Invoke(MemberInfo m, Object filterCriteria) { }
	// Offset : 0x5eacd4
	public virtual IAsyncResult BeginInvoke(MemberInfo m, Object filterCriteria, AsyncCallback callback, Object object) { }
	// Offset : 0x5ead04
	public virtual Boolean EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class ModuleResolveEventHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4ef5d8
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x4ef5e8
	public virtual Module Invoke(Object sender, ResolveEventArgs e) { }
	// Offset : 0x4efacc
	public virtual IAsyncResult BeginInvoke(Object sender, ResolveEventArgs e, AsyncCallback callback, Object object) { }
	// Offset : 0x4efafc
	public virtual Module EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Reflection
[Serializable]
public sealed class TypeFilter : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4eee9c
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x4f6780
	public virtual Boolean Invoke(Type m, Object filterCriteria) { }
	// Offset : 0x4f6c64
	public virtual IAsyncResult BeginInvoke(Type m, Object filterCriteria, AsyncCallback callback, Object object) { }
	// Offset : 0x4f6c94
	public virtual Boolean EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Contexts
public sealed class CrossContextDelegate : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6669b8
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x6669c8
	public virtual Void Invoke() { }
	// Offset : 0x666c60
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x666c94
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Runtime.Remoting.Messaging
public sealed class HeaderHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x675948
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x675958
	public virtual Object Invoke(Header[] headers) { }
	// Offset : 0x675e1c
	public virtual IAsyncResult BeginInvoke(Header[] headers, AsyncCallback callback, Object object) { }
	// Offset : 0x675e40
	public virtual Object EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public sealed class SendOrPostCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x714b48
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x714b58
	public virtual Void Invoke(Object state) { }
	// Offset : 0x715018
	public virtual IAsyncResult BeginInvoke(Object state, AsyncCallback callback, Object object) { }
	// Offset : 0x71503c
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public sealed class ThreadStart : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x715f24
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x715f34
	public virtual Void Invoke() { }
	// Offset : 0x7161cc
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x716200
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public sealed class TimerCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x717698
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x7176a8
	public virtual Void Invoke(Object state) { }
	// Offset : 0x717b68
	public virtual IAsyncResult BeginInvoke(Object state, AsyncCallback callback, Object object) { }
	// Offset : 0x717b8c
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public sealed class WaitCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x714470
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x717b98
	public virtual Void Invoke(Object state) { }
	// Offset : 0x715ca8
	public virtual IAsyncResult BeginInvoke(Object state, AsyncCallback callback, Object object) { }
	// Offset : 0x718058
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System.Threading
public sealed class WaitOrTimerCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7187e0
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x714668
	public virtual Void Invoke(Object state, Boolean timedOut) { }
	// Offset : 0x7187f0
	public virtual IAsyncResult BeginInvoke(Object state, Boolean timedOut, AsyncCallback callback, Object object) { }
	// Offset : 0x718890
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
public sealed class Action`1 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Void Invoke(T obj) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class AppDomainInitializer : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5c8220
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x5c8230
	public virtual Void Invoke(String[] args) { }
	// Offset : 0x5c86f0
	public virtual IAsyncResult BeginInvoke(String[] args, AsyncCallback callback, Object object) { }
	// Offset : 0x5c8714
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class AssemblyLoadEventHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x75c4a4
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x75c4b4
	public virtual Void Invoke(Object sender, AssemblyLoadEventArgs args) { }
	// Offset : 0x75c994
	public virtual IAsyncResult BeginInvoke(Object sender, AssemblyLoadEventArgs args, AsyncCallback callback, Object object) { }
	// Offset : 0x75c9c4
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
public sealed class Comparison`1 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Int32 Invoke(T x, T y) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T x, T y, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Int32 EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
public sealed class Converter`2 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual TOutput Invoke(TInput input) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(TInput input, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual TOutput EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class EventHandler`1 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Void Invoke(Object sender, TEventArgs e) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(Object sender, TEventArgs e, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class EventHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6c47a0
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x6c47b0
	public virtual Void Invoke(Object sender, EventArgs e) { }
	// Offset : 0x6c4c90
	public virtual IAsyncResult BeginInvoke(Object sender, EventArgs e, AsyncCallback callback, Object object) { }
	// Offset : 0x6c4cc0
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
public sealed class Predicate`1 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Boolean Invoke(T obj) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Boolean EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class ResolveEventHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4f6d4c
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x4f6d5c
	public virtual Assembly Invoke(Object sender, ResolveEventArgs args) { }
	// Offset : 0x4f7240
	public virtual IAsyncResult BeginInvoke(Object sender, ResolveEventArgs args, AsyncCallback callback, Object object) { }
	// Offset : 0x4f7270
	public virtual Assembly EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: System
[Serializable]
public sealed class UnhandledExceptionEventHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x93bd74
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x93bd84
	public virtual Void Invoke(Object sender, UnhandledExceptionEventArgs e) { }
	// Offset : 0x93c264
	public virtual IAsyncResult BeginInvoke(Object sender, UnhandledExceptionEventArgs e, AsyncCallback callback, Object object) { }
	// Offset : 0x93c294
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : mscorlib.dll
// Namespace: 
internal class <PrivateImplementationDetails>
{
	// Fields
	internal static $ArrayType$56 $$field-0; // 0x0
	internal static $ArrayType$24 $$field-1; // 0x38
	internal static $ArrayType$24 $$field-2; // 0x50
	internal static $ArrayType$24 $$field-3; // 0x68
	internal static $ArrayType$24 $$field-4; // 0x80
	internal static $ArrayType$16 $$field-5; // 0x98
	internal static $ArrayType$16 $$field-6; // 0xa8
	internal static $ArrayType$3132 $$field-15; // 0xb8
	internal static $ArrayType$20 $$field-16; // 0xcf4
	internal static $ArrayType$32 $$field-17; // 0xd08
	internal static $ArrayType$48 $$field-18; // 0xd28
	internal static $ArrayType$64 $$field-19; // 0xd58
	internal static $ArrayType$64 $$field-20; // 0xd98
	internal static $ArrayType$64 $$field-21; // 0xdd8
	internal static $ArrayType$64 $$field-22; // 0xe18
	internal static $ArrayType$12 $$field-23; // 0xe58
	internal static $ArrayType$12 $$field-24; // 0xe64
	internal static $ArrayType$12 $$field-25; // 0xe70
	internal static $ArrayType$16 $$field-26; // 0xe7c
	internal static $ArrayType$136 $$field-27; // 0xe8c
	internal static $ArrayType$72 $$field-30; // 0xf14
	internal static $ArrayType$8 $$field-31; // 0xf5c
	internal static $ArrayType$20 $$field-32; // 0xf64
	internal static $ArrayType$64 $$field-33; // 0xf78
	internal static $ArrayType$124 $$field-34; // 0xfb8
	internal static $ArrayType$32 $$field-35; // 0x1034
	internal static $ArrayType$96 $$field-36; // 0x1054
	internal static $ArrayType$2048 $$field-37; // 0x10b4
	internal static $ArrayType$56 $$field-38; // 0x18b4
	internal static $ArrayType$16 $$field-39; // 0x18ec
	internal static $ArrayType$48 $$field-40; // 0x18fc
	internal static $ArrayType$2048 $$field-41; // 0x192c
	internal static $ArrayType$2048 $$field-42; // 0x212c
	internal static $ArrayType$256 $$field-43; // 0x292c
	internal static $ArrayType$256 $$field-44; // 0x2a2c
	internal static $ArrayType$120 $$field-45; // 0x2b2c
	internal static $ArrayType$256 $$field-46; // 0x2ba4
	internal static $ArrayType$256 $$field-47; // 0x2ca4
	internal static $ArrayType$1024 $$field-48; // 0x2da4
	internal static $ArrayType$1024 $$field-49; // 0x31a4
	internal static $ArrayType$1024 $$field-50; // 0x35a4
	internal static $ArrayType$1024 $$field-51; // 0x39a4
	internal static $ArrayType$1024 $$field-52; // 0x3da4
	internal static $ArrayType$1024 $$field-53; // 0x41a4
	internal static $ArrayType$1024 $$field-54; // 0x45a4
	internal static $ArrayType$1024 $$field-55; // 0x49a4
	internal static $ArrayType$256 $$field-56; // 0x4da4
	internal static $ArrayType$640 $$field-57; // 0x4ea4
	internal static $ArrayType$12 $$field-60; // 0x5124
	internal static $ArrayType$128 $$field-62; // 0x5130
	internal static $ArrayType$256 $$field-63; // 0x51b0
	internal static $ArrayType$52 $$field-64; // 0x52b0
	internal static $ArrayType$52 $$field-65; // 0x52e4

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$56
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$24
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$16
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$120
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$3132
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$20
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$32
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$48
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$64
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$12
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$136
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$8
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$72
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$124
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$96
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$2048
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$256
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$1024
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$640
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$128
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: 
private struct $ArrayType$52
{
	// Fields

	// Properties

	// Methods
}

// Dll : mscorlib.dll
// Namespace: System
internal class __Il2CppComObject
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x93dde8
	protected override Void Finalize() { }
}

// Dll : mscorlib.dll
// Namespace: System
internal sealed class __Il2CppComDelegate : __Il2CppComObject
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x93dde4
	protected override Void Finalize() { }
}

// Dll : Mono.Security.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
internal sealed class Locale
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x71e8b4
	public static String GetText(String msg) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Math
public class BigInteger
{
	// Fields
	private UInt32 length; // 0x10
	private UInt32[] data; // 0x18
	internal static readonly UInt32[] smallPrimes; // 0x0
	private static RandomNumberGenerator rng; // 0x8

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods
	// Offset : 0x71e8b8
	public Void .ctor(Sign sign, UInt32 len) { }
	// Offset : 0x71e934
	public Void .ctor(BigInteger bi) { }
	// Offset : 0x71ea44
	public Void .ctor(BigInteger bi, UInt32 len) { }
	// Offset : 0x71eb5c
	public Void .ctor(Byte[] inData) { }
	// Offset : 0x71f03c
	public Void .ctor(UInt32 ui) { }
	// Offset : 0x71f0dc
	private static Void .cctor() { }
	// Offset : 0x71f158
	private static RandomNumberGenerator get_Rng() { }
	// Offset : 0x71f220
	public static BigInteger GenerateRandom(Int32 bits, RandomNumberGenerator rng) { }
	// Offset : 0x71f418
	public static BigInteger GenerateRandom(Int32 bits) { }
	// Offset : 0x71f484
	public Int32 BitCount() { }
	// Offset : 0x71f520
	public Boolean TestBit(Int32 bitNum) { }
	// Offset : 0x71f644
	public Void SetBit(UInt32 bitNum) { }
	// Offset : 0x71f64c
	public Void SetBit(UInt32 bitNum, Boolean value) { }
	// Offset : 0x71f6e0
	public Int32 LowestSetBit() { }
	// Offset : 0x71f7f0
	public Byte[] GetBytes() { }
	// Offset : 0x71f974
	public String ToString(UInt32 radix) { }
	// Offset : 0x71f9d4
	public String ToString(UInt32 radix, String characterSet) { }
	// Offset : 0x71efb0
	private Void Normalize() { }
	// Offset : 0x71fdb8
	public Void Clear() { }
	// Offset : 0x71fe30
	public override Int32 GetHashCode() { }
	// Offset : 0x71fec4
	public override String ToString() { }
	// Offset : 0x71fecc
	public override Boolean Equals(Object o) { }
	// Offset : 0x7203f8
	public BigInteger ModInverse(BigInteger modulus) { }
	// Offset : 0x720ba8
	public BigInteger ModPow(BigInteger exp, BigInteger n) { }
	// Offset : 0x720e60
	public static BigInteger GeneratePseudoPrime(Int32 bits) { }
	// Offset : 0x720ef8
	public Void Incr2() { }
	// Offset : 0x721030
	public static BigInteger op_Implicit(UInt32 value) { }
	// Offset : 0x721090
	public static BigInteger op_Implicit(Int32 value) { }
	// Offset : 0x721138
	public static BigInteger op_Addition(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7214f4
	public static BigInteger op_Subtraction(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x721928
	public static UInt32 op_Modulus(BigInteger bi, UInt32 ui) { }
	// Offset : 0x7219dc
	public static BigInteger op_Modulus(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x7222ec
	public static BigInteger op_Division(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x722330
	public static BigInteger op_Multiply(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x722668
	public static BigInteger op_LeftShift(BigInteger bi1, Int32 shiftVal) { }
	// Offset : 0x72292c
	public static BigInteger op_RightShift(BigInteger bi1, Int32 shiftVal) { }
	// Offset : 0x71f76c
	public static Boolean op_Equality(BigInteger bi1, UInt32 ui) { }
	// Offset : 0x71fd34
	public static Boolean op_Inequality(BigInteger bi1, UInt32 ui) { }
	// Offset : 0x72005c
	public static Boolean op_Equality(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x722b60
	public static Boolean op_Inequality(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x722c30
	public static Boolean op_GreaterThan(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x722c4c
	public static Boolean op_LessThan(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x722c64
	public static Boolean op_GreaterThanOrEqual(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x722c80
	public static Boolean op_LessThanOrEqual(BigInteger bi1, BigInteger bi2) { }
}

// Dll : Mono.Security.dll
// Namespace: 
public enum Sign
{
	// Fields
	public Int32 value__; // 0x10
	public const Sign Negative = 4294967295; // 0x0
	public const Sign Zero = 0; // 0x0
	public const Sign Positive = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
public sealed class ModulusRing
{
	// Fields
	private BigInteger mod; // 0x10
	private BigInteger constant; // 0x18

	// Properties

	// Methods
	// Offset : 0x720c2c
	public Void .ctor(BigInteger modulus) { }
	// Offset : 0x7237f0
	public Void BarrettReduction(BigInteger x) { }
	// Offset : 0x723b34
	public BigInteger Multiply(BigInteger a, BigInteger b) { }
	// Offset : 0x7235c8
	public BigInteger Difference(BigInteger a, BigInteger b) { }
	// Offset : 0x720d34
	public BigInteger Pow(BigInteger a, BigInteger k) { }
	// Offset : 0x723d1c
	public BigInteger Pow(UInt32 b, BigInteger exp) { }
}

// Dll : Mono.Security.dll
// Namespace: 
private sealed class Kernel
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x721224
	public static BigInteger AddSameSign(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x72167c
	public static BigInteger Subtract(BigInteger big, BigInteger small) { }
	// Offset : 0x722c9c
	public static Void MinusEq(BigInteger big, BigInteger small) { }
	// Offset : 0x722e78
	public static Void PlusEq(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x72012c
	public static Sign Compare(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x71fc40
	public static UInt32 SingleByteDivideInPlace(BigInteger n, UInt32 d) { }
	// Offset : 0x72192c
	public static UInt32 DwordMod(BigInteger n, UInt32 d) { }
	// Offset : 0x723154
	public static BigInteger[] DwordDivMod(BigInteger n, UInt32 d) { }
	// Offset : 0x721a24
	public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2) { }
	// Offset : 0x72266c
	public static BigInteger LeftShift(BigInteger bi, Int32 n) { }
	// Offset : 0x722930
	public static BigInteger RightShift(BigInteger bi, Int32 n) { }
	// Offset : 0x722568
	public static Void Multiply(UInt32[] x, UInt32 xOffset, UInt32 xLen, UInt32[] y, UInt32 yOffset, UInt32 yLen, UInt32[] d, UInt32 dOffset) { }
	// Offset : 0x7233ac
	public static Void MultiplyMod2p32pmod(UInt32[] x, Int32 xOffset, Int32 xLen, UInt32[] y, Int32 yOffest, Int32 yLen, UInt32[] d, Int32 dOffset, Int32 mod) { }
	// Offset : 0x723500
	public static UInt32 modInverse(BigInteger bi, UInt32 modulus) { }
	// Offset : 0x7203fc
	public static BigInteger modInverse(BigInteger bi, BigInteger modulus) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Math.Prime
public enum ConfidenceFactor
{
	// Fields
	public Int32 value__; // 0x10
	public const ConfidenceFactor ExtraLow = 0; // 0x0
	public const ConfidenceFactor Low = 1; // 0x0
	public const ConfidenceFactor Medium = 2; // 0x0
	public const ConfidenceFactor High = 3; // 0x0
	public const ConfidenceFactor ExtraHigh = 4; // 0x0
	public const ConfidenceFactor Provable = 5; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Math.Prime
public sealed class PrimalityTests
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x724874
	private static Int32 GetSPPRounds(BigInteger bi, ConfidenceFactor confidence) { }
	// Offset : 0x724a34
	public static Boolean RabinMillerTest(BigInteger n, ConfidenceFactor confidence) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Math.Prime.Generator
public abstract class PrimeGeneratorBase
{
	// Fields

	// Properties
	public virtual ConfidenceFactor Confidence { get; }
	public virtual PrimalityTest PrimalityTest { get; }
	public virtual Int32 TrialDivisionBounds { get; }

	// Methods
	// Offset : 0x723d94
	protected Void .ctor() { }
	// Offset : 0x723d9c
	public virtual ConfidenceFactor get_Confidence() { }
	// Offset : 0x723da4
	public virtual PrimalityTest get_PrimalityTest() { }
	// Offset : 0x723e18
	public virtual Int32 get_TrialDivisionBounds() { }
	// Offset : 0x
	public abstract BigInteger GenerateNewPrime(Int32 bits) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Math.Prime.Generator
public class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x720ef0
	public Void .ctor() { }
	// Offset : 0x723e20
	protected virtual BigInteger GenerateSearchBase(Int32 bits, Object context) { }
	// Offset : 0x723ea8
	public override BigInteger GenerateNewPrime(Int32 bits) { }
	// Offset : 0x723ef4
	public virtual BigInteger GenerateNewPrime(Int32 bits, Object context) { }
	// Offset : 0x724794
	protected virtual Boolean IsPrimeAcceptable(BigInteger bi, Object context) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security
public class ASN1
{
	// Fields
	private Byte m_nTag; // 0x10
	private Byte[] m_aValue; // 0x18
	private ArrayList elist; // 0x20

	// Properties
	public Int32 Count { get; }
	public Byte Tag { get; }
	public Int32 Length { get; }
	public Byte[] Value { get; set; }
	public ASN1 Item { get; }

	// Methods
	// Offset : 0x724d5c
	public Void .ctor(Byte tag) { }
	// Offset : 0x724d8c
	public Void .ctor(Byte tag, Byte[] data) { }
	// Offset : 0x724dc8
	public Void .ctor(Byte[] data) { }
	// Offset : 0x7250bc
	public Int32 get_Count() { }
	// Offset : 0x725114
	public Byte get_Tag() { }
	// Offset : 0x72511c
	public Int32 get_Length() { }
	// Offset : 0x725134
	public Byte[] get_Value() { }
	// Offset : 0x72523c
	public Void set_Value(Byte[] value) { }
	// Offset : 0x725310
	private Boolean CompareArray(Byte[] array1, Byte[] array2) { }
	// Offset : 0x7253e0
	public Boolean CompareValue(Byte[] value) { }
	// Offset : 0x7253f4
	public ASN1 Add(ASN1 asn1) { }
	// Offset : 0x7254ac
	public virtual Byte[] GetBytes() { }
	// Offset : 0x724f84
	protected Void Decode(Byte[] asn1, ref Int32 anPos, Int32 anLength) { }
	// Offset : 0x725d80
	protected Void DecodeTLV(Byte[] asn1, ref Int32 pos, out Byte tag, out Int32 length, out Byte[] content) { }
	// Offset : 0x725ef0
	public ASN1 get_Item(Int32 index) { }
	// Offset : 0x7260bc
	public ASN1 Element(Int32 index, Byte anTag) { }
	// Offset : 0x7262b4
	public override String ToString() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security
public static class ASN1Convert
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x726568
	public static ASN1 FromInt32(Int32 value) { }
	// Offset : 0x726700
	public static ASN1 FromOid(String oid) { }
	// Offset : 0x7267dc
	public static Int32 ToInt32(ASN1 asn1) { }
	// Offset : 0x726924
	public static String ToOid(ASN1 asn1) { }
	// Offset : 0x726c70
	public static DateTime ToDateTime(ASN1 time) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security
internal sealed class BitConverterLE
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x727384
	private static Byte[] GetUIntBytes(Byte* bytes) { }
	// Offset : 0x7266dc
	internal static Byte[] GetBytes(Int32 value) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security
public sealed class PKCS7
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
public class ContentInfo
{
	// Fields
	private String contentType; // 0x10
	private ASN1 content; // 0x18

	// Properties
	public ASN1 ASN1 { get; }
	public ASN1 Content { get; set; }
	public String ContentType { get; set; }

	// Methods
	// Offset : 0x72fb50
	public Void .ctor() { }
	// Offset : 0x72fbc8
	public Void .ctor(String oid) { }
	// Offset : 0x72fbf0
	public Void .ctor(Byte[] data) { }
	// Offset : 0x72fc60
	public Void .ctor(ASN1 asn1) { }
	// Offset : 0x72fde8
	public ASN1 get_ASN1() { }
	// Offset : 0x72feb4
	public ASN1 get_Content() { }
	// Offset : 0x72febc
	public Void set_Content(ASN1 value) { }
	// Offset : 0x72fec4
	public String get_ContentType() { }
	// Offset : 0x72fecc
	public Void set_ContentType(String value) { }
	// Offset : 0x72fdec
	internal ASN1 GetASN1() { }
}

// Dll : Mono.Security.dll
// Namespace: 
public class EncryptedData
{
	// Fields
	private Byte _version; // 0x10
	private ContentInfo _content; // 0x18
	private ContentInfo _encryptionAlgorithm; // 0x20
	private Byte[] _encrypted; // 0x28

	// Properties
	public ContentInfo EncryptionAlgorithm { get; }
	public Byte[] EncryptedContent { get; }

	// Methods
	// Offset : 0x72fed4
	public Void .ctor() { }
	// Offset : 0x72fefc
	public Void .ctor(ASN1 asn1) { }
	// Offset : 0x7301e4
	public ContentInfo get_EncryptionAlgorithm() { }
	// Offset : 0x7301ec
	public Byte[] get_EncryptedContent() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public class ARC4Managed : RC4, IDisposable, ICryptoTransform
{
	// Fields
	private Byte[] key; // 0x50
	private Byte[] state; // 0x58
	private Byte x; // 0x60
	private Byte y; // 0x61
	private Boolean m_disposed; // 0x62

	// Properties
	public override Byte[] Key { get; set; }
	public Boolean CanReuseTransform { get; }
	public Boolean CanTransformMultipleBlocks { get; }
	public Int32 InputBlockSize { get; }
	public Int32 OutputBlockSize { get; }

	// Methods
	// Offset : 0x727530
	public Void .ctor() { }
	// Offset : 0x727650
	protected override Void Finalize() { }
	// Offset : 0x7276ec
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x72776c
	public override Byte[] get_Key() { }
	// Offset : 0x727844
	public override Void set_Key(Byte[] value) { }
	// Offset : 0x727b10
	public Boolean get_CanReuseTransform() { }
	// Offset : 0x727b18
	public override ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgvIV) { }
	// Offset : 0x727b68
	public override ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgvIV) { }
	// Offset : 0x727bdc
	public override Void GenerateIV() { }
	// Offset : 0x727c60
	public override Void GenerateKey() { }
	// Offset : 0x727d50
	public Boolean get_CanTransformMultipleBlocks() { }
	// Offset : 0x727d58
	public Int32 get_InputBlockSize() { }
	// Offset : 0x727d60
	public Int32 get_OutputBlockSize() { }
	// Offset : 0x72792c
	private Void KeySetup(Byte[] key) { }
	// Offset : 0x727d68
	private Void CheckInput(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x727eb4
	public Int32 TransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x728024
	private Int32 InternalTransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x7282dc
	public Byte[] TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public sealed class CryptoConvert
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x728380
	public static String ToHex(Byte[] input) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public sealed class KeyBuilder
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods
	// Offset : 0x728e78
	private static RandomNumberGenerator get_Rng() { }
	// Offset : 0x727cb8
	public static Byte[] Key(Int32 size) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public abstract class MD2 : HashAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x728ee8
	protected Void .ctor() { }
	// Offset : 0x728f14
	public static MD2 Create() { }
	// Offset : 0x728f5c
	public static MD2 Create(String hashName) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public class MD2Managed : MD2
{
	// Fields
	private Byte[] state; // 0x28
	private Byte[] checksum; // 0x30
	private Byte[] buffer; // 0x38
	private Int32 count; // 0x40
	private Byte[] x; // 0x48
	private static readonly Byte[] PI_SUBST; // 0x0

	// Properties

	// Methods
	// Offset : 0x729074
	public Void .ctor() { }
	// Offset : 0x72913c
	private static Void .cctor() { }
	// Offset : 0x7291b8
	private Byte[] Padding(Int32 nLength) { }
	// Offset : 0x729274
	public override Void Initialize() { }
	// Offset : 0x7292e0
	protected override Void HashCore(Byte[] array, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x729730
	protected override Byte[] HashFinal() { }
	// Offset : 0x7293cc
	private Void MD2Transform(Byte[] state, Byte[] checksum, Byte[] block, Int32 index) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public abstract class MD4 : HashAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7298dc
	protected Void .ctor() { }
	// Offset : 0x729908
	public static MD4 Create() { }
	// Offset : 0x729950
	public static MD4 Create(String hashName) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public class MD4Managed : MD4
{
	// Fields
	private UInt32[] state; // 0x28
	private Byte[] buffer; // 0x30
	private UInt32[] count; // 0x38
	private UInt32[] x; // 0x40
	private Byte[] digest; // 0x48

	// Properties

	// Methods
	// Offset : 0x729a68
	public Void .ctor() { }
	// Offset : 0x729b50
	public override Void Initialize() { }
	// Offset : 0x729cc8
	protected override Void HashCore(Byte[] array, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x72ae30
	protected override Byte[] HashFinal() { }
	// Offset : 0x72b158
	private Byte[] Padding(Int32 nLength) { }
	// Offset : 0x72b1ec
	private UInt32 F(UInt32 x, UInt32 y, UInt32 z) { }
	// Offset : 0x72b1fc
	private UInt32 G(UInt32 x, UInt32 y, UInt32 z) { }
	// Offset : 0x72b210
	private UInt32 H(UInt32 x, UInt32 y, UInt32 z) { }
	// Offset : 0x72b21c
	private UInt32 ROL(UInt32 x, Byte n) { }
	// Offset : 0x72b22c
	private Void FF(ref UInt32 a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, Byte s) { }
	// Offset : 0x72b258
	private Void GG(ref UInt32 a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, Byte s) { }
	// Offset : 0x72b294
	private Void HH(ref UInt32 a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, Byte s) { }
	// Offset : 0x72af9c
	private Void Encode(Byte[] output, UInt32[] input) { }
	// Offset : 0x72b2c8
	private Void Decode(UInt32[] output, Byte[] input, Int32 index) { }
	// Offset : 0x729eb4
	private Void MD4Transform(UInt32[] state, Byte[] block, Int32 index) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public sealed class PKCS1
{
	// Fields
	private static Byte[] emptySHA1; // 0x0
	private static Byte[] emptySHA256; // 0x8
	private static Byte[] emptySHA384; // 0x10
	private static Byte[] emptySHA512; // 0x18

	// Properties

	// Methods
	// Offset : 0x72ba80
	private static Void .cctor() { }
	// Offset : 0x72bb94
	private static Boolean Compare(Byte[] array1, Byte[] array2) { }
	// Offset : 0x72bc60
	public static Byte[] I2OSP(Byte[] x, Int32 size) { }
	// Offset : 0x72bd0c
	public static Byte[] OS2IP(Byte[] x) { }
	// Offset : 0x72bdf4
	public static Byte[] RSASP1(RSA rsa, Byte[] m) { }
	// Offset : 0x72be44
	public static Byte[] RSAVP1(RSA rsa, Byte[] s) { }
	// Offset : 0x72be94
	public static Byte[] Sign_v15(RSA rsa, HashAlgorithm hash, Byte[] hashValue) { }
	// Offset : 0x72c380
	public static Boolean Verify_v15(RSA rsa, HashAlgorithm hash, Byte[] hashValue, Byte[] signature) { }
	// Offset : 0x72c410
	public static Boolean Verify_v15(RSA rsa, HashAlgorithm hash, Byte[] hashValue, Byte[] signature, Boolean tryNonStandardEncoding) { }
	// Offset : 0x72bf64
	public static Byte[] Encode_v15(HashAlgorithm hash, Byte[] hashValue, Int32 emLength) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public sealed class PKCS8
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
public class PrivateKeyInfo
{
	// Fields
	private Int32 _version; // 0x10
	private String _algorithm; // 0x18
	private Byte[] _key; // 0x20
	private ArrayList _list; // 0x28

	// Properties
	public Byte[] PrivateKey { get; }

	// Methods
	// Offset : 0x72cb48
	public Void .ctor() { }
	// Offset : 0x72cbb8
	public Void .ctor(Byte[] data) { }
	// Offset : 0x72ce78
	public Byte[] get_PrivateKey() { }
	// Offset : 0x72cbe4
	private Void Decode(Byte[] data) { }
	// Offset : 0x72cf44
	private static Byte[] RemoveLeadingZero(Byte[] bigInt) { }
	// Offset : 0x72d018
	private static Byte[] Normalize(Byte[] bigInt, Int32 length) { }
	// Offset : 0x72d0d0
	public static RSA DecodeRSA(Byte[] keypair) { }
	// Offset : 0x72d4f8
	public static DSA DecodeDSA(Byte[] privateKey, DSAParameters dsaParameters) { }
}

// Dll : Mono.Security.dll
// Namespace: 
public class EncryptedPrivateKeyInfo
{
	// Fields
	private String _algorithm; // 0x10
	private Byte[] _salt; // 0x18
	private Int32 _iterations; // 0x20
	private Byte[] _data; // 0x28

	// Properties
	public String Algorithm { get; }
	public Byte[] EncryptedData { get; }
	public Byte[] Salt { get; }
	public Int32 IterationCount { get; }

	// Methods
	// Offset : 0x72c66c
	public Void .ctor() { }
	// Offset : 0x72c674
	public Void .ctor(Byte[] data) { }
	// Offset : 0x72c928
	public String get_Algorithm() { }
	// Offset : 0x72c930
	public Byte[] get_EncryptedData() { }
	// Offset : 0x72c9fc
	public Byte[] get_Salt() { }
	// Offset : 0x72cb40
	public Int32 get_IterationCount() { }
	// Offset : 0x72c6a4
	private Void Decode(Byte[] data) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public abstract class RC4 : SymmetricAlgorithm
{
	// Fields
	private static KeySizes[] s_legalBlockSizes; // 0x0
	private static KeySizes[] s_legalKeySizes; // 0x8

	// Properties
	public override Byte[] IV { get; set; }

	// Methods
	// Offset : 0x7275b4
	public Void .ctor() { }
	// Offset : 0x72d660
	private static Void .cctor() { }
	// Offset : 0x72d7f4
	public override Byte[] get_IV() { }
	// Offset : 0x72d840
	public override Void set_IV(Byte[] value) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
public class RSAManaged : RSA
{
	// Fields
	private Boolean isCRTpossible; // 0x20
	private Boolean keyBlinding; // 0x21
	private Boolean keypairGenerated; // 0x22
	private Boolean m_disposed; // 0x23
	private BigInteger d; // 0x28
	private BigInteger p; // 0x30
	private BigInteger q; // 0x38
	private BigInteger dp; // 0x40
	private BigInteger dq; // 0x48
	private BigInteger qInv; // 0x50
	private BigInteger n; // 0x58
	private BigInteger e; // 0x60
	private KeyGeneratedEventHandler KeyGenerated; // 0x68

	// Properties
	public override Int32 KeySize { get; }
	public Boolean PublicOnly { get; }

	// Methods
	// Offset : 0x72d844
	public Void .ctor() { }
	// Offset : 0x72d84c
	public Void .ctor(Int32 keySize) { }
	// Offset : 0x72d954
	protected override Void Finalize() { }
	// Offset : 0x72d9f0
	private Void GenerateKeyPair() { }
	// Offset : 0x72e1ec
	public override Int32 get_KeySize() { }
	// Offset : 0x72e23c
	public Boolean get_PublicOnly() { }
	// Offset : 0x72e300
	public override Byte[] DecryptValue(Byte[] rgb) { }
	// Offset : 0x72e788
	public override Byte[] EncryptValue(Byte[] rgb) { }
	// Offset : 0x72e8d8
	public override RSAParameters ExportParameters(Boolean includePrivateParameters) { }
	// Offset : 0x72ec90
	public override Void ImportParameters(RSAParameters parameters) { }
	// Offset : 0x72f114
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x72f3bc
	public override String ToXmlString(Boolean includePrivateParameters) { }
	// Offset : 0x72e6c0
	private Byte[] GetPaddedValue(BigInteger value, Int32 length) { }
}

// Dll : Mono.Security.dll
// Namespace: 
public sealed class KeyGeneratedEventHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x72fb04
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x72dd0c
	public virtual Void Invoke(Object sender, EventArgs e) { }
	// Offset : 0x72fb14
	public virtual IAsyncResult BeginInvoke(Object sender, EventArgs e, AsyncCallback callback, Object object) { }
	// Offset : 0x72fb44
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
internal class SafeBag
{
	// Fields
	private String _bagOID; // 0x10
	private ASN1 _asn1; // 0x18

	// Properties
	public String BagOID { get; }
	public ASN1 ASN1 { get; }

	// Methods
	// Offset : 0x56c398
	public Void .ctor(String bagOID, ASN1 asn1) { }
	// Offset : 0x56a8c8
	public String get_BagOID() { }
	// Offset : 0x56a8d0
	public ASN1 get_ASN1() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
public class PKCS12 : ICloneable
{
	// Fields
	private static Int32 recommendedIterationCount; // 0x0
	private Byte[] _password; // 0x10
	private ArrayList _keyBags; // 0x18
	private ArrayList _secretBags; // 0x20
	private X509CertificateCollection _certs; // 0x28
	private Boolean _keyBagsChanged; // 0x30
	private Boolean _secretBagsChanged; // 0x31
	private Boolean _certsChanged; // 0x32
	private Int32 _iterations; // 0x34
	private ArrayList _safeBags; // 0x38
	private RandomNumberGenerator _rng; // 0x40
	private static Int32 password_max_length; // 0x4
	private static Dictionary`2 <>f__switch$map5; // 0x8
	private static Dictionary`2 <>f__switch$map6; // 0x10
	private static Dictionary`2 <>f__switch$map7; // 0x18
	private static Dictionary`2 <>f__switch$map8; // 0x20
	private static Dictionary`2 <>f__switch$mapC; // 0x28

	// Properties
	public String Password { set; }
	public Int32 IterationCount { get; set; }
	public ArrayList Keys { get; }
	public X509CertificateCollection Certificates { get; }
	internal RandomNumberGenerator RNG { get; }
	public static Int32 MaximumPasswordLength { get; }

	// Methods
	// Offset : 0x56825c
	public Void .ctor() { }
	// Offset : 0x568358
	public Void .ctor(Byte[] data) { }
	// Offset : 0x568f14
	public Void .ctor(Byte[] data, String password) { }
	// Offset : 0x568f58
	private static Void .cctor() { }
	// Offset : 0x568554
	private Void Decode(Byte[] data) { }
	// Offset : 0x569f00
	protected override Void Finalize() { }
	// Offset : 0x5683b4
	public Void set_Password(String value) { }
	// Offset : 0x569ff4
	public Int32 get_IterationCount() { }
	// Offset : 0x569ffc
	public Void set_IterationCount(Int32 value) { }
	// Offset : 0x56a004
	public ArrayList get_Keys() { }
	// Offset : 0x56aabc
	public X509CertificateCollection get_Certificates() { }
	// Offset : 0x56afb4
	internal RandomNumberGenerator get_RNG() { }
	// Offset : 0x5691c0
	private Boolean Compare(Byte[] expected, Byte[] actual) { }
	// Offset : 0x56afe0
	private SymmetricAlgorithm GetSymmetricAlgorithm(String algorithmOid, Byte[] salt, Int32 iterationCount) { }
	// Offset : 0x56a8d8
	public Byte[] Decrypt(String algorithmOid, Byte[] salt, Int32 iterationCount, Byte[] encryptedData) { }
	// Offset : 0x569db0
	public Byte[] Decrypt(EncryptedData ed) { }
	// Offset : 0x56b96c
	public Byte[] Encrypt(String algorithmOid, Byte[] salt, Int32 iterationCount, Byte[] data) { }
	// Offset : 0x56bbcc
	private DSAParameters GetExistingParameters(out Boolean found) { }
	// Offset : 0x56c1dc
	private Void AddPrivateKey(PrivateKeyInfo pki) { }
	// Offset : 0x569290
	private Void ReadSafeBag(ASN1 safeBag) { }
	// Offset : 0x56c3d0
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes) { }
	// Offset : 0x568fbc
	private Byte[] MAC(Byte[] password, Byte[] salt, Int32 iterations, Byte[] data) { }
	// Offset : 0x56d5a4
	public Byte[] GetBytes() { }
	// Offset : 0x570050
	private ContentInfo EncryptedContentInfo(ASN1 safeBags, String algorithmOid) { }
	// Offset : 0x570048
	public Void AddCertificate(X509Certificate cert) { }
	// Offset : 0x570430
	public Void AddCertificate(X509Certificate cert, IDictionary attributes) { }
	// Offset : 0x570040
	public Void RemoveCertificate(X509Certificate cert) { }
	// Offset : 0x5707a8
	public Void RemoveCertificate(X509Certificate cert, IDictionary attrs) { }
	// Offset : 0x570f30
	public Object Clone() { }
	// Offset : 0x569f8c
	public static Int32 get_MaximumPasswordLength() { }
}

// Dll : Mono.Security.dll
// Namespace: 
public class DeriveBytes
{
	// Fields
	private static Byte[] keyDiversifier; // 0x0
	private static Byte[] ivDiversifier; // 0x8
	private static Byte[] macDiversifier; // 0x10
	private String _hashName; // 0x10
	private Int32 _iterations; // 0x18
	private Byte[] _password; // 0x20
	private Byte[] _salt; // 0x28

	// Properties
	public String HashName { set; }
	public Int32 IterationCount { set; }
	public Byte[] Password { set; }
	public Byte[] Salt { set; }

	// Methods
	// Offset : 0x56b694
	public Void .ctor() { }
	// Offset : 0x571054
	private static Void .cctor() { }
	// Offset : 0x56b864
	public Void set_HashName(String value) { }
	// Offset : 0x56b85c
	public Void set_IterationCount(Int32 value) { }
	// Offset : 0x56b69c
	public Void set_Password(Byte[] value) { }
	// Offset : 0x56b788
	public Void set_Salt(Byte[] value) { }
	// Offset : 0x571138
	private Void Adjust(Byte[] a, Int32 aOff, Byte[] b) { }
	// Offset : 0x5712e4
	private Byte[] Derive(Byte[] diversifier, Int32 n) { }
	// Offset : 0x56b86c
	public Byte[] DeriveKey(Int32 size) { }
	// Offset : 0x56b8ec
	public Byte[] DeriveIV(Int32 size) { }
	// Offset : 0x56d524
	public Byte[] DeriveMAC(Int32 size) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
public sealed class X501
{
	// Fields
	private static Byte[] countryName; // 0x0
	private static Byte[] organizationName; // 0x8
	private static Byte[] organizationalUnitName; // 0x10
	private static Byte[] commonName; // 0x18
	private static Byte[] localityName; // 0x20
	private static Byte[] stateOrProvinceName; // 0x28
	private static Byte[] streetAddress; // 0x30
	private static Byte[] domainComponent; // 0x38
	private static Byte[] userid; // 0x40
	private static Byte[] email; // 0x48
	private static Byte[] dnQualifier; // 0x50
	private static Byte[] title; // 0x58
	private static Byte[] surname; // 0x60
	private static Byte[] givenName; // 0x68
	private static Byte[] initial; // 0x70

	// Properties

	// Methods
	// Offset : 0x5718f0
	private static Void .cctor() { }
	// Offset : 0x56599c
	public static String ToString(ASN1 seq) { }
	// Offset : 0x572960
	public static String ToString(ASN1 seq, Boolean reversed, String separator, Boolean quotes) { }
	// Offset : 0x572060
	private static Void AppendEntry(StringBuilder sb, ASN1 entry, Boolean quotes) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
public class X509Certificate : ISerializable
{
	// Fields
	private ASN1 decoder; // 0x10
	private Byte[] m_encodedcert; // 0x18
	private DateTime m_from; // 0x20
	private DateTime m_until; // 0x30
	private ASN1 issuer; // 0x40
	private String m_issuername; // 0x48
	private String m_keyalgo; // 0x50
	private Byte[] m_keyalgoparams; // 0x58
	private ASN1 subject; // 0x60
	private String m_subject; // 0x68
	private Byte[] m_publickey; // 0x70
	private Byte[] signature; // 0x78
	private String m_signaturealgo; // 0x80
	private Byte[] m_signaturealgoparams; // 0x88
	private Byte[] certhash; // 0x90
	private RSA _rsa; // 0x98
	private DSA _dsa; // 0xa0
	private Int32 version; // 0xa8
	private Byte[] serialnumber; // 0xb0
	private Byte[] issuerUniqueID; // 0xb8
	private Byte[] subjectUniqueID; // 0xc0
	private X509ExtensionCollection extensions; // 0xc8
	private static String encoding_error; // 0x0
	private static Dictionary`2 <>f__switch$mapF; // 0x8
	private static Dictionary`2 <>f__switch$map10; // 0x10
	private static Dictionary`2 <>f__switch$map11; // 0x18

	// Properties
	public DSA DSA { get; set; }
	public X509ExtensionCollection Extensions { get; }
	public Byte[] Hash { get; }
	public virtual String IssuerName { get; }
	public virtual String KeyAlgorithm { get; }
	public virtual Byte[] KeyAlgorithmParameters { get; set; }
	public virtual Byte[] PublicKey { get; }
	public virtual RSA RSA { get; set; }
	public virtual Byte[] RawData { get; }
	public virtual Byte[] SerialNumber { get; }
	public virtual Byte[] Signature { get; }
	public virtual String SignatureAlgorithm { get; }
	public virtual String SubjectName { get; }
	public virtual DateTime ValidFrom { get; }
	public virtual DateTime ValidUntil { get; }
	public Int32 Version { get; }
	public Boolean IsCurrent { get; }
	public Boolean IsSelfSigned { get; }

	// Methods
	// Offset : 0x5631d8
	public Void .ctor(Byte[] data) { }
	// Offset : 0x573868
	private static Void .cctor() { }
	// Offset : 0x572d34
	private Void Parse(Byte[] data) { }
	// Offset : 0x5738cc
	private Byte[] GetUnsignedBigInteger(Byte[] integer) { }
	// Offset : 0x56be8c
	public DSA get_DSA() { }
	// Offset : 0x573984
	public Void set_DSA(DSA value) { }
	// Offset : 0x573994
	public X509ExtensionCollection get_Extensions() { }
	// Offset : 0x57399c
	public Byte[] get_Hash() { }
	// Offset : 0x573e68
	public virtual String get_IssuerName() { }
	// Offset : 0x573e70
	public virtual String get_KeyAlgorithm() { }
	// Offset : 0x573e78
	public virtual Byte[] get_KeyAlgorithmParameters() { }
	// Offset : 0x573f44
	public virtual Void set_KeyAlgorithmParameters(Byte[] value) { }
	// Offset : 0x573f4c
	public virtual Byte[] get_PublicKey() { }
	// Offset : 0x574018
	public virtual RSA get_RSA() { }
	// Offset : 0x574218
	public virtual Void set_RSA(RSA value) { }
	// Offset : 0x574228
	public virtual Byte[] get_RawData() { }
	// Offset : 0x5742f4
	public virtual Byte[] get_SerialNumber() { }
	// Offset : 0x5743c0
	public virtual Byte[] get_Signature() { }
	// Offset : 0x5749b8
	public virtual String get_SignatureAlgorithm() { }
	// Offset : 0x5749c0
	public virtual String get_SubjectName() { }
	// Offset : 0x5749c8
	public virtual DateTime get_ValidFrom() { }
	// Offset : 0x5749d4
	public virtual DateTime get_ValidUntil() { }
	// Offset : 0x5749e0
	public Int32 get_Version() { }
	// Offset : 0x5749e8
	public Boolean get_IsCurrent() { }
	// Offset : 0x574a64
	public Boolean WasCurrent(DateTime instant) { }
	// Offset : 0x574ba4
	internal Boolean VerifySignature(DSA dsa) { }
	// Offset : 0x574cc4
	internal Boolean VerifySignature(RSA rsa) { }
	// Offset : 0x57520c
	public Boolean VerifySignature(AsymmetricAlgorithm aa) { }
	// Offset : 0x5753bc
	public Boolean get_IsSelfSigned() { }
	// Offset : 0x575484
	public ASN1 GetIssuerName() { }
	// Offset : 0x57548c
	public ASN1 GetSubjectName() { }
	// Offset : 0x575494
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x572b58
	private static Byte[] PEM(String type, Byte[] data) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
[Serializable]
public class X509CertificateCollection : CollectionBase, IEnumerable
{
	// Fields

	// Properties
	public X509Certificate Item { get; }

	// Methods
	// Offset : 0x95322c
	public Void .ctor() { }
	// Offset : 0x953234
	public Void .ctor(X509CertificateCollection value) { }
	// Offset : 0x9533b4
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x953408
	public X509Certificate get_Item(Int32 index) { }
	// Offset : 0x95351c
	public Int32 Add(X509Certificate value) { }
	// Offset : 0x953264
	public Void AddRange(X509CertificateCollection value) { }
	// Offset : 0x9535f4
	public Boolean Contains(X509Certificate value) { }
	// Offset : 0x953804
	public X509CertificateEnumerator GetEnumerator() { }
	// Offset : 0x953960
	public override Int32 GetHashCode() { }
	// Offset : 0x953610
	public Int32 IndexOf(X509Certificate value) { }
	// Offset : 0x953a74
	public Void Remove(X509Certificate value) { }
	// Offset : 0x9539b0
	private Boolean Compare(Byte[] array1, Byte[] array2) { }
}

// Dll : Mono.Security.dll
// Namespace: 
public class X509CertificateEnumerator : IEnumerator
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public X509Certificate Current { get; }

	// Methods
	// Offset : 0x953864
	public Void .ctor(X509CertificateCollection mappings) { }
	// Offset : 0x953ad0
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x953bb8
	private Boolean System.Collections.IEnumerator.MoveNext() { }
	// Offset : 0x953ca4
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x953d90
	public X509Certificate get_Current() { }
	// Offset : 0x953efc
	public Boolean MoveNext() { }
	// Offset : 0x953fe8
	public Void Reset() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
public class X509Chain
{
	// Fields
	private X509CertificateCollection roots; // 0x10
	private X509CertificateCollection certs; // 0x18
	private X509Certificate _root; // 0x20
	private X509CertificateCollection _chain; // 0x28
	private X509ChainStatusFlags _status; // 0x30

	// Properties
	public X509ChainStatusFlags Status { get; }
	public X509CertificateCollection TrustAnchors { get; }

	// Methods
	// Offset : 0x9540d4
	public Void .ctor() { }
	// Offset : 0x954140
	public Void .ctor(X509CertificateCollection chain) { }
	// Offset : 0x9541c8
	public X509ChainStatusFlags get_Status() { }
	// Offset : 0x9541d0
	public X509CertificateCollection get_TrustAnchors() { }
	// Offset : 0x954388
	public Boolean Build(X509Certificate leaf) { }
	// Offset : 0x954d8c
	private Boolean IsValid(X509Certificate cert) { }
	// Offset : 0x954740
	private X509Certificate FindCertificateParent(X509Certificate child) { }
	// Offset : 0x954948
	private X509Certificate FindCertificateRoot(X509Certificate potentialRoot) { }
	// Offset : 0x954e30
	private Boolean IsTrusted(X509Certificate potentialTrusted) { }
	// Offset : 0x954b94
	private Boolean IsParent(X509Certificate child, X509Certificate parent) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
[Serializable]
public enum X509ChainStatusFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024; // 0x0
	public const X509ChainStatusFlags NoError = 0; // 0x0
	public const X509ChainStatusFlags NotSignatureValid = 8; // 0x0
	public const X509ChainStatusFlags NotTimeNested = 2; // 0x0
	public const X509ChainStatusFlags NotTimeValid = 1; // 0x0
	public const X509ChainStatusFlags PartialChain = 65536; // 0x0
	public const X509ChainStatusFlags UntrustedRoot = 32; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
public class X509Crl
{
	// Fields
	private String issuer; // 0x10
	private Byte version; // 0x18
	private DateTime thisUpdate; // 0x20
	private DateTime nextUpdate; // 0x30
	private ArrayList entries; // 0x40
	private String signatureOID; // 0x48
	private Byte[] signature; // 0x50
	private X509ExtensionCollection extensions; // 0x58
	private Byte[] encoded; // 0x60
	private Byte[] hash_value; // 0x68
	private static Dictionary`2 <>f__switch$map13; // 0x0

	// Properties
	public X509ExtensionCollection Extensions { get; }
	public Byte[] Hash { get; }
	public String IssuerName { get; }
	public DateTime NextUpdate { get; }

	// Methods
	// Offset : 0x954f9c
	public Void .ctor(Byte[] crl) { }
	// Offset : 0x9550c8
	private Void Parse(Byte[] crl) { }
	// Offset : 0x955bd4
	public X509ExtensionCollection get_Extensions() { }
	// Offset : 0x955bdc
	public Byte[] get_Hash() { }
	// Offset : 0x955f3c
	public String get_IssuerName() { }
	// Offset : 0x955f44
	public DateTime get_NextUpdate() { }
	// Offset : 0x955f50
	private Boolean Compare(Byte[] array1, Byte[] array2) { }
	// Offset : 0x956014
	public X509CrlEntry GetCrlEntry(X509Certificate x509) { }
	// Offset : 0x9560d8
	public X509CrlEntry GetCrlEntry(Byte[] serialNumber) { }
	// Offset : 0x955cd4
	private String GetHashName() { }
	// Offset : 0x956388
	internal Boolean VerifySignature(DSA dsa) { }
	// Offset : 0x9566f8
	internal Boolean VerifySignature(RSA rsa) { }
	// Offset : 0x9567e8
	public Boolean VerifySignature(AsymmetricAlgorithm aa) { }
}

// Dll : Mono.Security.dll
// Namespace: 
public class X509CrlEntry
{
	// Fields
	private Byte[] sn; // 0x10
	private DateTime revocationDate; // 0x18
	private X509ExtensionCollection extensions; // 0x28

	// Properties
	public Byte[] SerialNumber { get; }
	public DateTime RevocationDate { get; }
	public X509ExtensionCollection Extensions { get; }

	// Methods
	// Offset : 0x955940
	internal Void .ctor(ASN1 entry) { }
	// Offset : 0x9562b0
	public Byte[] get_SerialNumber() { }
	// Offset : 0x956998
	public DateTime get_RevocationDate() { }
	// Offset : 0x9569a4
	public X509ExtensionCollection get_Extensions() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
public class X509Extension
{
	// Fields
	protected String extnOid; // 0x10
	protected Boolean extnCritical; // 0x18
	protected ASN1 extnValue; // 0x20

	// Properties
	public String Oid { get; }
	public Boolean Critical { get; }
	public ASN1 Value { get; }

	// Methods
	// Offset : 0x9569ac
	public Void .ctor(ASN1 asn1) { }
	// Offset : 0x956db0
	public Void .ctor(X509Extension extension) { }
	// Offset : 0x956fa0
	protected virtual Void Decode() { }
	// Offset : 0x956fa4
	protected virtual Void Encode() { }
	// Offset : 0x956f90
	public String get_Oid() { }
	// Offset : 0x956f98
	public Boolean get_Critical() { }
	// Offset : 0x956f40
	public ASN1 get_Value() { }
	// Offset : 0x956fa8
	public override Boolean Equals(Object obj) { }
	// Offset : 0x957174
	public override Int32 GetHashCode() { }
	// Offset : 0x9571a4
	private Void WriteLine(StringBuilder sb, Int32 n, Int32 pos) { }
	// Offset : 0x957444
	public override String ToString() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
public sealed class X509ExtensionCollection : CollectionBase, IEnumerable
{
	// Fields
	private Boolean readOnly; // 0x18

	// Properties
	public X509Extension Item { get; }

	// Methods
	// Offset : 0x957550
	public Void .ctor() { }
	// Offset : 0x955a60
	public Void .ctor(ASN1 asn1) { }
	// Offset : 0x957558
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x9575ac
	public Int32 IndexOf(String oid) { }
	// Offset : 0x954e70
	public X509Extension get_Item(String oid) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
public class X509Store
{
	// Fields
	private String _storePath; // 0x10
	private X509CertificateCollection _certificates; // 0x18
	private ArrayList _crls; // 0x20
	private Boolean _crl; // 0x28

	// Properties
	public X509CertificateCollection Certificates { get; }
	public ArrayList Crls { get; }

	// Methods
	// Offset : 0x9577b8
	internal Void .ctor(String path, Boolean crl) { }
	// Offset : 0x9577f8
	public X509CertificateCollection get_Certificates() { }
	// Offset : 0x9579e8
	public ArrayList get_Crls() { }
	// Offset : 0x957c58
	private Byte[] Load(String filename) { }
	// Offset : 0x957e64
	private X509Certificate LoadCertificate(String filename) { }
	// Offset : 0x957ed8
	private X509Crl LoadCrl(String filename) { }
	// Offset : 0x957f48
	private Boolean CheckStore(String path, Boolean throwException) { }
	// Offset : 0x95782c
	private X509CertificateCollection BuildCertificatesCollection(String storeName) { }
	// Offset : 0x957a78
	private ArrayList BuildCrlsCollection(String storeName) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
public sealed class X509StoreManager
{
	// Fields
	private static X509Stores _userStore; // 0x0
	private static X509Stores _machineStore; // 0x8

	// Properties
	public static X509Stores CurrentUser { get; }
	public static X509Stores LocalMachine { get; }
	public static X509CertificateCollection TrustedRootCertificates { get; }

	// Methods
	// Offset : 0x958064
	public static X509Stores get_CurrentUser() { }
	// Offset : 0x95818c
	public static X509Stores get_LocalMachine() { }
	// Offset : 0x954264
	public static X509CertificateCollection get_TrustedRootCertificates() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509
public class X509Stores
{
	// Fields
	private String _storePath; // 0x10
	private X509Store _trusted; // 0x18

	// Properties
	public X509Store TrustedRoot { get; }

	// Methods
	// Offset : 0x958160
	internal Void .ctor(String path) { }
	// Offset : 0x958284
	public X509Store get_TrustedRoot() { }
	// Offset : 0x958348
	public X509Store Open(String storeName, Boolean create) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509.Extensions
public class AuthorityKeyIdentifierExtension : X509Extension
{
	// Fields
	private Byte[] aki; // 0x28

	// Properties
	public Byte[] Identifier { get; }

	// Methods
	// Offset : 0x563f6c
	public Void .ctor(X509Extension extension) { }
	// Offset : 0x563f74
	protected override Void Decode() { }
	// Offset : 0x5640f0
	public Byte[] get_Identifier() { }
	// Offset : 0x5641bc
	public override String ToString() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509.Extensions
public class BasicConstraintsExtension : X509Extension
{
	// Fields
	private Boolean cA; // 0x28
	private Int32 pathLenConstraint; // 0x2c

	// Properties
	public Boolean CertificateAuthority { get; }

	// Methods
	// Offset : 0x564378
	public Void .ctor(X509Extension extension) { }
	// Offset : 0x564380
	protected override Void Decode() { }
	// Offset : 0x564548
	protected override Void Encode() { }
	// Offset : 0x5646a4
	public Boolean get_CertificateAuthority() { }
	// Offset : 0x5646ac
	public override String ToString() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509.Extensions
public class ExtendedKeyUsageExtension : X509Extension
{
	// Fields
	private ArrayList keyPurpose; // 0x28
	private static Dictionary`2 <>f__switch$map14; // 0x0

	// Properties
	public ArrayList KeyPurpose { get; }

	// Methods
	// Offset : 0x56489c
	public Void .ctor(X509Extension extension) { }
	// Offset : 0x5648a4
	protected override Void Decode() { }
	// Offset : 0x564a54
	protected override Void Encode() { }
	// Offset : 0x564e24
	public ArrayList get_KeyPurpose() { }
	// Offset : 0x564e2c
	public override String ToString() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509.Extensions
internal class GeneralNames
{
	// Fields
	private ArrayList rfc822Name; // 0x10
	private ArrayList dnsName; // 0x18
	private ArrayList directoryNames; // 0x20
	private ArrayList uris; // 0x28
	private ArrayList ipAddr; // 0x30

	// Properties
	public String[] DNSNames { get; }
	public String[] IPAddresses { get; }

	// Methods
	// Offset : 0x5654ec
	public Void .ctor(ASN1 sequence) { }
	// Offset : 0x565ae4
	public String[] get_DNSNames() { }
	// Offset : 0x565c30
	public String[] get_IPAddresses() { }
	// Offset : 0x565d7c
	public override String ToString() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509.Extensions
public enum KeyUsages
{
	// Fields
	public Int32 value__; // 0x10
	public const KeyUsages digitalSignature = 128; // 0x0
	public const KeyUsages nonRepudiation = 64; // 0x0
	public const KeyUsages keyEncipherment = 32; // 0x0
	public const KeyUsages dataEncipherment = 16; // 0x0
	public const KeyUsages keyAgreement = 8; // 0x0
	public const KeyUsages keyCertSign = 4; // 0x0
	public const KeyUsages cRLSign = 2; // 0x0
	public const KeyUsages encipherOnly = 1; // 0x0
	public const KeyUsages decipherOnly = 2048; // 0x0
	public const KeyUsages none = 0; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509.Extensions
public class KeyUsageExtension : X509Extension
{
	// Fields
	private Int32 kubits; // 0x28

	// Properties

	// Methods
	// Offset : 0x566fa4
	public Void .ctor(X509Extension extension) { }
	// Offset : 0x566fac
	protected override Void Decode() { }
	// Offset : 0x567140
	protected override Void Encode() { }
	// Offset : 0x567388
	public Boolean Support(KeyUsages usage) { }
	// Offset : 0x567460
	public override String ToString() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509.Extensions
public class NetscapeCertTypeExtension : X509Extension
{
	// Fields
	private Int32 ctbits; // 0x28

	// Properties

	// Methods
	// Offset : 0x5679bc
	public Void .ctor(X509Extension extension) { }
	// Offset : 0x5679c4
	protected override Void Decode() { }
	// Offset : 0x567b58
	public Boolean Support(CertTypes usage) { }
	// Offset : 0x567c30
	public override String ToString() { }
}

// Dll : Mono.Security.dll
// Namespace: 
public enum CertTypes
{
	// Fields
	public Int32 value__; // 0x10
	public const CertTypes SslClient = 128; // 0x0
	public const CertTypes SslServer = 64; // 0x0
	public const CertTypes Smime = 32; // 0x0
	public const CertTypes ObjectSigning = 16; // 0x0
	public const CertTypes SslCA = 4; // 0x0
	public const CertTypes SmimeCA = 2; // 0x0
	public const CertTypes ObjectSigningCA = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.X509.Extensions
public class SubjectAltNameExtension : X509Extension
{
	// Fields
	private GeneralNames _names; // 0x28

	// Properties
	public String[] DNSNames { get; }
	public String[] IPAddresses { get; }

	// Methods
	// Offset : 0x56809c
	public Void .ctor(X509Extension extension) { }
	// Offset : 0x5680a4
	protected override Void Decode() { }
	// Offset : 0x5681b8
	public String[] get_DNSNames() { }
	// Offset : 0x5681e4
	public String[] get_IPAddresses() { }
	// Offset : 0x568210
	public override String ToString() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
internal class HMAC : KeyedHashAlgorithm
{
	// Fields
	private HashAlgorithm hash; // 0x30
	private Boolean hashing; // 0x38
	private Byte[] innerPad; // 0x40
	private Byte[] outerPad; // 0x48

	// Properties
	public override Byte[] Key { get; set; }

	// Methods
	// Offset : 0x7284d0
	public Void .ctor(String hashName, Byte[] rgbKey) { }
	// Offset : 0x728694
	public override Byte[] get_Key() { }
	// Offset : 0x72876c
	public override Void set_Key(Byte[] value) { }
	// Offset : 0x728af4
	public override Void Initialize() { }
	// Offset : 0x728b58
	protected override Byte[] HashFinal() { }
	// Offset : 0x728dac
	protected override Void HashCore(Byte[] array, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x7288cc
	private Void initializePad() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Cryptography
internal class MD5SHA1 : HashAlgorithm
{
	// Fields
	private HashAlgorithm md5; // 0x28
	private HashAlgorithm sha; // 0x30
	private Boolean hashing; // 0x38

	// Properties

	// Methods
	// Offset : 0x72b420
	public Void .ctor() { }
	// Offset : 0x72b4e8
	public override Void Initialize() { }
	// Offset : 0x72b580
	protected override Byte[] HashFinal() { }
	// Offset : 0x72b704
	protected override Void HashCore(Byte[] array, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x72b7a8
	public Byte[] CreateSignature(RSA rsa) { }
	// Offset : 0x72b8f8
	public Boolean VerifySignature(RSA rsa, Byte[] rgbSignature) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum AlertLevel
{
	// Fields
	public Byte value__; // 0x10
	public const AlertLevel Warning = 1; // 0x0
	public const AlertLevel Fatal = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum AlertDescription
{
	// Fields
	public Byte value__; // 0x10
	public const AlertDescription CloseNotify = 0; // 0x0
	public const AlertDescription UnexpectedMessage = 10; // 0x0
	public const AlertDescription BadRecordMAC = 20; // 0x0
	public const AlertDescription DecryptionFailed = 21; // 0x0
	public const AlertDescription RecordOverflow = 22; // 0x0
	public const AlertDescription DecompressionFailiure = 30; // 0x0
	public const AlertDescription HandshakeFailiure = 40; // 0x0
	public const AlertDescription NoCertificate = 41; // 0x0
	public const AlertDescription BadCertificate = 42; // 0x0
	public const AlertDescription UnsupportedCertificate = 43; // 0x0
	public const AlertDescription CertificateRevoked = 44; // 0x0
	public const AlertDescription CertificateExpired = 45; // 0x0
	public const AlertDescription CertificateUnknown = 46; // 0x0
	public const AlertDescription IlegalParameter = 47; // 0x0
	public const AlertDescription UnknownCA = 48; // 0x0
	public const AlertDescription AccessDenied = 49; // 0x0
	public const AlertDescription DecodeError = 50; // 0x0
	public const AlertDescription DecryptError = 51; // 0x0
	public const AlertDescription ExportRestriction = 60; // 0x0
	public const AlertDescription ProtocolVersion = 70; // 0x0
	public const AlertDescription InsuficientSecurity = 71; // 0x0
	public const AlertDescription InternalError = 80; // 0x0
	public const AlertDescription UserCancelled = 90; // 0x0
	public const AlertDescription NoRenegotiation = 100; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class Alert
{
	// Fields
	private AlertLevel level; // 0x10
	private AlertDescription description; // 0x11

	// Properties
	public AlertLevel Level { get; }
	public AlertDescription Description { get; }
	public Boolean IsWarning { get; }
	public Boolean IsCloseNotify { get; }

	// Methods
	// Offset : 0x7302b8
	public Void .ctor(AlertDescription description) { }
	// Offset : 0x730390
	public Void .ctor(AlertLevel level, AlertDescription description) { }
	// Offset : 0x7303cc
	public AlertLevel get_Level() { }
	// Offset : 0x7303d4
	public AlertDescription get_Description() { }
	// Offset : 0x7303dc
	public Boolean get_IsWarning() { }
	// Offset : 0x7303ec
	public Boolean get_IsCloseNotify() { }
	// Offset : 0x730338
	private Void inferAlertLevel() { }
	// Offset : 0x730410
	public static String GetAlertMessage(AlertDescription description) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum CipherAlgorithmType
{
	// Fields
	public Int32 value__; // 0x10
	public const CipherAlgorithmType Des = 0; // 0x0
	public const CipherAlgorithmType None = 1; // 0x0
	public const CipherAlgorithmType Rc2 = 2; // 0x0
	public const CipherAlgorithmType Rc4 = 3; // 0x0
	public const CipherAlgorithmType Rijndael = 4; // 0x0
	public const CipherAlgorithmType SkipJack = 5; // 0x0
	public const CipherAlgorithmType TripleDes = 6; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal abstract class CipherSuite
{
	// Fields
	public static Byte[] EmptyArray; // 0x0
	private Int16 code; // 0x10
	private String name; // 0x18
	private CipherAlgorithmType cipherAlgorithmType; // 0x20
	private HashAlgorithmType hashAlgorithmType; // 0x24
	private ExchangeAlgorithmType exchangeAlgorithmType; // 0x28
	private Boolean isExportable; // 0x2c
	private CipherMode cipherMode; // 0x30
	private Byte keyMaterialSize; // 0x34
	private Int32 keyBlockSize; // 0x38
	private Byte expandedKeyMaterialSize; // 0x3c
	private Int16 effectiveKeyBits; // 0x3e
	private Byte ivSize; // 0x40
	private Byte blockSize; // 0x41
	private Context context; // 0x48
	private SymmetricAlgorithm encryptionAlgorithm; // 0x50
	private ICryptoTransform encryptionCipher; // 0x58
	private SymmetricAlgorithm decryptionAlgorithm; // 0x60
	private ICryptoTransform decryptionCipher; // 0x68
	private KeyedHashAlgorithm clientHMAC; // 0x70
	private KeyedHashAlgorithm serverHMAC; // 0x78

	// Properties
	protected ICryptoTransform EncryptionCipher { get; }
	protected ICryptoTransform DecryptionCipher { get; }
	protected KeyedHashAlgorithm ClientHMAC { get; }
	protected KeyedHashAlgorithm ServerHMAC { get; }
	public CipherAlgorithmType CipherAlgorithmType { get; }
	public String HashAlgorithmName { get; }
	public HashAlgorithmType HashAlgorithmType { get; }
	public Int32 HashSize { get; }
	public ExchangeAlgorithmType ExchangeAlgorithmType { get; }
	public CipherMode CipherMode { get; }
	public Int16 Code { get; }
	public String Name { get; }
	public Boolean IsExportable { get; }
	public Byte KeyMaterialSize { get; }
	public Int32 KeyBlockSize { get; }
	public Byte ExpandedKeyMaterialSize { get; }
	public Int16 EffectiveKeyBits { get; }
	public Byte IvSize { get; }
	public Context Context { get; set; }

	// Methods
	// Offset : 0x731440
	public Void .ctor(Int16 code, String name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, Boolean exportable, Boolean blockMode, Byte keyMaterialSize, Byte expandedKeyMaterialSize, Int16 effectiveKeyBits, Byte ivSize, Byte blockSize) { }
	// Offset : 0x731558
	private static Void .cctor() { }
	// Offset : 0x7315bc
	protected ICryptoTransform get_EncryptionCipher() { }
	// Offset : 0x7315c4
	protected ICryptoTransform get_DecryptionCipher() { }
	// Offset : 0x7315cc
	protected KeyedHashAlgorithm get_ClientHMAC() { }
	// Offset : 0x7315d4
	protected KeyedHashAlgorithm get_ServerHMAC() { }
	// Offset : 0x7315dc
	public CipherAlgorithmType get_CipherAlgorithmType() { }
	// Offset : 0x7315e4
	public String get_HashAlgorithmName() { }
	// Offset : 0x731654
	public HashAlgorithmType get_HashAlgorithmType() { }
	// Offset : 0x731534
	public Int32 get_HashSize() { }
	// Offset : 0x73165c
	public ExchangeAlgorithmType get_ExchangeAlgorithmType() { }
	// Offset : 0x731664
	public CipherMode get_CipherMode() { }
	// Offset : 0x73166c
	public Int16 get_Code() { }
	// Offset : 0x731674
	public String get_Name() { }
	// Offset : 0x73167c
	public Boolean get_IsExportable() { }
	// Offset : 0x731684
	public Byte get_KeyMaterialSize() { }
	// Offset : 0x73168c
	public Int32 get_KeyBlockSize() { }
	// Offset : 0x731694
	public Byte get_ExpandedKeyMaterialSize() { }
	// Offset : 0x73169c
	public Int16 get_EffectiveKeyBits() { }
	// Offset : 0x7316a4
	public Byte get_IvSize() { }
	// Offset : 0x7316ac
	public Context get_Context() { }
	// Offset : 0x7316b4
	public Void set_Context(Context value) { }
	// Offset : 0x7316bc
	internal Void Write(Byte[] array, Int32 offset, Int16 value) { }
	// Offset : 0x7317c0
	internal Void Write(Byte[] array, Int32 offset, UInt64 value) { }
	// Offset : 0x7319e4
	public Void InitializeCipher() { }
	// Offset : 0x732368
	public Byte[] EncryptRecord(Byte[] fragment, Byte[] mac) { }
	// Offset : 0x7325c4
	public Void DecryptRecord(Byte[] fragment, out Byte[] dcrFragment, out Byte[] dcrMAC) { }
	// Offset : 0x
	public abstract Byte[] ComputeClientRecordMAC(ContentType contentType, Byte[] fragment) { }
	// Offset : 0x
	public abstract Byte[] ComputeServerRecordMAC(ContentType contentType, Byte[] fragment) { }
	// Offset : 0x
	public abstract Void ComputeMasterSecret(Byte[] preMasterSecret) { }
	// Offset : 0x
	public abstract Void ComputeKeys() { }
	// Offset : 0x732850
	public Byte[] CreatePremasterSecret() { }
	// Offset : 0x732a4c
	public Byte[] PRF(Byte[] secret, String label, Byte[] data, Int32 length) { }
	// Offset : 0x732d7c
	public Byte[] Expand(String hashName, Byte[] secret, Byte[] seed, Int32 length) { }
	// Offset : 0x731a08
	private Void createEncryptionCipher() { }
	// Offset : 0x731eb4
	private Void createDecryptionCipher() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal sealed class CipherSuiteCollection : IEnumerable, ICollection, IList
{
	// Fields
	private ArrayList cipherSuites; // 0x10
	private SecurityProtocolType protocol; // 0x18

	// Properties
	private Object System.Collections.IList.Item { get; set; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	public CipherSuite Item { get; }
	public CipherSuite Item { get; set; }
	public CipherSuite Item { get; }
	public Int32 Count { get; }
	public Boolean IsFixedSize { get; }
	public Boolean IsReadOnly { get; }

	// Methods
	// Offset : 0x7332dc
	public Void .ctor(SecurityProtocolType protocol) { }
	// Offset : 0x733358
	private Object System.Collections.IList.get_Item(Int32 index) { }
	// Offset : 0x733468
	private Void System.Collections.IList.set_Item(Int32 index, Object value) { }
	// Offset : 0x7335b8
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x733608
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x733658
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x7336a8
	private Boolean System.Collections.IList.Contains(Object value) { }
	// Offset : 0x733770
	private Int32 System.Collections.IList.IndexOf(Object value) { }
	// Offset : 0x733838
	private Void System.Collections.IList.Insert(Int32 index, Object value) { }
	// Offset : 0x733908
	private Void System.Collections.IList.Remove(Object value) { }
	// Offset : 0x7339d0
	private Void System.Collections.IList.RemoveAt(Int32 index) { }
	// Offset : 0x733a28
	private Int32 System.Collections.IList.Add(Object value) { }
	// Offset : 0x733af0
	public CipherSuite get_Item(String name) { }
	// Offset : 0x73335c
	public CipherSuite get_Item(Int32 index) { }
	// Offset : 0x733550
	public Void set_Item(Int32 index, CipherSuite value) { }
	// Offset : 0x733fec
	public CipherSuite get_Item(Int16 code) { }
	// Offset : 0x7344e0
	public Int32 get_Count() { }
	// Offset : 0x734530
	public Boolean get_IsFixedSize() { }
	// Offset : 0x734580
	public Boolean get_IsReadOnly() { }
	// Offset : 0x7345d0
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x734638
	public Void Clear() { }
	// Offset : 0x733c0c
	public Int32 IndexOf(String name) { }
	// Offset : 0x734108
	public Int32 IndexOf(Int16 code) { }
	// Offset : 0x734778
	public CipherSuite Add(Int16 code, String name, CipherAlgorithmType cipherType, HashAlgorithmType hashType, ExchangeAlgorithmType exchangeType, Boolean exportable, Boolean blockMode, Byte keyMaterialSize, Byte expandedKeyMaterialSize, Int16 effectiveKeyBytes, Byte ivSize, Byte blockSize) { }
	// Offset : 0x73491c
	private TlsCipherSuite add(TlsCipherSuite cipherSuite) { }
	// Offset : 0x73497c
	private SslCipherSuite add(SslCipherSuite cipherSuite) { }
	// Offset : 0x734688
	private Boolean cultureAwareCompare(String strA, String strB) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class CipherSuiteFactory
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7349dc
	public static CipherSuiteCollection GetSupportedCiphers(SecurityProtocolType protocol) { }
	// Offset : 0x734a88
	private static CipherSuiteCollection GetTls1SupportedCiphers() { }
	// Offset : 0x735218
	private static CipherSuiteCollection GetSsl3SupportedCiphers() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class ClientContext : Context
{
	// Fields
	private SslClientStream sslStream; // 0xe0
	private Int16 clientHelloProtocol; // 0xe8

	// Properties
	public SslClientStream SslStream { get; }
	public Int16 ClientHelloProtocol { get; set; }

	// Methods
	// Offset : 0x735920
	public Void .ctor(SslClientStream stream, SecurityProtocolType securityProtocolType, String targetHost, X509CertificateCollection clientCertificates) { }
	// Offset : 0x735a7c
	public SslClientStream get_SslStream() { }
	// Offset : 0x732a44
	public Int16 get_ClientHelloProtocol() { }
	// Offset : 0x735a84
	public Void set_ClientHelloProtocol(Int16 value) { }
	// Offset : 0x735a8c
	public override Void Clear() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class ClientRecordProtocol : RecordProtocol
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x735b64
	public Void .ctor(Stream innerStream, ClientContext context) { }
	// Offset : 0x735be4
	public override HandshakeMessage GetMessage(HandshakeType type) { }
	// Offset : 0x735de0
	protected override Void ProcessHandshakeMessage(TlsStream handMsg) { }
	// Offset : 0x735be8
	private HandshakeMessage createClientHandshakeMessage(HandshakeType type) { }
	// Offset : 0x736078
	private HandshakeMessage createServerHandshakeMessage(HandshakeType type, Byte[] buffer) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class ClientSessionInfo : IDisposable
{
	// Fields
	private static readonly Int32 ValidityInterval; // 0x0
	private Boolean disposed; // 0x10
	private DateTime validuntil; // 0x18
	private String host; // 0x28
	private Byte[] sid; // 0x30
	private Byte[] masterSecret; // 0x38

	// Properties
	public String HostName { get; }
	public Byte[] Id { get; }
	public Boolean Valid { get; }

	// Methods
	// Offset : 0x736934
	public Void .ctor(String hostname, Byte[] id) { }
	// Offset : 0x737790
	private static Void .cctor() { }
	// Offset : 0x737874
	protected override Void Finalize() { }
	// Offset : 0x736970
	public String get_HostName() { }
	// Offset : 0x7370d4
	public Byte[] get_Id() { }
	// Offset : 0x73703c
	public Boolean get_Valid() { }
	// Offset : 0x737494
	public Void GetContext(Context context) { }
	// Offset : 0x7376a0
	public Void SetContext(Context context) { }
	// Offset : 0x736978
	public Void KeepAlive() { }
	// Offset : 0x736a3c
	public Void Dispose() { }
	// Offset : 0x7378ec
	private Void Dispose(Boolean disposing) { }
	// Offset : 0x73798c
	private Void CheckDisposed() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class ClientSessionCache
{
	// Fields
	private static Hashtable cache; // 0x0
	private static Object locker; // 0x8

	// Properties

	// Methods
	// Offset : 0x7364b8
	private static Void .cctor() { }
	// Offset : 0x73654c
	public static Void Add(String host, Byte[] id) { }
	// Offset : 0x736a68
	public static Byte[] FromHost(String host) { }
	// Offset : 0x7370dc
	private static ClientSessionInfo FromContext(Context context, Boolean checkValidity) { }
	// Offset : 0x737370
	public static Boolean SetContextInCache(Context context) { }
	// Offset : 0x73757c
	public static Boolean SetContextFromCache(Context context) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum ContentType
{
	// Fields
	public Byte value__; // 0x10
	public const ContentType ChangeCipherSpec = 20; // 0x0
	public const ContentType Alert = 21; // 0x0
	public const ContentType Handshake = 22; // 0x0
	public const ContentType ApplicationData = 23; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal abstract class Context
{
	// Fields
	private SecurityProtocolType securityProtocol; // 0x10
	private Byte[] sessionId; // 0x18
	private SecurityCompressionType compressionMethod; // 0x20
	private TlsServerSettings serverSettings; // 0x28
	private TlsClientSettings clientSettings; // 0x30
	private SecurityParameters current; // 0x38
	private SecurityParameters negotiating; // 0x40
	private SecurityParameters read; // 0x48
	private SecurityParameters write; // 0x50
	private CipherSuiteCollection supportedCiphers; // 0x58
	private HandshakeType lastHandshakeMsg; // 0x60
	private HandshakeState handshakeState; // 0x64
	private Boolean abbreviatedHandshake; // 0x68
	private Boolean receivedConnectionEnd; // 0x69
	private Boolean sentConnectionEnd; // 0x6a
	private Boolean protocolNegotiated; // 0x6b
	private UInt64 writeSequenceNumber; // 0x70
	private UInt64 readSequenceNumber; // 0x78
	private Byte[] clientRandom; // 0x80
	private Byte[] serverRandom; // 0x88
	private Byte[] randomCS; // 0x90
	private Byte[] randomSC; // 0x98
	private Byte[] masterSecret; // 0xa0
	private Byte[] clientWriteKey; // 0xa8
	private Byte[] serverWriteKey; // 0xb0
	private Byte[] clientWriteIV; // 0xb8
	private Byte[] serverWriteIV; // 0xc0
	private TlsStream handshakeMessages; // 0xc8
	private RandomNumberGenerator random; // 0xd0
	private RecordProtocol recordProtocol; // 0xd8

	// Properties
	public Boolean AbbreviatedHandshake { get; set; }
	public Boolean ProtocolNegotiated { get; set; }
	public SecurityProtocolType SecurityProtocol { get; set; }
	public SecurityProtocolType SecurityProtocolFlags { get; }
	public Int16 Protocol { get; }
	public Byte[] SessionId { get; set; }
	public SecurityCompressionType CompressionMethod { get; set; }
	public TlsServerSettings ServerSettings { get; }
	public TlsClientSettings ClientSettings { get; }
	public HandshakeType LastHandshakeMsg { get; set; }
	public HandshakeState HandshakeState { get; set; }
	public Boolean ReceivedConnectionEnd { get; set; }
	public Boolean SentConnectionEnd { get; set; }
	public CipherSuiteCollection SupportedCiphers { get; set; }
	public TlsStream HandshakeMessages { get; }
	public UInt64 WriteSequenceNumber { get; set; }
	public UInt64 ReadSequenceNumber { get; set; }
	public Byte[] ClientRandom { get; set; }
	public Byte[] ServerRandom { get; set; }
	public Byte[] RandomCS { get; set; }
	public Byte[] RandomSC { get; set; }
	public Byte[] MasterSecret { get; set; }
	public Byte[] ClientWriteKey { get; set; }
	public Byte[] ServerWriteKey { get; set; }
	public Byte[] ClientWriteIV { get; set; }
	public Byte[] ServerWriteIV { get; set; }
	public RecordProtocol RecordProtocol { get; set; }
	public SecurityParameters Current { get; }
	public SecurityParameters Negotiating { get; }
	public SecurityParameters Read { get; }
	public SecurityParameters Write { get; }

	// Methods
	// Offset : 0x7359a0
	public Void .ctor(SecurityProtocolType securityProtocolType) { }
	// Offset : 0x737a34
	public Boolean get_AbbreviatedHandshake() { }
	// Offset : 0x737a3c
	public Void set_AbbreviatedHandshake(Boolean value) { }
	// Offset : 0x737a48
	public Boolean get_ProtocolNegotiated() { }
	// Offset : 0x737a50
	public Void set_ProtocolNegotiated(Boolean value) { }
	// Offset : 0x737a5c
	public SecurityProtocolType get_SecurityProtocol() { }
	// Offset : 0x737a2c
	public Void set_SecurityProtocol(SecurityProtocolType value) { }
	// Offset : 0x737b10
	public SecurityProtocolType get_SecurityProtocolFlags() { }
	// Offset : 0x737b18
	public Int16 get_Protocol() { }
	// Offset : 0x737368
	public Byte[] get_SessionId() { }
	// Offset : 0x737bcc
	public Void set_SessionId(Byte[] value) { }
	// Offset : 0x737bd4
	public SecurityCompressionType get_CompressionMethod() { }
	// Offset : 0x737bdc
	public Void set_CompressionMethod(SecurityCompressionType value) { }
	// Offset : 0x737be4
	public TlsServerSettings get_ServerSettings() { }
	// Offset : 0x735a74
	public TlsClientSettings get_ClientSettings() { }
	// Offset : 0x737bec
	public HandshakeType get_LastHandshakeMsg() { }
	// Offset : 0x736420
	public Void set_LastHandshakeMsg(HandshakeType value) { }
	// Offset : 0x73646c
	public HandshakeState get_HandshakeState() { }
	// Offset : 0x736474
	public Void set_HandshakeState(HandshakeState value) { }
	// Offset : 0x737bf4
	public Boolean get_ReceivedConnectionEnd() { }
	// Offset : 0x737bfc
	public Void set_ReceivedConnectionEnd(Boolean value) { }
	// Offset : 0x737c08
	public Boolean get_SentConnectionEnd() { }
	// Offset : 0x737c10
	public Void set_SentConnectionEnd(Boolean value) { }
	// Offset : 0x737c1c
	public CipherSuiteCollection get_SupportedCiphers() { }
	// Offset : 0x737c24
	public Void set_SupportedCiphers(CipherSuiteCollection value) { }
	// Offset : 0x736428
	public TlsStream get_HandshakeMessages() { }
	// Offset : 0x737c2c
	public UInt64 get_WriteSequenceNumber() { }
	// Offset : 0x737c34
	public Void set_WriteSequenceNumber(UInt64 value) { }
	// Offset : 0x737c3c
	public UInt64 get_ReadSequenceNumber() { }
	// Offset : 0x737c44
	public Void set_ReadSequenceNumber(UInt64 value) { }
	// Offset : 0x737c4c
	public Byte[] get_ClientRandom() { }
	// Offset : 0x737c54
	public Void set_ClientRandom(Byte[] value) { }
	// Offset : 0x737c5c
	public Byte[] get_ServerRandom() { }
	// Offset : 0x737c64
	public Void set_ServerRandom(Byte[] value) { }
	// Offset : 0x737c6c
	public Byte[] get_RandomCS() { }
	// Offset : 0x737c74
	public Void set_RandomCS(Byte[] value) { }
	// Offset : 0x737c7c
	public Byte[] get_RandomSC() { }
	// Offset : 0x737c84
	public Void set_RandomSC(Byte[] value) { }
	// Offset : 0x737a1c
	public Byte[] get_MasterSecret() { }
	// Offset : 0x737a24
	public Void set_MasterSecret(Byte[] value) { }
	// Offset : 0x733208
	public Byte[] get_ClientWriteKey() { }
	// Offset : 0x737c8c
	public Void set_ClientWriteKey(Byte[] value) { }
	// Offset : 0x733218
	public Byte[] get_ServerWriteKey() { }
	// Offset : 0x737c94
	public Void set_ServerWriteKey(Byte[] value) { }
	// Offset : 0x733210
	public Byte[] get_ClientWriteIV() { }
	// Offset : 0x737c9c
	public Void set_ClientWriteIV(Byte[] value) { }
	// Offset : 0x733220
	public Byte[] get_ServerWriteIV() { }
	// Offset : 0x737ca4
	public Void set_ServerWriteIV(Byte[] value) { }
	// Offset : 0x737cac
	public RecordProtocol get_RecordProtocol() { }
	// Offset : 0x737cb4
	public Void set_RecordProtocol(RecordProtocol value) { }
	// Offset : 0x737cbc
	public Int32 GetUnixTime() { }
	// Offset : 0x7329a0
	public Byte[] GetSecureRandomBytes(Int32 count) { }
	// Offset : 0x735a94
	public virtual Void Clear() { }
	// Offset : 0x737d74
	public virtual Void ClearKeyInfo() { }
	// Offset : 0x737ea4
	public SecurityProtocolType DecodeProtocolCode(Int16 code) { }
	// Offset : 0x737f48
	public Void ChangeProtocol(Int16 protocol) { }
	// Offset : 0x738030
	public SecurityParameters get_Current() { }
	// Offset : 0x733228
	public SecurityParameters get_Negotiating() { }
	// Offset : 0x7380e4
	public SecurityParameters get_Read() { }
	// Offset : 0x7380ec
	public SecurityParameters get_Write() { }
	// Offset : 0x7380f4
	public Void StartSwitchingSecurityParameters(Boolean client) { }
	// Offset : 0x738120
	public Void EndSwitchingSecurityParameters(Boolean client) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum ExchangeAlgorithmType
{
	// Fields
	public Int32 value__; // 0x10
	public const ExchangeAlgorithmType DiffieHellman = 0; // 0x0
	public const ExchangeAlgorithmType Fortezza = 1; // 0x0
	public const ExchangeAlgorithmType None = 2; // 0x0
	public const ExchangeAlgorithmType RsaKeyX = 3; // 0x0
	public const ExchangeAlgorithmType RsaSign = 4; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal enum HandshakeState
{
	// Fields
	public Int32 value__; // 0x10
	public const HandshakeState None = 0; // 0x0
	public const HandshakeState Started = 1; // 0x0
	public const HandshakeState Finished = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum HashAlgorithmType
{
	// Fields
	public Int32 value__; // 0x10
	public const HashAlgorithmType Md5 = 0; // 0x0
	public const HashAlgorithmType None = 1; // 0x0
	public const HashAlgorithmType Sha1 = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class HttpsClientStream : SslClientStream
{
	// Fields
	private HttpWebRequest _request; // 0x88
	private Int32 _status; // 0x90
	private static CertificateSelectionCallback <>f__am$cache2; // 0x0
	private static PrivateKeySelectionCallback <>f__am$cache3; // 0x8

	// Properties
	public Boolean TrustFailure { get; }

	// Methods
	// Offset : 0x55493c
	public Void .ctor(Stream stream, X509CertificateCollection clientCertificates, HttpWebRequest request, Byte[] buffer) { }
	// Offset : 0x554ecc
	public Boolean get_TrustFailure() { }
	// Offset : 0x554ef8
	internal override Boolean RaiseServerCertificateValidation(X509Certificate certificate, Int32[] certificateErrors) { }
	// Offset : 0x555278
	private static X509Certificate <HttpsClientStream>m__0(X509CertificateCollection clientCerts, X509Certificate serverCertificate, String targetHost, X509CertificateCollection serverRequestedCertificates) { }
	// Offset : 0x5552c4
	private static AsymmetricAlgorithm <HttpsClientStream>m__1(X509Certificate certificate, String targetHost) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal abstract class RecordProtocol
{
	// Fields
	private static ManualResetEvent record_processing; // 0x0
	protected Stream innerStream; // 0x10
	protected Context context; // 0x18

	// Properties
	public Context Context { get; }

	// Methods
	// Offset : 0x555f8c
	public Void .ctor(Stream innerStream, Context context) { }
	// Offset : 0x555fdc
	private static Void .cctor() { }
	// Offset : 0x55604c
	public Context get_Context() { }
	// Offset : 0x556054
	public virtual Void SendRecord(HandshakeType type) { }
	// Offset : 0x
	protected abstract Void ProcessHandshakeMessage(TlsStream handMsg) { }
	// Offset : 0x556348
	protected virtual Void ProcessChangeCipherSpec() { }
	// Offset : 0x556418
	public virtual HandshakeMessage GetMessage(HandshakeType type) { }
	// Offset : 0x556480
	public IAsyncResult BeginReceiveRecord(Stream record, AsyncCallback callback, Object state) { }
	// Offset : 0x556724
	private Void InternalReceiveRecordCallback(IAsyncResult asyncResult) { }
	// Offset : 0x5572e4
	public Byte[] EndReceiveRecord(IAsyncResult asyncResult) { }
	// Offset : 0x5575fc
	public Byte[] ReceiveRecord(Stream record) { }
	// Offset : 0x556d50
	private Byte[] ReadRecordBuffer(Int32 contentType, Stream record) { }
	// Offset : 0x55761c
	private Byte[] ReadClientHelloV2(Stream record) { }
	// Offset : 0x557b4c
	private Byte[] ReadStandardRecordBuffer(Stream record) { }
	// Offset : 0x557194
	private Void ProcessAlert(AlertLevel alertLevel, AlertDescription alertDesc) { }
	// Offset : 0x5581d0
	public Void SendAlert(AlertDescription description) { }
	// Offset : 0x558390
	public Void SendAlert(AlertLevel level, AlertDescription description) { }
	// Offset : 0x558244
	public Void SendAlert(Alert alert) { }
	// Offset : 0x55843c
	public Void SendChangeCipherSpec() { }
	// Offset : 0x556084
	public IAsyncResult BeginSendRecord(HandshakeType handshakeType, AsyncCallback callback, Object state) { }
	// Offset : 0x558738
	private Void InternalSendRecordCallback(IAsyncResult ar) { }
	// Offset : 0x558600
	public IAsyncResult BeginSendRecord(ContentType contentType, Byte[] recordData, AsyncCallback callback, Object state) { }
	// Offset : 0x5561e4
	public Void EndSendRecord(IAsyncResult asyncResult) { }
	// Offset : 0x55840c
	public Void SendRecord(ContentType contentType, Byte[] recordData) { }
	// Offset : 0x558a64
	public Byte[] EncodeRecord(ContentType contentType, Byte[] recordData) { }
	// Offset : 0x558c34
	public Byte[] EncodeRecord(ContentType contentType, Byte[] recordData, Int32 offset, Int32 count) { }
	// Offset : 0x558e90
	private Byte[] encryptRecordFragment(ContentType contentType, Byte[] fragment) { }
	// Offset : 0x556ea8
	private Byte[] decryptRecordFragment(ContentType contentType, Byte[] fragment) { }
	// Offset : 0x559204
	private Boolean Compare(Byte[] array1, Byte[] array2) { }
	// Offset : 0x557e60
	private Void ProcessCipherSpecV2Buffer(SecurityProtocolType protocol, Byte[] buffer) { }
	// Offset : 0x5592c8
	private CipherSuite MapV2CipherCode(String prefix, Int32 code) { }
}

// Dll : Mono.Security.dll
// Namespace: 
private class ReceiveRecordAsyncResult : IAsyncResult
{
	// Fields
	private Object locker; // 0x10
	private AsyncCallback _userCallback; // 0x18
	private Object _userState; // 0x20
	private Exception _asyncException; // 0x28
	private ManualResetEvent handle; // 0x30
	private Byte[] _resultingBuffer; // 0x38
	private Stream _record; // 0x40
	private Boolean completed; // 0x48
	private Byte[] _initialBuffer; // 0x50

	// Properties
	public Stream Record { get; }
	public Byte[] ResultingBuffer { get; }
	public Byte[] InitialBuffer { get; }
	public Object AsyncState { get; }
	public Exception AsyncException { get; }
	public Boolean CompletedWithError { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public Boolean IsCompleted { get; }

	// Methods
	// Offset : 0x556684
	public Void .ctor(AsyncCallback userCallback, Object userState, Byte[] initialBuffer, Stream record) { }
	// Offset : 0x556d38
	public Stream get_Record() { }
	// Offset : 0x5575f4
	public Byte[] get_ResultingBuffer() { }
	// Offset : 0x55671c
	public Byte[] get_InitialBuffer() { }
	// Offset : 0x5595d0
	public Object get_AsyncState() { }
	// Offset : 0x5575ec
	public Exception get_AsyncException() { }
	// Offset : 0x557590
	public Boolean get_CompletedWithError() { }
	// Offset : 0x5574b0
	public WaitHandle get_AsyncWaitHandle() { }
	// Offset : 0x557470
	public Boolean get_IsCompleted() { }
	// Offset : 0x5595d8
	private Void SetComplete(Exception ex, Byte[] resultingBuffer) { }
	// Offset : 0x5572dc
	public Void SetComplete(Exception ex) { }
	// Offset : 0x556d40
	public Void SetComplete(Byte[] resultingBuffer) { }
}

// Dll : Mono.Security.dll
// Namespace: 
private class SendRecordAsyncResult : IAsyncResult
{
	// Fields
	private Object locker; // 0x10
	private AsyncCallback _userCallback; // 0x18
	private Object _userState; // 0x20
	private Exception _asyncException; // 0x28
	private ManualResetEvent handle; // 0x30
	private HandshakeMessage _message; // 0x38
	private Boolean completed; // 0x40

	// Properties
	public HandshakeMessage Message { get; }
	public Object AsyncState { get; }
	public Exception AsyncException { get; }
	public Boolean CompletedWithError { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public Boolean IsCompleted { get; }

	// Methods
	// Offset : 0x558570
	public Void .ctor(AsyncCallback userCallback, Object userState, HandshakeMessage message) { }
	// Offset : 0x55897c
	public HandshakeMessage get_Message() { }
	// Offset : 0x5596b8
	public Object get_AsyncState() { }
	// Offset : 0x558c2c
	public Exception get_AsyncException() { }
	// Offset : 0x558bd0
	public Boolean get_CompletedWithError() { }
	// Offset : 0x558af0
	public WaitHandle get_AsyncWaitHandle() { }
	// Offset : 0x558ab0
	public Boolean get_IsCompleted() { }
	// Offset : 0x55898c
	public Void SetComplete(Exception ex) { }
	// Offset : 0x558984
	public Void SetComplete() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class RSASslSignatureDeformatter : AsymmetricSignatureDeformatter
{
	// Fields
	private RSA key; // 0x10
	private HashAlgorithm hash; // 0x18
	private static Dictionary`2 <>f__switch$map15; // 0x0

	// Properties

	// Methods
	// Offset : 0x555884
	public Void .ctor(AsymmetricAlgorithm key) { }
	// Offset : 0x5558d4
	public override Boolean VerifySignature(Byte[] rgbHash, Byte[] rgbSignature) { }
	// Offset : 0x5559f8
	public override Void SetHashAlgorithm(String strName) { }
	// Offset : 0x555b40
	public override Void SetKey(AsymmetricAlgorithm key) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class RSASslSignatureFormatter : AsymmetricSignatureFormatter
{
	// Fields
	private RSA key; // 0x10
	private HashAlgorithm hash; // 0x18
	private static Dictionary`2 <>f__switch$map16; // 0x0

	// Properties

	// Methods
	// Offset : 0x555c0c
	public Void .ctor(AsymmetricAlgorithm key) { }
	// Offset : 0x555c5c
	public override Byte[] CreateSignature(Byte[] rgbHash) { }
	// Offset : 0x555d78
	public override Void SetHashAlgorithm(String strName) { }
	// Offset : 0x555ec0
	public override Void SetKey(AsymmetricAlgorithm key) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
public enum SecurityCompressionType
{
	// Fields
	public Int32 value__; // 0x10
	public const SecurityCompressionType None = 0; // 0x0
	public const SecurityCompressionType Zlib = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class SecurityParameters
{
	// Fields
	private CipherSuite cipher; // 0x10
	private Byte[] clientWriteMAC; // 0x18
	private Byte[] serverWriteMAC; // 0x20

	// Properties
	public CipherSuite Cipher { get; set; }
	public Byte[] ClientWriteMAC { get; set; }
	public Byte[] ServerWriteMAC { get; set; }

	// Methods
	// Offset : 0x5596c0
	public Void .ctor() { }
	// Offset : 0x556ea0
	public CipherSuite get_Cipher() { }
	// Offset : 0x55381c
	public Void set_Cipher(CipherSuite value) { }
	// Offset : 0x5596c8
	public Byte[] get_ClientWriteMAC() { }
	// Offset : 0x5596d0
	public Void set_ClientWriteMAC(Byte[] value) { }
	// Offset : 0x5596d8
	public Byte[] get_ServerWriteMAC() { }
	// Offset : 0x5596e0
	public Void set_ServerWriteMAC(Byte[] value) { }
	// Offset : 0x5596e8
	public Void Clear() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
[Serializable]
public enum SecurityProtocolType
{
	// Fields
	public Int32 value__; // 0x10
	public const SecurityProtocolType Default = 3221225472; // 0x0
	public const SecurityProtocolType Ssl2 = 12; // 0x0
	public const SecurityProtocolType Ssl3 = 48; // 0x0
	public const SecurityProtocolType Tls = 192; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class ServerContext : Context
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
public class ValidationResult
{
	// Fields
	private Boolean trusted; // 0x10
	private Int32 error_code; // 0x14

	// Properties
	public Boolean Trusted { get; }
	public Int32 ErrorCode { get; }

	// Methods
	// Offset : 0x563f5c
	public Boolean get_Trusted() { }
	// Offset : 0x563f64
	public Int32 get_ErrorCode() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
public class SslClientStream : SslStreamBase
{
	// Fields
	private CertificateValidationCallback ServerCertValidation; // 0x68
	private CertificateSelectionCallback ClientCertSelection; // 0x70
	private PrivateKeySelectionCallback PrivateKeySelection; // 0x78
	private CertificateValidationCallback2 ServerCertValidation2; // 0x80

	// Properties
	internal Stream InputBuffer { get; }
	public X509CertificateCollection ClientCertificates { get; }
	public X509Certificate SelectedClientCertificate { get; }
	public CertificateValidationCallback ServerCertValidationDelegate { get; set; }
	public CertificateSelectionCallback ClientCertSelectionDelegate { get; set; }
	public PrivateKeySelectionCallback PrivateKeyCertSelectionDelegate { get; set; }
	internal override Boolean HaveRemoteValidation2Callback { get; }

	// Methods
	// Offset : 0x55b224
	public Void .ctor(Stream stream, String targetHost, Boolean ownsStream) { }
	// Offset : 0x55b234
	public Void .ctor(Stream stream, String targetHost, X509Certificate clientCertificate) { }
	// Offset : 0x55b334
	public Void .ctor(Stream stream, String targetHost, X509CertificateCollection clientCertificates) { }
	// Offset : 0x55b348
	public Void .ctor(Stream stream, String targetHost, Boolean ownsStream, SecurityProtocolType securityProtocolType) { }
	// Offset : 0x554b54
	public Void .ctor(Stream stream, String targetHost, Boolean ownsStream, SecurityProtocolType securityProtocolType, X509CertificateCollection clientCertificates) { }
	// Offset : 0x55b618
	internal Void add_ServerCertValidation(CertificateValidationCallback value) { }
	// Offset : 0x55b6dc
	internal Void remove_ServerCertValidation(CertificateValidationCallback value) { }
	// Offset : 0x554d34
	internal Void add_ClientCertSelection(CertificateSelectionCallback value) { }
	// Offset : 0x55b7a0
	internal Void remove_ClientCertSelection(CertificateSelectionCallback value) { }
	// Offset : 0x554e08
	internal Void add_PrivateKeySelection(PrivateKeySelectionCallback value) { }
	// Offset : 0x55b864
	internal Void remove_PrivateKeySelection(PrivateKeySelectionCallback value) { }
	// Offset : 0x55b928
	public Void add_ServerCertValidation2(CertificateValidationCallback2 value) { }
	// Offset : 0x55b9ec
	public Void remove_ServerCertValidation2(CertificateValidationCallback2 value) { }
	// Offset : 0x554d20
	internal Stream get_InputBuffer() { }
	// Offset : 0x55bab0
	public X509CertificateCollection get_ClientCertificates() { }
	// Offset : 0x55bafc
	public X509Certificate get_SelectedClientCertificate() { }
	// Offset : 0x55bb48
	public CertificateValidationCallback get_ServerCertValidationDelegate() { }
	// Offset : 0x55bb50
	public Void set_ServerCertValidationDelegate(CertificateValidationCallback value) { }
	// Offset : 0x55bb58
	public CertificateSelectionCallback get_ClientCertSelectionDelegate() { }
	// Offset : 0x55bb60
	public Void set_ClientCertSelectionDelegate(CertificateSelectionCallback value) { }
	// Offset : 0x55bb68
	public PrivateKeySelectionCallback get_PrivateKeyCertSelectionDelegate() { }
	// Offset : 0x55bb70
	public Void set_PrivateKeyCertSelectionDelegate(PrivateKeySelectionCallback value) { }
	// Offset : 0x55bb78
	protected override Void Finalize() { }
	// Offset : 0x55be34
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x55be6c
	internal override IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, Object state) { }
	// Offset : 0x55c0e4
	private Void SafeReceiveRecord(Stream s) { }
	// Offset : 0x55c1ac
	internal override Void OnNegotiateHandshakeCallback(IAsyncResult asyncResult) { }
	// Offset : 0x55c708
	internal override X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, String targetHost, X509CertificateCollection serverRequestedCertificates) { }
	// Offset : 0x55c71c
	internal override Boolean get_HaveRemoteValidation2Callback() { }
	// Offset : 0x55c72c
	internal override ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection) { }
	// Offset : 0x55c740
	internal override Boolean OnRemoteCertificateValidation(X509Certificate certificate, Int32[] errors) { }
	// Offset : 0x55c76c
	internal virtual Boolean RaiseServerCertificateValidation(X509Certificate certificate, Int32[] certificateErrors) { }
	// Offset : 0x55c7cc
	internal virtual ValidationResult RaiseServerCertificateValidation2(X509CertificateCollection collection) { }
	// Offset : 0x55c81c
	internal X509Certificate RaiseClientCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, String targetHost, X509CertificateCollection serverRequestedCertificates) { }
	// Offset : 0x55c894
	internal override AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, String targetHost) { }
	// Offset : 0x55c8a8
	internal AsymmetricAlgorithm RaisePrivateKeySelection(X509Certificate certificate, String targetHost) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class SslCipherSuite : CipherSuite
{
	// Fields
	private Byte[] pad1; // 0x80
	private Byte[] pad2; // 0x88
	private Byte[] header; // 0x90

	// Properties

	// Methods
	// Offset : 0x5596f0
	public Void .ctor(Int16 code, String name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, Boolean exportable, Boolean blockMode, Byte keyMaterialSize, Byte expandedKeyMaterialSize, Int16 effectiveKeyBytes, Byte ivSize, Byte blockSize) { }
	// Offset : 0x5598b4
	public override Byte[] ComputeServerRecordMAC(ContentType contentType, Byte[] fragment) { }
	// Offset : 0x559d2c
	public override Byte[] ComputeClientRecordMAC(ContentType contentType, Byte[] fragment) { }
	// Offset : 0x55a1a4
	public override Void ComputeMasterSecret(Byte[] preMasterSecret) { }
	// Offset : 0x55a5bc
	public override Void ComputeKeys() { }
	// Offset : 0x55a350
	private Byte[] prf(Byte[] secret, String label, Byte[] random) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class SslHandshakeHash : HashAlgorithm
{
	// Fields
	private HashAlgorithm md5; // 0x28
	private HashAlgorithm sha; // 0x30
	private Boolean hashing; // 0x38
	private Byte[] secret; // 0x40
	private Byte[] innerPadMD5; // 0x48
	private Byte[] outerPadMD5; // 0x50
	private Byte[] innerPadSHA; // 0x58
	private Byte[] outerPadSHA; // 0x60

	// Properties

	// Methods
	// Offset : 0x55c908
	public Void .ctor(Byte[] secret) { }
	// Offset : 0x55ca44
	public override Void Initialize() { }
	// Offset : 0x55cc7c
	protected override Byte[] HashFinal() { }
	// Offset : 0x55d18c
	protected override Void HashCore(Byte[] array, Int32 ibStart, Int32 cbSize) { }
	// Offset : 0x55d230
	public Byte[] CreateSignature(RSA rsa) { }
	// Offset : 0x55cae4
	private Void initializePad() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
public abstract class SslStreamBase : Stream, IDisposable
{
	// Fields
	private const Int32 WaitTimeOut; // 0x0
	private static ManualResetEvent record_processing; // 0x0
	internal Stream innerStream; // 0x10
	internal MemoryStream inputBuffer; // 0x18
	internal Context context; // 0x20
	internal RecordProtocol protocol; // 0x28
	internal Boolean ownsStream; // 0x30
	private Boolean disposed; // 0x31
	private Boolean checkCertRevocationStatus; // 0x32
	private Object negotiate; // 0x38
	private Object read; // 0x40
	private Object write; // 0x48
	private ManualResetEvent negotiationComplete; // 0x50
	private Byte[] recbuf; // 0x58
	private MemoryStream recordStream; // 0x60

	// Properties
	internal Boolean MightNeedHandshake { get; }
	internal abstract Boolean HaveRemoteValidation2Callback { get; }
	public Boolean CheckCertRevocationStatus { get; set; }
	public CipherAlgorithmType CipherAlgorithm { get; }
	public Int32 CipherStrength { get; }
	public HashAlgorithmType HashAlgorithm { get; }
	public Int32 HashStrength { get; }
	public Int32 KeyExchangeStrength { get; }
	public ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
	public SecurityProtocolType SecurityProtocol { get; }
	public X509Certificate ServerCertificate { get; }
	internal X509CertificateCollection ServerCertificates { get; }
	public override Boolean CanRead { get; }
	public override Boolean CanSeek { get; }
	public override Boolean CanWrite { get; }
	public override Int64 Length { get; }
	public override Int64 Position { get; set; }

	// Methods
	// Offset : 0x55b3dc
	protected Void .ctor(Stream stream, Boolean ownsStream) { }
	// Offset : 0x55d37c
	private static Void .cctor() { }
	// Offset : 0x55d3ec
	private Void AsyncHandshakeCallback(IAsyncResult asyncResult) { }
	// Offset : 0x55e154
	internal Boolean get_MightNeedHandshake() { }
	// Offset : 0x55e21c
	internal Void NegotiateHandshake() { }
	// Offset : 0x
	internal abstract IAsyncResult OnBeginNegotiateHandshake(AsyncCallback callback, Object state) { }
	// Offset : 0x
	internal abstract Void OnNegotiateHandshakeCallback(IAsyncResult asyncResult) { }
	// Offset : 0x
	internal abstract X509Certificate OnLocalCertificateSelection(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, String targetHost, X509CertificateCollection serverRequestedCertificates) { }
	// Offset : 0x
	internal abstract Boolean OnRemoteCertificateValidation(X509Certificate certificate, Int32[] errors) { }
	// Offset : 0x
	internal abstract ValidationResult OnRemoteCertificateValidation2(X509CertificateCollection collection) { }
	// Offset : 0x
	internal abstract Boolean get_HaveRemoteValidation2Callback() { }
	// Offset : 0x
	internal abstract AsymmetricAlgorithm OnLocalPrivateKeySelection(X509Certificate certificate, String targetHost) { }
	// Offset : 0x55c820
	internal X509Certificate RaiseLocalCertificateSelection(X509CertificateCollection certificates, X509Certificate remoteCertificate, String targetHost, X509CertificateCollection requestedCertificates) { }
	// Offset : 0x55c770
	internal Boolean RaiseRemoteCertificateValidation(X509Certificate certificate, Int32[] errors) { }
	// Offset : 0x55c7d0
	internal ValidationResult RaiseRemoteCertificateValidation2(X509CertificateCollection collection) { }
	// Offset : 0x55c8ac
	internal AsymmetricAlgorithm RaiseLocalPrivateKeySelection(X509Certificate certificate, String targetHost) { }
	// Offset : 0x55e7b0
	public Boolean get_CheckCertRevocationStatus() { }
	// Offset : 0x554d28
	public Void set_CheckCertRevocationStatus(Boolean value) { }
	// Offset : 0x55e7b8
	public CipherAlgorithmType get_CipherAlgorithm() { }
	// Offset : 0x55e848
	public Int32 get_CipherStrength() { }
	// Offset : 0x55e8d8
	public HashAlgorithmType get_HashAlgorithm() { }
	// Offset : 0x55e968
	public Int32 get_HashStrength() { }
	// Offset : 0x55e9f8
	public Int32 get_KeyExchangeStrength() { }
	// Offset : 0x55eafc
	public ExchangeAlgorithmType get_KeyExchangeAlgorithm() { }
	// Offset : 0x55eb8c
	public SecurityProtocolType get_SecurityProtocol() { }
	// Offset : 0x55ebf4
	public X509Certificate get_ServerCertificate() { }
	// Offset : 0x55ed88
	internal X509CertificateCollection get_ServerCertificates() { }
	// Offset : 0x55e3d0
	private Boolean BeginNegotiateHandshake(InternalAsyncResult asyncResult) { }
	// Offset : 0x55e6c8
	private Void EndNegotiateHandshake(InternalAsyncResult asyncResult) { }
	// Offset : 0x55ef50
	public override IAsyncResult BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) { }
	// Offset : 0x55db78
	private Void InternalBeginRead(InternalAsyncResult asyncResult) { }
	// Offset : 0x55f294
	private Void InternalReadCallback(IAsyncResult result) { }
	// Offset : 0x55d84c
	private Void InternalBeginWrite(InternalAsyncResult asyncResult) { }
	// Offset : 0x55ff84
	private Void InternalWriteCallback(IAsyncResult ar) { }
	// Offset : 0x5601f0
	public override IAsyncResult BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) { }
	// Offset : 0x5603e8
	public override Int32 EndRead(IAsyncResult asyncResult) { }
	// Offset : 0x560678
	public override Void EndWrite(IAsyncResult asyncResult) { }
	// Offset : 0x560880
	public override Void Close() { }
	// Offset : 0x560888
	public override Void Flush() { }
	// Offset : 0x5608dc
	public Int32 Read(Byte[] buffer) { }
	// Offset : 0x560948
	public override Int32 Read(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x561620
	public override Int64 Seek(Int64 offset, SeekOrigin origin) { }
	// Offset : 0x561688
	public override Void SetLength(Int64 value) { }
	// Offset : 0x5616f0
	public Void Write(Byte[] buffer) { }
	// Offset : 0x56175c
	public override Void Write(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x561b80
	public override Boolean get_CanRead() { }
	// Offset : 0x561bcc
	public override Boolean get_CanSeek() { }
	// Offset : 0x561bd4
	public override Boolean get_CanWrite() { }
	// Offset : 0x561c20
	public override Int64 get_Length() { }
	// Offset : 0x561c88
	public override Int64 get_Position() { }
	// Offset : 0x561cf0
	public override Void set_Position(Int64 value) { }
	// Offset : 0x55bd98
	protected override Void Finalize() { }
	// Offset : 0x55bbe8
	protected override Void Dispose(Boolean disposing) { }
	// Offset : 0x55f1e0
	private Void resetBuffer() { }
	// Offset : 0x55f148
	internal Void checkDisposed() { }
}

// Dll : Mono.Security.dll
// Namespace: 
private class InternalAsyncResult : IAsyncResult
{
	// Fields
	private Object locker; // 0x10
	private AsyncCallback _userCallback; // 0x18
	private Object _userState; // 0x20
	private Exception _asyncException; // 0x28
	private ManualResetEvent handle; // 0x30
	private Boolean completed; // 0x38
	private Int32 _bytesRead; // 0x3c
	private Boolean _fromWrite; // 0x40
	private Boolean _proceedAfterHandshake; // 0x41
	private Byte[] _buffer; // 0x48
	private Int32 _offset; // 0x50
	private Int32 _count; // 0x54

	// Properties
	public Boolean ProceedAfterHandshake { get; }
	public Boolean FromWrite { get; }
	public Byte[] Buffer { get; }
	public Int32 Offset { get; }
	public Int32 Count { get; }
	public Int32 BytesRead { get; }
	public Object AsyncState { get; }
	public Exception AsyncException { get; }
	public Boolean CompletedWithError { get; }
	public WaitHandle AsyncWaitHandle { get; }
	public Boolean IsCompleted { get; }

	// Methods
	// Offset : 0x55e30c
	public Void .ctor(AsyncCallback userCallback, Object userState, Byte[] buffer, Int32 offset, Int32 count, Boolean fromWrite, Boolean proceedAfterHandshake) { }
	// Offset : 0x55d83c
	public Boolean get_ProceedAfterHandshake() { }
	// Offset : 0x55d844
	public Boolean get_FromWrite() { }
	// Offset : 0x55f274
	public Byte[] get_Buffer() { }
	// Offset : 0x55f27c
	public Int32 get_Offset() { }
	// Offset : 0x55f1d8
	public Int32 get_Count() { }
	// Offset : 0x560670
	public Int32 get_BytesRead() { }
	// Offset : 0x561d58
	public Object get_AsyncState() { }
	// Offset : 0x55ef48
	public Exception get_AsyncException() { }
	// Offset : 0x55eeec
	public Boolean get_CompletedWithError() { }
	// Offset : 0x55ee0c
	public WaitHandle get_AsyncWaitHandle() { }
	// Offset : 0x55edcc
	public Boolean get_IsCompleted() { }
	// Offset : 0x561d60
	private Void SetComplete(Exception ex, Int32 bytesRead) { }
	// Offset : 0x55e14c
	public Void SetComplete(Exception ex) { }
	// Offset : 0x55f284
	public Void SetComplete(Int32 bytesRead) { }
	// Offset : 0x55e140
	public Void SetComplete() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class TlsCipherSuite : CipherSuite
{
	// Fields
	private Byte[] header; // 0x80
	private Object headerLock; // 0x88

	// Properties

	// Methods
	// Offset : 0x561e4c
	public Void .ctor(Int16 code, String name, CipherAlgorithmType cipherAlgorithmType, HashAlgorithmType hashAlgorithmType, ExchangeAlgorithmType exchangeAlgorithmType, Boolean exportable, Boolean blockMode, Byte keyMaterialSize, Byte expandedKeyMaterialSize, Int16 effectiveKeyBytes, Byte ivSize, Byte blockSize) { }
	// Offset : 0x561f54
	public override Byte[] ComputeServerRecordMAC(ContentType contentType, Byte[] fragment) { }
	// Offset : 0x5622c4
	public override Byte[] ComputeClientRecordMAC(ContentType contentType, Byte[] fragment) { }
	// Offset : 0x562634
	public override Void ComputeMasterSecret(Byte[] preMasterSecret) { }
	// Offset : 0x562744
	public override Void ComputeKeys() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal sealed class TlsClientSettings
{
	// Fields
	private String targetHost; // 0x10
	private X509CertificateCollection certificates; // 0x18
	private X509Certificate clientCertificate; // 0x20
	private RSAManaged certificateRSA; // 0x28

	// Properties
	public String TargetHost { get; set; }
	public X509CertificateCollection Certificates { get; set; }
	public X509Certificate ClientCertificate { get; set; }

	// Methods
	// Offset : 0x562f20
	public Void .ctor() { }
	// Offset : 0x553de0
	public String get_TargetHost() { }
	// Offset : 0x562fbc
	public Void set_TargetHost(String value) { }
	// Offset : 0x55baf4
	public X509CertificateCollection get_Certificates() { }
	// Offset : 0x562fc4
	public Void set_Certificates(X509CertificateCollection value) { }
	// Offset : 0x55bb40
	public X509Certificate get_ClientCertificate() { }
	// Offset : 0x562fcc
	public Void set_ClientCertificate(X509Certificate value) { }
	// Offset : 0x562fd4
	public Void UpdateCertificateRSA() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
[Serializable]
internal sealed class TlsException : Exception
{
	// Fields
	private Alert alert; // 0x60

	// Properties
	public Alert Alert { get; }

	// Methods
	// Offset : 0x558180
	internal Void .ctor(String message) { }
	// Offset : 0x56336c
	internal Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x558188
	internal Void .ctor(AlertLevel level, AlertDescription description) { }
	// Offset : 0x563374
	internal Void .ctor(AlertLevel level, AlertDescription description, String message) { }
	// Offset : 0x557b14
	internal Void .ctor(AlertDescription description) { }
	// Offset : 0x553ea4
	internal Void .ctor(AlertDescription description, String message) { }
	// Offset : 0x55c0dc
	public Alert get_Alert() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class TlsServerSettings
{
	// Fields
	private X509CertificateCollection certificates; // 0x10
	private RSA certificateRSA; // 0x18
	private RSAParameters rsaParameters; // 0x20
	private Byte[] signedParams; // 0x60
	private String[] distinguisedNames; // 0x68
	private Boolean serverKeyExchange; // 0x70
	private Boolean certificateRequest; // 0x71
	private ClientCertificateType[] certificateTypes; // 0x78

	// Properties
	public Boolean ServerKeyExchange { get; set; }
	public X509CertificateCollection Certificates { get; set; }
	public RSA CertificateRSA { get; }
	public RSAParameters RsaParameters { get; set; }
	public Byte[] SignedParams { set; }
	public Boolean CertificateRequest { get; set; }
	public ClientCertificateType[] CertificateTypes { set; }
	public String[] DistinguisedNames { set; }

	// Methods
	// Offset : 0x563408
	public Void .ctor() { }
	// Offset : 0x563410
	public Boolean get_ServerKeyExchange() { }
	// Offset : 0x554290
	public Void set_ServerKeyExchange(Boolean value) { }
	// Offset : 0x55eaf4
	public X509CertificateCollection get_Certificates() { }
	// Offset : 0x563418
	public Void set_Certificates(X509CertificateCollection value) { }
	// Offset : 0x554550
	public RSA get_CertificateRSA() { }
	// Offset : 0x563420
	public RSAParameters get_RsaParameters() { }
	// Offset : 0x55429c
	public Void set_RsaParameters(RSAParameters value) { }
	// Offset : 0x5542b0
	public Void set_SignedParams(Byte[] value) { }
	// Offset : 0x55c700
	public Boolean get_CertificateRequest() { }
	// Offset : 0x563444
	public Void set_CertificateRequest(Boolean value) { }
	// Offset : 0x563450
	public Void set_CertificateTypes(ClientCertificateType[] value) { }
	// Offset : 0x563458
	public Void set_DistinguisedNames(String[] value) { }
	// Offset : 0x563460
	public Void UpdateCertificateRSA() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
internal class TlsStream : Stream
{
	// Fields
	private Boolean canRead; // 0x10
	private Boolean canWrite; // 0x11
	private MemoryStream buffer; // 0x18
	private Byte[] temp; // 0x20

	// Properties
	public Boolean EOF { get; }
	public override Boolean CanWrite { get; }
	public override Boolean CanRead { get; }
	public override Boolean CanSeek { get; }
	public override Int64 Position { get; set; }
	public override Int64 Length { get; }

	// Methods
	// Offset : 0x554368
	public Void .ctor() { }
	// Offset : 0x5545d8
	public Void .ctor(Byte[] data) { }
	// Offset : 0x557260
	public Boolean get_EOF() { }
	// Offset : 0x56366c
	public override Boolean get_CanWrite() { }
	// Offset : 0x563674
	public override Boolean get_CanRead() { }
	// Offset : 0x56367c
	public override Boolean get_CanSeek() { }
	// Offset : 0x5636c8
	public override Int64 get_Position() { }
	// Offset : 0x563714
	public override Void set_Position(Int64 value) { }
	// Offset : 0x563768
	public override Int64 get_Length() { }
	// Offset : 0x5637b4
	private Byte[] ReadSmallValue(Int32 length) { }
	// Offset : 0x553d98
	public Byte ReadByte() { }
	// Offset : 0x553a9c
	public Int16 ReadInt16() { }
	// Offset : 0x563940
	public Int32 ReadInt24() { }
	// Offset : 0x553ca8
	public Byte[] ReadBytes(Int32 count) { }
	// Offset : 0x559038
	public Void Write(Byte value) { }
	// Offset : 0x559104
	public Void Write(Int16 value) { }
	// Offset : 0x5639dc
	public Void WriteInt24(Int32 value) { }
	// Offset : 0x563b10
	public Void Write(Int32 value) { }
	// Offset : 0x554400
	public Void Write(Byte[] buffer) { }
	// Offset : 0x5544bc
	public Void Reset() { }
	// Offset : 0x55446c
	public Byte[] ToArray() { }
	// Offset : 0x563c78
	public override Void Flush() { }
	// Offset : 0x563cc4
	public override Void SetLength(Int64 length) { }
	// Offset : 0x563d1c
	public override Int64 Seek(Int64 offset, SeekOrigin loc) { }
	// Offset : 0x563d84
	public override Int32 Read(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x563e70
	public override Void Write(Byte[] buffer, Int32 offset, Int32 count) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake
[Serializable]
internal enum ClientCertificateType
{
	// Fields
	public Int32 value__; // 0x10
	public const ClientCertificateType RSA = 1; // 0x0
	public const ClientCertificateType DSS = 2; // 0x0
	public const ClientCertificateType RSAFixed = 3; // 0x0
	public const ClientCertificateType DSSFixed = 4; // 0x0
	public const ClientCertificateType Unknown = 255; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake
internal abstract class HandshakeMessage : TlsStream
{
	// Fields
	private Context context; // 0x28
	private HandshakeType handshakeType; // 0x30
	private ContentType contentType; // 0x31
	private Byte[] cache; // 0x38

	// Properties
	public Context Context { get; }
	public HandshakeType HandshakeType { get; }
	public ContentType ContentType { get; }

	// Methods
	// Offset : 0x554558
	public Void .ctor(Context context, HandshakeType handshakeType) { }
	// Offset : 0x554598
	public Void .ctor(Context context, HandshakeType handshakeType, ContentType contentType) { }
	// Offset : 0x553460
	public Void .ctor(Context context, HandshakeType handshakeType, Byte[] data) { }
	// Offset : 0x553814
	public Context get_Context() { }
	// Offset : 0x55468c
	public HandshakeType get_HandshakeType() { }
	// Offset : 0x554694
	public ContentType get_ContentType() { }
	// Offset : 0x
	protected abstract Void ProcessAsTls1() { }
	// Offset : 0x
	protected abstract Void ProcessAsSsl3() { }
	// Offset : 0x55469c
	public Void Process() { }
	// Offset : 0x553748
	public virtual Void Update() { }
	// Offset : 0x5547a8
	public virtual Byte[] EncodeMessage() { }
	// Offset : 0x553de8
	public static Boolean Compare(Byte[] buffer1, Byte[] buffer2) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake
[Serializable]
internal enum HandshakeType
{
	// Fields
	public Byte value__; // 0x10
	public const HandshakeType HelloRequest = 0; // 0x0
	public const HandshakeType ClientHello = 1; // 0x0
	public const HandshakeType ServerHello = 2; // 0x0
	public const HandshakeType Certificate = 11; // 0x0
	public const HandshakeType ServerKeyExchange = 12; // 0x0
	public const HandshakeType CertificateRequest = 13; // 0x0
	public const HandshakeType ServerHelloDone = 14; // 0x0
	public const HandshakeType CertificateVerify = 15; // 0x0
	public const HandshakeType ClientKeyExchange = 16; // 0x0
	public const HandshakeType Finished = 20; // 0x0
	public const HandshakeType None = 255; // 0x0

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientCertificate : HandshakeMessage
{
	// Fields
	private Boolean clientCertSelected; // 0x40
	private X509Certificate clientCert; // 0x48

	// Properties
	public X509Certificate ClientCertificate { get; }

	// Methods
	// Offset : 0x73643c
	public Void .ctor(Context context) { }
	// Offset : 0x73816c
	public X509Certificate get_ClientCertificate() { }
	// Offset : 0x738460
	public override Void Update() { }
	// Offset : 0x7381a4
	private Void GetClientCertificate() { }
	// Offset : 0x73848c
	private Void SendCertificates() { }
	// Offset : 0x738964
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x7389b0
	protected override Void ProcessAsTls1() { }
	// Offset : 0x738604
	private X509Certificate FindParentCertificate(X509Certificate cert) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientCertificateVerify : HandshakeMessage
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x736454
	public Void .ctor(Context context) { }
	// Offset : 0x738a08
	public override Void Update() { }
	// Offset : 0x738a34
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x739130
	protected override Void ProcessAsTls1() { }
	// Offset : 0x738ed0
	private RSA getClientCertRSA(RSA privKey) { }
	// Offset : 0x7395b8
	private Byte[] getUnsignedBigInteger(Byte[] integer) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientFinished : HandshakeMessage
{
	// Fields
	private static Byte[] Ssl3Marker; // 0x0

	// Properties

	// Methods
	// Offset : 0x736460
	public Void .ctor(Context context) { }
	// Offset : 0x739670
	private static Void .cctor() { }
	// Offset : 0x7396ec
	public override Void Update() { }
	// Offset : 0x739718
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x73993c
	protected override Void ProcessAsTls1() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientHello : HandshakeMessage
{
	// Fields
	private Byte[] random; // 0x40

	// Properties

	// Methods
	// Offset : 0x736430
	public Void .ctor(Context context) { }
	// Offset : 0x739a98
	public override Void Update() { }
	// Offset : 0x739bb8
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x739bfc
	protected override Void ProcessAsTls1() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsClientKeyExchange : HandshakeMessage
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x736448
	public Void .ctor(Context context) { }
	// Offset : 0x739fc4
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x73a31c
	protected override Void ProcessAsTls1() { }
	// Offset : 0x739fcc
	public Void ProcessCommon(Boolean sendLength) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerCertificate : HandshakeMessage
{
	// Fields
	private X509CertificateCollection certificates; // 0x40

	// Properties

	// Methods
	// Offset : 0x73647c
	public Void .ctor(Context context, Byte[] buffer) { }
	// Offset : 0x73a324
	public override Void Update() { }
	// Offset : 0x73a3bc
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x73a400
	protected override Void ProcessAsTls1() { }
	// Offset : 0x73ad90
	private Boolean checkCertificateUsage(X509Certificate cert) { }
	// Offset : 0x73a51c
	private Void validateCertificates(X509CertificateCollection certificates) { }
	// Offset : 0x73b174
	private Boolean checkServerIdentity(X509Certificate cert) { }
	// Offset : 0x73b7d4
	private Boolean checkDomainName(String subjectName) { }
	// Offset : 0x73b438
	private static Boolean Match(String hostname, String pattern) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerCertificateRequest : HandshakeMessage
{
	// Fields
	private ClientCertificateType[] certificateTypes; // 0x40
	private String[] distinguisedNames; // 0x48

	// Properties

	// Methods
	// Offset : 0x736490
	public Void .ctor(Context context, Byte[] buffer) { }
	// Offset : 0x73ba80
	public override Void Update() { }
	// Offset : 0x73bb58
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x73bb9c
	protected override Void ProcessAsTls1() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerFinished : HandshakeMessage
{
	// Fields
	private static Byte[] Ssl3Marker; // 0x0

	// Properties

	// Methods
	// Offset : 0x7364a4
	public Void .ctor(Context context, Byte[] buffer) { }
	// Offset : 0x73be80
	private static Void .cctor() { }
	// Offset : 0x73befc
	public override Void Update() { }
	// Offset : 0x73bf40
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x73c1d4
	protected override Void ProcessAsTls1() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerHello : HandshakeMessage
{
	// Fields
	private SecurityCompressionType compressionMethod; // 0x40
	private Byte[] random; // 0x48
	private Byte[] sessionId; // 0x50
	private CipherSuite cipherSuite; // 0x58

	// Properties

	// Methods
	// Offset : 0x55342c
	public Void .ctor(Context context, Byte[] buffer) { }
	// Offset : 0x55349c
	public override Void Update() { }
	// Offset : 0x553824
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x553868
	protected override Void ProcessAsTls1() { }
	// Offset : 0x553b08
	private Void processProtocol(Int16 protocol) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerHelloDone : HandshakeMessage
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x553f28
	public Void .ctor(Context context, Byte[] buffer) { }
	// Offset : 0x553f5c
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x553f60
	protected override Void ProcessAsTls1() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls.Handshake.Client
internal class TlsServerKeyExchange : HandshakeMessage
{
	// Fields
	private RSAParameters rsaParams; // 0x40
	private Byte[] signedParams; // 0x80

	// Properties

	// Methods
	// Offset : 0x553f64
	public Void .ctor(Context context, Byte[] buffer) { }
	// Offset : 0x5541a0
	public override Void Update() { }
	// Offset : 0x5542b8
	protected override Void ProcessAsSsl3() { }
	// Offset : 0x5542fc
	protected override Void ProcessAsTls1() { }
	// Offset : 0x553f9c
	private Void verifySignature() { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Math.Prime
public sealed class PrimalityTest : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x723e08
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x7242b0
	public virtual Boolean Invoke(BigInteger bi, ConfidenceFactor confidence) { }
	// Offset : 0x72479c
	public virtual IAsyncResult BeginInvoke(BigInteger bi, ConfidenceFactor confidence, AsyncCallback callback, Object object) { }
	// Offset : 0x724838
	public virtual Boolean EndInvoke(IAsyncResult result) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
public sealed class CertificateValidationCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x7309dc
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x7309ec
	public virtual Boolean Invoke(X509Certificate certificate, Int32[] certificateErrors) { }
	// Offset : 0x730ed0
	public virtual IAsyncResult BeginInvoke(X509Certificate certificate, Int32[] certificateErrors, AsyncCallback callback, Object object) { }
	// Offset : 0x730f00
	public virtual Boolean EndInvoke(IAsyncResult result) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
public sealed class CertificateValidationCallback2 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x730f3c
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x730f4c
	public virtual ValidationResult Invoke(X509CertificateCollection collection) { }
	// Offset : 0x731410
	public virtual IAsyncResult BeginInvoke(X509CertificateCollection collection, AsyncCallback callback, Object object) { }
	// Offset : 0x731434
	public virtual ValidationResult EndInvoke(IAsyncResult result) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
public sealed class CertificateSelectionCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x730458
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x730468
	public virtual X509Certificate Invoke(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, String targetHost, X509CertificateCollection serverRequestedCertificates) { }
	// Offset : 0x73099c
	public virtual IAsyncResult BeginInvoke(X509CertificateCollection clientCertificates, X509Certificate serverCertificate, String targetHost, X509CertificateCollection serverRequestedCertificates, AsyncCallback callback, Object object) { }
	// Offset : 0x7309d0
	public virtual X509Certificate EndInvoke(IAsyncResult result) { }
}

// Dll : Mono.Security.dll
// Namespace: Mono.Security.Protocol.Tls
public sealed class PrivateKeySelectionCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x554df8
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x555364
	public virtual AsymmetricAlgorithm Invoke(X509Certificate certificate, String targetHost) { }
	// Offset : 0x555848
	public virtual IAsyncResult BeginInvoke(X509Certificate certificate, String targetHost, AsyncCallback callback, Object object) { }
	// Offset : 0x555878
	public virtual AsymmetricAlgorithm EndInvoke(IAsyncResult result) { }
}

// Dll : Mono.Security.dll
// Namespace: 
internal class <PrivateImplementationDetails>
{
	// Fields
	internal static $ArrayType$3132 $$field-0; // 0x0
	internal static $ArrayType$256 $$field-5; // 0xc3c
	internal static $ArrayType$20 $$field-6; // 0xd3c
	internal static $ArrayType$32 $$field-7; // 0xd50
	internal static $ArrayType$48 $$field-8; // 0xd70
	internal static $ArrayType$64 $$field-9; // 0xda0
	internal static $ArrayType$64 $$field-11; // 0xde0
	internal static $ArrayType$64 $$field-12; // 0xe20
	internal static $ArrayType$64 $$field-13; // 0xe60
	internal static $ArrayType$12 $$field-14; // 0xea0
	internal static $ArrayType$12 $$field-15; // 0xeac
	internal static $ArrayType$12 $$field-16; // 0xeb8
	internal static $ArrayType$16 $$field-17; // 0xec4
	internal static $ArrayType$4 $$field-21; // 0xed4
	internal static $ArrayType$4 $$field-22; // 0xed8

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
private struct $ArrayType$3132
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
private struct $ArrayType$256
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
private struct $ArrayType$20
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
private struct $ArrayType$32
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
private struct $ArrayType$48
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
private struct $ArrayType$64
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
private struct $ArrayType$12
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
private struct $ArrayType$16
{
	// Fields

	// Properties

	// Methods
}

// Dll : Mono.Security.dll
// Namespace: 
private struct $ArrayType$4
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: 
internal sealed class Locale
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x61ddd4
	public static String GetText(String msg) { }
	// Offset : 0x61ddd8
	public static String GetText(String fmt, Object[] args) { }
}

// Dll : System.dll
// Namespace: System
internal class MonoTODOAttribute : Attribute
{
	// Fields
	private String comment; // 0x10

	// Properties

	// Methods
	// Offset : 0x623014
	public Void .ctor() { }
	// Offset : 0x62301c
	public Void .ctor(String comment) { }
}

// Dll : System.dll
// Namespace: System.CodeDom.Compiler
public sealed class GeneratedCodeAttribute : Attribute
{
	// Fields
	private String tool; // 0x10
	private String version; // 0x18

	// Properties

	// Methods
	// Offset : 0x61de50
	public Void .ctor(String tool, String version) { }
}

// Dll : System.dll
// Namespace: System.Collections.Generic
[Serializable]
public class LinkedList`1 : IEnumerable`1, ICollection, IDeserializationCallback, IEnumerable, ICollection`1, ISerializable
{
	// Fields
	private UInt32 count; // 0x0
	private UInt32 version; // 0x0
	private Object syncRoot; // 0x0
	internal LinkedListNode`1 first; // 0x0
	internal SerializationInfo si; // 0x0

	// Properties
	private Boolean System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	public Int32 Count { get; }
	public LinkedListNode`1 First { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<T>.Add(T value) { }
	// Offset : 0x
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x
	private IEnumerator`1 System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	// Offset : 0x
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x
	private Void VerifyReferencedNode(LinkedListNode`1 node) { }
	// Offset : 0x
	public LinkedListNode`1 AddFirst(T value) { }
	// Offset : 0x
	public LinkedListNode`1 AddLast(T value) { }
	// Offset : 0x
	public Void Clear() { }
	// Offset : 0x
	public Boolean Contains(T value) { }
	// Offset : 0x
	public Void CopyTo(T[] array, Int32 index) { }
	// Offset : 0x
	public LinkedListNode`1 Find(T value) { }
	// Offset : 0x
	public Enumerator GetEnumerator() { }
	// Offset : 0x
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x
	public virtual Void OnDeserialization(Object sender) { }
	// Offset : 0x
	public Boolean Remove(T value) { }
	// Offset : 0x
	public Void Remove(LinkedListNode`1 node) { }
	// Offset : 0x
	public Void RemoveFirst() { }
	// Offset : 0x
	public Void RemoveLast() { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	public LinkedListNode`1 get_First() { }
}

// Dll : System.dll
// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator`1, IEnumerator, IDisposable
{
	// Fields
	private LinkedList`1 list; // 0x0
	private LinkedListNode`1 current; // 0x0
	private Int32 index; // 0x0
	private UInt32 version; // 0x0

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Methods
	// Offset : 0x
	internal Void .ctor(LinkedList`1 parent) { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x
	public T get_Current() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public Void Dispose() { }
}

// Dll : System.dll
// Namespace: System.Collections.Generic
public sealed class LinkedListNode`1
{
	// Fields
	private T item; // 0x0
	private LinkedList`1 container; // 0x0
	internal LinkedListNode`1 forward; // 0x0
	internal LinkedListNode`1 back; // 0x0

	// Properties
	public LinkedList`1 List { get; }
	public LinkedListNode`1 Next { get; }
	public T Value { get; }

	// Methods
	// Offset : 0x
	internal Void .ctor(LinkedList`1 list, T value) { }
	// Offset : 0x
	internal Void .ctor(LinkedList`1 list, T value, LinkedListNode`1 previousNode, LinkedListNode`1 nextNode) { }
	// Offset : 0x
	internal Void Detach() { }
	// Offset : 0x
	public LinkedList`1 get_List() { }
	// Offset : 0x
	public LinkedListNode`1 get_Next() { }
	// Offset : 0x
	public T get_Value() { }
}

// Dll : System.dll
// Namespace: System.Collections.Generic
[Serializable]
public class Queue`1 : IEnumerable`1, ICollection, IEnumerable
{
	// Fields
	private T[] _array; // 0x0
	private Int32 _head; // 0x0
	private Int32 _tail; // 0x0
	private Int32 _size; // 0x0
	private Int32 _version; // 0x0

	// Properties
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	public Int32 Count { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 idx) { }
	// Offset : 0x
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x
	private IEnumerator`1 System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	public Void Clear() { }
	// Offset : 0x
	public Void CopyTo(T[] array, Int32 idx) { }
	// Offset : 0x
	public T Dequeue() { }
	// Offset : 0x
	public T Peek() { }
	// Offset : 0x
	public Void Enqueue(T item) { }
	// Offset : 0x
	private Void SetCapacity(Int32 new_size) { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	public Enumerator GetEnumerator() { }
}

// Dll : System.dll
// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	private Queue`1 q; // 0x0
	private Int32 idx; // 0x0
	private Int32 ver; // 0x0

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Methods
	// Offset : 0x
	internal Void .ctor(Queue`1 q) { }
	// Offset : 0x
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public T get_Current() { }
}

// Dll : System.dll
// Namespace: System.Collections.Generic
[Serializable]
public class Stack`1 : ICollection, IEnumerable, IEnumerable`1
{
	// Fields
	private T[] _array; // 0x0
	private Int32 _size; // 0x0
	private Int32 _version; // 0x0

	// Properties
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	public Int32 Count { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x
	private Void System.Collections.ICollection.CopyTo(Array dest, Int32 idx) { }
	// Offset : 0x
	private IEnumerator`1 System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	public Void Clear() { }
	// Offset : 0x
	public T Peek() { }
	// Offset : 0x
	public T Pop() { }
	// Offset : 0x
	public Void Push(T t) { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	public Enumerator GetEnumerator() { }
}

// Dll : System.dll
// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	private Stack`1 parent; // 0x0
	private Int32 idx; // 0x0
	private Int32 _version; // 0x0

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Methods
	// Offset : 0x
	internal Void .ctor(Stack`1 t) { }
	// Offset : 0x
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public T get_Current() { }
}

// Dll : System.dll
// Namespace: System.Collections.Specialized
[Serializable]
public class HybridDictionary : ICollection, IDictionary, IEnumerable
{
	// Fields
	private Boolean caseInsensitive; // 0x10
	private Hashtable hashtable; // 0x18
	private ListDictionary list; // 0x20

	// Properties
	private IDictionary inner { get; }
	public Int32 Count { get; }
	public Boolean IsFixedSize { get; }
	public Boolean IsReadOnly { get; }
	public Boolean IsSynchronized { get; }
	public Object Item { get; set; }
	public ICollection Keys { get; }
	public Object SyncRoot { get; }
	public ICollection Values { get; }

	// Methods
	// Offset : 0x61de88
	public Void .ctor() { }
	// Offset : 0x61de94
	public Void .ctor(Int32 initialSize, Boolean caseInsensitive) { }
	// Offset : 0x61dffc
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x61e0fc
	private IDictionary get_inner() { }
	// Offset : 0x61e114
	public Int32 get_Count() { }
	// Offset : 0x61e20c
	public Boolean get_IsFixedSize() { }
	// Offset : 0x61e214
	public Boolean get_IsReadOnly() { }
	// Offset : 0x61e21c
	public Boolean get_IsSynchronized() { }
	// Offset : 0x61e224
	public Object get_Item(Object key) { }
	// Offset : 0x61e328
	public Void set_Item(Object key, Object value) { }
	// Offset : 0x61e588
	public ICollection get_Keys() { }
	// Offset : 0x61e684
	public Object get_SyncRoot() { }
	// Offset : 0x61e688
	public ICollection get_Values() { }
	// Offset : 0x61e784
	public Void Add(Object key, Object value) { }
	// Offset : 0x61e8cc
	public Void Clear() { }
	// Offset : 0x61e9c8
	public Boolean Contains(Object key) { }
	// Offset : 0x61eacc
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x61e000
	public IDictionaryEnumerator GetEnumerator() { }
	// Offset : 0x61ebe0
	public Void Remove(Object key) { }
	// Offset : 0x61e470
	private Void Switch() { }
}

// Dll : System.dll
// Namespace: System.Collections.Specialized
public interface IOrderedDictionary : ICollection, IDictionary, IEnumerable
{
	// Fields

	// Properties
	public abstract Object Item { get; set; }

	// Methods
	// Offset : 0x
	public abstract IDictionaryEnumerator GetEnumerator() { }
	// Offset : 0x
	public abstract Void Insert(Int32 idx, Object key, Object value) { }
	// Offset : 0x
	public abstract Void RemoveAt(Int32 idx) { }
	// Offset : 0x
	public abstract Object get_Item(Int32 idx) { }
	// Offset : 0x
	public abstract Void set_Item(Int32 idx, Object value) { }
}

// Dll : System.dll
// Namespace: System.Collections.Specialized
[Serializable]
public class ListDictionary : ICollection, IDictionary, IEnumerable
{
	// Fields
	private Int32 count; // 0x10
	private Int32 version; // 0x14
	private DictionaryNode head; // 0x18
	private IComparer comparer; // 0x20

	// Properties
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public Object SyncRoot { get; }
	public Boolean IsFixedSize { get; }
	public Boolean IsReadOnly { get; }
	public Object Item { get; set; }
	public ICollection Keys { get; }
	public ICollection Values { get; }

	// Methods
	// Offset : 0x61ecf8
	public Void .ctor() { }
	// Offset : 0x61dfcc
	public Void .ctor(IComparer comparer) { }
	// Offset : 0x61ed24
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x61edd8
	private DictionaryNode FindEntry(Object key) { }
	// Offset : 0x61ef9c
	private DictionaryNode FindEntry(Object key, out DictionaryNode prev) { }
	// Offset : 0x61f17c
	private Void AddImpl(Object key, Object value, DictionaryNode prev) { }
	// Offset : 0x61f26c
	public Int32 get_Count() { }
	// Offset : 0x61f274
	public Boolean get_IsSynchronized() { }
	// Offset : 0x61f27c
	public Object get_SyncRoot() { }
	// Offset : 0x61f280
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x61f6f0
	public Boolean get_IsFixedSize() { }
	// Offset : 0x61f6f8
	public Boolean get_IsReadOnly() { }
	// Offset : 0x61f700
	public Object get_Item(Object key) { }
	// Offset : 0x61f71c
	public Void set_Item(Object key, Object value) { }
	// Offset : 0x61f774
	public ICollection get_Keys() { }
	// Offset : 0x61f820
	public ICollection get_Values() { }
	// Offset : 0x61f888
	public Void Add(Object key, Object value) { }
	// Offset : 0x61ece4
	public Void Clear() { }
	// Offset : 0x61f95c
	public Boolean Contains(Object key) { }
	// Offset : 0x61f690
	public IDictionaryEnumerator GetEnumerator() { }
	// Offset : 0x61f978
	public Void Remove(Object key) { }
}

// Dll : System.dll
// Namespace: 
[Serializable]
private class DictionaryNode
{
	// Fields
	public Object key; // 0x10
	public Object value; // 0x18
	public DictionaryNode next; // 0x20

	// Properties

	// Methods
	// Offset : 0x61f22c
	public Void .ctor(Object key, Object value, DictionaryNode next) { }
}

// Dll : System.dll
// Namespace: 
private class DictionaryNodeEnumerator : IEnumerator, IDictionaryEnumerator
{
	// Fields
	private ListDictionary dict; // 0x10
	private Boolean isAtStart; // 0x18
	private DictionaryNode current; // 0x20
	private Int32 version; // 0x28

	// Properties
	public Object Current { get; }
	private DictionaryNode DictionaryNode { get; }
	public DictionaryEntry Entry { get; }
	public Object Key { get; }
	public Object Value { get; }

	// Methods
	// Offset : 0x61ed84
	public Void .ctor(ListDictionary dict) { }
	// Offset : 0x6201f8
	private Void FailFast() { }
	// Offset : 0x62029c
	public Boolean MoveNext() { }
	// Offset : 0x6201cc
	public Void Reset() { }
	// Offset : 0x620308
	public Object get_Current() { }
	// Offset : 0x6203e0
	private DictionaryNode get_DictionaryNode() { }
	// Offset : 0x620374
	public DictionaryEntry get_Entry() { }
	// Offset : 0x620474
	public Object get_Key() { }
	// Offset : 0x6204a0
	public Object get_Value() { }
}

// Dll : System.dll
// Namespace: 
private class DictionaryNodeCollection : ICollection, IEnumerable
{
	// Fields
	private ListDictionary dict; // 0x10
	private Boolean isKeyList; // 0x18

	// Properties
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public Object SyncRoot { get; }

	// Methods
	// Offset : 0x61f7e0
	public Void .ctor(ListDictionary dict, Boolean isKeyList) { }
	// Offset : 0x61f9d4
	public Int32 get_Count() { }
	// Offset : 0x61fa00
	public Boolean get_IsSynchronized() { }
	// Offset : 0x61fa08
	public Object get_SyncRoot() { }
	// Offset : 0x61fa34
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x61fe24
	public IEnumerator GetEnumerator() { }
}

// Dll : System.dll
// Namespace: 
private class DictionaryNodeCollectionEnumerator : IEnumerator
{
	// Fields
	private IDictionaryEnumerator inner; // 0x10
	private Boolean isKeyList; // 0x18

	// Properties
	public Object Current { get; }

	// Methods
	// Offset : 0x61feb8
	public Void .ctor(IDictionaryEnumerator inner, Boolean isKeyList) { }
	// Offset : 0x61fef8
	public Object get_Current() { }
	// Offset : 0x61fff4
	public Boolean MoveNext() { }
	// Offset : 0x6200e0
	public Void Reset() { }
}

// Dll : System.dll
// Namespace: System.Collections.Specialized
[Serializable]
public abstract class NameObjectCollectionBase : ICollection, IDeserializationCallback, IEnumerable, ISerializable
{
	// Fields
	private Hashtable m_ItemsContainer; // 0x10
	private _Item m_NullKeyItem; // 0x18
	private ArrayList m_ItemsArray; // 0x20
	private IHashCodeProvider m_hashprovider; // 0x28
	private IComparer m_comparer; // 0x30
	private Int32 m_defCapacity; // 0x38
	private Boolean m_readonly; // 0x3c
	private SerializationInfo infoCopy; // 0x40
	private KeysCollection keyscoll; // 0x48
	private IEqualityComparer equality_comparer; // 0x50

	// Properties
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	public virtual KeysCollection Keys { get; }
	public virtual Int32 Count { get; }
	protected Boolean IsReadOnly { get; }

	// Methods
	// Offset : 0x6204cc
	protected Void .ctor() { }
	// Offset : 0x620650
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x62067c
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x620684
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x620688
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x62057c
	private Void Init() { }
	// Offset : 0x6207b0
	public virtual KeysCollection get_Keys() { }
	// Offset : 0x62084c
	public virtual IEnumerator GetEnumerator() { }
	// Offset : 0x6208ec
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x621010
	public virtual Int32 get_Count() { }
	// Offset : 0x621060
	public virtual Void OnDeserialization(Object sender) { }
	// Offset : 0x621748
	protected Boolean get_IsReadOnly() { }
	// Offset : 0x6215b4
	protected Void BaseAdd(String name, Object value) { }
	// Offset : 0x621788
	protected Object BaseGet(Int32 index) { }
	// Offset : 0x62190c
	protected Object BaseGet(String name) { }
	// Offset : 0x621a40
	protected String BaseGetKey(Int32 index) { }
	// Offset : 0x621928
	private _Item FindFirstMatchedItem(String name) { }
}

// Dll : System.dll
// Namespace: 
internal class _Item
{
	// Fields
	public String key; // 0x10
	public Object value; // 0x18

	// Properties

	// Methods
	// Offset : 0x621750
	public Void .ctor(String key, Object value) { }
}

// Dll : System.dll
// Namespace: 
[Serializable]
internal class _KeysEnumerator : IEnumerator
{
	// Fields
	private NameObjectCollectionBase m_collection; // 0x10
	private Int32 m_position; // 0x18

	// Properties
	public Object Current { get; }

	// Methods
	// Offset : 0x6208b8
	internal Void .ctor(NameObjectCollectionBase collection) { }
	// Offset : 0x6220b4
	public Object get_Current() { }
	// Offset : 0x62219c
	public Boolean MoveNext() { }
	// Offset : 0x6220a8
	public Void Reset() { }
}

// Dll : System.dll
// Namespace: 
[Serializable]
public class KeysCollection : ICollection, IEnumerable
{
	// Fields
	private NameObjectCollectionBase m_collection; // 0x10

	// Properties
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	public Int32 Count { get; }

	// Methods
	// Offset : 0x620820
	internal Void .ctor(NameObjectCollectionBase collection) { }
	// Offset : 0x621bc4
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 arrayIndex) { }
	// Offset : 0x621fd8
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x621fe0
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x621fe8
	public Int32 get_Count() { }
	// Offset : 0x622038
	public IEnumerator GetEnumerator() { }
}

// Dll : System.dll
// Namespace: System.Collections.Specialized
[Serializable]
public class NameValueCollection : NameObjectCollectionBase
{
	// Fields
	private String[] cachedAllKeys; // 0x58
	private String[] cachedAll; // 0x60

	// Properties

	// Methods
	// Offset : 0x622204
	public Void .ctor() { }
	// Offset : 0x622208
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x622234
	public virtual Void Add(String name, String val) { }
	// Offset : 0x622420
	public virtual String Get(Int32 index) { }
	// Offset : 0x6224fc
	private static String AsSingleString(ArrayList values) { }
	// Offset : 0x622a34
	public virtual String GetKey(Int32 index) { }
	// Offset : 0x622418
	protected Void InvalidateCachedArrays() { }
}

// Dll : System.dll
// Namespace: System.ComponentModel
public sealed class BrowsableAttribute : Attribute
{
	// Fields
	private Boolean browsable; // 0x10
	public static readonly BrowsableAttribute Default; // 0x0
	public static readonly BrowsableAttribute No; // 0x8
	public static readonly BrowsableAttribute Yes; // 0x10

	// Properties
	public Boolean Browsable { get; }

	// Methods
	// Offset : 0x622a38
	public Void .ctor(Boolean browsable) { }
	// Offset : 0x622a68
	private static Void .cctor() { }
	// Offset : 0x622b20
	public Boolean get_Browsable() { }
	// Offset : 0x622b28
	public override Boolean Equals(Object obj) { }
	// Offset : 0x622bc8
	public override Int32 GetHashCode() { }
}

// Dll : System.dll
// Namespace: System.ComponentModel
public sealed class EditorBrowsableAttribute : Attribute
{
	// Fields
	private EditorBrowsableState state; // 0x10

	// Properties
	public EditorBrowsableState State { get; }

	// Methods
	// Offset : 0x622bd4
	public Void .ctor(EditorBrowsableState state) { }
	// Offset : 0x622c00
	public EditorBrowsableState get_State() { }
	// Offset : 0x622c08
	public override Boolean Equals(Object obj) { }
	// Offset : 0x622c98
	public override Int32 GetHashCode() { }
}

// Dll : System.dll
// Namespace: System.ComponentModel
public enum EditorBrowsableState
{
	// Fields
	public Int32 value__; // 0x10
	public const EditorBrowsableState Always = 0; // 0x0
	public const EditorBrowsableState Never = 1; // 0x0
	public const EditorBrowsableState Advanced = 2; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.ComponentModel
public class TypeConverter
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.ComponentModel
public sealed class TypeConverterAttribute : Attribute
{
	// Fields
	public static readonly TypeConverterAttribute Default; // 0x0
	private String converter_type; // 0x10

	// Properties
	public String ConverterTypeName { get; }

	// Methods
	// Offset : 0x622d0c
	public Void .ctor() { }
	// Offset : 0x622d88
	public Void .ctor(Type type) { }
	// Offset : 0x622dec
	private static Void .cctor() { }
	// Offset : 0x622e4c
	public override Boolean Equals(Object obj) { }
	// Offset : 0x622f00
	public override Int32 GetHashCode() { }
	// Offset : 0x622ef8
	public String get_ConverterTypeName() { }
}

// Dll : System.dll
// Namespace: System.Net.Security
public enum AuthenticationLevel
{
	// Fields
	public Int32 value__; // 0x10
	public const AuthenticationLevel None = 0; // 0x0
	public const AuthenticationLevel MutualAuthRequested = 1; // 0x0
	public const AuthenticationLevel MutualAuthRequired = 2; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Net.Security
public enum SslPolicyErrors
{
	// Fields
	public Int32 value__; // 0x10
	public const SslPolicyErrors None = 0; // 0x0
	public const SslPolicyErrors RemoteCertificateNotAvailable = 1; // 0x0
	public const SslPolicyErrors RemoteCertificateNameMismatch = 2; // 0x0
	public const SslPolicyErrors RemoteCertificateChainErrors = 4; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Net.Sockets
public enum AddressFamily
{
	// Fields
	public Int32 value__; // 0x10
	public const AddressFamily Unknown = 4294967295; // 0x0
	public const AddressFamily Unspecified = 0; // 0x0
	public const AddressFamily Unix = 1; // 0x0
	public const AddressFamily InterNetwork = 2; // 0x0
	public const AddressFamily ImpLink = 3; // 0x0
	public const AddressFamily Pup = 4; // 0x0
	public const AddressFamily Chaos = 5; // 0x0
	public const AddressFamily NS = 6; // 0x0
	public const AddressFamily Ipx = 6; // 0x0
	public const AddressFamily Iso = 7; // 0x0
	public const AddressFamily Osi = 7; // 0x0
	public const AddressFamily Ecma = 8; // 0x0
	public const AddressFamily DataKit = 9; // 0x0
	public const AddressFamily Ccitt = 10; // 0x0
	public const AddressFamily Sna = 11; // 0x0
	public const AddressFamily DecNet = 12; // 0x0
	public const AddressFamily DataLink = 13; // 0x0
	public const AddressFamily Lat = 14; // 0x0
	public const AddressFamily HyperChannel = 15; // 0x0
	public const AddressFamily AppleTalk = 16; // 0x0
	public const AddressFamily NetBios = 17; // 0x0
	public const AddressFamily VoiceView = 18; // 0x0
	public const AddressFamily FireFox = 19; // 0x0
	public const AddressFamily Banyan = 21; // 0x0
	public const AddressFamily Atm = 22; // 0x0
	public const AddressFamily InterNetworkV6 = 23; // 0x0
	public const AddressFamily Cluster = 24; // 0x0
	public const AddressFamily Ieee12844 = 25; // 0x0
	public const AddressFamily Irda = 26; // 0x0
	public const AddressFamily NetworkDesigners = 28; // 0x0
	public const AddressFamily Max = 29; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Net
internal class DefaultCertificatePolicy : ICertificatePolicy
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x623048
	public Void .ctor() { }
	// Offset : 0x623050
	public Boolean CheckValidationResult(ServicePoint point, X509Certificate certificate, WebRequest request, Int32 certificateProblem) { }
}

// Dll : System.dll
// Namespace: System.Net
[Serializable]
public class FileWebRequest : WebRequest, ISerializable
{
	// Fields
	private Uri uri; // 0x20
	private WebHeaderCollection webHeaders; // 0x28
	private String connectionGroup; // 0x30
	private Int64 contentLength; // 0x38
	private FileAccess fileAccess; // 0x40
	private String method; // 0x48
	private IWebProxy proxy; // 0x50
	private Boolean preAuthenticate; // 0x58
	private Int32 timeout; // 0x5c

	// Properties

	// Methods
	// Offset : 0x623140
	internal Void .ctor(Uri uri) { }
	// Offset : 0x623214
	protected Void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x6236a4
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x623704
	protected override Void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Dll : System.dll
// Namespace: System.Net
internal class FileWebRequestCreator : IWebRequestCreate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x623990
	internal Void .ctor() { }
	// Offset : 0x623998
	public WebRequest Create(Uri uri) { }
}

// Dll : System.dll
// Namespace: System.Net
internal class FtpRequestCreator : IWebRequestCreate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6239f8
	public Void .ctor() { }
	// Offset : 0x623a00
	public WebRequest Create(Uri uri) { }
}

// Dll : System.dll
// Namespace: System.Net
public sealed class FtpWebRequest : WebRequest
{
	// Fields
	private Uri requestUri; // 0x20
	private IWebProxy proxy; // 0x28
	private Int32 timeout; // 0x30
	private Int32 rwTimeout; // 0x34
	private Boolean binary; // 0x38
	private Boolean usePassive; // 0x39
	private String method; // 0x40
	private Object locker; // 0x48
	private static readonly String[] supportedCommands; // 0x0
	private RemoteCertificateValidationCallback callback; // 0x50
	private static RemoteCertificateValidationCallback <>f__am$cache1C; // 0x8

	// Properties

	// Methods
	// Offset : 0x623a60
	internal Void .ctor(Uri uri) { }
	// Offset : 0x623c48
	private static Void .cctor() { }
	// Offset : 0x6240f8
	private static Boolean <callback>m__B(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { }
}

// Dll : System.dll
// Namespace: System.Net
public class GlobalProxySelection
{
	// Fields

	// Properties
	public static IWebProxy Select { get; }

	// Methods
	// Offset : 0x623bec
	public static IWebProxy get_Select() { }
}

// Dll : System.dll
// Namespace: System.Net
internal class HttpRequestCreator : IWebRequestCreate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6248fc
	internal Void .ctor() { }
	// Offset : 0x624904
	public WebRequest Create(Uri uri) { }
}

// Dll : System.dll
// Namespace: System.Net
public class HttpVersion
{
	// Fields
	public static readonly Version Version10; // 0x0
	public static readonly Version Version11; // 0x8

	// Properties

	// Methods
	// Offset : 0x624adc
	private static Void .cctor() { }
}

// Dll : System.dll
// Namespace: System.Net
[Serializable]
public class HttpWebRequest : WebRequest, ISerializable
{
	// Fields
	private Uri requestUri; // 0x20
	private Uri actualUri; // 0x28
	private Boolean hostChanged; // 0x30
	private Boolean allowAutoRedirect; // 0x31
	private Boolean allowBuffering; // 0x32
	private X509CertificateCollection certificates; // 0x38
	private String connectionGroup; // 0x40
	private Int64 contentLength; // 0x48
	private WebHeaderCollection webHeaders; // 0x50
	private Boolean keepAlive; // 0x58
	private Int32 maxAutoRedirect; // 0x5c
	private String mediaType; // 0x60
	private String method; // 0x68
	private String initialMethod; // 0x70
	private Boolean pipelined; // 0x78
	private Version version; // 0x80
	private IWebProxy proxy; // 0x88
	private Boolean sendChunked; // 0x90
	private ServicePoint servicePoint; // 0x98
	private Int32 timeout; // 0xa0
	private Int32 redirects; // 0xa4
	private Object locker; // 0xa8
	private static Int32 defaultMaxResponseHeadersLength; // 0x0
	private Int32 readWriteTimeout; // 0xb0

	// Properties
	public Uri Address { get; }
	public ServicePoint ServicePoint { get; }

	// Methods
	// Offset : 0x624964
	public Void .ctor(Uri uri) { }
	// Offset : 0x624bac
	protected Void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x6254a0
	private static Void .cctor() { }
	// Offset : 0x6254f4
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x625554
	public Uri get_Address() { }
	// Offset : 0x62555c
	public ServicePoint get_ServicePoint() { }
	// Offset : 0x625560
	internal ServicePoint GetServicePoint() { }
	// Offset : 0x625d78
	protected override Void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Dll : System.dll
// Namespace: System.Net
public interface ICertificatePolicy
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Boolean CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, Int32 certificateProblem) { }
}

// Dll : System.dll
// Namespace: System.Net
public interface ICredentials
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Net
[Serializable]
public class IPAddress
{
	// Fields
	private Int64 m_Address; // 0x10
	private AddressFamily m_Family; // 0x18
	private UInt16[] m_Numbers; // 0x20
	private Int64 m_ScopeId; // 0x28
	public static readonly IPAddress Any; // 0x0
	public static readonly IPAddress Broadcast; // 0x8
	public static readonly IPAddress Loopback; // 0x10
	public static readonly IPAddress None; // 0x18
	public static readonly IPAddress IPv6Any; // 0x20
	public static readonly IPAddress IPv6Loopback; // 0x28
	public static readonly IPAddress IPv6None; // 0x30
	private Int32 m_HashCode; // 0x30

	// Properties
	internal Int64 InternalIPv4Address { get; }
	public Int64 ScopeId { get; }
	public AddressFamily AddressFamily { get; }

	// Methods
	// Offset : 0x6261e4
	public Void .ctor(Int64 addr) { }
	// Offset : 0x626218
	internal Void .ctor(UInt16[] address, Int64 scopeId) { }
	// Offset : 0x6263c8
	private static Void .cctor() { }
	// Offset : 0x626664
	private static Int16 SwapShort(Int16 number) { }
	// Offset : 0x626328
	public static Int16 HostToNetworkOrder(Int16 host) { }
	// Offset : 0x626670
	public static Int16 NetworkToHostOrder(Int16 network) { }
	// Offset : 0x6264d0
	public static IPAddress Parse(String ipString) { }
	// Offset : 0x626710
	public static Boolean TryParse(String ipString, out IPAddress address) { }
	// Offset : 0x626800
	private static IPAddress ParseIPV4(String ip) { }
	// Offset : 0x626594
	private static IPAddress ParseIPV6(String ip) { }
	// Offset : 0x6276f0
	internal Int64 get_InternalIPv4Address() { }
	// Offset : 0x6276f8
	public Int64 get_ScopeId() { }
	// Offset : 0x62778c
	public AddressFamily get_AddressFamily() { }
	// Offset : 0x627794
	public static Boolean IsLoopback(IPAddress addr) { }
	// Offset : 0x6278a8
	public override String ToString() { }
	// Offset : 0x627a74
	private static String ToString(Int64 addr) { }
	// Offset : 0x627e70
	public override Boolean Equals(Object other) { }
	// Offset : 0x627fc4
	public override Int32 GetHashCode() { }
	// Offset : 0x628214
	private static Int32 Hash(Int32 i, Int32 j, Int32 k, Int32 l) { }
}

// Dll : System.dll
// Namespace: System.Net
[Serializable]
internal class IPv6Address
{
	// Fields
	private UInt16[] address; // 0x10
	private Int32 prefixLength; // 0x18
	private Int64 scopeId; // 0x20
	public static readonly IPv6Address Loopback; // 0x0
	public static readonly IPv6Address Unspecified; // 0x8

	// Properties
	public UInt16[] Address { get; }
	public Int64 ScopeId { get; set; }

	// Methods
	// Offset : 0x627d8c
	public Void .ctor(UInt16[] addr) { }
	// Offset : 0x62823c
	public Void .ctor(UInt16[] addr, Int32 prefixLength) { }
	// Offset : 0x6282e8
	public Void .ctor(UInt16[] addr, Int32 prefixLength, Int32 scopeId) { }
	// Offset : 0x628314
	private static Void .cctor() { }
	// Offset : 0x628390
	public static IPv6Address Parse(String ipString) { }
	// Offset : 0x628484
	private static Int32 Fill(UInt16[] addr, String ipString) { }
	// Offset : 0x62868c
	private static Boolean TryParse(String prefix, out Int32 res) { }
	// Offset : 0x626f70
	public static Boolean TryParse(String ipString, out IPv6Address result) { }
	// Offset : 0x6276e0
	public UInt16[] get_Address() { }
	// Offset : 0x6276e8
	public Int64 get_ScopeId() { }
	// Offset : 0x627e68
	public Void set_ScopeId(Int64 value) { }
	// Offset : 0x628714
	public static Boolean IsLoopback(IPv6Address addr) { }
	// Offset : 0x628870
	private static UInt16 SwapUShort(UInt16 number) { }
	// Offset : 0x62887c
	private Int32 AsIPv4Int() { }
	// Offset : 0x628948
	public Boolean IsIPv4Compatible() { }
	// Offset : 0x6289cc
	public Boolean IsIPv4Mapped() { }
	// Offset : 0x628a6c
	public override String ToString() { }
	// Offset : 0x628e20
	public String ToString(Boolean fullLength) { }
	// Offset : 0x629034
	public override Boolean Equals(Object other) { }
	// Offset : 0x6292bc
	public override Int32 GetHashCode() { }
	// Offset : 0x6294f8
	private static Int32 Hash(Int32 i, Int32 j, Int32 k, Int32 l) { }
}

// Dll : System.dll
// Namespace: System.Net
public interface IWebProxy
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Uri GetProxy(Uri destination) { }
	// Offset : 0x
	public abstract Boolean IsBypassed(Uri host) { }
}

// Dll : System.dll
// Namespace: System.Net
public interface IWebRequestCreate
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Net
public enum SecurityProtocolType
{
	// Fields
	public Int32 value__; // 0x10
	public const SecurityProtocolType Ssl3 = 48; // 0x0
	public const SecurityProtocolType Tls = 192; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Net
public class ServicePoint
{
	// Fields
	private Uri uri; // 0x10
	private Int32 connectionLimit; // 0x18
	private Int32 maxIdleTime; // 0x1c
	private Int32 currentConnections; // 0x20
	private DateTime idleSince; // 0x28
	private Boolean usesProxy; // 0x38
	private Boolean sendContinue; // 0x39
	private Boolean useConnect; // 0x3a
	private Object locker; // 0x40
	private Object hostE; // 0x48
	private Boolean useNagle; // 0x50

	// Properties
	public Uri Address { get; }
	public Int32 CurrentConnections { get; }
	public DateTime IdleSince { get; set; }
	public Boolean Expect100Continue { set; }
	public Boolean UseNagleAlgorithm { set; }
	internal Boolean SendContinue { set; }
	internal Boolean UsesProxy { set; }
	internal Boolean UseConnect { set; }
	internal Boolean AvailableForRecycling { get; }

	// Methods
	// Offset : 0x62960c
	internal Void .ctor(Uri uri, Int32 connectionLimit, Int32 maxIdleTime) { }
	// Offset : 0x6296ec
	public Uri get_Address() { }
	// Offset : 0x6296f4
	public Int32 get_CurrentConnections() { }
	// Offset : 0x6296fc
	public DateTime get_IdleSince() { }
	// Offset : 0x629708
	internal Void set_IdleSince(DateTime value) { }
	// Offset : 0x629750
	public Void set_Expect100Continue(Boolean value) { }
	// Offset : 0x629768
	public Void set_UseNagleAlgorithm(Boolean value) { }
	// Offset : 0x62975c
	internal Void set_SendContinue(Boolean value) { }
	// Offset : 0x629774
	internal Void set_UsesProxy(Boolean value) { }
	// Offset : 0x629780
	internal Void set_UseConnect(Boolean value) { }
	// Offset : 0x62978c
	internal Boolean get_AvailableForRecycling() { }
}

// Dll : System.dll
// Namespace: System.Net
public class ServicePointManager
{
	// Fields
	private static HybridDictionary servicePoints; // 0x0
	private static ICertificatePolicy policy; // 0x8
	private static Int32 defaultConnectionLimit; // 0x10
	private static Int32 maxServicePointIdleTime; // 0x14
	private static Int32 maxServicePoints; // 0x18
	private static Boolean _checkCRL; // 0x1c
	private static SecurityProtocolType _securityProtocol; // 0x20
	private static Boolean expectContinue; // 0x24
	private static Boolean useNagle; // 0x25
	private static RemoteCertificateValidationCallback server_cert_cb; // 0x28

	// Properties
	public static ICertificatePolicy CertificatePolicy { get; }
	public static Boolean CheckCertificateRevocationList { get; }
	public static SecurityProtocolType SecurityProtocol { get; }
	public static RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; }

	// Methods
	// Offset : 0x629864
	private static Void .cctor() { }
	// Offset : 0x629940
	public static ICertificatePolicy get_CertificatePolicy() { }
	// Offset : 0x6299a8
	public static Boolean get_CheckCertificateRevocationList() { }
	// Offset : 0x629a10
	public static SecurityProtocolType get_SecurityProtocol() { }
	// Offset : 0x6230d8
	public static RemoteCertificateValidationCallback get_ServerCertificateValidationCallback() { }
	// Offset : 0x625654
	public static ServicePoint FindServicePoint(Uri address, IWebProxy proxy) { }
	// Offset : 0x629a78
	internal static Void RecycleServicePoints() { }
}

// Dll : System.dll
// Namespace: 
private class SPKey
{
	// Fields
	private Uri uri; // 0x10
	private Boolean use_connect; // 0x18

	// Properties

	// Methods
	// Offset : 0x62a48c
	public Void .ctor(Uri uri, Boolean use_connect) { }
	// Offset : 0x62a4cc
	public override Int32 GetHashCode() { }
	// Offset : 0x62a528
	public override Boolean Equals(Object obj) { }
}

// Dll : System.dll
// Namespace: System.Net
[Serializable]
public class WebHeaderCollection : NameValueCollection, ISerializable
{
	// Fields
	private static readonly Hashtable restricted; // 0x0
	private static readonly Hashtable multiValue; // 0x8
	private static readonly Dictionary`2 restricted_response; // 0x10
	private Boolean internallyCreated; // 0x68
	private static Boolean[] allowed_chars; // 0x18

	// Properties
	public override Int32 Count { get; }
	public override KeysCollection Keys { get; }

	// Methods
	// Offset : 0x623210
	public Void .ctor() { }
	// Offset : 0x62a62c
	protected Void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x624b80
	internal Void .ctor(Boolean internallyCreated) { }
	// Offset : 0x62a954
	private static Void .cctor() { }
	// Offset : 0x62bc5c
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x62bcbc
	public override Void Add(String name, String value) { }
	// Offset : 0x62bf70
	protected Void AddWithoutValidate(String headerName, String headerValue) { }
	// Offset : 0x62bdc0
	public static Boolean IsRestricted(String headerName) { }
	// Offset : 0x62c348
	public override Void OnDeserialization(Object sender) { }
	// Offset : 0x62c34c
	public override String ToString() { }
	// Offset : 0x62c50c
	public override Void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x62c69c
	public override Int32 get_Count() { }
	// Offset : 0x62c6a0
	public override KeysCollection get_Keys() { }
	// Offset : 0x62c6a4
	public override String Get(Int32 index) { }
	// Offset : 0x62c6a8
	public override String GetKey(Int32 index) { }
	// Offset : 0x62c6ac
	public override IEnumerator GetEnumerator() { }
	// Offset : 0x62c260
	internal static Boolean IsHeaderValue(String value) { }
	// Offset : 0x62c144
	internal static Boolean IsHeaderName(String name) { }
}

// Dll : System.dll
// Namespace: System.Net
[Serializable]
public class WebProxy : ISerializable, IWebProxy
{
	// Fields
	private Uri address; // 0x10
	private Boolean bypassOnLocal; // 0x18
	private ArrayList bypassList; // 0x20
	private ICredentials credentials; // 0x28
	private Boolean useDefaultCredentials; // 0x30

	// Properties
	public Boolean UseDefaultCredentials { get; }

	// Methods
	// Offset : 0x62c6b0
	public Void .ctor() { }
	// Offset : 0x62c6c4
	public Void .ctor(Uri address, Boolean bypassOnLocal, String[] bypassList, ICredentials credentials) { }
	// Offset : 0x62c8ec
	protected Void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x62cb50
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x62cbb0
	public Boolean get_UseDefaultCredentials() { }
	// Offset : 0x62cbb8
	public Uri GetProxy(Uri destination) { }
	// Offset : 0x62cbe8
	public Boolean IsBypassed(Uri host) { }
	// Offset : 0x62d29c
	protected virtual Void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x62c76c
	private Void CheckBypassList() { }
}

// Dll : System.dll
// Namespace: System.Net
[Serializable]
public abstract class WebRequest : MarshalByRefObject, ISerializable
{
	// Fields
	private static HybridDictionary prefixes; // 0x0
	private static Boolean isDefaultWebProxySet; // 0x8
	private static IWebProxy defaultWebProxy; // 0x10
	private AuthenticationLevel authentication_level; // 0x18
	private static readonly Object lockobj; // 0x18

	// Properties
	public static IWebProxy DefaultWebProxy { get; }

	// Methods
	// Offset : 0x623200
	protected Void .ctor() { }
	// Offset : 0x62d39c
	protected Void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x62d3ac
	private static Void .cctor() { }
	// Offset : 0x62d624
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x62d4a8
	private static Void AddDynamicPrefix(String protocol, String implementor) { }
	// Offset : 0x62d734
	private static Exception GetMustImplement() { }
	// Offset : 0x6247a8
	public static IWebProxy get_DefaultWebProxy() { }
	// Offset : 0x62d79c
	private static IWebProxy GetDefaultWebProxy() { }
	// Offset : 0x62d7a4
	protected virtual Void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x62d68c
	internal static Void AddPrefix(String prefix, Type type) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum OpenFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const OpenFlags ReadOnly = 0; // 0x0
	public const OpenFlags ReadWrite = 1; // 0x0
	public const OpenFlags MaxAllowed = 2; // 0x0
	public const OpenFlags OpenExistingOnly = 4; // 0x0
	public const OpenFlags IncludeArchived = 8; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class PublicKey
{
	// Fields
	private AsymmetricAlgorithm _key; // 0x10
	private AsnEncodedData _keyValue; // 0x18
	private AsnEncodedData _params; // 0x20
	private Oid _oid; // 0x28
	private static Dictionary`2 <>f__switch$map9; // 0x0

	// Properties
	public AsnEncodedData EncodedKeyValue { get; }
	public AsnEncodedData EncodedParameters { get; }
	public AsymmetricAlgorithm Key { get; }
	public Oid Oid { get; }

	// Methods
	// Offset : 0x630900
	internal Void .ctor(X509Certificate certificate) { }
	// Offset : 0x630ec0
	public AsnEncodedData get_EncodedKeyValue() { }
	// Offset : 0x630ec8
	public AsnEncodedData get_EncodedParameters() { }
	// Offset : 0x630ed0
	public AsymmetricAlgorithm get_Key() { }
	// Offset : 0x631a28
	public Oid get_Oid() { }
	// Offset : 0x631a30
	private static Byte[] GetUnsignedBigInteger(Byte[] integer) { }
	// Offset : 0x631528
	internal static DSA DecodeDSA(Byte[] rawPublicKey, Byte[] rawParameters) { }
	// Offset : 0x631154
	internal static RSA DecodeRSA(Byte[] rawPublicKey) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum StoreLocation
{
	// Fields
	public Int32 value__; // 0x10
	public const StoreLocation CurrentUser = 1; // 0x0
	public const StoreLocation LocalMachine = 2; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum StoreName
{
	// Fields
	public Int32 value__; // 0x10
	public const StoreName AddressBook = 1; // 0x0
	public const StoreName AuthRoot = 2; // 0x0
	public const StoreName CertificateAuthority = 3; // 0x0
	public const StoreName Disallowed = 4; // 0x0
	public const StoreName My = 5; // 0x0
	public const StoreName Root = 6; // 0x0
	public const StoreName TrustedPeople = 7; // 0x0
	public const StoreName TrustedPublisher = 8; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X500DistinguishedName : AsnEncodedData
{
	// Fields
	private String name; // 0x20

	// Properties

	// Methods
	// Offset : 0x631ae8
	public Void .ctor(Byte[] encodedDistinguishedName) { }
	// Offset : 0x631cfc
	public String Decode(X500DistinguishedNameFlags flag) { }
	// Offset : 0x631e5c
	private static String GetSeparator(X500DistinguishedNameFlags flag) { }
	// Offset : 0x631c0c
	private Void DecodeRawData() { }
	// Offset : 0x631ed0
	private static String Canonize(String s) { }
	// Offset : 0x632118
	internal static Boolean AreEqual(X500DistinguishedName name1, X500DistinguishedName name2) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum X500DistinguishedNameFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const X500DistinguishedNameFlags None = 0; // 0x0
	public const X500DistinguishedNameFlags Reversed = 1; // 0x0
	public const X500DistinguishedNameFlags UseSemicolons = 16; // 0x0
	public const X500DistinguishedNameFlags DoNotUsePlusSign = 32; // 0x0
	public const X500DistinguishedNameFlags DoNotUseQuotes = 64; // 0x0
	public const X500DistinguishedNameFlags UseCommas = 128; // 0x0
	public const X500DistinguishedNameFlags UseNewLines = 256; // 0x0
	public const X500DistinguishedNameFlags UseUTF8Encoding = 4096; // 0x0
	public const X500DistinguishedNameFlags UseT61Encoding = 8192; // 0x0
	public const X500DistinguishedNameFlags ForceUTF8Encoding = 16384; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509BasicConstraintsExtension : X509Extension
{
	// Fields
	internal const String oid; // 0x0
	internal const String friendlyName; // 0x0
	private Boolean _certificateAuthority; // 0x21
	private Boolean _hasPathLengthConstraint; // 0x22
	private Int32 _pathLengthConstraint; // 0x24
	private AsnDecodeStatus _status; // 0x28

	// Properties
	public Boolean CertificateAuthority { get; }
	public Boolean HasPathLengthConstraint { get; }
	public Int32 PathLengthConstraint { get; }

	// Methods
	// Offset : 0x63233c
	public Void .ctor() { }
	// Offset : 0x62f010
	public Void .ctor(AsnEncodedData encodedBasicConstraints, Boolean critical) { }
	// Offset : 0x632608
	public Void .ctor(Boolean certificateAuthority, Boolean hasPathLengthConstraint, Int32 pathLengthConstraint, Boolean critical) { }
	// Offset : 0x6328c0
	public Boolean get_CertificateAuthority() { }
	// Offset : 0x632958
	public Boolean get_HasPathLengthConstraint() { }
	// Offset : 0x6329f0
	public Int32 get_PathLengthConstraint() { }
	// Offset : 0x632a88
	public override Void CopyFrom(AsnEncodedData asnEncodedData) { }
	// Offset : 0x6323e0
	internal AsnDecodeStatus Decode(Byte[] extension) { }
	// Offset : 0x632728
	internal Byte[] Encode() { }
	// Offset : 0x62f0d8
	internal override String ToString(Boolean multiLine) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public class X509Certificate2 : X509Certificate
{
	// Fields
	private Boolean _archived; // 0x38
	private X509ExtensionCollection _extensions; // 0x40
	private String _name; // 0x48
	private String _serial; // 0x50
	private PublicKey _publicKey; // 0x58
	private X500DistinguishedName issuer_name; // 0x60
	private X500DistinguishedName subject_name; // 0x68
	private Oid signature_algorithm; // 0x70
	private X509Certificate _cert; // 0x78
	private static String empty_error; // 0x0
	private static Byte[] commonName; // 0x8
	private static Byte[] email; // 0x10
	private static Byte[] signedData; // 0x18

	// Properties
	public X509ExtensionCollection Extensions { get; }
	public X500DistinguishedName IssuerName { get; }
	public DateTime NotAfter { get; }
	public DateTime NotBefore { get; }
	public AsymmetricAlgorithm PrivateKey { get; }
	public PublicKey PublicKey { get; }
	public String SerialNumber { get; }
	public Oid SignatureAlgorithm { get; }
	public X500DistinguishedName SubjectName { get; }
	public String Thumbprint { get; }
	public Int32 Version { get; }
	internal X509Certificate MonoCertificate { get; }

	// Methods
	// Offset : 0x632d68
	public Void .ctor(Byte[] rawData) { }
	// Offset : 0x632e24
	private static Void .cctor() { }
	// Offset : 0x632f7c
	public X509ExtensionCollection get_Extensions() { }
	// Offset : 0x6337b4
	public X500DistinguishedName get_IssuerName() { }
	// Offset : 0x6338dc
	public DateTime get_NotAfter() { }
	// Offset : 0x6339d4
	public DateTime get_NotBefore() { }
	// Offset : 0x633acc
	public AsymmetricAlgorithm get_PrivateKey() { }
	// Offset : 0x633ee0
	public PublicKey get_PublicKey() { }
	// Offset : 0x634078
	public String get_SerialNumber() { }
	// Offset : 0x634244
	public Oid get_SignatureAlgorithm() { }
	// Offset : 0x63435c
	public X500DistinguishedName get_SubjectName() { }
	// Offset : 0x634484
	public String get_Thumbprint() { }
	// Offset : 0x63448c
	public Int32 get_Version() { }
	// Offset : 0x634540
	public String GetNameInfo(X509NameType nameType, Boolean forIssuer) { }
	// Offset : 0x634868
	private ASN1 Find(Byte[] oid, ASN1 dn) { }
	// Offset : 0x6349a0
	private String GetValueAsString(ASN1 pair) { }
	// Offset : 0x634c30
	private Void ImportPkcs12(Byte[] rawData, String password) { }
	// Offset : 0x634f24
	public override Void Import(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) { }
	// Offset : 0x6351a0
	public override Void Reset() { }
	// Offset : 0x635230
	public override String ToString() { }
	// Offset : 0x63529c
	public override String ToString(Boolean verbose) { }
	// Offset : 0x635868
	private static Void AppendBuffer(StringBuilder sb, Byte[] buffer) { }
	// Offset : 0x63596c
	public Boolean Verify() { }
	// Offset : 0x636144
	internal X509Certificate get_MonoCertificate() { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public class X509Certificate2Collection : X509CertificateCollection
{
	// Fields

	// Properties
	public X509Certificate2 Item { get; }

	// Methods
	// Offset : 0x63614c
	public Void .ctor() { }
	// Offset : 0x63615c
	public Void .ctor(X509Certificate2Collection certificates) { }
	// Offset : 0x636264
	public X509Certificate2 get_Item(Int32 index) { }
	// Offset : 0x636428
	public Int32 Add(X509Certificate2 certificate) { }
	// Offset : 0x63618c
	public Void AddRange(X509Certificate2Collection certificates) { }
	// Offset : 0x636500
	public Boolean Contains(X509Certificate2 certificate) { }
	// Offset : 0x63695c
	public X509Certificate2Collection Find(X509FindType findType, Object findValue, Boolean validOnly) { }
	// Offset : 0x638084
	public X509Certificate2Enumerator GetEnumerator() { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509Certificate2Enumerator : IEnumerator
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public X509Certificate2 Current { get; }

	// Methods
	// Offset : 0x6380e4
	internal Void .ctor(X509Certificate2Collection collection) { }
	// Offset : 0x6381e0
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x6382c8
	private Boolean System.Collections.IEnumerator.MoveNext() { }
	// Offset : 0x6383b4
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x6384a0
	public X509Certificate2 get_Current() { }
	// Offset : 0x63860c
	public Boolean MoveNext() { }
	// Offset : 0x6386f8
	public Void Reset() { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
[Serializable]
public class X509CertificateCollection : CollectionBase
{
	// Fields

	// Properties
	public X509Certificate Item { get; }

	// Methods
	// Offset : 0x636154
	public Void .ctor() { }
	// Offset : 0x6387e4
	public Void .ctor(X509Certificate[] value) { }
	// Offset : 0x638944
	public X509Certificate get_Item(Int32 index) { }
	// Offset : 0x638814
	public Void AddRange(X509Certificate[] value) { }
	// Offset : 0x638a58
	public X509CertificateEnumerator GetEnumerator() { }
	// Offset : 0x638bb4
	public override Int32 GetHashCode() { }
}

// Dll : System.dll
// Namespace: 
public class X509CertificateEnumerator : IEnumerator
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public X509Certificate Current { get; }

	// Methods
	// Offset : 0x638ab8
	public Void .ctor(X509CertificateCollection mappings) { }
	// Offset : 0x638c04
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x638cec
	private Boolean System.Collections.IEnumerator.MoveNext() { }
	// Offset : 0x638dd8
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x638ec4
	public X509Certificate get_Current() { }
	// Offset : 0x639030
	public Boolean MoveNext() { }
	// Offset : 0x63911c
	public Void Reset() { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public class X509Chain
{
	// Fields
	private StoreLocation location; // 0x10
	private X509ChainElementCollection elements; // 0x18
	private X509ChainPolicy policy; // 0x20
	private X509ChainStatus[] status; // 0x28
	private static X509ChainStatus[] Empty; // 0x0
	private Int32 max_path_length; // 0x30
	private X500DistinguishedName working_issuer_name; // 0x38
	private AsymmetricAlgorithm working_public_key; // 0x40
	private X509ChainElement bce_restriction; // 0x48
	private X509Store roots; // 0x50
	private X509Store cas; // 0x58
	private X509Certificate2Collection collection; // 0x60
	private static Dictionary`2 <>f__switch$mapB; // 0x8
	private static Dictionary`2 <>f__switch$mapC; // 0x10
	private static Dictionary`2 <>f__switch$mapD; // 0x18

	// Properties
	public X509ChainPolicy ChainPolicy { get; }
	private X509Store Roots { get; }
	private X509Store CertificateAuthorities { get; }
	private X509Certificate2Collection CertificateCollection { get; }

	// Methods
	// Offset : 0x639208
	public Void .ctor() { }
	// Offset : 0x639210
	public Void .ctor(Boolean useMachineContext) { }
	// Offset : 0x63935c
	private static Void .cctor() { }
	// Offset : 0x6393c0
	public X509ChainPolicy get_ChainPolicy() { }
	// Offset : 0x635aec
	public Boolean Build(X509Certificate2 certificate) { }
	// Offset : 0x6393c8
	public Void Reset() { }
	// Offset : 0x639ab8
	private X509Store get_Roots() { }
	// Offset : 0x639b54
	private X509Store get_CertificateAuthorities() { }
	// Offset : 0x639bf0
	private X509Certificate2Collection get_CertificateCollection() { }
	// Offset : 0x639460
	private X509ChainStatusFlags BuildChainFrom(X509Certificate2 certificate) { }
	// Offset : 0x63a344
	private X509Certificate2 SelectBestFromCollection(X509Certificate2 child, X509Certificate2Collection c) { }
	// Offset : 0x639e30
	private X509Certificate2 FindParent(X509Certificate2 certificate) { }
	// Offset : 0x63a0f8
	private Boolean IsChainComplete(X509Certificate2 certificate) { }
	// Offset : 0x63a738
	private Boolean IsSelfIssued(X509Certificate2 certificate) { }
	// Offset : 0x6395b8
	private Void ValidateChain(X509ChainStatusFlags flag) { }
	// Offset : 0x63a7f8
	private Void Process(Int32 n) { }
	// Offset : 0x63ae34
	private Void PrepareForNextCertificate(Int32 n) { }
	// Offset : 0x63b37c
	private Void WrapUp() { }
	// Offset : 0x63b48c
	private Void ProcessCertificateExtensions(X509ChainElement element) { }
	// Offset : 0x63b430
	private Boolean IsSignedWith(X509Certificate2 signed, AsymmetricAlgorithm pubkey) { }
	// Offset : 0x63a61c
	private String GetSubjectKeyIdentifier(X509Certificate2 certificate) { }
	// Offset : 0x63a58c
	private String GetAuthorityKeyIdentifier(X509Certificate2 certificate) { }
	// Offset : 0x63bb2c
	private String GetAuthorityKeyIdentifier(X509Crl crl) { }
	// Offset : 0x63b9b0
	private String GetAuthorityKeyIdentifier(X509Extension ext) { }
	// Offset : 0x63b138
	private Void CheckRevocationOnChain(X509ChainStatusFlags flag) { }
	// Offset : 0x63bbbc
	private X509ChainStatusFlags CheckRevocation(X509Certificate2 certificate, Int32 ca, Boolean online) { }
	// Offset : 0x63bca0
	private X509ChainStatusFlags CheckRevocation(X509Certificate2 certificate, X509Certificate2 ca_cert, Boolean online) { }
	// Offset : 0x63bf1c
	private X509Crl FindCrl(X509Certificate2 caCertificate) { }
	// Offset : 0x63cdc8
	private Boolean ProcessCrlExtensions(X509Crl crl) { }
	// Offset : 0x63c8a4
	private Boolean ProcessCrlEntryExtensions(X509CrlEntry entry) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public class X509ChainElement
{
	// Fields
	private X509Certificate2 certificate; // 0x10
	private X509ChainStatus[] status; // 0x18
	private String info; // 0x20
	private X509ChainStatusFlags compressed_status_flags; // 0x28

	// Properties
	public X509Certificate2 Certificate { get; }
	public X509ChainStatus[] ChainElementStatus { get; }
	internal X509ChainStatusFlags StatusFlags { get; set; }

	// Methods
	// Offset : 0x63d318
	internal Void .ctor(X509Certificate2 certificate) { }
	// Offset : 0x63a7f0
	public X509Certificate2 get_Certificate() { }
	// Offset : 0x6398e8
	public X509ChainStatus[] get_ChainElementStatus() { }
	// Offset : 0x63a334
	internal X509ChainStatusFlags get_StatusFlags() { }
	// Offset : 0x63a33c
	internal Void set_StatusFlags(X509ChainStatusFlags value) { }
	// Offset : 0x63d3a4
	private Int32 Count(X509ChainStatusFlags flags) { }
	// Offset : 0x63d3c8
	private Void Set(X509ChainStatus[] status, ref Int32 position, X509ChainStatusFlags flags, X509ChainStatusFlags mask) { }
	// Offset : 0x63abd0
	internal Void UncompressFlags() { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainElementCollection : ICollection, IEnumerable
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public X509ChainElement Item { get; }
	public Object SyncRoot { get; }

	// Methods
	// Offset : 0x6392c8
	internal Void .ctor() { }
	// Offset : 0x63d624
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x63d68c
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x639a18
	public Int32 get_Count() { }
	// Offset : 0x63d7ec
	public Boolean get_IsSynchronized() { }
	// Offset : 0x63a228
	public X509ChainElement get_Item(Int32 index) { }
	// Offset : 0x63d83c
	public Object get_SyncRoot() { }
	// Offset : 0x639718
	public X509ChainElementEnumerator GetEnumerator() { }
	// Offset : 0x639d8c
	internal Void Add(X509Certificate2 certificate) { }
	// Offset : 0x639a68
	internal Void Clear() { }
	// Offset : 0x639f68
	internal Boolean Contains(X509Certificate2 certificate) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainElementEnumerator : IEnumerator
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public X509ChainElement Current { get; }

	// Methods
	// Offset : 0x63d6f0
	internal Void .ctor(IEnumerable enumerable) { }
	// Offset : 0x63d88c
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x63977c
	public X509ChainElement get_Current() { }
	// Offset : 0x6398f8
	public Boolean MoveNext() { }
	// Offset : 0x63d974
	public Void Reset() { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ChainPolicy
{
	// Fields
	private OidCollection apps; // 0x10
	private OidCollection cert; // 0x18
	private X509Certificate2Collection store; // 0x20
	private X509RevocationFlag rflag; // 0x28
	private X509RevocationMode mode; // 0x2c
	private TimeSpan timeout; // 0x30
	private X509VerificationFlags vflags; // 0x38
	private DateTime vtime; // 0x40

	// Properties
	public X509Certificate2Collection ExtraStore { get; }
	public X509RevocationFlag RevocationFlag { get; }
	public X509RevocationMode RevocationMode { get; }
	public X509VerificationFlags VerificationFlags { get; }
	public DateTime VerificationTime { get; }

	// Methods
	// Offset : 0x639334
	public Void .ctor() { }
	// Offset : 0x639d84
	public X509Certificate2Collection get_ExtraStore() { }
	// Offset : 0x63bbb4
	public X509RevocationFlag get_RevocationFlag() { }
	// Offset : 0x63bbac
	public X509RevocationMode get_RevocationMode() { }
	// Offset : 0x639a10
	public X509VerificationFlags get_VerificationFlags() { }
	// Offset : 0x63a580
	public DateTime get_VerificationTime() { }
	// Offset : 0x63da60
	public Void Reset() { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public struct X509ChainStatus
{
	// Fields
	private X509ChainStatusFlags status; // 0x10
	private String info; // 0x18

	// Properties
	public X509ChainStatusFlags Status { get; set; }
	public String StatusInformation { set; }

	// Methods
	// Offset : 0x2ce500
	internal Void .ctor(X509ChainStatusFlags flag) { }
	// Offset : 0x2ce52c
	public X509ChainStatusFlags get_Status() { }
	// Offset : 0x2ce534
	public Void set_Status(X509ChainStatusFlags value) { }
	// Offset : 0x2ce53c
	public Void set_StatusInformation(String value) { }
	// Offset : 0x63d478
	internal static String GetInformation(X509ChainStatusFlags flags) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum X509ChainStatusFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const X509ChainStatusFlags NoError = 0; // 0x0
	public const X509ChainStatusFlags NotTimeValid = 1; // 0x0
	public const X509ChainStatusFlags NotTimeNested = 2; // 0x0
	public const X509ChainStatusFlags Revoked = 4; // 0x0
	public const X509ChainStatusFlags NotSignatureValid = 8; // 0x0
	public const X509ChainStatusFlags NotValidForUsage = 16; // 0x0
	public const X509ChainStatusFlags UntrustedRoot = 32; // 0x0
	public const X509ChainStatusFlags RevocationStatusUnknown = 64; // 0x0
	public const X509ChainStatusFlags Cyclic = 128; // 0x0
	public const X509ChainStatusFlags InvalidExtension = 256; // 0x0
	public const X509ChainStatusFlags InvalidPolicyConstraints = 512; // 0x0
	public const X509ChainStatusFlags InvalidBasicConstraints = 1024; // 0x0
	public const X509ChainStatusFlags InvalidNameConstraints = 2048; // 0x0
	public const X509ChainStatusFlags HasNotSupportedNameConstraint = 4096; // 0x0
	public const X509ChainStatusFlags HasNotDefinedNameConstraint = 8192; // 0x0
	public const X509ChainStatusFlags HasNotPermittedNameConstraint = 16384; // 0x0
	public const X509ChainStatusFlags HasExcludedNameConstraint = 32768; // 0x0
	public const X509ChainStatusFlags PartialChain = 65536; // 0x0
	public const X509ChainStatusFlags CtlNotTimeValid = 131072; // 0x0
	public const X509ChainStatusFlags CtlNotSignatureValid = 262144; // 0x0
	public const X509ChainStatusFlags CtlNotValidForUsage = 524288; // 0x0
	public const X509ChainStatusFlags OfflineRevocation = 16777216; // 0x0
	public const X509ChainStatusFlags NoIssuanceChainPolicy = 33554432; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509EnhancedKeyUsageExtension : X509Extension
{
	// Fields
	private OidCollection _enhKeyUsage; // 0x28
	private AsnDecodeStatus _status; // 0x30
	private static Dictionary`2 <>f__switch$mapE; // 0x0

	// Properties

	// Methods
	// Offset : 0x62f3bc
	public Void .ctor(AsnEncodedData encodedEnhancedKeyUsages, Boolean critical) { }
	// Offset : 0x63ddc0
	public override Void CopyFrom(AsnEncodedData asnEncodedData) { }
	// Offset : 0x63db60
	internal AsnDecodeStatus Decode(Byte[] extension) { }
	// Offset : 0x62f484
	internal override String ToString(Boolean multiLine) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public class X509Extension : AsnEncodedData
{
	// Fields
	private Boolean _critical; // 0x20

	// Properties
	public Boolean Critical { get; set; }

	// Methods
	// Offset : 0x6323cc
	protected Void .ctor() { }
	// Offset : 0x63df54
	public Void .ctor(String oid, Byte[] rawData, Boolean critical) { }
	// Offset : 0x632c1c
	public Boolean get_Critical() { }
	// Offset : 0x6323d4
	public Void set_Critical(Boolean value) { }
	// Offset : 0x63df80
	public override Void CopyFrom(AsnEncodedData asnEncodedData) { }
	// Offset : 0x632c24
	internal String FormatUnkownData(Byte[] data) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ExtensionCollection : ICollection, IEnumerable
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public Object SyncRoot { get; }
	public X509Extension Item { get; }

	// Methods
	// Offset : 0x633060
	internal Void .ctor(X509Certificate cert) { }
	// Offset : 0x63e098
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x63e1d0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x637f9c
	public Int32 get_Count() { }
	// Offset : 0x63e298
	public Boolean get_IsSynchronized() { }
	// Offset : 0x63e2e8
	public Object get_SyncRoot() { }
	// Offset : 0x637b08
	public X509Extension get_Item(String oid) { }
	// Offset : 0x63b6f4
	public X509ExtensionEnumerator GetEnumerator() { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509ExtensionEnumerator : IEnumerator
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public X509Extension Current { get; }

	// Methods
	// Offset : 0x63e234
	internal Void .ctor(ArrayList list) { }
	// Offset : 0x63e2ec
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x63b758
	public X509Extension get_Current() { }
	// Offset : 0x63b8c4
	public Boolean MoveNext() { }
	// Offset : 0x63e3d4
	public Void Reset() { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum X509FindType
{
	// Fields
	public Int32 value__; // 0x10
	public const X509FindType FindByThumbprint = 0; // 0x0
	public const X509FindType FindBySubjectName = 1; // 0x0
	public const X509FindType FindBySubjectDistinguishedName = 2; // 0x0
	public const X509FindType FindByIssuerName = 3; // 0x0
	public const X509FindType FindByIssuerDistinguishedName = 4; // 0x0
	public const X509FindType FindBySerialNumber = 5; // 0x0
	public const X509FindType FindByTimeValid = 6; // 0x0
	public const X509FindType FindByTimeNotYetValid = 7; // 0x0
	public const X509FindType FindByTimeExpired = 8; // 0x0
	public const X509FindType FindByTemplateName = 9; // 0x0
	public const X509FindType FindByApplicationPolicy = 10; // 0x0
	public const X509FindType FindByCertificatePolicy = 11; // 0x0
	public const X509FindType FindByExtension = 12; // 0x0
	public const X509FindType FindByKeyUsage = 13; // 0x0
	public const X509FindType FindBySubjectKeyIdentifier = 14; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509KeyUsageExtension : X509Extension
{
	// Fields
	internal const String oid; // 0x0
	internal const String friendlyName; // 0x0
	internal const X509KeyUsageFlags all; // 0x0
	private X509KeyUsageFlags _keyUsages; // 0x24
	private AsnDecodeStatus _status; // 0x28

	// Properties
	public X509KeyUsageFlags KeyUsages { get; }

	// Methods
	// Offset : 0x63e4c0
	public Void .ctor() { }
	// Offset : 0x62f878
	public Void .ctor(AsnEncodedData encodedKeyUsage, Boolean critical) { }
	// Offset : 0x63e744
	public Void .ctor(X509KeyUsageFlags keyUsages, Boolean critical) { }
	// Offset : 0x637fec
	public X509KeyUsageFlags get_KeyUsages() { }
	// Offset : 0x63ea0c
	public override Void CopyFrom(AsnEncodedData encodedData) { }
	// Offset : 0x63e80c
	internal X509KeyUsageFlags GetValidFlags(X509KeyUsageFlags flags) { }
	// Offset : 0x63e550
	internal AsnDecodeStatus Decode(Byte[] extension) { }
	// Offset : 0x63e81c
	internal Byte[] Encode() { }
	// Offset : 0x62f940
	internal override String ToString(Boolean multiLine) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum X509KeyUsageFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const X509KeyUsageFlags None = 0; // 0x0
	public const X509KeyUsageFlags EncipherOnly = 1; // 0x0
	public const X509KeyUsageFlags CrlSign = 2; // 0x0
	public const X509KeyUsageFlags KeyCertSign = 4; // 0x0
	public const X509KeyUsageFlags KeyAgreement = 8; // 0x0
	public const X509KeyUsageFlags DataEncipherment = 16; // 0x0
	public const X509KeyUsageFlags KeyEncipherment = 32; // 0x0
	public const X509KeyUsageFlags NonRepudiation = 64; // 0x0
	public const X509KeyUsageFlags DigitalSignature = 128; // 0x0
	public const X509KeyUsageFlags DecipherOnly = 32768; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum X509NameType
{
	// Fields
	public Int32 value__; // 0x10
	public const X509NameType SimpleName = 0; // 0x0
	public const X509NameType EmailName = 1; // 0x0
	public const X509NameType UpnName = 2; // 0x0
	public const X509NameType DnsName = 3; // 0x0
	public const X509NameType DnsFromAlternativeName = 4; // 0x0
	public const X509NameType UrlName = 5; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum X509RevocationFlag
{
	// Fields
	public Int32 value__; // 0x10
	public const X509RevocationFlag EndCertificateOnly = 0; // 0x0
	public const X509RevocationFlag EntireChain = 1; // 0x0
	public const X509RevocationFlag ExcludeRoot = 2; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum X509RevocationMode
{
	// Fields
	public Int32 value__; // 0x10
	public const X509RevocationMode NoCheck = 0; // 0x0
	public const X509RevocationMode Online = 1; // 0x0
	public const X509RevocationMode Offline = 2; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509Store
{
	// Fields
	private String _name; // 0x10
	private StoreLocation _location; // 0x18
	private X509Certificate2Collection list; // 0x20
	private OpenFlags _flags; // 0x28
	private X509Store store; // 0x30
	private static Dictionary`2 <>f__switch$mapF; // 0x0

	// Properties
	public X509Certificate2Collection Certificates { get; }
	private X509Stores Factory { get; }
	internal X509Store Store { get; }

	// Methods
	// Offset : 0x77d2a8
	public Void .ctor(StoreName storeName, StoreLocation storeLocation) { }
	// Offset : 0x77d3f4
	public X509Certificate2Collection get_Certificates() { }
	// Offset : 0x77d47c
	private X509Stores get_Factory() { }
	// Offset : 0x77d498
	internal X509Store get_Store() { }
	// Offset : 0x77d4a0
	public Void Close() { }
	// Offset : 0x77d4bc
	public Void Open(OpenFlags flags) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public sealed class X509SubjectKeyIdentifierExtension : X509Extension
{
	// Fields
	internal const String oid; // 0x0
	internal const String friendlyName; // 0x0
	private Byte[] _subjectKeyIdentifier; // 0x28
	private String _ski; // 0x30
	private AsnDecodeStatus _status; // 0x38

	// Properties
	public String SubjectKeyIdentifier { get; }

	// Methods
	// Offset : 0x77d914
	public Void .ctor() { }
	// Offset : 0x77d998
	public Void .ctor(AsnEncodedData encodedSubjectKeyIdentifier, Boolean critical) { }
	// Offset : 0x77dc10
	public Void .ctor(Byte[] subjectKeyIdentifier, Boolean critical) { }
	// Offset : 0x77de6c
	public Void .ctor(String subjectKeyIdentifier, Boolean critical) { }
	// Offset : 0x77e0d8
	public Void .ctor(PublicKey key, Boolean critical) { }
	// Offset : 0x77e0e4
	public Void .ctor(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, Boolean critical) { }
	// Offset : 0x77e578
	public String get_SubjectKeyIdentifier() { }
	// Offset : 0x77e628
	public override Void CopyFrom(AsnEncodedData encodedData) { }
	// Offset : 0x77e7f4
	internal static Byte FromHexChar(Char c) { }
	// Offset : 0x77e848
	internal static Byte FromHexChars(Char c1, Char c2) { }
	// Offset : 0x77dfb8
	internal static Byte[] FromHex(String hex) { }
	// Offset : 0x77da74
	internal AsnDecodeStatus Decode(Byte[] extension) { }
	// Offset : 0x77ddd4
	internal Byte[] Encode() { }
	// Offset : 0x77e8fc
	internal override String ToString(Boolean multiLine) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum X509SubjectKeyIdentifierHashAlgorithm
{
	// Fields
	public Int32 value__; // 0x10
	public const X509SubjectKeyIdentifierHashAlgorithm Sha1 = 0; // 0x0
	public const X509SubjectKeyIdentifierHashAlgorithm ShortSha1 = 1; // 0x0
	public const X509SubjectKeyIdentifierHashAlgorithm CapiSha1 = 2; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography.X509Certificates
public enum X509VerificationFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const X509VerificationFlags NoFlag = 0; // 0x0
	public const X509VerificationFlags IgnoreNotTimeValid = 1; // 0x0
	public const X509VerificationFlags IgnoreCtlNotTimeValid = 2; // 0x0
	public const X509VerificationFlags IgnoreNotTimeNested = 4; // 0x0
	public const X509VerificationFlags IgnoreInvalidBasicConstraints = 8; // 0x0
	public const X509VerificationFlags AllowUnknownCertificateAuthority = 16; // 0x0
	public const X509VerificationFlags IgnoreWrongUsage = 32; // 0x0
	public const X509VerificationFlags IgnoreInvalidName = 64; // 0x0
	public const X509VerificationFlags IgnoreInvalidPolicy = 128; // 0x0
	public const X509VerificationFlags IgnoreEndRevocationUnknown = 256; // 0x0
	public const X509VerificationFlags IgnoreCtlSignerRevocationUnknown = 512; // 0x0
	public const X509VerificationFlags IgnoreCertificateAuthorityRevocationUnknown = 1024; // 0x0
	public const X509VerificationFlags IgnoreRootRevocationUnknown = 2048; // 0x0
	public const X509VerificationFlags AllFlags = 4095; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography
internal enum AsnDecodeStatus
{
	// Fields
	public Int32 value__; // 0x10
	public const AsnDecodeStatus NotDecoded = 4294967295; // 0x0
	public const AsnDecodeStatus Ok = 0; // 0x0
	public const AsnDecodeStatus BadAsn = 1; // 0x0
	public const AsnDecodeStatus BadTag = 2; // 0x0
	public const AsnDecodeStatus BadLength = 3; // 0x0
	public const AsnDecodeStatus InformationNotAvailable = 4; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Security.Cryptography
public class AsnEncodedData
{
	// Fields
	internal Oid _oid; // 0x10
	internal Byte[] _raw; // 0x18
	private static Dictionary`2 <>f__switch$mapA; // 0x0

	// Properties
	public Oid Oid { get; set; }
	public Byte[] RawData { get; set; }

	// Methods
	// Offset : 0x62d810
	protected Void .ctor() { }
	// Offset : 0x62d818
	public Void .ctor(String oid, Byte[] rawData) { }
	// Offset : 0x62da68
	public Void .ctor(Oid oid, Byte[] rawData) { }
	// Offset : 0x62db28
	public Oid get_Oid() { }
	// Offset : 0x62dab0
	public Void set_Oid(Oid value) { }
	// Offset : 0x62dbe0
	public Byte[] get_RawData() { }
	// Offset : 0x62d950
	public Void set_RawData(Byte[] value) { }
	// Offset : 0x62dbe8
	public virtual Void CopyFrom(AsnEncodedData asnEncodedData) { }
	// Offset : 0x62dce0
	internal virtual String ToString(Boolean multiLine) { }
	// Offset : 0x62eeb0
	internal String Default(Boolean multiLine) { }
	// Offset : 0x62dfc8
	internal String BasicConstraintsExtension(Boolean multiLine) { }
	// Offset : 0x62e0f4
	internal String EnhancedKeyUsageExtension(Boolean multiLine) { }
	// Offset : 0x62e220
	internal String KeyUsageExtension(Boolean multiLine) { }
	// Offset : 0x62e34c
	internal String SubjectKeyIdentifierExtension(Boolean multiLine) { }
	// Offset : 0x62e480
	internal String SubjectAltName(Boolean multiLine) { }
	// Offset : 0x62e950
	internal String NetscapeCertType(Boolean multiLine) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography
public sealed class Oid
{
	// Fields
	private String _value; // 0x10
	private String _name; // 0x18
	private static Dictionary`2 <>f__switch$map10; // 0x0

	// Properties
	public String FriendlyName { get; }
	public String Value { get; }

	// Methods
	// Offset : 0x62ffc4
	public Void .ctor() { }
	// Offset : 0x62d89c
	public Void .ctor(String oid) { }
	// Offset : 0x6303d8
	public Void .ctor(String value, String friendlyName) { }
	// Offset : 0x62db30
	public Void .ctor(Oid oid) { }
	// Offset : 0x630410
	public String get_FriendlyName() { }
	// Offset : 0x62dfc0
	public String get_Value() { }
	// Offset : 0x62ffcc
	private String GetName(String oid) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography
public sealed class OidCollection : ICollection, IEnumerable
{
	// Fields
	private ArrayList _list; // 0x10
	private Boolean _readOnly; // 0x18

	// Properties
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public Oid Item { get; }
	public Object SyncRoot { get; }

	// Methods
	// Offset : 0x630418
	public Void .ctor() { }
	// Offset : 0x630484
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x6304ec
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x63058c
	public Int32 get_Count() { }
	// Offset : 0x6305dc
	public Boolean get_IsSynchronized() { }
	// Offset : 0x63062c
	public Oid get_Item(Int32 index) { }
	// Offset : 0x63071c
	public Object get_SyncRoot() { }
	// Offset : 0x63076c
	public Int32 Add(Oid oid) { }
}

// Dll : System.dll
// Namespace: System.Security.Cryptography
public sealed class OidEnumerator : IEnumerator
{
	// Fields
	private OidCollection _collection; // 0x10
	private Int32 _position; // 0x18

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x630558
	internal Void .ctor(OidCollection collection) { }
	// Offset : 0x6307dc
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x630874
	public Boolean MoveNext() { }
	// Offset : 0x6308f4
	public Void Reset() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal abstract class BaseMachine : IMachine
{
	// Fields
	protected Boolean needs_groups_or_captures; // 0x10

	// Properties

	// Methods
	// Offset : 0x77ebe8
	protected Void .ctor() { }
	// Offset : 0x77ebf8
	public virtual Match Scan(Regex regex, String text, Int32 start, Int32 end) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
[Serializable]
public class Capture
{
	// Fields
	internal Int32 index; // 0x10
	internal Int32 length; // 0x14
	internal String text; // 0x18

	// Properties
	public Int32 Index { get; }
	public Int32 Length { get; }
	public String Value { get; }
	internal String Text { get; }

	// Methods
	// Offset : 0x77ec6c
	internal Void .ctor(String text) { }
	// Offset : 0x77ec98
	internal Void .ctor(String text, Int32 index, Int32 length) { }
	// Offset : 0x77ecd8
	public Int32 get_Index() { }
	// Offset : 0x77ece0
	public Int32 get_Length() { }
	// Offset : 0x77ece8
	public String get_Value() { }
	// Offset : 0x77ed70
	public override String ToString() { }
	// Offset : 0x77ed74
	internal String get_Text() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
[Serializable]
public class CaptureCollection : ICollection, IEnumerable
{
	// Fields
	private Capture[] list; // 0x10

	// Properties
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public Object SyncRoot { get; }

	// Methods
	// Offset : 0x77ed7c
	internal Void .ctor(Int32 n) { }
	// Offset : 0x77edec
	public Int32 get_Count() { }
	// Offset : 0x77ee18
	public Boolean get_IsSynchronized() { }
	// Offset : 0x77ee20
	internal Void SetValue(Capture cap, Int32 i) { }
	// Offset : 0x77eeb0
	public Object get_SyncRoot() { }
	// Offset : 0x77eeb8
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x77ef00
	public IEnumerator GetEnumerator() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
[Serializable]
public class Group : Capture
{
	// Fields
	internal static Group Fail; // 0x0
	private Boolean success; // 0x20
	private CaptureCollection captures; // 0x28

	// Properties
	public CaptureCollection Captures { get; }
	public Boolean Success { get; }

	// Methods
	// Offset : 0x7805f0
	internal Void .ctor(String text, Int32 index, Int32 length, Int32 n_caps) { }
	// Offset : 0x7806a4
	internal Void .ctor(String text, Int32 index, Int32 length) { }
	// Offset : 0x7806ec
	internal Void .ctor() { }
	// Offset : 0x78078c
	private static Void .cctor() { }
	// Offset : 0x7807ec
	public CaptureCollection get_Captures() { }
	// Offset : 0x7807f4
	public Boolean get_Success() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
[Serializable]
public class GroupCollection : ICollection, IEnumerable
{
	// Fields
	private Group[] list; // 0x10
	private Int32 gap; // 0x18

	// Properties
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public Group Item { get; }
	public Object SyncRoot { get; }

	// Methods
	// Offset : 0x7807fc
	internal Void .ctor(Int32 n, Int32 gap) { }
	// Offset : 0x780874
	public Int32 get_Count() { }
	// Offset : 0x7808a0
	public Boolean get_IsSynchronized() { }
	// Offset : 0x7808a8
	public Group get_Item(Int32 i) { }
	// Offset : 0x780b88
	internal Void SetValue(Group g, Int32 i) { }
	// Offset : 0x780c18
	public Object get_SyncRoot() { }
	// Offset : 0x780c20
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x780c68
	public IEnumerator GetEnumerator() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
[Serializable]
public class Match : Group
{
	// Fields
	private Regex regex; // 0x30
	private IMachine machine; // 0x38
	private Int32 text_length; // 0x40
	private GroupCollection groups; // 0x48
	private static Match empty; // 0x0

	// Properties
	public static Match Empty { get; }
	public virtual GroupCollection Groups { get; }
	internal Regex Regex { get; }

	// Methods
	// Offset : 0x786248
	private Void .ctor() { }
	// Offset : 0x784794
	internal Void .ctor(Regex regex, IMachine machine, String text, Int32 text_length, Int32 n_groups, Int32 index, Int32 length) { }
	// Offset : 0x784848
	internal Void .ctor(Regex regex, IMachine machine, String text, Int32 text_length, Int32 n_groups, Int32 index, Int32 length, Int32 n_caps) { }
	// Offset : 0x7862fc
	private static Void .cctor() { }
	// Offset : 0x780a74
	public static Match get_Empty() { }
	// Offset : 0x78635c
	public virtual GroupCollection get_Groups() { }
	// Offset : 0x786364
	public Match NextMatch() { }
	// Offset : 0x780adc
	internal Regex get_Regex() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
[Serializable]
public class MatchCollection : ICollection, IEnumerable
{
	// Fields
	private Match current; // 0x10
	private ArrayList list; // 0x18

	// Properties
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public virtual Match Item { get; }
	public Object SyncRoot { get; }
	private ICollection FullList { get; }

	// Methods
	// Offset : 0x786528
	internal Void .ctor(Match start) { }
	// Offset : 0x7865a4
	public Int32 get_Count() { }
	// Offset : 0x786728
	public Boolean get_IsSynchronized() { }
	// Offset : 0x786730
	public virtual Match get_Item(Int32 i) { }
	// Offset : 0x786a2c
	public Object get_SyncRoot() { }
	// Offset : 0x786a34
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x786b3c
	public IEnumerator GetEnumerator() { }
	// Offset : 0x7868e0
	private Boolean TryToGet(Int32 i) { }
	// Offset : 0x786690
	private ICollection get_FullList() { }
}

// Dll : System.dll
// Namespace: 
private class Enumerator : IEnumerator
{
	// Fields
	private Int32 index; // 0x10
	private MatchCollection coll; // 0x18

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x786c04
	internal Void .ctor(MatchCollection coll) { }
	// Offset : 0x786c38
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x786c44
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x786eb4
	private Boolean System.Collections.IEnumerator.MoveNext() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
[Serializable]
public class Regex : ISerializable
{
	// Fields
	private static FactoryCache cache; // 0x0
	private IMachineFactory machineFactory; // 0x10
	private IDictionary mapping; // 0x18
	private Int32 group_count; // 0x20
	private Int32 gap; // 0x24
	private String[] group_names; // 0x28
	private Int32[] group_numbers; // 0x30
	protected internal String pattern; // 0x38
	protected internal RegexOptions roptions; // 0x40

	// Properties
	public RegexOptions Options { get; }
	public Boolean RightToLeft { get; }
	internal Int32 Gap { get; }
	private Int32[] GroupNumbers { get; }

	// Methods
	// Offset : 0x7885f0
	protected Void .ctor() { }
	// Offset : 0x7885f8
	public Void .ctor(String pattern) { }
	// Offset : 0x788600
	public Void .ctor(String pattern, RegexOptions options) { }
	// Offset : 0x788ac4
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x788bbc
	private static Void .cctor() { }
	// Offset : 0x788c28
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x7886d8
	private static Void validate_options(RegexOptions options) { }
	// Offset : 0x788778
	private Void Init() { }
	// Offset : 0x788d84
	private Void InitNewRegex() { }
	// Offset : 0x7890dc
	private static IMachineFactory CreateMachineFactory(String pattern, RegexOptions options) { }
	// Offset : 0x788d7c
	public RegexOptions get_Options() { }
	// Offset : 0x78651c
	public Boolean get_RightToLeft() { }
	// Offset : 0x780ae4
	internal Int32 GetGroupIndex(Int32 number) { }
	// Offset : 0x78a184
	private Int32 default_startat(String input) { }
	// Offset : 0x78a1a4
	public Boolean IsMatch(String input) { }
	// Offset : 0x78a1ec
	public Boolean IsMatch(String input, Int32 startat) { }
	// Offset : 0x78a218
	public Match Match(String input, Int32 startat) { }
	// Offset : 0x78a4b4
	public MatchCollection Matches(String input) { }
	// Offset : 0x78a4fc
	public MatchCollection Matches(String input, Int32 startat) { }
	// Offset : 0x78a584
	public override String ToString() { }
	// Offset : 0x7862f4
	internal Int32 get_Gap() { }
	// Offset : 0x78a3cc
	private IMachine CreateMachine() { }
	// Offset : 0x789bd4
	private static String[] GetGroupNamesArray(Int32 groupCount, IDictionary mapping) { }
	// Offset : 0x78a020
	private Int32[] get_GroupNumbers() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
public enum RegexOptions
{
	// Fields
	public Int32 value__; // 0x10
	public const RegexOptions None = 0; // 0x0
	public const RegexOptions IgnoreCase = 1; // 0x0
	public const RegexOptions Multiline = 2; // 0x0
	public const RegexOptions ExplicitCapture = 4; // 0x0
	public const RegexOptions Singleline = 16; // 0x0
	public const RegexOptions IgnorePatternWhitespace = 32; // 0x0
	public const RegexOptions RightToLeft = 64; // 0x0
	public const RegexOptions ECMAScript = 256; // 0x0
	public const RegexOptions CultureInvariant = 512; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal enum OpCode
{
	// Fields
	public UInt16 value__; // 0x10
	public const OpCode False = 0; // 0x0
	public const OpCode True = 1; // 0x0
	public const OpCode Position = 2; // 0x0
	public const OpCode String = 3; // 0x0
	public const OpCode Reference = 4; // 0x0
	public const OpCode Character = 5; // 0x0
	public const OpCode Category = 6; // 0x0
	public const OpCode NotCategory = 7; // 0x0
	public const OpCode Range = 8; // 0x0
	public const OpCode Set = 9; // 0x0
	public const OpCode In = 10; // 0x0
	public const OpCode Open = 11; // 0x0
	public const OpCode Close = 12; // 0x0
	public const OpCode Balance = 13; // 0x0
	public const OpCode BalanceStart = 14; // 0x0
	public const OpCode IfDefined = 15; // 0x0
	public const OpCode Sub = 16; // 0x0
	public const OpCode Test = 17; // 0x0
	public const OpCode Branch = 18; // 0x0
	public const OpCode Jump = 19; // 0x0
	public const OpCode Repeat = 20; // 0x0
	public const OpCode Until = 21; // 0x0
	public const OpCode FastRepeat = 22; // 0x0
	public const OpCode Anchor = 23; // 0x0
	public const OpCode Info = 24; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal enum OpFlags
{
	// Fields
	public UInt16 value__; // 0x10
	public const OpFlags None = 0; // 0x0
	public const OpFlags Negate = 256; // 0x0
	public const OpFlags IgnoreCase = 512; // 0x0
	public const OpFlags RightToLeft = 1024; // 0x0
	public const OpFlags Lazy = 2048; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal enum Position
{
	// Fields
	public UInt16 value__; // 0x10
	public const Position Any = 0; // 0x0
	public const Position Start = 1; // 0x0
	public const Position StartOfString = 2; // 0x0
	public const Position StartOfLine = 3; // 0x0
	public const Position StartOfScan = 4; // 0x0
	public const Position End = 5; // 0x0
	public const Position EndOfString = 6; // 0x0
	public const Position EndOfLine = 7; // 0x0
	public const Position Boundary = 8; // 0x0
	public const Position NonBoundary = 9; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal interface IMachine
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Match Scan(Regex regex, String text, Int32 start, Int32 end) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal interface IMachineFactory
{
	// Fields

	// Properties
	public abstract IDictionary Mapping { get; set; }
	public abstract Int32 GroupCount { get; }
	public abstract Int32 Gap { get; set; }
	public abstract String[] NamesMapping { get; set; }

	// Methods
	// Offset : 0x
	public abstract IMachine NewInstance() { }
	// Offset : 0x
	public abstract IDictionary get_Mapping() { }
	// Offset : 0x
	public abstract Void set_Mapping(IDictionary value) { }
	// Offset : 0x
	public abstract Int32 get_GroupCount() { }
	// Offset : 0x
	public abstract Int32 get_Gap() { }
	// Offset : 0x
	public abstract Void set_Gap(Int32 value) { }
	// Offset : 0x
	public abstract String[] get_NamesMapping() { }
	// Offset : 0x
	public abstract Void set_NamesMapping(String[] value) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal class FactoryCache
{
	// Fields
	private Int32 capacity; // 0x10
	private Hashtable factories; // 0x18
	private MRUList mru_list; // 0x20

	// Properties

	// Methods
	// Offset : 0x77fac0
	public Void .ctor(Int32 capacity) { }
	// Offset : 0x77fb8c
	public Void Add(String pattern, RegexOptions options, IMachineFactory factory) { }
	// Offset : 0x77fd30
	private Void Cleanup() { }
	// Offset : 0x780098
	public IMachineFactory Lookup(String pattern, RegexOptions options) { }
}

// Dll : System.dll
// Namespace: 
private class Key
{
	// Fields
	public String pattern; // 0x10
	public RegexOptions options; // 0x18

	// Properties

	// Methods
	// Offset : 0x77fcf4
	public Void .ctor(String pattern, RegexOptions options) { }
	// Offset : 0x7802ac
	public override Int32 GetHashCode() { }
	// Offset : 0x7802ec
	public override Boolean Equals(Object o) { }
	// Offset : 0x7803b0
	public override String ToString() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal class MRUList
{
	// Fields
	private Node head; // 0x10
	private Node tail; // 0x18

	// Properties

	// Methods
	// Offset : 0x77fb64
	public Void .ctor() { }
	// Offset : 0x77fec4
	public Void Use(Object o) { }
	// Offset : 0x780060
	public Object Evict() { }
}

// Dll : System.dll
// Namespace: 
private class Node
{
	// Fields
	public Object value; // 0x10
	public Node previous; // 0x18
	public Node next; // 0x20

	// Properties

	// Methods
	// Offset : 0x78621c
	public Void .ctor(Object value) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal enum Category
{
	// Fields
	public UInt16 value__; // 0x10
	public const Category None = 0; // 0x0
	public const Category Any = 1; // 0x0
	public const Category AnySingleline = 2; // 0x0
	public const Category Word = 3; // 0x0
	public const Category Digit = 4; // 0x0
	public const Category WhiteSpace = 5; // 0x0
	public const Category EcmaAny = 6; // 0x0
	public const Category EcmaAnySingleline = 7; // 0x0
	public const Category EcmaWord = 8; // 0x0
	public const Category EcmaDigit = 9; // 0x0
	public const Category EcmaWhiteSpace = 10; // 0x0
	public const Category UnicodeL = 11; // 0x0
	public const Category UnicodeM = 12; // 0x0
	public const Category UnicodeN = 13; // 0x0
	public const Category UnicodeZ = 14; // 0x0
	public const Category UnicodeP = 15; // 0x0
	public const Category UnicodeS = 16; // 0x0
	public const Category UnicodeC = 17; // 0x0
	public const Category UnicodeLu = 18; // 0x0
	public const Category UnicodeLl = 19; // 0x0
	public const Category UnicodeLt = 20; // 0x0
	public const Category UnicodeLm = 21; // 0x0
	public const Category UnicodeLo = 22; // 0x0
	public const Category UnicodeMn = 23; // 0x0
	public const Category UnicodeMe = 24; // 0x0
	public const Category UnicodeMc = 25; // 0x0
	public const Category UnicodeNd = 26; // 0x0
	public const Category UnicodeNl = 27; // 0x0
	public const Category UnicodeNo = 28; // 0x0
	public const Category UnicodeZs = 29; // 0x0
	public const Category UnicodeZl = 30; // 0x0
	public const Category UnicodeZp = 31; // 0x0
	public const Category UnicodePd = 32; // 0x0
	public const Category UnicodePs = 33; // 0x0
	public const Category UnicodePi = 34; // 0x0
	public const Category UnicodePe = 35; // 0x0
	public const Category UnicodePf = 36; // 0x0
	public const Category UnicodePc = 37; // 0x0
	public const Category UnicodePo = 38; // 0x0
	public const Category UnicodeSm = 39; // 0x0
	public const Category UnicodeSc = 40; // 0x0
	public const Category UnicodeSk = 41; // 0x0
	public const Category UnicodeSo = 42; // 0x0
	public const Category UnicodeCc = 43; // 0x0
	public const Category UnicodeCf = 44; // 0x0
	public const Category UnicodeCo = 45; // 0x0
	public const Category UnicodeCs = 46; // 0x0
	public const Category UnicodeCn = 47; // 0x0
	public const Category UnicodeBasicLatin = 48; // 0x0
	public const Category UnicodeLatin1Supplement = 49; // 0x0
	public const Category UnicodeLatinExtendedA = 50; // 0x0
	public const Category UnicodeLatinExtendedB = 51; // 0x0
	public const Category UnicodeIPAExtensions = 52; // 0x0
	public const Category UnicodeSpacingModifierLetters = 53; // 0x0
	public const Category UnicodeCombiningDiacriticalMarks = 54; // 0x0
	public const Category UnicodeGreek = 55; // 0x0
	public const Category UnicodeCyrillic = 56; // 0x0
	public const Category UnicodeArmenian = 57; // 0x0
	public const Category UnicodeHebrew = 58; // 0x0
	public const Category UnicodeArabic = 59; // 0x0
	public const Category UnicodeSyriac = 60; // 0x0
	public const Category UnicodeThaana = 61; // 0x0
	public const Category UnicodeDevanagari = 62; // 0x0
	public const Category UnicodeBengali = 63; // 0x0
	public const Category UnicodeGurmukhi = 64; // 0x0
	public const Category UnicodeGujarati = 65; // 0x0
	public const Category UnicodeOriya = 66; // 0x0
	public const Category UnicodeTamil = 67; // 0x0
	public const Category UnicodeTelugu = 68; // 0x0
	public const Category UnicodeKannada = 69; // 0x0
	public const Category UnicodeMalayalam = 70; // 0x0
	public const Category UnicodeSinhala = 71; // 0x0
	public const Category UnicodeThai = 72; // 0x0
	public const Category UnicodeLao = 73; // 0x0
	public const Category UnicodeTibetan = 74; // 0x0
	public const Category UnicodeMyanmar = 75; // 0x0
	public const Category UnicodeGeorgian = 76; // 0x0
	public const Category UnicodeHangulJamo = 77; // 0x0
	public const Category UnicodeEthiopic = 78; // 0x0
	public const Category UnicodeCherokee = 79; // 0x0
	public const Category UnicodeUnifiedCanadianAboriginalSyllabics = 80; // 0x0
	public const Category UnicodeOgham = 81; // 0x0
	public const Category UnicodeRunic = 82; // 0x0
	public const Category UnicodeKhmer = 83; // 0x0
	public const Category UnicodeMongolian = 84; // 0x0
	public const Category UnicodeLatinExtendedAdditional = 85; // 0x0
	public const Category UnicodeGreekExtended = 86; // 0x0
	public const Category UnicodeGeneralPunctuation = 87; // 0x0
	public const Category UnicodeSuperscriptsandSubscripts = 88; // 0x0
	public const Category UnicodeCurrencySymbols = 89; // 0x0
	public const Category UnicodeCombiningMarksforSymbols = 90; // 0x0
	public const Category UnicodeLetterlikeSymbols = 91; // 0x0
	public const Category UnicodeNumberForms = 92; // 0x0
	public const Category UnicodeArrows = 93; // 0x0
	public const Category UnicodeMathematicalOperators = 94; // 0x0
	public const Category UnicodeMiscellaneousTechnical = 95; // 0x0
	public const Category UnicodeControlPictures = 96; // 0x0
	public const Category UnicodeOpticalCharacterRecognition = 97; // 0x0
	public const Category UnicodeEnclosedAlphanumerics = 98; // 0x0
	public const Category UnicodeBoxDrawing = 99; // 0x0
	public const Category UnicodeBlockElements = 100; // 0x0
	public const Category UnicodeGeometricShapes = 101; // 0x0
	public const Category UnicodeMiscellaneousSymbols = 102; // 0x0
	public const Category UnicodeDingbats = 103; // 0x0
	public const Category UnicodeBraillePatterns = 104; // 0x0
	public const Category UnicodeCJKRadicalsSupplement = 105; // 0x0
	public const Category UnicodeKangxiRadicals = 106; // 0x0
	public const Category UnicodeIdeographicDescriptionCharacters = 107; // 0x0
	public const Category UnicodeCJKSymbolsandPunctuation = 108; // 0x0
	public const Category UnicodeHiragana = 109; // 0x0
	public const Category UnicodeKatakana = 110; // 0x0
	public const Category UnicodeBopomofo = 111; // 0x0
	public const Category UnicodeHangulCompatibilityJamo = 112; // 0x0
	public const Category UnicodeKanbun = 113; // 0x0
	public const Category UnicodeBopomofoExtended = 114; // 0x0
	public const Category UnicodeEnclosedCJKLettersandMonths = 115; // 0x0
	public const Category UnicodeCJKCompatibility = 116; // 0x0
	public const Category UnicodeCJKUnifiedIdeographsExtensionA = 117; // 0x0
	public const Category UnicodeCJKUnifiedIdeographs = 118; // 0x0
	public const Category UnicodeYiSyllables = 119; // 0x0
	public const Category UnicodeYiRadicals = 120; // 0x0
	public const Category UnicodeHangulSyllables = 121; // 0x0
	public const Category UnicodeHighSurrogates = 122; // 0x0
	public const Category UnicodeHighPrivateUseSurrogates = 123; // 0x0
	public const Category UnicodeLowSurrogates = 124; // 0x0
	public const Category UnicodePrivateUse = 125; // 0x0
	public const Category UnicodeCJKCompatibilityIdeographs = 126; // 0x0
	public const Category UnicodeAlphabeticPresentationForms = 127; // 0x0
	public const Category UnicodeArabicPresentationFormsA = 128; // 0x0
	public const Category UnicodeCombiningHalfMarks = 129; // 0x0
	public const Category UnicodeCJKCompatibilityForms = 130; // 0x0
	public const Category UnicodeSmallFormVariants = 131; // 0x0
	public const Category UnicodeArabicPresentationFormsB = 132; // 0x0
	public const Category UnicodeSpecials = 133; // 0x0
	public const Category UnicodeHalfwidthandFullwidthForms = 134; // 0x0
	public const Category UnicodeOldItalic = 135; // 0x0
	public const Category UnicodeGothic = 136; // 0x0
	public const Category UnicodeDeseret = 137; // 0x0
	public const Category UnicodeByzantineMusicalSymbols = 138; // 0x0
	public const Category UnicodeMusicalSymbols = 139; // 0x0
	public const Category UnicodeMathematicalAlphanumericSymbols = 140; // 0x0
	public const Category UnicodeCJKUnifiedIdeographsExtensionB = 141; // 0x0
	public const Category UnicodeCJKCompatibilityIdeographsSupplement = 142; // 0x0
	public const Category UnicodeTags = 143; // 0x0
	public const Category LastValue = 144; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal class CategoryUtils
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x77ef30
	public static Category CategoryFromName(String name) { }
	// Offset : 0x77f100
	public static Boolean IsCategory(Category cat, Char c) { }
	// Offset : 0x77fa40
	private static Boolean IsCategory(UnicodeCategory uc, Char c) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal abstract class LinkRef
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x78604c
	protected Void .ctor() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal interface ICompiler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract IMachineFactory GetMachineFactory() { }
	// Offset : 0x
	public abstract Void EmitFalse() { }
	// Offset : 0x
	public abstract Void EmitTrue() { }
	// Offset : 0x
	public abstract Void EmitCharacter(Char c, Boolean negate, Boolean ignore, Boolean reverse) { }
	// Offset : 0x
	public abstract Void EmitCategory(Category cat, Boolean negate, Boolean reverse) { }
	// Offset : 0x
	public abstract Void EmitNotCategory(Category cat, Boolean negate, Boolean reverse) { }
	// Offset : 0x
	public abstract Void EmitRange(Char lo, Char hi, Boolean negate, Boolean ignore, Boolean reverse) { }
	// Offset : 0x
	public abstract Void EmitSet(Char lo, BitArray set, Boolean negate, Boolean ignore, Boolean reverse) { }
	// Offset : 0x
	public abstract Void EmitString(String str, Boolean ignore, Boolean reverse) { }
	// Offset : 0x
	public abstract Void EmitPosition(Position pos) { }
	// Offset : 0x
	public abstract Void EmitOpen(Int32 gid) { }
	// Offset : 0x
	public abstract Void EmitClose(Int32 gid) { }
	// Offset : 0x
	public abstract Void EmitBalanceStart(Int32 gid, Int32 balance, Boolean capture, LinkRef tail) { }
	// Offset : 0x
	public abstract Void EmitBalance() { }
	// Offset : 0x
	public abstract Void EmitReference(Int32 gid, Boolean ignore, Boolean reverse) { }
	// Offset : 0x
	public abstract Void EmitIfDefined(Int32 gid, LinkRef tail) { }
	// Offset : 0x
	public abstract Void EmitSub(LinkRef tail) { }
	// Offset : 0x
	public abstract Void EmitTest(LinkRef yes, LinkRef tail) { }
	// Offset : 0x
	public abstract Void EmitBranch(LinkRef next) { }
	// Offset : 0x
	public abstract Void EmitJump(LinkRef target) { }
	// Offset : 0x
	public abstract Void EmitRepeat(Int32 min, Int32 max, Boolean lazy, LinkRef until) { }
	// Offset : 0x
	public abstract Void EmitUntil(LinkRef repeat) { }
	// Offset : 0x
	public abstract Void EmitIn(LinkRef tail) { }
	// Offset : 0x
	public abstract Void EmitInfo(Int32 count, Int32 min, Int32 max) { }
	// Offset : 0x
	public abstract Void EmitFastRepeat(Int32 min, Int32 max, Boolean lazy, LinkRef tail) { }
	// Offset : 0x
	public abstract Void EmitAnchor(Boolean reverse, Int32 offset, LinkRef tail) { }
	// Offset : 0x
	public abstract Void EmitBranchEnd() { }
	// Offset : 0x
	public abstract Void EmitAlternationEnd() { }
	// Offset : 0x
	public abstract LinkRef NewLink() { }
	// Offset : 0x
	public abstract Void ResolveLink(LinkRef link) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal class InterpreterFactory : IMachineFactory
{
	// Fields
	private IDictionary mapping; // 0x10
	private UInt16[] pattern; // 0x18
	private String[] namesMapping; // 0x20
	private Int32 gap; // 0x28

	// Properties
	public Int32 GroupCount { get; }
	public Int32 Gap { get; set; }
	public IDictionary Mapping { get; set; }
	public String[] NamesMapping { get; set; }

	// Methods
	// Offset : 0x784954
	public Void .ctor(UInt16[] pattern) { }
	// Offset : 0x784980
	public IMachine NewInstance() { }
	// Offset : 0x7849e4
	public Int32 get_GroupCount() { }
	// Offset : 0x784a2c
	public Int32 get_Gap() { }
	// Offset : 0x784a34
	public Void set_Gap(Int32 value) { }
	// Offset : 0x784a3c
	public IDictionary get_Mapping() { }
	// Offset : 0x784a44
	public Void set_Mapping(IDictionary value) { }
	// Offset : 0x784a4c
	public String[] get_NamesMapping() { }
	// Offset : 0x784a54
	public Void set_NamesMapping(String[] value) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal class PatternCompiler : ICompiler
{
	// Fields
	private ArrayList pgm; // 0x10

	// Properties
	private Int32 CurrentAddress { get; }

	// Methods
	// Offset : 0x787050
	public Void .ctor() { }
	// Offset : 0x7870bc
	public static UInt16 EncodeOp(OpCode op, OpFlags flags) { }
	// Offset : 0x7870c8
	public IMachineFactory GetMachineFactory() { }
	// Offset : 0x7871c4
	public Void EmitFalse() { }
	// Offset : 0x7871d0
	public Void EmitTrue() { }
	// Offset : 0x7871d8
	private Void EmitCount(Int32 count) { }
	// Offset : 0x7872ac
	public Void EmitCharacter(Char c, Boolean negate, Boolean ignore, Boolean reverse) { }
	// Offset : 0x7873bc
	public Void EmitCategory(Category cat, Boolean negate, Boolean reverse) { }
	// Offset : 0x787404
	public Void EmitNotCategory(Category cat, Boolean negate, Boolean reverse) { }
	// Offset : 0x78744c
	public Void EmitRange(Char lo, Char hi, Boolean negate, Boolean ignore, Boolean reverse) { }
	// Offset : 0x7874b8
	public Void EmitSet(Char lo, BitArray set, Boolean negate, Boolean ignore, Boolean reverse) { }
	// Offset : 0x7875f0
	public Void EmitString(String str, Boolean ignore, Boolean reverse) { }
	// Offset : 0x7876c4
	public Void EmitPosition(Position pos) { }
	// Offset : 0x7876f4
	public Void EmitOpen(Int32 gid) { }
	// Offset : 0x787724
	public Void EmitClose(Int32 gid) { }
	// Offset : 0x787754
	public Void EmitBalanceStart(Int32 gid, Int32 balance, Boolean capture, LinkRef tail) { }
	// Offset : 0x7879e4
	public Void EmitBalance() { }
	// Offset : 0x7879ec
	public Void EmitReference(Int32 gid, Boolean ignore, Boolean reverse) { }
	// Offset : 0x787a34
	public Void EmitIfDefined(Int32 gid, LinkRef tail) { }
	// Offset : 0x787a88
	public Void EmitSub(LinkRef tail) { }
	// Offset : 0x787ac0
	public Void EmitTest(LinkRef yes, LinkRef tail) { }
	// Offset : 0x787b1c
	public Void EmitBranch(LinkRef next) { }
	// Offset : 0x787b54
	public Void EmitJump(LinkRef target) { }
	// Offset : 0x787b8c
	public Void EmitRepeat(Int32 min, Int32 max, Boolean lazy, LinkRef until) { }
	// Offset : 0x787c20
	public Void EmitUntil(LinkRef repeat) { }
	// Offset : 0x787de0
	public Void EmitFastRepeat(Int32 min, Int32 max, Boolean lazy, LinkRef tail) { }
	// Offset : 0x787e74
	public Void EmitIn(LinkRef tail) { }
	// Offset : 0x787eac
	public Void EmitAnchor(Boolean reverse, Int32 offset, LinkRef tail) { }
	// Offset : 0x787f10
	public Void EmitInfo(Int32 count, Int32 min, Int32 max) { }
	// Offset : 0x787f8c
	public LinkRef NewLink() { }
	// Offset : 0x787c48
	public Void ResolveLink(LinkRef lref) { }
	// Offset : 0x78804c
	public Void EmitBranchEnd() { }
	// Offset : 0x788050
	public Void EmitAlternationEnd() { }
	// Offset : 0x78737c
	private static OpFlags MakeFlags(Boolean negate, Boolean ignore, Boolean reverse, Boolean lazy) { }
	// Offset : 0x7871cc
	private Void Emit(OpCode op) { }
	// Offset : 0x7873b0
	private Void Emit(OpCode op, OpFlags flags) { }
	// Offset : 0x787204
	private Void Emit(UInt16 word) { }
	// Offset : 0x787ff0
	private Int32 get_CurrentAddress() { }
	// Offset : 0x7877e0
	private Void BeginLink(LinkRef lref) { }
	// Offset : 0x7878c4
	private Void EmitLink(LinkRef lref) { }
}

// Dll : System.dll
// Namespace: 
private class PatternLinkStack : LinkStack
{
	// Fields
	private Link link; // 0x18

	// Properties
	public Int32 BaseAddress { set; }
	public Int32 OffsetAddress { get; set; }

	// Methods
	// Offset : 0x787fe4
	public Void .ctor() { }
	// Offset : 0x788054
	public Void set_BaseAddress(Int32 value) { }
	// Offset : 0x787fe8
	public Int32 get_OffsetAddress() { }
	// Offset : 0x78805c
	public Void set_OffsetAddress(Int32 value) { }
	// Offset : 0x788040
	public Int32 GetOffset(Int32 target_addr) { }
	// Offset : 0x788064
	protected override Object GetCurrent() { }
	// Offset : 0x7880c8
	protected override Void SetCurrent(Object l) { }
}

// Dll : System.dll
// Namespace: 
private struct Link
{
	// Fields
	public Int32 base_addr; // 0x10
	public Int32 offset_addr; // 0x14

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal abstract class LinkStack : LinkRef
{
	// Fields
	private Stack stack; // 0x10

	// Properties

	// Methods
	// Offset : 0x786054
	public Void .ctor() { }
	// Offset : 0x7860c0
	public Void Push() { }
	// Offset : 0x786144
	public Boolean Pop() { }
	// Offset : 0x
	protected abstract Object GetCurrent() { }
	// Offset : 0x
	protected abstract Void SetCurrent(Object l) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal struct Mark
{
	// Fields
	public Int32 Start; // 0x10
	public Int32 End; // 0x14
	public Int32 Previous; // 0x18

	// Properties
	public Boolean IsDefined { get; }
	public Int32 Index { get; }
	public Int32 Length { get; }

	// Methods
	// Offset : 0x2d0788
	public Boolean get_IsDefined() { }
	// Offset : 0x2d07a8
	public Int32 get_Index() { }
	// Offset : 0x2d07b8
	public Int32 get_Length() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal class Interpreter : BaseMachine
{
	// Fields
	private UInt16[] program; // 0x18
	private Int32 program_start; // 0x20
	private String text; // 0x28
	private Int32 text_end; // 0x30
	private Int32 group_count; // 0x34
	private Int32 match_min; // 0x38
	private QuickSearch qs; // 0x40
	private Int32 scan_ptr; // 0x48
	private RepeatContext repeat; // 0x50
	private RepeatContext fast; // 0x58
	private IntStack stack; // 0x60
	private RepeatContext deep; // 0x70
	private Mark[] marks; // 0x78
	private Int32 mark_start; // 0x80
	private Int32 mark_end; // 0x84
	private Int32[] groups; // 0x88

	// Properties

	// Methods
	// Offset : 0x780c98
	public Void .ctor(UInt16[] program) { }
	// Offset : 0x780d48
	private Int32 ReadProgramCount(Int32 ptr) { }
	// Offset : 0x780dec
	public override Match Scan(Regex regex, String text, Int32 start, Int32 end) { }
	// Offset : 0x782a20
	private Void Reset() { }
	// Offset : 0x780eac
	private Boolean Eval(Mode mode, ref Int32 ref_ptr, Int32 pc) { }
	// Offset : 0x783650
	private Boolean EvalChar(Mode mode, ref Int32 ptr, ref Int32 pc, Boolean multi) { }
	// Offset : 0x782bd0
	private Boolean TryMatch(ref Int32 ref_ptr, Int32 pc) { }
	// Offset : 0x7832c8
	private Boolean IsPosition(Position pos, Int32 ptr) { }
	// Offset : 0x7842a0
	private Boolean IsWordChar(Char c) { }
	// Offset : 0x782d10
	private String GetString(Int32 pc) { }
	// Offset : 0x783a58
	private Void Open(Int32 gid, Int32 ptr) { }
	// Offset : 0x783bb0
	private Void Close(Int32 gid, Int32 ptr) { }
	// Offset : 0x783c48
	private Boolean Balance(Int32 gid, Int32 balance_gid, Boolean capture, Int32 ptr) { }
	// Offset : 0x783e38
	private Int32 Checkpoint() { }
	// Offset : 0x783e48
	private Void Backtrack(Int32 cp) { }
	// Offset : 0x782a44
	private Void ResetGroups() { }
	// Offset : 0x783538
	private Int32 GetLastDefined(Int32 gid) { }
	// Offset : 0x7842c8
	private Int32 CreateMark(Int32 previous) { }
	// Offset : 0x784454
	private Void GetGroupInfo(Int32 gid, out Int32 first_mark_index, out Int32 n_caps) { }
	// Offset : 0x784578
	private Void PopulateGroup(Group g, Int32 first_mark_index, Int32 n_caps) { }
	// Offset : 0x782650
	private Match GenerateMatch(Regex regex) { }
}

// Dll : System.dll
// Namespace: 
private struct IntStack
{
	// Fields
	private Int32[] values; // 0x10
	private Int32 count; // 0x18

	// Properties
	public Int32 Count { get; set; }

	// Methods
	// Offset : 0x2d0568
	public Int32 Pop() { }
	// Offset : 0x2d0570
	public Void Push(Int32 value) { }
	// Offset : 0x2d0578
	public Int32 get_Count() { }
	// Offset : 0x2d0580
	public Void set_Count(Int32 value) { }
}

// Dll : System.dll
// Namespace: 
private class RepeatContext
{
	// Fields
	private Int32 start; // 0x10
	private Int32 min; // 0x14
	private Int32 max; // 0x18
	private Boolean lazy; // 0x1c
	private Int32 expr_pc; // 0x20
	private RepeatContext previous; // 0x28
	private Int32 count; // 0x30

	// Properties
	public Int32 Count { get; set; }
	public Int32 Start { get; set; }
	public Boolean IsMinimum { get; }
	public Boolean IsMaximum { get; }
	public Boolean IsLazy { get; }
	public Int32 Expression { get; }
	public RepeatContext Previous { get; }

	// Methods
	// Offset : 0x783f5c
	public Void .ctor(RepeatContext previous, Int32 min, Int32 max, Boolean lazy, Int32 expr_pc) { }
	// Offset : 0x783fd4
	public Int32 get_Count() { }
	// Offset : 0x783fdc
	public Void set_Count(Int32 value) { }
	// Offset : 0x783fcc
	public Int32 get_Start() { }
	// Offset : 0x783fe4
	public Void set_Start(Int32 value) { }
	// Offset : 0x783ff4
	public Boolean get_IsMinimum() { }
	// Offset : 0x784010
	public Boolean get_IsMaximum() { }
	// Offset : 0x784008
	public Boolean get_IsLazy() { }
	// Offset : 0x783fec
	public Int32 get_Expression() { }
	// Offset : 0x783fc4
	public RepeatContext get_Previous() { }
}

// Dll : System.dll
// Namespace: 
private enum Mode
{
	// Fields
	public Int32 value__; // 0x10
	public const Mode Search = 0; // 0x0
	public const Mode Match = 1; // 0x0
	public const Mode Count = 2; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal struct Interval : IComparable
{
	// Fields
	public Int32 low; // 0x10
	public Int32 high; // 0x14
	public Boolean contiguous; // 0x18

	// Properties
	public static Interval Empty { get; }
	public Boolean IsDiscontiguous { get; }
	public Boolean IsSingleton { get; }
	public Boolean IsEmpty { get; }
	public Int32 Size { get; }

	// Methods
	// Offset : 0x2d05cc
	public Void .ctor(Int32 low, Int32 high) { }
	// Offset : 0x784a78
	public static Interval get_Empty() { }
	// Offset : 0x2d05e8
	public Boolean get_IsDiscontiguous() { }
	// Offset : 0x2d05f8
	public Boolean get_IsSingleton() { }
	// Offset : 0x2d0618
	public Boolean get_IsEmpty() { }
	// Offset : 0x2d0628
	public Int32 get_Size() { }
	// Offset : 0x2d0644
	public Boolean IsDisjoint(Interval i) { }
	// Offset : 0x2d067c
	public Boolean IsAdjacent(Interval i) { }
	// Offset : 0x2d06bc
	public Boolean Contains(Interval i) { }
	// Offset : 0x2d06fc
	public Boolean Contains(Int32 i) { }
	// Offset : 0x2d0720
	public Boolean Intersects(Interval i) { }
	// Offset : 0x2d072c
	public Void Merge(Interval i) { }
	// Offset : 0x2d0768
	public Int32 CompareTo(Object o) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal class IntervalCollection : ICollection, IEnumerable
{
	// Fields
	private ArrayList intervals; // 0x10

	// Properties
	public Interval Item { get; }
	public Int32 Count { get; }
	public Boolean IsSynchronized { get; }
	public Object SyncRoot { get; }

	// Methods
	// Offset : 0x784cd4
	public Void .ctor() { }
	// Offset : 0x784d40
	public Interval get_Item(Int32 i) { }
	// Offset : 0x784de8
	public Void Add(Interval i) { }
	// Offset : 0x784ea0
	public Void Normalize() { }
	// Offset : 0x785128
	public IntervalCollection GetMetaCollection(CostDelegate cost_del) { }
	// Offset : 0x785250
	private Void Optimize(Int32 begin, Int32 end, IntervalCollection meta, CostDelegate cost_del) { }
	// Offset : 0x785200
	public Int32 get_Count() { }
	// Offset : 0x785764
	public Boolean get_IsSynchronized() { }
	// Offset : 0x78576c
	public Object get_SyncRoot() { }
	// Offset : 0x785774
	public Void CopyTo(Array array, Int32 index) { }
	// Offset : 0x785af4
	public IEnumerator GetEnumerator() { }
}

// Dll : System.dll
// Namespace: 
private class Enumerator : IEnumerator
{
	// Fields
	private IList list; // 0x10
	private Int32 ptr; // 0x18

	// Properties
	public Object Current { get; }

	// Methods
	// Offset : 0x785b64
	public Void .ctor(IList list) { }
	// Offset : 0x785c80
	public Object get_Current() { }
	// Offset : 0x785e64
	public Boolean MoveNext() { }
	// Offset : 0x785c74
	public Void Reset() { }
}

// Dll : System.dll
// Namespace: 
public sealed class CostDelegate : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x785b98
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x785478
	public virtual Double Invoke(Interval i) { }
	// Offset : 0x785ba8
	public virtual IAsyncResult BeginInvoke(Interval i, AsyncCallback callback, Object object) { }
	// Offset : 0x785c38
	public virtual Double EndInvoke(IAsyncResult result) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class Parser
{
	// Fields
	private String pattern; // 0x10
	private Int32 ptr; // 0x18
	private ArrayList caps; // 0x20
	private Hashtable refs; // 0x28
	private Int32 num_groups; // 0x30
	private Int32 gap; // 0x34

	// Properties

	// Methods
	// Offset : 0x789600
	public Void .ctor() { }
	// Offset : 0x790470
	public static Int32 ParseDecimal(String str, ref Int32 ptr) { }
	// Offset : 0x78bb84
	public static Int32 ParseOctal(String str, ref Int32 ptr) { }
	// Offset : 0x79057c
	public static Int32 ParseHex(String str, ref Int32 ptr, Int32 digits) { }
	// Offset : 0x790480
	public static Int32 ParseNumber(String str, ref Int32 ptr, Int32 b, Int32 min, Int32 max) { }
	// Offset : 0x79062c
	public static String ParseName(String str, ref Int32 ptr) { }
	// Offset : 0x78968c
	public RegularExpression ParseRegularExpression(String pattern, RegexOptions options) { }
	// Offset : 0x789848
	public Int32 GetMapping(Hashtable mapping) { }
	// Offset : 0x790858
	private Void ParseGroup(Group group, RegexOptions options, Assertion assertion) { }
	// Offset : 0x793790
	private Expression ParseGroupingConstruct(ref RegexOptions options) { }
	// Offset : 0x7943a0
	private Boolean ParseAssertionType(ExpressionAssertion assertion) { }
	// Offset : 0x79428c
	private Void ParseOptions(ref RegexOptions options, Boolean negate) { }
	// Offset : 0x79313c
	private Expression ParseCharacterClass(RegexOptions options) { }
	// Offset : 0x794000
	private Boolean ParseRepetitionBounds(out Int32 min, out Int32 max, RegexOptions options) { }
	// Offset : 0x794530
	private Category ParseUnicodeCategory() { }
	// Offset : 0x792c30
	private Expression ParseSpecial(RegexOptions options) { }
	// Offset : 0x7929ac
	private Int32 ParseEscape() { }
	// Offset : 0x794518
	private String ParseName() { }
	// Offset : 0x790780
	private static Boolean IsNameChar(Char c) { }
	// Offset : 0x794690
	private Int32 ParseNumber(Int32 b, Int32 min, Int32 max) { }
	// Offset : 0x790590
	private static Int32 ParseDigit(Char c, Int32 b, Int32 n) { }
	// Offset : 0x792640
	private Void ConsumeWhitespace(Boolean ignore) { }
	// Offset : 0x7910c8
	private Void ResolveReferences() { }
	// Offset : 0x7946bc
	private Void HandleExplicitNumericGroups(ArrayList explicit_numeric_groups) { }
	// Offset : 0x793788
	private static Boolean IsIgnoreCase(RegexOptions options) { }
	// Offset : 0x792970
	private static Boolean IsMultiline(RegexOptions options) { }
	// Offset : 0x794284
	private static Boolean IsExplicitCapture(RegexOptions options) { }
	// Offset : 0x7929a4
	private static Boolean IsSingleline(RegexOptions options) { }
	// Offset : 0x792638
	private static Boolean IsIgnorePatternWhitespace(RegexOptions options) { }
	// Offset : 0x794528
	private static Boolean IsECMAScript(RegexOptions options) { }
	// Offset : 0x79256c
	private ArgumentException NewParseException(String msg) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions
internal class QuickSearch
{
	// Fields
	private String str; // 0x10
	private Int32 len; // 0x18
	private Boolean ignore; // 0x1c
	private Boolean reverse; // 0x1d
	private Byte[] shift; // 0x20
	private Hashtable shiftExtended; // 0x28
	private static readonly Int32 THRESHOLD; // 0x0

	// Properties
	public Int32 Length { get; }

	// Methods
	// Offset : 0x782e50
	public Void .ctor(String str, Boolean ignore, Boolean reverse) { }
	// Offset : 0x7883ac
	private static Void .cctor() { }
	// Offset : 0x7832c0
	public Int32 get_Length() { }
	// Offset : 0x782f58
	public Int32 Search(String text, Int32 start, Int32 end) { }
	// Offset : 0x788130
	private Void SetupShiftTable() { }
	// Offset : 0x788490
	private Int32 GetShiftDistance(Char c) { }
	// Offset : 0x788400
	private Char GetChar(Char c) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class ExpressionCollection : CollectionBase
{
	// Fields

	// Properties
	public Expression Item { get; set; }

	// Methods
	// Offset : 0x78e3f8
	public Void .ctor() { }
	// Offset : 0x78a640
	public Void Add(Expression e) { }
	// Offset : 0x78b494
	public Expression get_Item(Int32 i) { }
	// Offset : 0x78b654
	public Void set_Item(Int32 i, Expression value) { }
	// Offset : 0x78f280
	protected override Void OnValidate(Object o) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class Expression
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x78d0f8
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x
	public abstract Void GetWidth(out Int32 min, out Int32 max) { }
	// Offset : 0x78cb6c
	public Int32 GetFixedWidth() { }
	// Offset : 0x78e7f0
	public virtual AnchorInfo GetAnchorInfo(Boolean reverse) { }
	// Offset : 0x
	public abstract Boolean IsComplex() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class CompositeExpression : Expression
{
	// Fields
	private ExpressionCollection expressions; // 0x10

	// Properties
	protected ExpressionCollection Expressions { get; }

	// Methods
	// Offset : 0x78a590
	public Void .ctor() { }
	// Offset : 0x78a604
	protected ExpressionCollection get_Expressions() { }
	// Offset : 0x78b0e0
	protected Void GetWidth(out Int32 min, out Int32 max, Int32 count) { }
	// Offset : 0x78e400
	public override Boolean IsComplex() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class Group : CompositeExpression
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x78cc40
	public Void .ctor() { }
	// Offset : 0x78f284
	public Void AppendExpression(Expression e) { }
	// Offset : 0x78ce18
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x78f2b8
	public override Void GetWidth(out Int32 min, out Int32 max) { }
	// Offset : 0x78f690
	public override AnchorInfo GetAnchorInfo(Boolean reverse) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class RegularExpression : Group
{
	// Fields
	private Int32 group_count; // 0x18

	// Properties
	public Int32 GroupCount { set; }

	// Methods
	// Offset : 0x790834
	public Void .ctor() { }
	// Offset : 0x792564
	public Void set_GroupCount(Int32 value) { }
	// Offset : 0x794b5c
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class CapturingGroup : Group, IComparable
{
	// Fields
	private Int32 gid; // 0x18
	private String name; // 0x20

	// Properties
	public Int32 Index { get; set; }
	public String Name { get; set; }
	public Boolean IsNamed { get; }

	// Methods
	// Offset : 0x78bf90
	public Void .ctor() { }
	// Offset : 0x78c368
	public Int32 get_Index() { }
	// Offset : 0x78cc44
	public Void set_Index(Int32 value) { }
	// Offset : 0x78cc4c
	public String get_Name() { }
	// Offset : 0x78cc54
	public Void set_Name(String value) { }
	// Offset : 0x78c370
	public Boolean get_IsNamed() { }
	// Offset : 0x78cc5c
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x78cee0
	public override Boolean IsComplex() { }
	// Offset : 0x78cee8
	public Int32 CompareTo(Object other) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class BalancingGroup : CapturingGroup
{
	// Fields
	private CapturingGroup balance; // 0x28

	// Properties
	public CapturingGroup Balance { set; }

	// Methods
	// Offset : 0x78bf68
	public Void .ctor() { }
	// Offset : 0x78bfb8
	public Void set_Balance(CapturingGroup value) { }
	// Offset : 0x78bfc0
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class NonBacktrackingGroup : Group
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x790174
	public Void .ctor() { }
	// Offset : 0x790178
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x790468
	public override Boolean IsComplex() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class Repetition : CompositeExpression
{
	// Fields
	private Int32 min; // 0x18
	private Int32 max; // 0x1c
	private Boolean lazy; // 0x20

	// Properties
	public Expression Expression { get; set; }
	public Int32 Minimum { get; }

	// Methods
	// Offset : 0x7941e8
	public Void .ctor(Int32 min, Int32 max, Boolean lazy) { }
	// Offset : 0x7951b8
	public Expression get_Expression() { }
	// Offset : 0x79424c
	public Void set_Expression(Expression value) { }
	// Offset : 0x7951e8
	public Int32 get_Minimum() { }
	// Offset : 0x7951f0
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x7956e4
	public override Void GetWidth(out Int32 min, out Int32 max) { }
	// Offset : 0x795788
	public override AnchorInfo GetAnchorInfo(Boolean reverse) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal abstract class Assertion : CompositeExpression
{
	// Fields

	// Properties
	public Expression TrueExpression { get; set; }
	public Expression FalseExpression { get; set; }

	// Methods
	// Offset : 0x78b410
	public Void .ctor() { }
	// Offset : 0x78b464
	public Expression get_TrueExpression() { }
	// Offset : 0x78b61c
	public Void set_TrueExpression(Expression value) { }
	// Offset : 0x78b760
	public Expression get_FalseExpression() { }
	// Offset : 0x78b790
	public Void set_FalseExpression(Expression value) { }
	// Offset : 0x78b7c8
	public override Void GetWidth(out Int32 min, out Int32 max) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class CaptureAssertion : Assertion
{
	// Fields
	private ExpressionAssertion alternate; // 0x18
	private CapturingGroup group; // 0x20
	private Literal literal; // 0x28

	// Properties
	public CapturingGroup CapturingGroup { set; }
	private ExpressionAssertion Alternate { get; }

	// Methods
	// Offset : 0x78c380
	public Void .ctor(Literal l) { }
	// Offset : 0x78c3a8
	public Void set_CapturingGroup(CapturingGroup value) { }
	// Offset : 0x78c3b0
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x78ca54
	public override Boolean IsComplex() { }
	// Offset : 0x78c978
	private ExpressionAssertion get_Alternate() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class ExpressionAssertion : Assertion
{
	// Fields
	private Boolean reverse; // 0x18
	private Boolean negate; // 0x19

	// Properties
	public Boolean Reverse { set; }
	public Boolean Negate { set; }
	public Expression TestExpression { get; set; }

	// Methods
	// Offset : 0x78cbd0
	public Void .ctor() { }
	// Offset : 0x78e880
	public Void set_Reverse(Boolean value) { }
	// Offset : 0x78e88c
	public Void set_Negate(Boolean value) { }
	// Offset : 0x78e898
	public Expression get_TestExpression() { }
	// Offset : 0x78cc08
	public Void set_TestExpression(Expression value) { }
	// Offset : 0x78e8c8
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x78f278
	public override Boolean IsComplex() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class Alternation : CompositeExpression
{
	// Fields

	// Properties
	public ExpressionCollection Alternatives { get; }

	// Methods
	// Offset : 0x78a58c
	public Void .ctor() { }
	// Offset : 0x78a5fc
	public ExpressionCollection get_Alternatives() { }
	// Offset : 0x78a60c
	public Void AddAlternative(Expression e) { }
	// Offset : 0x78a73c
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x78b088
	public override Void GetWidth(out Int32 min, out Int32 max) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class Literal : Expression
{
	// Fields
	private String str; // 0x10
	private Boolean ignore; // 0x18

	// Properties

	// Methods
	// Offset : 0x79001c
	public Void .ctor(String str, Boolean ignore) { }
	// Offset : 0x78bd2c
	public static Void CompileLiteral(String str, ICompiler cmp, Boolean ignore, Boolean reverse) { }
	// Offset : 0x79005c
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x790074
	public override Void GetWidth(out Int32 min, out Int32 max) { }
	// Offset : 0x7900c0
	public override AnchorInfo GetAnchorInfo(Boolean reverse) { }
	// Offset : 0x79016c
	public override Boolean IsComplex() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class PositionAssertion : Expression
{
	// Fields
	private Position pos; // 0x10

	// Properties

	// Methods
	// Offset : 0x792978
	public Void .ctor(Position pos) { }
	// Offset : 0x79499c
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x794a90
	public override Void GetWidth(out Int32 min, out Int32 max) { }
	// Offset : 0x794a9c
	public override Boolean IsComplex() { }
	// Offset : 0x794aa4
	public override AnchorInfo GetAnchorInfo(Boolean revers) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class Reference : Expression
{
	// Fields
	private CapturingGroup group; // 0x10
	private Boolean ignore; // 0x18

	// Properties
	public CapturingGroup CapturingGroup { get; set; }
	public Boolean IgnoreCase { get; }

	// Methods
	// Offset : 0x78b850
	public Void .ctor(Boolean ignore) { }
	// Offset : 0x78bbfc
	public CapturingGroup get_CapturingGroup() { }
	// Offset : 0x78bb7c
	public Void set_CapturingGroup(CapturingGroup value) { }
	// Offset : 0x78bd24
	public Boolean get_IgnoreCase() { }
	// Offset : 0x78bc04
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x794b44
	public override Void GetWidth(out Int32 min, out Int32 max) { }
	// Offset : 0x794b54
	public override Boolean IsComplex() { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class BackslashNumber : Reference
{
	// Fields
	private String literal; // 0x20
	private Boolean ecma; // 0x28

	// Properties

	// Methods
	// Offset : 0x78b80c
	public Void .ctor(Boolean ignore, Boolean ecma) { }
	// Offset : 0x78b880
	public Boolean ResolveReference(String num_str, Hashtable groups) { }
	// Offset : 0x78bb94
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class CharacterClass : Expression
{
	// Fields
	private static Interval upper_case_characters; // 0x0
	private Boolean negate; // 0x10
	private Boolean ignore; // 0x11
	private BitArray pos_cats; // 0x18
	private BitArray neg_cats; // 0x20
	private IntervalCollection intervals; // 0x28

	// Properties

	// Methods
	// Offset : 0x78d030
	public Void .ctor(Boolean negate, Boolean ignore) { }
	// Offset : 0x78d100
	public Void .ctor(Category cat, Boolean negate) { }
	// Offset : 0x78d190
	private static Void .cctor() { }
	// Offset : 0x78d144
	public Void AddCategory(Category cat, Boolean negate) { }
	// Offset : 0x78d1f0
	public Void AddCharacter(Char c) { }
	// Offset : 0x78d1f8
	public Void AddRange(Char lo, Char hi) { }
	// Offset : 0x78d3f0
	public override Void Compile(ICompiler cmp, Boolean reverse) { }
	// Offset : 0x78e398
	public override Void GetWidth(out Int32 min, out Int32 max) { }
	// Offset : 0x78e3a8
	public override Boolean IsComplex() { }
	// Offset : 0x78e3b0
	private static Double GetIntervalCost(Interval i) { }
}

// Dll : System.dll
// Namespace: System.Text.RegularExpressions.Syntax
internal class AnchorInfo
{
	// Fields
	private Expression expr; // 0x10
	private Position pos; // 0x18
	private Int32 offset; // 0x1c
	private String str; // 0x20
	private Int32 width; // 0x28
	private Boolean ignore; // 0x2c

	// Properties
	public Int32 Offset { get; }
	public Int32 Width { get; }
	public Int32 Length { get; }
	public Boolean IsUnknownWidth { get; }
	public Boolean IsComplete { get; }
	public String Substring { get; }
	public Boolean IgnoreCase { get; }
	public Position Position { get; }
	public Boolean IsSubstring { get; }
	public Boolean IsPosition { get; }

	// Methods
	// Offset : 0x78b1e0
	public Void .ctor(Expression expr, Int32 width) { }
	// Offset : 0x78b22c
	public Void .ctor(Expression expr, Int32 offset, Int32 width, String str, Boolean ignore) { }
	// Offset : 0x78b2b0
	public Void .ctor(Expression expr, Int32 offset, Int32 width, Position pos) { }
	// Offset : 0x78b30c
	public Int32 get_Offset() { }
	// Offset : 0x78b314
	public Int32 get_Width() { }
	// Offset : 0x78b31c
	public Int32 get_Length() { }
	// Offset : 0x78b330
	public Boolean get_IsUnknownWidth() { }
	// Offset : 0x78b33c
	public Boolean get_IsComplete() { }
	// Offset : 0x78b374
	public String get_Substring() { }
	// Offset : 0x78b37c
	public Boolean get_IgnoreCase() { }
	// Offset : 0x78b384
	public Position get_Position() { }
	// Offset : 0x78b38c
	public Boolean get_IsSubstring() { }
	// Offset : 0x78b39c
	public Boolean get_IsPosition() { }
	// Offset : 0x78b3ac
	public Interval GetInterval(Int32 start) { }
}

// Dll : System.dll
// Namespace: System
internal class DefaultUriParser : UriParser
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x622f30
	public Void .ctor() { }
	// Offset : 0x622f98
	public Void .ctor(String scheme) { }
}

// Dll : System.dll
// Namespace: System
public class GenericUriParser : UriParser
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System
[Serializable]
public class Uri : ISerializable
{
	// Fields
	private Boolean isUnixFilePath; // 0x10
	private String source; // 0x18
	private String scheme; // 0x20
	private String host; // 0x28
	private Int32 port; // 0x30
	private String path; // 0x38
	private String query; // 0x40
	private String fragment; // 0x48
	private String userinfo; // 0x50
	private Boolean isUnc; // 0x58
	private Boolean isOpaquePart; // 0x59
	private Boolean isAbsoluteUri; // 0x5a
	private Boolean userEscaped; // 0x5b
	private String cachedAbsoluteUri; // 0x60
	private String cachedToString; // 0x68
	private Int32 cachedHashCode; // 0x70
	private static readonly String hexUpperChars; // 0x0
	public static readonly String SchemeDelimiter; // 0x8
	public static readonly String UriSchemeFile; // 0x10
	public static readonly String UriSchemeFtp; // 0x18
	public static readonly String UriSchemeGopher; // 0x20
	public static readonly String UriSchemeHttp; // 0x28
	public static readonly String UriSchemeHttps; // 0x30
	public static readonly String UriSchemeMailto; // 0x38
	public static readonly String UriSchemeNews; // 0x40
	public static readonly String UriSchemeNntp; // 0x48
	public static readonly String UriSchemeNetPipe; // 0x50
	public static readonly String UriSchemeNetTcp; // 0x58
	private static UriScheme[] schemes; // 0x60
	private UriParser parser; // 0x78
	private static Dictionary`2 <>f__switch$map12; // 0x68
	private static Dictionary`2 <>f__switch$map14; // 0x70
	private static Dictionary`2 <>f__switch$map15; // 0x78
	private static Dictionary`2 <>f__switch$map16; // 0x80

	// Properties
	public String AbsolutePath { get; }
	public String AbsoluteUri { get; }
	public String Authority { get; }
	public String Fragment { get; }
	public String Host { get; }
	public Boolean IsFile { get; }
	public Boolean IsLoopback { get; }
	public Boolean IsUnc { get; }
	public String PathAndQuery { get; }
	public String Query { get; }
	public String Scheme { get; }
	public Boolean IsAbsoluteUri { get; }
	public String OriginalString { get; }
	private UriParser Parser { get; }

	// Methods
	// Offset : 0x7959e8
	public Void .ctor(String uriString) { }
	// Offset : 0x795b5c
	protected Void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// Offset : 0x795bd8
	public Void .ctor(String uriString, UriKind uriKind) { }
	// Offset : 0x795fe0
	public Void .ctor(Uri baseUri, Uri relativeUri) { }
	// Offset : 0x7959f0
	public Void .ctor(String uriString, Boolean dontEscape) { }
	// Offset : 0x796e44
	public Void .ctor(Uri baseUri, String relativeUri) { }
	// Offset : 0x796f28
	private static Void .cctor() { }
	// Offset : 0x797340
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x796190
	private Void Merge(Uri baseUri, String relativeUri) { }
	// Offset : 0x7978e8
	public String get_AbsolutePath() { }
	// Offset : 0x7973bc
	public String get_AbsoluteUri() { }
	// Offset : 0x798420
	public String get_Authority() { }
	// Offset : 0x79859c
	public String get_Fragment() { }
	// Offset : 0x7985c0
	public String get_Host() { }
	// Offset : 0x7985e4
	public Boolean get_IsFile() { }
	// Offset : 0x798694
	public Boolean get_IsLoopback() { }
	// Offset : 0x7988b0
	public Boolean get_IsUnc() { }
	// Offset : 0x7988d4
	public String get_PathAndQuery() { }
	// Offset : 0x798958
	public String get_Query() { }
	// Offset : 0x7974ec
	public String get_Scheme() { }
	// Offset : 0x795fd8
	public Boolean get_IsAbsoluteUri() { }
	// Offset : 0x79613c
	public String get_OriginalString() { }
	// Offset : 0x79897c
	public static UriHostNameType CheckHostName(String name) { }
	// Offset : 0x798a80
	internal static Boolean IsIPv4Address(String name) { }
	// Offset : 0x798bf4
	internal static Boolean IsDomainAddress(String name) { }
	// Offset : 0x798d38
	public static Boolean CheckSchemeName(String schemeName) { }
	// Offset : 0x798ecc
	private static Boolean IsAlpha(Char c) { }
	// Offset : 0x798ef8
	public override Boolean Equals(Object comparant) { }
	// Offset : 0x798fc4
	private Boolean InternalEquals(Uri uri) { }
	// Offset : 0x799218
	public override Int32 GetHashCode() { }
	// Offset : 0x797c24
	public String GetLeftPart(UriPartial part) { }
	// Offset : 0x799f1c
	public static Int32 FromHex(Char digit) { }
	// Offset : 0x799fec
	public static String HexEscape(Char character) { }
	// Offset : 0x79a174
	public static Boolean IsHexDigit(Char digit) { }
	// Offset : 0x79a1b0
	public static Boolean IsHexEncoding(String pattern, Int32 index) { }
	// Offset : 0x79a340
	private Void AppendQueryAndFragment(ref String result) { }
	// Offset : 0x79a7b8
	public override String ToString() { }
	// Offset : 0x797878
	protected static String EscapeString(String str) { }
	// Offset : 0x79a89c
	internal static String EscapeString(String str, Boolean escapeReserved, Boolean escapeHex, Boolean escapeBrackets) { }
	// Offset : 0x795df8
	private Void ParseUri(UriKind kind) { }
	// Offset : 0x79ad24
	protected virtual String Unescape(String str) { }
	// Offset : 0x79a560
	internal static String Unescape(String str, Boolean excludeSpecial) { }
	// Offset : 0x79b1a0
	private Void ParseAsWindowsUNC(String uriString) { }
	// Offset : 0x79b3bc
	private String ParseAsWindowsAbsoluteFilePath(String uriString) { }
	// Offset : 0x79b548
	private Void ParseAsUnixAbsoluteFilePath(String uriString) { }
	// Offset : 0x79ac44
	private Void Parse(UriKind kind, String uriString) { }
	// Offset : 0x79b758
	private String ParseNoExceptions(UriKind kind, String uriString) { }
	// Offset : 0x799418
	private static Boolean CompactEscaped(String scheme) { }
	// Offset : 0x799664
	private static String Reduce(String path, Boolean compact_escaped) { }
	// Offset : 0x79ad8c
	private static Char HexUnescapeMultiByte(String pattern, ref Int32 index, out Char surrogate) { }
	// Offset : 0x79ce90
	internal static String GetSchemeDelimiter(String scheme) { }
	// Offset : 0x798518
	internal static Int32 GetDefaultPort(String scheme) { }
	// Offset : 0x799390
	private String GetOpaqueWiseSchemeDelimiter() { }
	// Offset : 0x797510
	private static Boolean IsPredefinedScheme(String scheme) { }
	// Offset : 0x79cdd4
	private UriParser get_Parser() { }
	// Offset : 0x79d048
	private static Boolean NeedToEscapeDataChar(Char b) { }
	// Offset : 0x79d0b4
	public static String EscapeDataString(String stringToEscape) { }
	// Offset : 0x797b98
	private Void EnsureAbsoluteUri() { }
	// Offset : 0x796134
	public static Boolean op_Equality(Uri u1, Uri u2) { }
}

// Dll : System.dll
// Namespace: 
private struct UriScheme
{
	// Fields
	public String scheme; // 0x10
	public String delimiter; // 0x18
	public Int32 defaultPort; // 0x20

	// Properties

	// Methods
	// Offset : 0x2d3b7c
	public Void .ctor(String s, String d, Int32 p) { }
}

// Dll : System.dll
// Namespace: System
[Serializable]
public class UriFormatException : FormatException, ISerializable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x971a20
	public Void .ctor() { }
	// Offset : 0x971a80
	public Void .ctor(String message) { }
	// Offset : 0x971a88
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x971a90
	private Void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : System.dll
// Namespace: System
public enum UriHostNameType
{
	// Fields
	public Int32 value__; // 0x10
	public const UriHostNameType Unknown = 0; // 0x0
	public const UriHostNameType Basic = 1; // 0x0
	public const UriHostNameType Dns = 2; // 0x0
	public const UriHostNameType IPv4 = 3; // 0x0
	public const UriHostNameType IPv6 = 4; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System
public enum UriKind
{
	// Fields
	public Int32 value__; // 0x10
	public const UriKind RelativeOrAbsolute = 0; // 0x0
	public const UriKind Absolute = 1; // 0x0
	public const UriKind Relative = 2; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System
public abstract class UriParser
{
	// Fields
	private static Object lock_object; // 0x0
	private static Hashtable table; // 0x8
	internal String scheme_name; // 0x10
	private Int32 default_port; // 0x18
	private static readonly Regex uri_regex; // 0x10
	private static readonly Regex auth_regex; // 0x18

	// Properties
	internal String SchemeName { set; }
	internal Int32 DefaultPort { get; set; }

	// Methods
	// Offset : 0x971a98
	protected Void .ctor() { }
	// Offset : 0x971aa0
	private static Void .cctor() { }
	// Offset : 0x971b74
	protected internal virtual Void InitializeAndValidate(Uri uri, out UriFormatException parsingError) { }
	// Offset : 0x971c90
	protected virtual Void OnRegister(String schemeName, Int32 defaultPort) { }
	// Offset : 0x971c94
	internal Void set_SchemeName(String value) { }
	// Offset : 0x971c9c
	internal Int32 get_DefaultPort() { }
	// Offset : 0x971ca4
	internal Void set_DefaultPort(Int32 value) { }
	// Offset : 0x971cac
	private static Void CreateDefaults() { }
	// Offset : 0x972064
	private static Void InternalRegister(Hashtable table, UriParser uriParser, String schemeName, Int32 defaultPort) { }
	// Offset : 0x97220c
	internal static UriParser GetParser(String schemeName) { }
}

// Dll : System.dll
// Namespace: System
public enum UriPartial
{
	// Fields
	public Int32 value__; // 0x10
	public const UriPartial Scheme = 0; // 0x0
	public const UriPartial Authority = 1; // 0x0
	public const UriPartial Path = 2; // 0x0
	public const UriPartial Query = 3; // 0x0

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System
public class UriTypeConverter : TypeConverter
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: System.Net.Security
public sealed class RemoteCertificateValidationCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x623bdc
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x624274
	public virtual Boolean Invoke(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { }
	// Offset : 0x629520
	public virtual IAsyncResult BeginInvoke(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors, AsyncCallback callback, Object object) { }
	// Offset : 0x6295d0
	public virtual Boolean EndInvoke(IAsyncResult result) { }
}

// Dll : System.dll
// Namespace: 
internal class <PrivateImplementationDetails>
{
	// Fields
	internal static $ArrayType$128 $$field-2; // 0x0
	internal static $ArrayType$12 $$field-3; // 0x80
	internal static $ArrayType$12 $$field-4; // 0x8c

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: 
private struct $ArrayType$128
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.dll
// Namespace: 
private struct $ArrayType$12
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.Core.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.Core.dll
// Namespace: System.Runtime.CompilerServices
public sealed class ExtensionAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x941420
	public Void .ctor() { }
}

// Dll : System.Core.dll
// Namespace: 
internal sealed class Locale
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x93ee3c
	public static String GetText(String msg) { }
	// Offset : 0x93ee40
	public static String GetText(String fmt, Object[] args) { }
}

// Dll : System.Core.dll
// Namespace: System
internal class MonoTODOAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x941418
	public Void .ctor() { }
}

// Dll : System.Core.dll
// Namespace: Mono.Security.Cryptography
public sealed class KeyBuilder
{
	// Fields
	private static RandomNumberGenerator rng; // 0x0

	// Properties
	private static RandomNumberGenerator Rng { get; }

	// Methods
	// Offset : 0x93eeb8
	private static RandomNumberGenerator get_Rng() { }
	// Offset : 0x93ef28
	public static Byte[] Key(Int32 size) { }
	// Offset : 0x93efc0
	public static Byte[] IV(Int32 size) { }
}

// Dll : System.Core.dll
// Namespace: Mono.Security.Cryptography
internal abstract class SymmetricTransform : IDisposable, ICryptoTransform
{
	// Fields
	protected SymmetricAlgorithm algo; // 0x10
	protected Boolean encrypt; // 0x18
	private Int32 BlockSizeByte; // 0x1c
	private Byte[] temp; // 0x20
	private Byte[] temp2; // 0x28
	private Byte[] workBuff; // 0x30
	private Byte[] workout; // 0x38
	private Int32 FeedBackByte; // 0x40
	private Int32 FeedBackIter; // 0x44
	private Boolean m_disposed; // 0x48
	private Boolean lastBlock; // 0x49
	private RandomNumberGenerator _rng; // 0x50

	// Properties
	public virtual Boolean CanTransformMultipleBlocks { get; }
	public virtual Boolean CanReuseTransform { get; }
	public virtual Int32 InputBlockSize { get; }
	public virtual Int32 OutputBlockSize { get; }
	private Boolean KeepLastBlock { get; }

	// Methods
	// Offset : 0x93f058
	public Void .ctor(SymmetricAlgorithm symmAlgo, Boolean encryption, Byte[] rgbIV) { }
	// Offset : 0x93f388
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x93f3d8
	protected override Void Finalize() { }
	// Offset : 0x93f474
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x93f4d4
	public virtual Boolean get_CanTransformMultipleBlocks() { }
	// Offset : 0x93f4dc
	public virtual Boolean get_CanReuseTransform() { }
	// Offset : 0x93f4e4
	public virtual Int32 get_InputBlockSize() { }
	// Offset : 0x93f4ec
	public virtual Int32 get_OutputBlockSize() { }
	// Offset : 0x93f4f4
	protected virtual Void Transform(Byte[] input, Byte[] output) { }
	// Offset : 0x
	protected abstract Void ECB(Byte[] input, Byte[] output) { }
	// Offset : 0x93f788
	protected virtual Void CBC(Byte[] input, Byte[] output) { }
	// Offset : 0x93f994
	protected virtual Void CFB(Byte[] input, Byte[] output) { }
	// Offset : 0x93fc9c
	protected virtual Void OFB(Byte[] input, Byte[] output) { }
	// Offset : 0x93fd10
	protected virtual Void CTS(Byte[] input, Byte[] output) { }
	// Offset : 0x93fd84
	private Void CheckInput(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x93fed0
	public virtual Int32 TransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x940150
	private Boolean get_KeepLastBlock() { }
	// Offset : 0x940204
	private Int32 InternalTransformBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[] outputBuffer, Int32 outputOffset) { }
	// Offset : 0x940420
	private Void Random(Byte[] buffer, Int32 start, Int32 length) { }
	// Offset : 0x9404fc
	private Void ThrowBadPaddingException(PaddingMode padding, Int32 length, Int32 position) { }
	// Offset : 0x9406b8
	private Byte[] FinalEncrypt(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x940a64
	private Byte[] FinalDecrypt(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
	// Offset : 0x940e4c
	public virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount) { }
}

// Dll : System.Core.dll
// Namespace: System.Collections.Generic
[Serializable]
public class HashSet`1 : ICollection`1, IEnumerable`1, IEnumerable, ISerializable, IDeserializationCallback
{
	// Fields
	private const Int32 INITIAL_SIZE; // 0x0
	private const Single DEFAULT_LOAD_FACTOR; // 0x0
	private const Int32 NO_SLOT; // 0x0
	private const Int32 HASH_FLAG; // 0x0
	private Int32[] table; // 0x0
	private Link[] links; // 0x0
	private T[] slots; // 0x0
	private Int32 touched; // 0x0
	private Int32 empty_slot; // 0x0
	private Int32 count; // 0x0
	private Int32 threshold; // 0x0
	private IEqualityComparer`1 comparer; // 0x0
	private SerializationInfo si; // 0x0
	private Int32 generation; // 0x0

	// Properties
	private Boolean System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	public Int32 Count { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x
	private IEnumerator`1 System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// Offset : 0x
	private Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, Int32 index) { }
	// Offset : 0x
	private Void System.Collections.Generic.ICollection<T>.Add(T item) { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	private Void Init(Int32 capacity, IEqualityComparer`1 comparer) { }
	// Offset : 0x
	private Void InitArrays(Int32 size) { }
	// Offset : 0x
	private Boolean SlotsContainsAt(Int32 index, Int32 hash, T item) { }
	// Offset : 0x
	public Void CopyTo(T[] array, Int32 index) { }
	// Offset : 0x
	public Void CopyTo(T[] array, Int32 index, Int32 count) { }
	// Offset : 0x
	private Void Resize(Int32 size) { }
	// Offset : 0x
	private Int32 GetLinkHashCode(Int32 index) { }
	// Offset : 0x
	private Int32 GetItemHashCode(T item) { }
	// Offset : 0x
	public Boolean Add(T item) { }
	// Offset : 0x
	public Void Clear() { }
	// Offset : 0x
	public Boolean Contains(T item) { }
	// Offset : 0x
	public Boolean Remove(T item) { }
	// Offset : 0x
	public virtual Void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x
	public virtual Void OnDeserialization(Object sender) { }
	// Offset : 0x
	public Enumerator GetEnumerator() { }
}

// Dll : System.Core.dll
// Namespace: 
private struct Link
{
	// Fields
	public Int32 HashCode; // 0x0
	public Int32 Next; // 0x0

	// Properties

	// Methods
}

// Dll : System.Core.dll
// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	private HashSet`1 hashset; // 0x0
	private Int32 next; // 0x0
	private Int32 stamp; // 0x0
	private T current; // 0x0

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Methods
	// Offset : 0x
	internal Void .ctor(HashSet`1 hashset) { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	private Void System.Collections.IEnumerator.Reset() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public T get_Current() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	private Void CheckState() { }
}

// Dll : System.Core.dll
// Namespace: 
private static class PrimeHelper
{
	// Fields
	private static readonly Int32[] primes_table; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	private static Void .cctor() { }
	// Offset : 0x
	private static Boolean TestPrime(Int32 x) { }
	// Offset : 0x
	private static Int32 CalcPrime(Int32 x) { }
	// Offset : 0x
	public static Int32 ToPrime(Int32 x) { }
}

// Dll : System.Core.dll
// Namespace: System.Linq
internal static class Check
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x941228
	public static Void Source(Object source) { }
	// Offset : 0x9412b0
	public static Void SourceAndPredicate(Object source, Object predicate) { }
	// Offset : 0x941364
	public static Void FirstAndSecond(Object first, Object second) { }
}

// Dll : System.Core.dll
// Namespace: System.Linq
public static class Enumerable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public static Boolean Any(IEnumerable`1 source) { }
	// Offset : 0x
	public static Boolean Any(IEnumerable`1 source, Func`2 predicate) { }
	// Offset : 0x
	private static TSource Single(IEnumerable`1 source, Func`2 predicate, Fallback fallback) { }
	// Offset : 0x
	public static TSource SingleOrDefault(IEnumerable`1 source, Func`2 predicate) { }
	// Offset : 0x
	public static Boolean SequenceEqual(IEnumerable`1 first, IEnumerable`1 second) { }
	// Offset : 0x
	public static Boolean SequenceEqual(IEnumerable`1 first, IEnumerable`1 second, IEqualityComparer`1 comparer) { }
	// Offset : 0x
	public static IEnumerable`1 Where(IEnumerable`1 source, Func`2 predicate) { }
	// Offset : 0x
	private static IEnumerable`1 CreateWhereIterator(IEnumerable`1 source, Func`2 predicate) { }
}

// Dll : System.Core.dll
// Namespace: 
private enum Fallback
{
	// Fields
	public Int32 value__; // 0x10
	public const Fallback Default = 0; // 0x0
	public const Fallback Throw = 1; // 0x0

	// Properties

	// Methods
}

// Dll : System.Core.dll
// Namespace: 
private sealed class <CreateWhereIterator>c__Iterator1D`1 : IEnumerator, IDisposable, IEnumerable, IEnumerable`1, IEnumerator`1
{
	// Fields
	internal IEnumerable`1 source; // 0x0
	internal IEnumerator`1 <$s_120>__0; // 0x0
	internal TSource <element>__1; // 0x0
	internal Func`2 predicate; // 0x0
	internal Int32 $PC; // 0x0
	internal TSource $current; // 0x0
	internal IEnumerable`1 <$>source; // 0x0
	internal Func`2 <$>predicate; // 0x0

	// Properties
	private TSource System.Collections.Generic.IEnumerator<TSource>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	private TSource System.Collections.Generic.IEnumerator<TSource>.get_Current() { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	private IEnumerator`1 System.Collections.Generic.IEnumerable<TSource>.GetEnumerator() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	public Void Reset() { }
}

// Dll : System.Core.dll
// Namespace: System.Security.Cryptography
public abstract class Aes : SymmetricAlgorithm
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x941428
	protected Void .ctor() { }
}

// Dll : System.Core.dll
// Namespace: System.Security.Cryptography
public sealed class AesManaged : Aes
{
	// Fields

	// Properties
	public override Byte[] IV { get; set; }
	public override Byte[] Key { get; set; }
	public override Int32 KeySize { get; set; }

	// Methods
	// Offset : 0x9415bc
	public Void .ctor() { }
	// Offset : 0x9415c0
	public override Void GenerateIV() { }
	// Offset : 0x9415ec
	public override Void GenerateKey() { }
	// Offset : 0x941618
	public override ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV) { }
	// Offset : 0x9420b8
	public override ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV) { }
	// Offset : 0x942134
	public override Byte[] get_IV() { }
	// Offset : 0x94213c
	public override Void set_IV(Byte[] value) { }
	// Offset : 0x942144
	public override Byte[] get_Key() { }
	// Offset : 0x94214c
	public override Void set_Key(Byte[] value) { }
	// Offset : 0x942154
	public override Int32 get_KeySize() { }
	// Offset : 0x94215c
	public override Void set_KeySize(Int32 value) { }
	// Offset : 0x942164
	public override ICryptoTransform CreateDecryptor() { }
	// Offset : 0x9421a4
	public override ICryptoTransform CreateEncryptor() { }
	// Offset : 0x9421e4
	protected override Void Dispose(Boolean disposing) { }
}

// Dll : System.Core.dll
// Namespace: System.Security.Cryptography
internal class AesTransform : SymmetricTransform
{
	// Fields
	private UInt32[] expandedKey; // 0x58
	private Int32 Nk; // 0x60
	private Int32 Nr; // 0x64
	private static readonly UInt32[] Rcon; // 0x0
	private static readonly Byte[] SBox; // 0x8
	private static readonly Byte[] iSBox; // 0x10
	private static readonly UInt32[] T0; // 0x18
	private static readonly UInt32[] T1; // 0x20
	private static readonly UInt32[] T2; // 0x28
	private static readonly UInt32[] T3; // 0x30
	private static readonly UInt32[] iT0; // 0x38
	private static readonly UInt32[] iT1; // 0x40
	private static readonly UInt32[] iT2; // 0x48
	private static readonly UInt32[] iT3; // 0x50

	// Properties

	// Methods
	// Offset : 0x941694
	public Void .ctor(Aes algo, Boolean encryption, Byte[] key, Byte[] iv) { }
	// Offset : 0x94236c
	private static Void .cctor() { }
	// Offset : 0x9425d8
	protected override Void ECB(Byte[] input, Byte[] output) { }
	// Offset : 0x9421f0
	private UInt32 SubByte(UInt32 a) { }
	// Offset : 0x9425ec
	private Void Encrypt128(Byte[] indata, Byte[] outdata, UInt32[] ekey) { }
	// Offset : 0x947884
	private Void Decrypt128(Byte[] indata, Byte[] outdata, UInt32[] ekey) { }
}

// Dll : System.Core.dll
// Namespace: System
public sealed class Action : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x940f40
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x940f50
	public virtual Void Invoke() { }
	// Offset : 0x9411e8
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x94121c
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : System.Core.dll
// Namespace: System
public sealed class Action`2 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Void Invoke(T1 arg1, T2 arg2) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : System.Core.dll
// Namespace: System
public sealed class Action`3 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Void Invoke(T1 arg1, T2 arg2, T3 arg3) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : System.Core.dll
// Namespace: System
public sealed class Func`1 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual TResult Invoke() { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual TResult EndInvoke(IAsyncResult result) { }
}

// Dll : System.Core.dll
// Namespace: System
public sealed class Func`2 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual TResult Invoke(T arg1) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T arg1, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual TResult EndInvoke(IAsyncResult result) { }
}

// Dll : System.Core.dll
// Namespace: 
internal class <PrivateImplementationDetails>
{
	// Fields
	internal static $ArrayType$136 $$field-0; // 0x0
	internal static $ArrayType$120 $$field-1; // 0x88
	internal static $ArrayType$256 $$field-2; // 0x100
	internal static $ArrayType$256 $$field-3; // 0x200
	internal static $ArrayType$1024 $$field-4; // 0x300
	internal static $ArrayType$1024 $$field-5; // 0x700
	internal static $ArrayType$1024 $$field-6; // 0xb00
	internal static $ArrayType$1024 $$field-7; // 0xf00
	internal static $ArrayType$1024 $$field-8; // 0x1300
	internal static $ArrayType$1024 $$field-9; // 0x1700
	internal static $ArrayType$1024 $$field-10; // 0x1b00
	internal static $ArrayType$1024 $$field-11; // 0x1f00

	// Properties

	// Methods
}

// Dll : System.Core.dll
// Namespace: 
private struct $ArrayType$136
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.Core.dll
// Namespace: 
private struct $ArrayType$120
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.Core.dll
// Namespace: 
private struct $ArrayType$256
{
	// Fields

	// Properties

	// Methods
}

// Dll : System.Core.dll
// Namespace: 
private struct $ArrayType$1024
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Scripting
internal class UsedByNativeCodeAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x972ce8
	public Void .ctor() { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Scripting
internal class RequiredByNativeCodeAttribute : Attribute
{
	// Fields
	private Boolean <Optional>k__BackingField; // 0x10
	private Boolean <GenerateProxy>k__BackingField; // 0x11

	// Properties
	public Boolean Optional { set; }
	public Boolean GenerateProxy { set; }

	// Methods
	// Offset : 0x972cc8
	public Void .ctor() { }
	// Offset : 0x972cd0
	public Void set_Optional(Boolean value) { }
	// Offset : 0x972cdc
	public Void set_GenerateProxy(Boolean value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Scripting
internal class GeneratedByOldBindingsGeneratorAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x972cc0
	public Void .ctor() { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine
internal sealed class AssetFileNameExtensionAttribute : Attribute
{
	// Fields
	private readonly String <preferredExtension>k__BackingField; // 0x10
	private readonly IEnumerable`1 <otherExtensions>k__BackingField; // 0x18

	// Properties

	// Methods
	// Offset : 0x972378
	public Void .ctor(String preferredExtension, String[] otherExtensions) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine
internal class ThreadAndSerializationSafeAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x972cf0
	public Void .ctor() { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine
internal class WritableAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x972d78
	public Void .ctor() { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine
internal class UnityEngineModuleAssembly : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x972cf8
	public Void .ctor() { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine
internal sealed class NativeClassAttribute : Attribute
{
	// Fields
	private String <QualifiedNativeName>k__BackingField; // 0x10
	private String <Declaration>k__BackingField; // 0x18

	// Properties
	private String QualifiedNativeName { set; }
	private String Declaration { set; }

	// Methods
	// Offset : 0x972be0
	public Void .ctor(String qualifiedCppName) { }
	// Offset : 0x972c88
	public Void .ctor(String qualifiedCppName, String declaration) { }
	// Offset : 0x972c78
	private Void set_QualifiedNativeName(String value) { }
	// Offset : 0x972c80
	private Void set_Declaration(String value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class VisibleToOtherModulesAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x972bd0
	public Void .ctor() { }
	// Offset : 0x972bd8
	public Void .ctor(String[] modules) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal interface IBindingsAttribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal interface IBindingsNameProviderAttribute : IBindingsAttribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal interface IBindingsHeaderProviderAttribute : IBindingsAttribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal interface IBindingsIsThreadSafeProviderAttribute : IBindingsAttribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal interface IBindingsIsFreeFunctionProviderAttribute : IBindingsAttribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal interface IBindingsThrowsProviderAttribute : IBindingsAttribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal interface IBindingsGenerateMarshallingTypeAttribute : IBindingsAttribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal interface IBindingsWritableSelfProviderAttribute : IBindingsAttribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class NativeConditionalAttribute : Attribute, IBindingsAttribute
{
	// Fields
	private String <Condition>k__BackingField; // 0x10
	private Boolean <Enabled>k__BackingField; // 0x18

	// Properties
	public String Condition { set; }
	public Boolean Enabled { set; }

	// Methods
	// Offset : 0x9724cc
	public Void .ctor(String condition) { }
	// Offset : 0x972500
	public Void set_Condition(String value) { }
	// Offset : 0x972508
	public Void set_Enabled(Boolean value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class NativeHeaderAttribute : Attribute, IBindingsHeaderProviderAttribute, IBindingsAttribute
{
	// Fields
	private String <Header>k__BackingField; // 0x10

	// Properties
	public String Header { set; }

	// Methods
	// Offset : 0x972514
	public Void .ctor(String header) { }
	// Offset : 0x97262c
	public Void set_Header(String value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class NativeNameAttribute : Attribute, IBindingsNameProviderAttribute, IBindingsAttribute
{
	// Fields
	private String <Name>k__BackingField; // 0x10

	// Properties
	public String Name { set; }

	// Methods
	// Offset : 0x972778
	public Void .ctor(String name) { }
	// Offset : 0x972890
	public Void set_Name(String value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal sealed class NativeWritableSelfAttribute : Attribute, IBindingsWritableSelfProviderAttribute, IBindingsAttribute
{
	// Fields
	private Boolean <WritableSelf>k__BackingField; // 0x10

	// Properties
	public Boolean WritableSelf { set; }

	// Methods
	// Offset : 0x972ae4
	public Void .ctor() { }
	// Offset : 0x972b10
	public Void set_WritableSelf(Boolean value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class NativeMethodAttribute : Attribute, IBindingsNameProviderAttribute, IBindingsIsThreadSafeProviderAttribute, IBindingsIsFreeFunctionProviderAttribute, IBindingsThrowsProviderAttribute, IBindingsAttribute
{
	// Fields
	private String <Name>k__BackingField; // 0x10
	private Boolean <IsThreadSafe>k__BackingField; // 0x18
	private Boolean <IsFreeFunction>k__BackingField; // 0x19
	private Boolean <ThrowsException>k__BackingField; // 0x1a
	private Boolean <HasExplicitThis>k__BackingField; // 0x1b

	// Properties
	public String Name { set; }
	public Boolean IsThreadSafe { set; }
	public Boolean IsFreeFunction { set; }
	public Boolean ThrowsException { set; }
	public Boolean HasExplicitThis { set; }

	// Methods
	// Offset : 0x9723dc
	public Void .ctor() { }
	// Offset : 0x972634
	public Void .ctor(String name) { }
	// Offset : 0x972418
	public Void .ctor(String name, Boolean isFreeFunction) { }
	// Offset : 0x972478
	public Void .ctor(String name, Boolean isFreeFunction, Boolean isThreadSafe) { }
	// Offset : 0x97274c
	public Void set_Name(String value) { }
	// Offset : 0x972754
	public Void set_IsThreadSafe(Boolean value) { }
	// Offset : 0x9723e4
	public Void set_IsFreeFunction(Boolean value) { }
	// Offset : 0x972760
	public Void set_ThrowsException(Boolean value) { }
	// Offset : 0x97276c
	public Void set_HasExplicitThis(Boolean value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal enum TargetType
{
	// Fields
	public Int32 value__; // 0x10
	public const TargetType Function = 0; // 0x0
	public const TargetType Field = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class NativePropertyAttribute : NativeMethodAttribute
{
	// Fields
	private TargetType <TargetType>k__BackingField; // 0x1c

	// Properties
	public TargetType TargetType { set; }

	// Methods
	// Offset : 0x972898
	public Void .ctor() { }
	// Offset : 0x9728a0
	public Void .ctor(String name) { }
	// Offset : 0x9728a4
	public Void .ctor(String name, Boolean isFree, TargetType targetType) { }
	// Offset : 0x9728e0
	public Void set_TargetType(TargetType value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal enum CodegenOptions
{
	// Fields
	public Int32 value__; // 0x10
	public const CodegenOptions Auto = 0; // 0x0
	public const CodegenOptions Custom = 1; // 0x0
	public const CodegenOptions Force = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class NativeTypeAttribute : Attribute, IBindingsHeaderProviderAttribute, IBindingsGenerateMarshallingTypeAttribute, IBindingsAttribute
{
	// Fields
	private String <Header>k__BackingField; // 0x10
	private String <IntermediateScriptingStructName>k__BackingField; // 0x18
	private CodegenOptions <CodegenOptions>k__BackingField; // 0x20

	// Properties
	public String Header { set; }
	public String IntermediateScriptingStructName { set; }
	public CodegenOptions CodegenOptions { set; }

	// Methods
	// Offset : 0x972920
	public Void .ctor() { }
	// Offset : 0x972950
	public Void .ctor(CodegenOptions codegenOptions) { }
	// Offset : 0x97297c
	public Void .ctor(String header) { }
	// Offset : 0x972aa0
	public Void .ctor(CodegenOptions codegenOptions, String intermediateStructName) { }
	// Offset : 0x972a98
	public Void set_Header(String value) { }
	// Offset : 0x972adc
	public Void set_IntermediateScriptingStructName(String value) { }
	// Offset : 0x972948
	public Void set_CodegenOptions(CodegenOptions value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class NotNullAttribute : Attribute, IBindingsAttribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x972b1c
	public Void .ctor() { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class UnmarshalledAttribute : Attribute, IBindingsAttribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x972bc8
	public Void .ctor() { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class FreeFunctionAttribute : NativeMethodAttribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x9723b0
	public Void .ctor() { }
	// Offset : 0x9723f0
	public Void .ctor(String name) { }
	// Offset : 0x972444
	public Void .ctor(String name, Boolean isThreadSafe) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class ThreadSafeAttribute : NativeMethodAttribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x972b9c
	public Void .ctor() { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal enum StaticAccessorType
{
	// Fields
	public Int32 value__; // 0x10
	public const StaticAccessorType Dot = 0; // 0x0
	public const StaticAccessorType Arrow = 1; // 0x0
	public const StaticAccessorType DoubleColon = 2; // 0x0
	public const StaticAccessorType ArrowWithDefaultReturnIfNull = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class StaticAccessorAttribute : Attribute, IBindingsAttribute
{
	// Fields
	private String <Name>k__BackingField; // 0x10
	private StaticAccessorType <Type>k__BackingField; // 0x18

	// Properties
	public String Name { set; }
	public StaticAccessorType Type { set; }

	// Methods
	// Offset : 0x972b24
	internal Void .ctor(String name) { }
	// Offset : 0x972b58
	public Void .ctor(String name, StaticAccessorType type) { }
	// Offset : 0x972b50
	public Void set_Name(String value) { }
	// Offset : 0x972b94
	public Void set_Type(StaticAccessorType value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class NativeThrowsAttribute : Attribute, IBindingsThrowsProviderAttribute, IBindingsAttribute
{
	// Fields
	private Boolean <ThrowsException>k__BackingField; // 0x10

	// Properties
	public Boolean ThrowsException { set; }

	// Methods
	// Offset : 0x9728e8
	public Void .ctor() { }
	// Offset : 0x972914
	public Void set_ThrowsException(Boolean value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine.Bindings
internal class IgnoreAttribute : Attribute, IBindingsAttribute
{
	// Fields
	private Boolean <DoesNotContributeToSize>k__BackingField; // 0x10

	// Properties
	public Boolean DoesNotContributeToSize { set; }

	// Methods
	// Offset : 0x9724b8
	public Void .ctor() { }
	// Offset : 0x9724c0
	public Void set_DoesNotContributeToSize(Boolean value) { }
}

// Dll : UnityEngine.SharedInternalsModule.dll
// Namespace: UnityEngine
internal sealed class UnityString
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x972d00
	public static String Format(String fmt, Object[] args) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class AndroidJavaObject : IDisposable
{
	// Fields
	private static Boolean enableDebugPrints; // 0x0
	internal GlobalJavaObjectRef m_jobject; // 0x10
	internal GlobalJavaObjectRef m_jclass; // 0x18
	private static AndroidJavaClass s_JavaLangClass; // 0x8

	// Properties
	protected static AndroidJavaClass JavaLangClass { get; }

	// Methods
	// Offset : 0x6d0a5c
	public Void .ctor(String className, Object[] args) { }
	// Offset : 0x6d0e18
	internal Void .ctor(IntPtr jobject) { }
	// Offset : 0x6d0430
	internal Void .ctor() { }
	// Offset : 0x6d0f1c
	public Void Dispose() { }
	// Offset : 0x6d0f70
	public Void Call(String methodName, Object[] args) { }
	// Offset : 0x6d10a4
	public Void CallStatic(String methodName, Object[] args) { }
	// Offset : 0x
	public FieldType Get(String fieldName) { }
	// Offset : 0x
	public Void Set(String fieldName, FieldType val) { }
	// Offset : 0x
	public FieldType GetStatic(String fieldName) { }
	// Offset : 0x
	public Void SetStatic(String fieldName, FieldType val) { }
	// Offset : 0x6d09ac
	public IntPtr GetRawObject() { }
	// Offset : 0x6d1204
	public IntPtr GetRawClass() { }
	// Offset : 0x
	public ReturnType Call(String methodName, Object[] args) { }
	// Offset : 0x
	public ReturnType CallStatic(String methodName, Object[] args) { }
	// Offset : 0x6d07d8
	protected Void DebugPrint(String msg) { }
	// Offset : 0x6d136c
	protected Void DebugPrint(String call, String methodName, String signature, Object[] args) { }
	// Offset : 0x6d0a9c
	private Void _AndroidJavaObject(String className, Object[] args) { }
	// Offset : 0x6d1818
	protected override Void Finalize() { }
	// Offset : 0x6d18b4
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x6d0f20
	protected Void _Dispose() { }
	// Offset : 0x6d0f74
	protected Void _Call(String methodName, Object[] args) { }
	// Offset : 0x
	protected ReturnType _Call(String methodName, Object[] args) { }
	// Offset : 0x
	protected FieldType _Get(String fieldName) { }
	// Offset : 0x
	protected Void _Set(String fieldName, FieldType val) { }
	// Offset : 0x6d10a8
	protected Void _CallStatic(String methodName, Object[] args) { }
	// Offset : 0x
	protected ReturnType _CallStatic(String methodName, Object[] args) { }
	// Offset : 0x
	protected FieldType _GetStatic(String fieldName) { }
	// Offset : 0x
	protected Void _SetStatic(String fieldName, FieldType val) { }
	// Offset : 0x6d1964
	internal static AndroidJavaObject AndroidJavaObjectDeleteLocalRef(IntPtr jobject) { }
	// Offset : 0x6d1a10
	internal static AndroidJavaClass AndroidJavaClassDeleteLocalRef(IntPtr jclass) { }
	// Offset : 0x6d11d8
	protected IntPtr _GetRawObject() { }
	// Offset : 0x6d1230
	protected IntPtr _GetRawClass() { }
	// Offset : 0x6d0878
	protected static AndroidJavaObject FindClass(String name) { }
	// Offset : 0x6d1abc
	protected static AndroidJavaClass get_JavaLangClass() { }
	// Offset : 0x6d1ba8
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class AndroidJavaClass : AndroidJavaObject
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6d03b0
	public Void .ctor(String className) { }
	// Offset : 0x6d064c
	internal Void .ctor(IntPtr jclass) { }
	// Offset : 0x6d0438
	private Void _AndroidJavaClass(String className) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class AndroidJavaRunnable : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6d2aac
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x6d2abc
	public virtual Void Invoke() { }
	// Offset : 0x6d2d54
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x6d2d88
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class AndroidJavaException : Exception
{
	// Fields
	private String mJavaStackTrace; // 0x60

	// Properties
	public override String StackTrace { get; }

	// Methods
	// Offset : 0x6cdff4
	internal Void .ctor(String message, String javaStackTrace) { }
	// Offset : 0x6d09d8
	public override String get_StackTrace() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class GlobalJavaObjectRef
{
	// Fields
	private Boolean m_disposed; // 0x10
	protected IntPtr m_jobject; // 0x18

	// Properties

	// Methods
	// Offset : 0x6d0754
	public Void .ctor(IntPtr jobject) { }
	// Offset : 0x6e0fb0
	protected override Void Finalize() { }
	// Offset : 0x6d17f0
	public static IntPtr op_Implicit(GlobalJavaObjectRef obj) { }
	// Offset : 0x6d18f0
	public Void Dispose() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class AndroidJavaRunnableProxy : AndroidJavaProxy
{
	// Fields
	private AndroidJavaRunnable mRunnable; // 0x20

	// Properties

	// Methods
	// Offset : 0x6d2d94
	public Void .ctor(AndroidJavaRunnable runnable) { }
	// Offset : 0x6d2e18
	public Void run() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class AndroidJavaProxy
{
	// Fields
	public readonly AndroidJavaClass javaInterface; // 0x10
	internal AndroidJavaObject proxyObject; // 0x18
	private static readonly GlobalJavaObjectRef s_JavaLangSystemClass; // 0x0
	private static readonly IntPtr s_HashCodeMethodID; // 0x8

	// Properties

	// Methods
	// Offset : 0x6d1bf8
	public Void .ctor(String javaInterface) { }
	// Offset : 0x6d1c70
	public Void .ctor(AndroidJavaClass javaInterface) { }
	// Offset : 0x6d1c9c
	public virtual AndroidJavaObject Invoke(String methodName, Object[] args) { }
	// Offset : 0x6d2518
	public virtual AndroidJavaObject Invoke(String methodName, AndroidJavaObject[] javaArgs) { }
	// Offset : 0x6d272c
	public virtual Boolean equals(AndroidJavaObject obj) { }
	// Offset : 0x6d2840
	public virtual Int32 hashCode() { }
	// Offset : 0x6d2938
	public virtual String toString() { }
	// Offset : 0x6d27bc
	internal AndroidJavaObject GetProxy() { }
	// Offset : 0x6d29dc
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class AndroidReflection
{
	// Fields
	private static readonly GlobalJavaObjectRef s_ReflectionHelperClass; // 0x0
	private static readonly IntPtr s_ReflectionHelperGetConstructorID; // 0x8
	private static readonly IntPtr s_ReflectionHelperGetMethodID; // 0x10
	private static readonly IntPtr s_ReflectionHelperGetFieldID; // 0x18
	private static readonly IntPtr s_ReflectionHelperNewProxyInstance; // 0x20

	// Properties

	// Methods
	// Offset : 0x6d2e48
	public static Boolean IsPrimitive(Type t) { }
	// Offset : 0x6d2e74
	public static Boolean IsAssignableFrom(Type t, Type from) { }
	// Offset : 0x6d2ec8
	private static IntPtr GetStaticMethodID(String clazz, String methodName, String signature) { }
	// Offset : 0x6d2f50
	public static IntPtr GetConstructorMember(IntPtr jclass, String signature) { }
	// Offset : 0x6d30ec
	public static IntPtr GetMethodMember(IntPtr jclass, String methodName, String signature, Boolean isStatic) { }
	// Offset : 0x6d3318
	public static IntPtr GetFieldMember(IntPtr jclass, String fieldName, String signature, Boolean isStatic) { }
	// Offset : 0x6d3544
	public static IntPtr NewProxyInstance(Int32 delegateHandle, IntPtr interfaze) { }
	// Offset : 0x6d3638
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal sealed class _AndroidJNIHelper
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x963140
	public Void .ctor() { }
	// Offset : 0x963148
	public static IntPtr CreateJavaProxy(Int32 delegateHandle, AndroidJavaProxy proxy) { }
	// Offset : 0x9631f0
	public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable) { }
	// Offset : 0x963258
	public static IntPtr InvokeJavaProxyMethod(AndroidJavaProxy proxy, IntPtr jmethodName, IntPtr jargs) { }
	// Offset : 0x963558
	public static jvalue[] CreateJNIArgArray(Object[] args) { }
	// Offset : 0x964aac
	public static Object UnboxArray(AndroidJavaObject obj) { }
	// Offset : 0x965144
	public static Object Unbox(AndroidJavaObject obj) { }
	// Offset : 0x965948
	public static AndroidJavaObject Box(Object obj) { }
	// Offset : 0x966318
	public static Void DeleteJNIArgArray(Object[] args, jvalue[] jniArgs) { }
	// Offset : 0x963fb0
	public static IntPtr ConvertToJNIArray(Array array) { }
	// Offset : 0x
	public static ArrayType ConvertFromJNIArray(IntPtr array) { }
	// Offset : 0x966454
	public static IntPtr GetConstructorID(IntPtr jclass, Object[] args) { }
	// Offset : 0x9665dc
	public static IntPtr GetMethodID(IntPtr jclass, String methodName, Object[] args, Boolean isStatic) { }
	// Offset : 0x
	public static IntPtr GetMethodID(IntPtr jclass, String methodName, Object[] args, Boolean isStatic) { }
	// Offset : 0x
	public static IntPtr GetFieldID(IntPtr jclass, String fieldName, Boolean isStatic) { }
	// Offset : 0x966624
	public static IntPtr GetConstructorID(IntPtr jclass, String signature) { }
	// Offset : 0x9667f8
	public static IntPtr GetMethodID(IntPtr jclass, String methodName, String signature, Boolean isStatic) { }
	// Offset : 0x9669dc
	private static IntPtr GetMethodIDFallback(IntPtr jclass, String methodName, String signature, Boolean isStatic) { }
	// Offset : 0x966ae0
	public static IntPtr GetFieldID(IntPtr jclass, String fieldName, String signature, Boolean isStatic) { }
	// Offset : 0x966ce8
	public static String GetSignature(Object obj) { }
	// Offset : 0x966484
	public static String GetSignature(Object[] args) { }
	// Offset : 0x
	public static String GetSignature(Object[] args) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct jvalue
{
	// Fields
	public Boolean z; // 0x10
	public Byte b; // 0x10
	public Char c; // 0x10
	public Int16 s; // 0x10
	public Int32 i; // 0x10
	public Int64 j; // 0x10
	public Single f; // 0x10
	public Double d; // 0x10
	public IntPtr l; // 0x10

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class AndroidJNIHelper
{
	// Fields

	// Properties
	public static Boolean debug { get; set; }

	// Methods
	// Offset : 0x6cdb10
	private Void .ctor() { }
	// Offset : 0x6cdb18
	public static Boolean get_debug() { }
	// Offset : 0x6cdb70
	public static Void set_debug(Boolean value) { }
	// Offset : 0x6cdbdc
	public static IntPtr GetConstructorID(IntPtr javaClass) { }
	// Offset : 0x6cdc30
	public static IntPtr GetConstructorID(IntPtr javaClass, String signature) { }
	// Offset : 0x6cdc38
	public static IntPtr GetMethodID(IntPtr javaClass, String methodName) { }
	// Offset : 0x6cdcac
	public static IntPtr GetMethodID(IntPtr javaClass, String methodName, String signature) { }
	// Offset : 0x6cdca0
	public static IntPtr GetMethodID(IntPtr javaClass, String methodName, String signature, Boolean isStatic) { }
	// Offset : 0x6cdcb8
	public static IntPtr GetFieldID(IntPtr javaClass, String fieldName) { }
	// Offset : 0x6cdd2c
	public static IntPtr GetFieldID(IntPtr javaClass, String fieldName, String signature) { }
	// Offset : 0x6cdd20
	public static IntPtr GetFieldID(IntPtr javaClass, String fieldName, String signature, Boolean isStatic) { }
	// Offset : 0x6cdd38
	public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable) { }
	// Offset : 0x6cdd40
	public static IntPtr CreateJavaProxy(AndroidJavaProxy proxy) { }
	// Offset : 0x6cddac
	public static IntPtr ConvertToJNIArray(Array array) { }
	// Offset : 0x6cddb4
	public static jvalue[] CreateJNIArgArray(Object[] args) { }
	// Offset : 0x6cddbc
	public static Void DeleteJNIArgArray(Object[] args, jvalue[] jniArgs) { }
	// Offset : 0x6cddc4
	public static IntPtr GetConstructorID(IntPtr jclass, Object[] args) { }
	// Offset : 0x6cddcc
	public static IntPtr GetMethodID(IntPtr jclass, String methodName, Object[] args, Boolean isStatic) { }
	// Offset : 0x6cddd8
	public static String GetSignature(Object obj) { }
	// Offset : 0x6cdde0
	public static String GetSignature(Object[] args) { }
	// Offset : 0x
	public static ArrayType ConvertFromJNIArray(IntPtr array) { }
	// Offset : 0x
	public static IntPtr GetMethodID(IntPtr jclass, String methodName, Object[] args, Boolean isStatic) { }
	// Offset : 0x
	public static IntPtr GetFieldID(IntPtr jclass, String fieldName, Boolean isStatic) { }
	// Offset : 0x
	public static String GetSignature(Object[] args) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class AndroidJNI
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6c981c
	private Void .ctor() { }
	// Offset : 0x6c9824
	public static Int32 AttachCurrentThread() { }
	// Offset : 0x6c987c
	public static Int32 DetachCurrentThread() { }
	// Offset : 0x6c98d4
	public static Int32 GetVersion() { }
	// Offset : 0x6c992c
	public static IntPtr FindClass(String name) { }
	// Offset : 0x6c9998
	public static IntPtr FromReflectedMethod(IntPtr refMethod) { }
	// Offset : 0x6c9a04
	public static IntPtr FromReflectedField(IntPtr refField) { }
	// Offset : 0x6c9a70
	public static IntPtr ToReflectedMethod(IntPtr clazz, IntPtr methodID, Boolean isStatic) { }
	// Offset : 0x6c9af4
	public static IntPtr ToReflectedField(IntPtr clazz, IntPtr fieldID, Boolean isStatic) { }
	// Offset : 0x6c9b78
	public static IntPtr GetSuperclass(IntPtr clazz) { }
	// Offset : 0x6c9be4
	public static Boolean IsAssignableFrom(IntPtr clazz1, IntPtr clazz2) { }
	// Offset : 0x6c9c58
	public static Int32 Throw(IntPtr obj) { }
	// Offset : 0x6c9cc4
	public static Int32 ThrowNew(IntPtr clazz, String message) { }
	// Offset : 0x6c9d38
	public static IntPtr ExceptionOccurred() { }
	// Offset : 0x6c9d90
	public static Void ExceptionDescribe() { }
	// Offset : 0x6c9de8
	public static Void ExceptionClear() { }
	// Offset : 0x6c9e40
	public static Void FatalError(String message) { }
	// Offset : 0x6c9eac
	public static Int32 PushLocalFrame(Int32 capacity) { }
	// Offset : 0x6c9f18
	public static IntPtr PopLocalFrame(IntPtr ptr) { }
	// Offset : 0x6c9f84
	public static IntPtr NewGlobalRef(IntPtr obj) { }
	// Offset : 0x6c9ff0
	public static Void DeleteGlobalRef(IntPtr obj) { }
	// Offset : 0x6ca05c
	public static IntPtr NewLocalRef(IntPtr obj) { }
	// Offset : 0x6ca0c8
	public static Void DeleteLocalRef(IntPtr obj) { }
	// Offset : 0x6ca134
	public static Boolean IsSameObject(IntPtr obj1, IntPtr obj2) { }
	// Offset : 0x6ca1a8
	public static Int32 EnsureLocalCapacity(Int32 capacity) { }
	// Offset : 0x6ca214
	public static IntPtr AllocObject(IntPtr clazz) { }
	// Offset : 0x6ca280
	public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6ca304
	public static IntPtr GetObjectClass(IntPtr obj) { }
	// Offset : 0x6ca370
	public static Boolean IsInstanceOf(IntPtr obj, IntPtr clazz) { }
	// Offset : 0x6ca3e4
	public static IntPtr GetMethodID(IntPtr clazz, String name, String sig) { }
	// Offset : 0x6ca468
	public static IntPtr GetFieldID(IntPtr clazz, String name, String sig) { }
	// Offset : 0x6ca4ec
	public static IntPtr GetStaticMethodID(IntPtr clazz, String name, String sig) { }
	// Offset : 0x6ca570
	public static IntPtr GetStaticFieldID(IntPtr clazz, String name, String sig) { }
	// Offset : 0x6ca5f4
	public static IntPtr NewStringUTF(String bytes) { }
	// Offset : 0x6ca660
	public static Int32 GetStringUTFLength(IntPtr str) { }
	// Offset : 0x6ca6cc
	public static String GetStringUTFChars(IntPtr str) { }
	// Offset : 0x6ca738
	public static String CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6ca7bc
	public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6ca840
	public static Int32 CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6ca8c4
	public static Boolean CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6ca948
	public static Int16 CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6ca9cc
	public static Byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6caa50
	public static Char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6caad4
	public static Single CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cab58
	public static Double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cabdc
	public static Int64 CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cac60
	public static Void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cace4
	public static String GetStringField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cad58
	public static IntPtr GetObjectField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cadcc
	public static Boolean GetBooleanField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cae40
	public static Byte GetByteField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6caeb4
	public static Char GetCharField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6caf28
	public static Int16 GetShortField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6caf9c
	public static Int32 GetIntField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cb010
	public static Int64 GetLongField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cb084
	public static Single GetFloatField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cb0f8
	public static Double GetDoubleField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cb16c
	public static Void SetStringField(IntPtr obj, IntPtr fieldID, String val) { }
	// Offset : 0x6cb1f0
	public static Void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val) { }
	// Offset : 0x6cb274
	public static Void SetBooleanField(IntPtr obj, IntPtr fieldID, Boolean val) { }
	// Offset : 0x6cb2f8
	public static Void SetByteField(IntPtr obj, IntPtr fieldID, Byte val) { }
	// Offset : 0x6cb37c
	public static Void SetCharField(IntPtr obj, IntPtr fieldID, Char val) { }
	// Offset : 0x6cb400
	public static Void SetShortField(IntPtr obj, IntPtr fieldID, Int16 val) { }
	// Offset : 0x6cb484
	public static Void SetIntField(IntPtr obj, IntPtr fieldID, Int32 val) { }
	// Offset : 0x6cb508
	public static Void SetLongField(IntPtr obj, IntPtr fieldID, Int64 val) { }
	// Offset : 0x6cb58c
	public static Void SetFloatField(IntPtr obj, IntPtr fieldID, Single val) { }
	// Offset : 0x6cb618
	public static Void SetDoubleField(IntPtr obj, IntPtr fieldID, Double val) { }
	// Offset : 0x6cb6a4
	public static String CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cb728
	public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cb7ac
	public static Int32 CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cb830
	public static Boolean CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cb8b4
	public static Int16 CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cb938
	public static Byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cb9bc
	public static Char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cba40
	public static Single CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cbac4
	public static Double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cbb48
	public static Int64 CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cbbcc
	public static Void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cbc50
	public static String GetStaticStringField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cbcc4
	public static IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cbd38
	public static Boolean GetStaticBooleanField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cbdac
	public static Byte GetStaticByteField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cbe20
	public static Char GetStaticCharField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cbe94
	public static Int16 GetStaticShortField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cbf08
	public static Int32 GetStaticIntField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cbf7c
	public static Int64 GetStaticLongField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cbff0
	public static Single GetStaticFloatField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cc064
	public static Double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cc0d8
	public static Void SetStaticStringField(IntPtr clazz, IntPtr fieldID, String val) { }
	// Offset : 0x6cc15c
	public static Void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val) { }
	// Offset : 0x6cc1e0
	public static Void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, Boolean val) { }
	// Offset : 0x6cc264
	public static Void SetStaticByteField(IntPtr clazz, IntPtr fieldID, Byte val) { }
	// Offset : 0x6cc2e8
	public static Void SetStaticCharField(IntPtr clazz, IntPtr fieldID, Char val) { }
	// Offset : 0x6cc36c
	public static Void SetStaticShortField(IntPtr clazz, IntPtr fieldID, Int16 val) { }
	// Offset : 0x6cc3f0
	public static Void SetStaticIntField(IntPtr clazz, IntPtr fieldID, Int32 val) { }
	// Offset : 0x6cc474
	public static Void SetStaticLongField(IntPtr clazz, IntPtr fieldID, Int64 val) { }
	// Offset : 0x6cc4f8
	public static Void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, Single val) { }
	// Offset : 0x6cc584
	public static Void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, Double val) { }
	// Offset : 0x6cc610
	public static IntPtr ToBooleanArray(Boolean[] array) { }
	// Offset : 0x6cc67c
	public static IntPtr ToByteArray(Byte[] array) { }
	// Offset : 0x6cc6e8
	public static IntPtr ToCharArray(Char[] array) { }
	// Offset : 0x6cc754
	public static IntPtr ToShortArray(Int16[] array) { }
	// Offset : 0x6cc7c0
	public static IntPtr ToIntArray(Int32[] array) { }
	// Offset : 0x6cc82c
	public static IntPtr ToLongArray(Int64[] array) { }
	// Offset : 0x6cc898
	public static IntPtr ToFloatArray(Single[] array) { }
	// Offset : 0x6cc904
	public static IntPtr ToDoubleArray(Double[] array) { }
	// Offset : 0x6cc970
	public static IntPtr ToObjectArray(IntPtr[] array, IntPtr arrayClass) { }
	// Offset : 0x6cc9e4
	public static IntPtr ToObjectArray(IntPtr[] array) { }
	// Offset : 0x6cca2c
	public static Boolean[] FromBooleanArray(IntPtr array) { }
	// Offset : 0x6cca98
	public static Byte[] FromByteArray(IntPtr array) { }
	// Offset : 0x6ccb04
	public static Char[] FromCharArray(IntPtr array) { }
	// Offset : 0x6ccb70
	public static Int16[] FromShortArray(IntPtr array) { }
	// Offset : 0x6ccbdc
	public static Int32[] FromIntArray(IntPtr array) { }
	// Offset : 0x6ccc48
	public static Int64[] FromLongArray(IntPtr array) { }
	// Offset : 0x6cccb4
	public static Single[] FromFloatArray(IntPtr array) { }
	// Offset : 0x6ccd20
	public static Double[] FromDoubleArray(IntPtr array) { }
	// Offset : 0x6ccd8c
	public static IntPtr[] FromObjectArray(IntPtr array) { }
	// Offset : 0x6ccdf8
	public static Int32 GetArrayLength(IntPtr array) { }
	// Offset : 0x6cce64
	public static IntPtr NewBooleanArray(Int32 size) { }
	// Offset : 0x6cced0
	public static IntPtr NewByteArray(Int32 size) { }
	// Offset : 0x6ccf3c
	public static IntPtr NewCharArray(Int32 size) { }
	// Offset : 0x6ccfa8
	public static IntPtr NewShortArray(Int32 size) { }
	// Offset : 0x6cd014
	public static IntPtr NewIntArray(Int32 size) { }
	// Offset : 0x6cd080
	public static IntPtr NewLongArray(Int32 size) { }
	// Offset : 0x6cd0ec
	public static IntPtr NewFloatArray(Int32 size) { }
	// Offset : 0x6cd158
	public static IntPtr NewDoubleArray(Int32 size) { }
	// Offset : 0x6cd1c4
	public static IntPtr NewObjectArray(Int32 size, IntPtr clazz, IntPtr obj) { }
	// Offset : 0x6cd248
	public static Boolean GetBooleanArrayElement(IntPtr array, Int32 index) { }
	// Offset : 0x6cd2bc
	public static Byte GetByteArrayElement(IntPtr array, Int32 index) { }
	// Offset : 0x6cd330
	public static Char GetCharArrayElement(IntPtr array, Int32 index) { }
	// Offset : 0x6cd3a4
	public static Int16 GetShortArrayElement(IntPtr array, Int32 index) { }
	// Offset : 0x6cd418
	public static Int32 GetIntArrayElement(IntPtr array, Int32 index) { }
	// Offset : 0x6cd48c
	public static Int64 GetLongArrayElement(IntPtr array, Int32 index) { }
	// Offset : 0x6cd500
	public static Single GetFloatArrayElement(IntPtr array, Int32 index) { }
	// Offset : 0x6cd574
	public static Double GetDoubleArrayElement(IntPtr array, Int32 index) { }
	// Offset : 0x6cd5e8
	public static IntPtr GetObjectArrayElement(IntPtr array, Int32 index) { }
	// Offset : 0x6cd65c
	public static Void SetBooleanArrayElement(IntPtr array, Int32 index, Byte val) { }
	// Offset : 0x6cd6e0
	public static Void SetByteArrayElement(IntPtr array, Int32 index, SByte val) { }
	// Offset : 0x6cd764
	public static Void SetCharArrayElement(IntPtr array, Int32 index, Char val) { }
	// Offset : 0x6cd7e8
	public static Void SetShortArrayElement(IntPtr array, Int32 index, Int16 val) { }
	// Offset : 0x6cd86c
	public static Void SetIntArrayElement(IntPtr array, Int32 index, Int32 val) { }
	// Offset : 0x6cd8f0
	public static Void SetLongArrayElement(IntPtr array, Int32 index, Int64 val) { }
	// Offset : 0x6cd974
	public static Void SetFloatArrayElement(IntPtr array, Int32 index, Single val) { }
	// Offset : 0x6cda00
	public static Void SetDoubleArrayElement(IntPtr array, Int32 index, Double val) { }
	// Offset : 0x6cda8c
	public static Void SetObjectArrayElement(IntPtr array, Int32 index, IntPtr obj) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class AndroidJNISafe
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6cdde8
	public static Void CheckException() { }
	// Offset : 0x6ce084
	public static Void DeleteGlobalRef(IntPtr globalref) { }
	// Offset : 0x6ce020
	public static Void DeleteLocalRef(IntPtr localref) { }
	// Offset : 0x6ce0e8
	public static IntPtr NewStringUTF(String bytes) { }
	// Offset : 0x6ce148
	public static String GetStringUTFChars(IntPtr str) { }
	// Offset : 0x6ce1a8
	public static IntPtr GetObjectClass(IntPtr ptr) { }
	// Offset : 0x6ce208
	public static IntPtr GetStaticMethodID(IntPtr clazz, String name, String sig) { }
	// Offset : 0x6ce268
	public static IntPtr GetMethodID(IntPtr obj, String name, String sig) { }
	// Offset : 0x6ce2c8
	public static IntPtr GetFieldID(IntPtr clazz, String name, String sig) { }
	// Offset : 0x6ce328
	public static IntPtr GetStaticFieldID(IntPtr clazz, String name, String sig) { }
	// Offset : 0x6ce388
	public static IntPtr FromReflectedMethod(IntPtr refMethod) { }
	// Offset : 0x6ce3e8
	public static IntPtr FromReflectedField(IntPtr refField) { }
	// Offset : 0x6ce448
	public static IntPtr FindClass(String name) { }
	// Offset : 0x6ce4a8
	public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6ce508
	public static Void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr val) { }
	// Offset : 0x6ce568
	public static Void SetStaticStringField(IntPtr clazz, IntPtr fieldID, String val) { }
	// Offset : 0x6ce5c8
	public static Void SetStaticCharField(IntPtr clazz, IntPtr fieldID, Char val) { }
	// Offset : 0x6ce628
	public static Void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, Double val) { }
	// Offset : 0x6ce688
	public static Void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, Single val) { }
	// Offset : 0x6ce6e8
	public static Void SetStaticLongField(IntPtr clazz, IntPtr fieldID, Int64 val) { }
	// Offset : 0x6ce748
	public static Void SetStaticShortField(IntPtr clazz, IntPtr fieldID, Int16 val) { }
	// Offset : 0x6ce7a8
	public static Void SetStaticByteField(IntPtr clazz, IntPtr fieldID, Byte val) { }
	// Offset : 0x6ce808
	public static Void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, Boolean val) { }
	// Offset : 0x6ce86c
	public static Void SetStaticIntField(IntPtr clazz, IntPtr fieldID, Int32 val) { }
	// Offset : 0x6ce8cc
	public static IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6ce92c
	public static String GetStaticStringField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6ce98c
	public static Char GetStaticCharField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6ce9ec
	public static Double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cea54
	public static Single GetStaticFloatField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6ceabc
	public static Int64 GetStaticLongField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6ceb1c
	public static Int16 GetStaticShortField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6ceb7c
	public static Byte GetStaticByteField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cebdc
	public static Boolean GetStaticBooleanField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cec3c
	public static Int32 GetStaticIntField(IntPtr clazz, IntPtr fieldID) { }
	// Offset : 0x6cec9c
	public static Void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cecfc
	public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6ced5c
	public static String CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cedbc
	public static Char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cee1c
	public static Double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cee84
	public static Single CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6ceeec
	public static Int64 CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cef4c
	public static Int16 CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cefac
	public static Byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cf00c
	public static Boolean CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cf06c
	public static Int32 CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cf0cc
	public static Void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val) { }
	// Offset : 0x6cf12c
	public static Void SetStringField(IntPtr obj, IntPtr fieldID, String val) { }
	// Offset : 0x6cf18c
	public static Void SetCharField(IntPtr obj, IntPtr fieldID, Char val) { }
	// Offset : 0x6cf1ec
	public static Void SetDoubleField(IntPtr obj, IntPtr fieldID, Double val) { }
	// Offset : 0x6cf24c
	public static Void SetFloatField(IntPtr obj, IntPtr fieldID, Single val) { }
	// Offset : 0x6cf2ac
	public static Void SetLongField(IntPtr obj, IntPtr fieldID, Int64 val) { }
	// Offset : 0x6cf30c
	public static Void SetShortField(IntPtr obj, IntPtr fieldID, Int16 val) { }
	// Offset : 0x6cf36c
	public static Void SetByteField(IntPtr obj, IntPtr fieldID, Byte val) { }
	// Offset : 0x6cf3cc
	public static Void SetBooleanField(IntPtr obj, IntPtr fieldID, Boolean val) { }
	// Offset : 0x6cf430
	public static Void SetIntField(IntPtr obj, IntPtr fieldID, Int32 val) { }
	// Offset : 0x6cf490
	public static IntPtr GetObjectField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cf4f0
	public static String GetStringField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cf550
	public static Char GetCharField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cf5b0
	public static Double GetDoubleField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cf618
	public static Single GetFloatField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cf680
	public static Int64 GetLongField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cf6e0
	public static Int16 GetShortField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cf740
	public static Byte GetByteField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cf7a0
	public static Boolean GetBooleanField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cf800
	public static Int32 GetIntField(IntPtr obj, IntPtr fieldID) { }
	// Offset : 0x6cf860
	public static Void CallVoidMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cf8c0
	public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cf920
	public static String CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cf980
	public static Char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cf9e0
	public static Double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cfa48
	public static Single CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cfab0
	public static Int64 CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cfb10
	public static Int16 CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cfb70
	public static Byte CallByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cfbd0
	public static Boolean CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cfc30
	public static Int32 CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// Offset : 0x6cfc90
	public static Char[] FromCharArray(IntPtr array) { }
	// Offset : 0x6cfcf0
	public static Double[] FromDoubleArray(IntPtr array) { }
	// Offset : 0x6cfd50
	public static Single[] FromFloatArray(IntPtr array) { }
	// Offset : 0x6cfdb0
	public static Int64[] FromLongArray(IntPtr array) { }
	// Offset : 0x6cfe10
	public static Int16[] FromShortArray(IntPtr array) { }
	// Offset : 0x6cfe70
	public static Byte[] FromByteArray(IntPtr array) { }
	// Offset : 0x6cfed0
	public static Boolean[] FromBooleanArray(IntPtr array) { }
	// Offset : 0x6cff30
	public static Int32[] FromIntArray(IntPtr array) { }
	// Offset : 0x6cff90
	public static IntPtr ToObjectArray(IntPtr[] array, IntPtr type) { }
	// Offset : 0x6cfff0
	public static IntPtr ToCharArray(Char[] array) { }
	// Offset : 0x6d0050
	public static IntPtr ToDoubleArray(Double[] array) { }
	// Offset : 0x6d00b0
	public static IntPtr ToFloatArray(Single[] array) { }
	// Offset : 0x6d0110
	public static IntPtr ToLongArray(Int64[] array) { }
	// Offset : 0x6d0170
	public static IntPtr ToShortArray(Int16[] array) { }
	// Offset : 0x6d01d0
	public static IntPtr ToByteArray(Byte[] array) { }
	// Offset : 0x6d0230
	public static IntPtr ToBooleanArray(Boolean[] array) { }
	// Offset : 0x6d0290
	public static IntPtr ToIntArray(Int32[] array) { }
	// Offset : 0x6d02f0
	public static IntPtr GetObjectArrayElement(IntPtr array, Int32 index) { }
	// Offset : 0x6d0350
	public static Int32 GetArrayLength(IntPtr array) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Keyframe
{
	// Fields
	private Single m_Time; // 0x10
	private Single m_Value; // 0x14
	private Single m_InTangent; // 0x18
	private Single m_OutTangent; // 0x1c
	private Int32 m_WeightedMode; // 0x20
	private Single m_InWeight; // 0x24
	private Single m_OutWeight; // 0x28

	// Properties

	// Methods
	// Offset : 0x2cf680
	public Void .ctor(Single time, Single value, Single inTangent, Single outTangent) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class AnimationCurve : IEquatable`1
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties

	// Methods
	// Offset : 0x6d3774
	public Void .ctor(Keyframe[] keys) { }
	// Offset : 0x6d3814
	public Void .ctor() { }
	// Offset : 0x6d3844
	private static Void Internal_Destroy(IntPtr ptr) { }
	// Offset : 0x6d37a8
	private static IntPtr Internal_Create(Keyframe[] keys) { }
	// Offset : 0x6d38b0
	private Boolean Internal_Equals(IntPtr other) { }
	// Offset : 0x6d3924
	protected override Void Finalize() { }
	// Offset : 0x6d399c
	public Single Evaluate(Single time) { }
	// Offset : 0x6d3a10
	public override Boolean Equals(Object o) { }
	// Offset : 0x6d3b28
	public Boolean Equals(AnimationCurve other) { }
	// Offset : 0x6d3bd4
	public override Int32 GetHashCode() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Application
{
	// Fields
	private static LowMemoryCallback lowMemory; // 0x0
	private static LogCallback s_LogCallbackHandler; // 0x8
	private static LogCallback s_LogCallbackHandlerThreaded; // 0x10
	private static Action`1 focusChanged; // 0x18
	private static Func`1 wantsToQuit; // 0x20
	private static Action quitting; // 0x28

	// Properties
	public static Boolean isPlaying { get; }
	public static RuntimePlatform platform { get; }
	public static Boolean runInBackground { get; set; }
	public static String dataPath { get; }
	public static String streamingAssetsPath { get; }
	public static String persistentDataPath { get; }
	public static String identifier { get; }
	public static Int32 targetFrameRate { set; }
	public static SystemLanguage systemLanguage { get; }
	public static Boolean isEditor { get; }

	// Methods
	// Offset : 0x6d3be0
	public static Void Quit(Int32 exitCode) { }
	// Offset : 0x6d3c4c
	public static Void Quit() { }
	// Offset : 0x6d3c54
	public static Boolean get_isPlaying() { }
	// Offset : 0x6d3cac
	public static RuntimePlatform get_platform() { }
	// Offset : 0x6d3d04
	public static Boolean get_runInBackground() { }
	// Offset : 0x6d3d5c
	public static Void set_runInBackground(Boolean value) { }
	// Offset : 0x6d3dc8
	public static String get_dataPath() { }
	// Offset : 0x6d3e20
	public static String get_streamingAssetsPath() { }
	// Offset : 0x6d3e78
	public static String get_persistentDataPath() { }
	// Offset : 0x6d3ed0
	public static String get_identifier() { }
	// Offset : 0x6d3f28
	public static Void set_targetFrameRate(Int32 value) { }
	// Offset : 0x6d3f94
	public static SystemLanguage get_systemLanguage() { }
	// Offset : 0x6d3fec
	private static Void CallLowMemory() { }
	// Offset : 0x6d42e8
	private static Void CallLogCallback(String logString, String stackTrace, LogType type, Boolean invokedOnMainThread) { }
	// Offset : 0x6d48c0
	public static Boolean get_isEditor() { }
	// Offset : 0x6d48c8
	private static Boolean Internal_ApplicationWantsToQuit() { }
	// Offset : 0x6d4bfc
	private static Void Internal_ApplicationQuit() { }
	// Offset : 0x6d4c60
	internal static Void InvokeOnBeforeRender() { }
	// Offset : 0x6d4e64
	internal static Void InvokeFocusChanged(Boolean focus) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public sealed class LowMemoryCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6d4f94
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x6d4050
	public virtual Void Invoke() { }
	// Offset : 0x6d4fa4
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x6d4fd8
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public sealed class LogCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6d4ed8
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x6d43b0
	public virtual Void Invoke(String condition, String stackTrace, LogType type) { }
	// Offset : 0x6d4ee8
	public virtual IAsyncResult BeginInvoke(String condition, String stackTrace, LogType type, AsyncCallback callback, Object object) { }
	// Offset : 0x6d4f88
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class AsyncOperation : YieldInstruction
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private Action`1 m_completeCallback; // 0x18

	// Properties
	public Boolean isDone { get; }
	public Single progress { get; }

	// Methods
	// Offset : 0x6d5a3c
	public Void .ctor() { }
	// Offset : 0x6d5a44
	private static Void InternalDestroy(IntPtr ptr) { }
	// Offset : 0x6d5ab0
	public Boolean get_isDone() { }
	// Offset : 0x6d5b1c
	public Single get_progress() { }
	// Offset : 0x6d5b88
	protected override Void Finalize() { }
	// Offset : 0x6d5c00
	internal Void InvokeCompletionEvent() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class AttributeHelperEngine
{
	// Fields
	public static DisallowMultipleComponent[] _disallowMultipleComponentArray; // 0x0
	public static ExecuteInEditMode[] _executeInEditModeArray; // 0x8
	public static RequireComponent[] _requireComponentArray; // 0x10

	// Properties

	// Methods
	// Offset : 0x6d5c60
	private static Type GetParentTypeDisallowingMultipleInclusion(Type type) { }
	// Offset : 0x6d5d84
	private static Type[] GetRequiredComponents(Type klass) { }
	// Offset : 0x6d61c4
	private static Int32 GetExecuteMode(Type klass) { }
	// Offset : 0x6d6320
	private static Int32 CheckIsEditorScript(Type klass) { }
	// Offset : 0x6d6420
	private static Int32 GetDefaultExecutionOrderFor(Type klass) { }
	// Offset : 0x
	private static T GetCustomAttributeOfType(Type klass) { }
	// Offset : 0x6d64a4
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class DisallowMultipleComponent : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6dbaac
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class RequireComponent : Attribute
{
	// Fields
	public Type m_Type0; // 0x10
	public Type m_Type1; // 0x18
	public Type m_Type2; // 0x20

	// Properties

	// Methods
	// Offset : 0x611cd0
	public Void .ctor(Type requiredComponent) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class AddComponentMenu : Attribute
{
	// Fields
	private String m_AddComponentMenu; // 0x10
	private Int32 m_Ordering; // 0x18

	// Properties

	// Methods
	// Offset : 0x6c97b0
	public Void .ctor(String menuName) { }
	// Offset : 0x6c97e0
	public Void .ctor(String menuName, Int32 order) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class ContextMenu : Attribute
{
	// Fields
	public readonly String menuItem; // 0x10
	public readonly Boolean validate; // 0x18
	public readonly Int32 priority; // 0x1c

	// Properties

	// Methods
	// Offset : 0x6d98d8
	public Void .ctor(String itemName) { }
	// Offset : 0x6d9914
	public Void .ctor(String itemName, Boolean isValidateFunction) { }
	// Offset : 0x6d9960
	public Void .ctor(String itemName, Boolean isValidateFunction, Int32 priority) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class ExecuteInEditMode : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6deb8c
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class ExecuteAlways : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6deb84
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class HideInInspector : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e17d0
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class DefaultExecutionOrder : Attribute
{
	// Fields
	private Int32 <order>k__BackingField; // 0x10

	// Properties
	public Int32 order { get; }

	// Methods
	// Offset : 0x6d649c
	public Int32 get_order() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class AssemblyIsEditorAssembly : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class ExcludeFromPresetAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6deb7c
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum SendMessageOptions
{
	// Fields
	public Int32 value__; // 0x10
	public const SendMessageOptions RequireReceiver = 0; // 0x0
	public const SendMessageOptions DontRequireReceiver = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum Space
{
	// Fields
	public Int32 value__; // 0x10
	public const Space World = 0; // 0x0
	public const Space Self = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum RuntimePlatform
{
	// Fields
	public Int32 value__; // 0x10
	public const RuntimePlatform OSXEditor = 0; // 0x0
	public const RuntimePlatform OSXPlayer = 1; // 0x0
	public const RuntimePlatform WindowsPlayer = 2; // 0x0
	public const RuntimePlatform OSXWebPlayer = 3; // 0x0
	public const RuntimePlatform OSXDashboardPlayer = 4; // 0x0
	public const RuntimePlatform WindowsWebPlayer = 5; // 0x0
	public const RuntimePlatform WindowsEditor = 7; // 0x0
	public const RuntimePlatform IPhonePlayer = 8; // 0x0
	public const RuntimePlatform XBOX360 = 10; // 0x0
	public const RuntimePlatform PS3 = 9; // 0x0
	public const RuntimePlatform Android = 11; // 0x0
	public const RuntimePlatform NaCl = 12; // 0x0
	public const RuntimePlatform FlashPlayer = 15; // 0x0
	public const RuntimePlatform LinuxPlayer = 13; // 0x0
	public const RuntimePlatform LinuxEditor = 16; // 0x0
	public const RuntimePlatform WebGLPlayer = 17; // 0x0
	public const RuntimePlatform MetroPlayerX86 = 18; // 0x0
	public const RuntimePlatform WSAPlayerX86 = 18; // 0x0
	public const RuntimePlatform MetroPlayerX64 = 19; // 0x0
	public const RuntimePlatform WSAPlayerX64 = 19; // 0x0
	public const RuntimePlatform MetroPlayerARM = 20; // 0x0
	public const RuntimePlatform WSAPlayerARM = 20; // 0x0
	public const RuntimePlatform WP8Player = 21; // 0x0
	public const RuntimePlatform BlackBerryPlayer = 22; // 0x0
	public const RuntimePlatform TizenPlayer = 23; // 0x0
	public const RuntimePlatform PSP2 = 24; // 0x0
	public const RuntimePlatform PS4 = 25; // 0x0
	public const RuntimePlatform PSM = 26; // 0x0
	public const RuntimePlatform XboxOne = 27; // 0x0
	public const RuntimePlatform SamsungTVPlayer = 28; // 0x0
	public const RuntimePlatform WiiU = 30; // 0x0
	public const RuntimePlatform tvOS = 31; // 0x0
	public const RuntimePlatform Switch = 32; // 0x0
	public const RuntimePlatform Lumin = 33; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum SystemLanguage
{
	// Fields
	public Int32 value__; // 0x10
	public const SystemLanguage Afrikaans = 0; // 0x0
	public const SystemLanguage Arabic = 1; // 0x0
	public const SystemLanguage Basque = 2; // 0x0
	public const SystemLanguage Belarusian = 3; // 0x0
	public const SystemLanguage Bulgarian = 4; // 0x0
	public const SystemLanguage Catalan = 5; // 0x0
	public const SystemLanguage Chinese = 6; // 0x0
	public const SystemLanguage Czech = 7; // 0x0
	public const SystemLanguage Danish = 8; // 0x0
	public const SystemLanguage Dutch = 9; // 0x0
	public const SystemLanguage English = 10; // 0x0
	public const SystemLanguage Estonian = 11; // 0x0
	public const SystemLanguage Faroese = 12; // 0x0
	public const SystemLanguage Finnish = 13; // 0x0
	public const SystemLanguage French = 14; // 0x0
	public const SystemLanguage German = 15; // 0x0
	public const SystemLanguage Greek = 16; // 0x0
	public const SystemLanguage Hebrew = 17; // 0x0
	public const SystemLanguage Icelandic = 19; // 0x0
	public const SystemLanguage Indonesian = 20; // 0x0
	public const SystemLanguage Italian = 21; // 0x0
	public const SystemLanguage Japanese = 22; // 0x0
	public const SystemLanguage Korean = 23; // 0x0
	public const SystemLanguage Latvian = 24; // 0x0
	public const SystemLanguage Lithuanian = 25; // 0x0
	public const SystemLanguage Norwegian = 26; // 0x0
	public const SystemLanguage Polish = 27; // 0x0
	public const SystemLanguage Portuguese = 28; // 0x0
	public const SystemLanguage Romanian = 29; // 0x0
	public const SystemLanguage Russian = 30; // 0x0
	public const SystemLanguage SerboCroatian = 31; // 0x0
	public const SystemLanguage Slovak = 32; // 0x0
	public const SystemLanguage Slovenian = 33; // 0x0
	public const SystemLanguage Spanish = 34; // 0x0
	public const SystemLanguage Swedish = 35; // 0x0
	public const SystemLanguage Thai = 36; // 0x0
	public const SystemLanguage Turkish = 37; // 0x0
	public const SystemLanguage Ukrainian = 38; // 0x0
	public const SystemLanguage Vietnamese = 39; // 0x0
	public const SystemLanguage ChineseSimplified = 40; // 0x0
	public const SystemLanguage ChineseTraditional = 41; // 0x0
	public const SystemLanguage Unknown = 42; // 0x0
	public const SystemLanguage Hungarian = 18; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum LogType
{
	// Fields
	public Int32 value__; // 0x10
	public const LogType Error = 0; // 0x0
	public const LogType Assert = 1; // 0x0
	public const LogType Warning = 2; // 0x0
	public const LogType Log = 3; // 0x0
	public const LogType Exception = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal static class BeforeRenderHelper
{
	// Fields
	private static List`1 s_OrderBlocks; // 0x0

	// Properties

	// Methods
	// Offset : 0x6d4cbc
	public static Void Invoke() { }
	// Offset : 0x6d67e0
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
private struct OrderBlock
{
	// Fields
	internal Int32 order; // 0x10
	internal UnityAction callback; // 0x18

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Behaviour : Component
{
	// Fields

	// Properties
	public Boolean enabled { get; set; }
	public Boolean isActiveAndEnabled { get; }

	// Methods
	// Offset : 0x6d6854
	public Void .ctor() { }
	// Offset : 0x6d68c0
	public Boolean get_enabled() { }
	// Offset : 0x6d692c
	public Void set_enabled(Boolean value) { }
	// Offset : 0x6d69a0
	public Boolean get_isActiveAndEnabled() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class BootConfigData
{
	// Fields
	private IntPtr m_Ptr; // 0x10

	// Properties

	// Methods
	// Offset : 0x6d6a0c
	private Void .ctor(IntPtr nativeHandle) { }
	// Offset : 0x6d6ac0
	private static BootConfigData WrapBootConfigData(IntPtr nativeHandle) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Bounds : IEquatable`1
{
	// Fields
	private Vector3 m_Center; // 0x10
	private Vector3 m_Extents; // 0x1c

	// Properties
	public Vector3 center { get; set; }
	public Vector3 size { get; set; }
	public Vector3 extents { get; set; }
	public Vector3 min { get; }
	public Vector3 max { get; }

	// Methods
	// Offset : 0x2cf104
	public Void .ctor(Vector3 center, Vector3 size) { }
	// Offset : 0x2cf10c
	public override Int32 GetHashCode() { }
	// Offset : 0x2cf114
	public override Boolean Equals(Object other) { }
	// Offset : 0x2cf11c
	public Boolean Equals(Bounds other) { }
	// Offset : 0x2cf154
	public Vector3 get_center() { }
	// Offset : 0x2cf160
	public Void set_center(Vector3 value) { }
	// Offset : 0x2cf16c
	public Vector3 get_size() { }
	// Offset : 0x2cf174
	public Void set_size(Vector3 value) { }
	// Offset : 0x2cf17c
	public Vector3 get_extents() { }
	// Offset : 0x2cf188
	public Void set_extents(Vector3 value) { }
	// Offset : 0x2cf194
	public Vector3 get_min() { }
	// Offset : 0x2cf19c
	public Vector3 get_max() { }
	// Offset : 0x6d6ffc
	public static Boolean op_Equality(Bounds lhs, Bounds rhs) { }
	// Offset : 0x6d7118
	public static Boolean op_Inequality(Bounds lhs, Bounds rhs) { }
	// Offset : 0x2cf1a4
	public Void SetMinMax(Vector3 min, Vector3 max) { }
	// Offset : 0x2cf1ac
	public Void Encapsulate(Vector3 point) { }
	// Offset : 0x2cf1b4
	public Void Encapsulate(Bounds bounds) { }
	// Offset : 0x2cf1e8
	public override String ToString() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct CachedAssetBundle
{
	// Fields
	private String m_Name; // 0x10
	private Hash128 m_Hash; // 0x18

	// Properties
	public String name { get; }
	public Hash128 hash { get; }

	// Methods
	// Offset : 0x2cf280
	public Void .ctor(String name, Hash128 hash) { }
	// Offset : 0x2cf28c
	public String get_name() { }
	// Offset : 0x2cf294
	public Hash128 get_hash() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Camera : Behaviour
{
	// Fields
	public static CameraCallback onPreCull; // 0x0
	public static CameraCallback onPreRender; // 0x8
	public static CameraCallback onPostRender; // 0x10

	// Properties
	public Single nearClipPlane { get; set; }
	public Single farClipPlane { get; }
	public Single fieldOfView { get; set; }
	public Single depth { get; }
	public Int32 cullingMask { get; }
	public Int32 eventMask { get; }
	public CameraClearFlags clearFlags { get; }
	public Rect pixelRect { get; }
	public RenderTexture targetTexture { get; }
	public Int32 targetDisplay { get; }
	public static Camera main { get; }
	public static Int32 allCamerasCount { get; }

	// Methods
	// Offset : 0x6d75a4
	public Void .ctor() { }
	// Offset : 0x6d75a8
	public Single get_nearClipPlane() { }
	// Offset : 0x6d7614
	public Void set_nearClipPlane(Single value) { }
	// Offset : 0x6d7688
	public Single get_farClipPlane() { }
	// Offset : 0x6d76f4
	public Single get_fieldOfView() { }
	// Offset : 0x6d7760
	public Void set_fieldOfView(Single value) { }
	// Offset : 0x6d77d4
	public Single get_depth() { }
	// Offset : 0x6d7840
	public Int32 get_cullingMask() { }
	// Offset : 0x6d78ac
	public Int32 get_eventMask() { }
	// Offset : 0x6d7918
	public CameraClearFlags get_clearFlags() { }
	// Offset : 0x6d7984
	public Rect get_pixelRect() { }
	// Offset : 0x6d7a24
	public RenderTexture get_targetTexture() { }
	// Offset : 0x6d7a90
	public Int32 get_targetDisplay() { }
	// Offset : 0x6d7afc
	public Vector3 WorldToScreenPoint(Vector3 position, MonoOrStereoscopicEye eye) { }
	// Offset : 0x6d7bcc
	public Vector3 WorldToViewportPoint(Vector3 position, MonoOrStereoscopicEye eye) { }
	// Offset : 0x6d7c9c
	public Vector3 ScreenToWorldPoint(Vector3 position, MonoOrStereoscopicEye eye) { }
	// Offset : 0x6d7d6c
	public Vector3 WorldToScreenPoint(Vector3 position) { }
	// Offset : 0x6d7d74
	public Vector3 WorldToViewportPoint(Vector3 position) { }
	// Offset : 0x6d7d7c
	public Vector3 ScreenToWorldPoint(Vector3 position) { }
	// Offset : 0x6d7d84
	public Vector3 ScreenToViewportPoint(Vector3 position) { }
	// Offset : 0x6d7e44
	private Ray ScreenPointToRay(Vector2 pos, MonoOrStereoscopicEye eye) { }
	// Offset : 0x6d7f20
	public Ray ScreenPointToRay(Vector3 pos, MonoOrStereoscopicEye eye) { }
	// Offset : 0x6d800c
	public Ray ScreenPointToRay(Vector3 pos) { }
	// Offset : 0x6d8050
	internal GameObject RaycastTry(Ray ray, Single distance, Int32 layerMask) { }
	// Offset : 0x6d80e0
	internal GameObject RaycastTry2D(Ray ray, Single distance, Int32 layerMask) { }
	// Offset : 0x6d8170
	public static Camera get_main() { }
	// Offset : 0x6d81c8
	private static Int32 GetAllCamerasCount() { }
	// Offset : 0x6d8220
	private static Int32 GetAllCamerasImpl([Out] Camera[] cam) { }
	// Offset : 0x6d828c
	public static Int32 get_allCamerasCount() { }
	// Offset : 0x6d8290
	public static Int32 GetAllCameras(Camera[] cameras) { }
	// Offset : 0x6d834c
	private static Void FireOnPreCull(Camera cam) { }
	// Offset : 0x6d8878
	private static Void FireOnPreRender(Camera cam) { }
	// Offset : 0x6d88e4
	private static Void FireOnPostRender(Camera cam) { }
	// Offset : 0x6d79b0
	private Void get_pixelRect_Injected(out Rect ret) { }
	// Offset : 0x6d7b40
	private Void WorldToScreenPoint_Injected(ref Vector3 position, MonoOrStereoscopicEye eye, out Vector3 ret) { }
	// Offset : 0x6d7c10
	private Void WorldToViewportPoint_Injected(ref Vector3 position, MonoOrStereoscopicEye eye, out Vector3 ret) { }
	// Offset : 0x6d7ce0
	private Void ScreenToWorldPoint_Injected(ref Vector3 position, MonoOrStereoscopicEye eye, out Vector3 ret) { }
	// Offset : 0x6d7dc0
	private Void ScreenToViewportPoint_Injected(ref Vector3 position, out Vector3 ret) { }
	// Offset : 0x6d7e94
	private Void ScreenPointToRay_Injected(ref Vector2 pos, MonoOrStereoscopicEye eye, out Ray ret) { }
	// Offset : 0x6d8054
	private GameObject RaycastTry_Injected(ref Ray ray, Single distance, Int32 layerMask) { }
	// Offset : 0x6d80e4
	private GameObject RaycastTry2D_Injected(ref Ray ray, Single distance, Int32 layerMask) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public enum MonoOrStereoscopicEye
{
	// Fields
	public Int32 value__; // 0x10
	public const MonoOrStereoscopicEye Left = 0; // 0x0
	public const MonoOrStereoscopicEye Right = 1; // 0x0
	public const MonoOrStereoscopicEye Mono = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public sealed class CameraCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6d8950
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x6d83b8
	public virtual Void Invoke(Camera cam) { }
	// Offset : 0x6d8960
	public virtual IAsyncResult BeginInvoke(Camera cam, AsyncCallback callback, Object object) { }
	// Offset : 0x6d8984
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal struct CastHelper`1
{
	// Fields
	public T t; // 0x0
	public IntPtr onePointerFurtherThanT; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal static class ClassLibraryInitializer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6d8990
	private static Void Init() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class LowerResBlitTexture : Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e2f54
	internal Void LowerResBlitTextureDontStripMe() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class PreloadData : Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x60bef8
	internal Void PreloadDataDontStripMe() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Color : IEquatable`1
{
	// Fields
	public Single r; // 0x10
	public Single g; // 0x14
	public Single b; // 0x18
	public Single a; // 0x1c

	// Properties
	public static Color red { get; }
	public static Color green { get; }
	public static Color white { get; }
	public static Color black { get; }
	public static Color yellow { get; }
	public static Color clear { get; }

	// Methods
	// Offset : 0x2cf2a0
	public Void .ctor(Single r, Single g, Single b, Single a) { }
	// Offset : 0x2cf2ac
	public Void .ctor(Single r, Single g, Single b) { }
	// Offset : 0x2cf2c0
	public override String ToString() { }
	// Offset : 0x2cf2c8
	public override Int32 GetHashCode() { }
	// Offset : 0x2cf2d0
	public override Boolean Equals(Object other) { }
	// Offset : 0x2cf2d8
	public Boolean Equals(Color other) { }
	// Offset : 0x6d8d58
	public static Color op_Multiply(Color a, Single b) { }
	// Offset : 0x6d8d6c
	public static Boolean op_Equality(Color lhs, Color rhs) { }
	// Offset : 0x6d8e74
	public static Color Lerp(Color a, Color b, Single t) { }
	// Offset : 0x6d8f54
	public static Color get_red() { }
	// Offset : 0x6d8f68
	public static Color get_green() { }
	// Offset : 0x6d8f7c
	public static Color get_white() { }
	// Offset : 0x6d8f90
	public static Color get_black() { }
	// Offset : 0x6d8fa4
	public static Color get_yellow() { }
	// Offset : 0x6d8fc0
	public static Color get_clear() { }
	// Offset : 0x6d8c08
	public static Vector4 op_Implicit(Color c) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Color32
{
	// Fields
	private Int32 rgba; // 0x10
	public Byte r; // 0x10
	public Byte g; // 0x11
	public Byte b; // 0x12
	public Byte a; // 0x13

	// Properties

	// Methods
	// Offset : 0x2cf2e0
	public Void .ctor(Byte r, Byte g, Byte b, Byte a) { }
	// Offset : 0x6d8fe8
	public static Color32 op_Implicit(Color c) { }
	// Offset : 0x6d90d4
	public static Color op_Implicit(Color32 c) { }
	// Offset : 0x2cf2f4
	public override String ToString() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Component : Object
{
	// Fields

	// Properties
	public Transform transform { get; }
	public GameObject gameObject { get; }
	public String tag { get; }

	// Methods
	// Offset : 0x6d6858
	public Void .ctor() { }
	// Offset : 0x6d9328
	public Transform get_transform() { }
	// Offset : 0x6d9394
	public GameObject get_gameObject() { }
	// Offset : 0x6d9400
	public Component GetComponent(Type type) { }
	// Offset : 0x6d94a8
	internal Void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue) { }
	// Offset : 0x
	public T GetComponent() { }
	// Offset : 0x6d952c
	public Component GetComponentInChildren(Type t, Boolean includeInactive) { }
	// Offset : 0x
	public T GetComponentInChildren() { }
	// Offset : 0x
	public T[] GetComponentsInChildren(Boolean includeInactive) { }
	// Offset : 0x
	public Void GetComponentsInChildren(Boolean includeInactive, List`1 result) { }
	// Offset : 0x
	public T[] GetComponentsInChildren() { }
	// Offset : 0x
	public Void GetComponentsInChildren(List`1 results) { }
	// Offset : 0x6d95f4
	public Component GetComponentInParent(Type t) { }
	// Offset : 0x
	public T GetComponentInParent() { }
	// Offset : 0x
	public Void GetComponentsInParent(Boolean includeInactive, List`1 results) { }
	// Offset : 0x6d969c
	private Void GetComponentsForListInternal(Type searchType, Object resultList) { }
	// Offset : 0x6d9720
	public Void GetComponents(Type type, List`1 results) { }
	// Offset : 0x
	public Void GetComponents(List`1 results) { }
	// Offset : 0x6d9724
	public String get_tag() { }
	// Offset : 0x
	public T[] GetComponents() { }
	// Offset : 0x6d97bc
	public Boolean CompareTag(String tag) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Coroutine : YieldInstruction
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties

	// Methods
	// Offset : 0x6d99a8
	private Void .ctor() { }
	// Offset : 0x6d99b0
	protected override Void Finalize() { }
	// Offset : 0x6d9a28
	private static Void ReleaseCoroutine(IntPtr ptr) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class SetupCoroutine
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x614198
	public static Void InvokeMoveNext(IEnumerator enumerator, IntPtr returnValueAddress) { }
	// Offset : 0x614304
	public static Object InvokeMember(Object behaviour, String name, Object variable) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct CullingGroupEvent
{
	// Fields
	private Int32 m_Index; // 0x10
	private Byte m_PrevState; // 0x14
	private Byte m_ThisState; // 0x15

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class CullingGroup : IDisposable
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private StateChanged m_OnStateChanged; // 0x18

	// Properties

	// Methods
	// Offset : 0x6da170
	protected override Void Finalize() { }
	// Offset : 0x6da290
	private Void DisposeInternal() { }
	// Offset : 0x6da2fc
	public Void Dispose() { }
	// Offset : 0x6da348
	private static Void SendEvents(CullingGroup cullingGroup, IntPtr eventsPtr, Int32 count) { }
	// Offset : 0x6da224
	private Void FinalizerFailure() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public sealed class StateChanged : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6da6a8
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x6da3e4
	public virtual Void Invoke(CullingGroupEvent sphere) { }
	// Offset : 0x6da6b8
	public virtual IAsyncResult BeginInvoke(CullingGroupEvent sphere, AsyncCallback callback, Object object) { }
	// Offset : 0x6da744
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum CursorLockMode
{
	// Fields
	public Int32 value__; // 0x10
	public const CursorLockMode None = 0; // 0x0
	public const CursorLockMode Locked = 1; // 0x0
	public const CursorLockMode Confined = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Cursor
{
	// Fields

	// Properties
	public static CursorLockMode lockState { get; }

	// Methods
	// Offset : 0x6da750
	public static CursorLockMode get_lockState() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public abstract class CustomYieldInstruction : IEnumerator
{
	// Fields

	// Properties
	public abstract Boolean keepWaiting { get; }
	public Object Current { get; }

	// Methods
	// Offset : 0x6da7a8
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Boolean get_keepWaiting() { }
	// Offset : 0x6da7b0
	public Object get_Current() { }
	// Offset : 0x6da7b8
	public Boolean MoveNext() { }
	// Offset : 0x6da7f8
	public Void Reset() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal sealed class DebugLogHandler : ILogHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6db83c
	public Void .ctor() { }
	// Offset : 0x6db880
	internal static Void Internal_Log(LogType level, String msg, Object obj) { }
	// Offset : 0x6db904
	internal static Void Internal_LogException(Exception exception, Object obj) { }
	// Offset : 0x6db978
	public Void LogFormat(LogType logType, Object context, String format, Object[] args) { }
	// Offset : 0x6dba10
	public Void LogException(Exception exception, Object context) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Debug
{
	// Fields
	internal static ILogger s_Logger; // 0x0

	// Properties
	public static ILogger unityLogger { get; }

	// Methods
	// Offset : 0x6da7fc
	public static ILogger get_unityLogger() { }
	// Offset : 0x6da864
	public static Void DrawLine(Vector3 start, Vector3 end, Color color, Single duration) { }
	// Offset : 0x6daa20
	public static Void DrawLine(Vector3 start, Vector3 end, Color color) { }
	// Offset : 0x6daaf8
	public static Void DrawLine(Vector3 start, Vector3 end) { }
	// Offset : 0x6da974
	public static Void DrawLine(Vector3 start, Vector3 end, Color color, Single duration, Boolean depthTest) { }
	// Offset : 0x6d125c
	public static Void Log(Object message) { }
	// Offset : 0x6dac5c
	public static Void Log(Object message, Object context) { }
	// Offset : 0x6dad80
	public static Void LogFormat(String format, Object[] args) { }
	// Offset : 0x6daea4
	public static Void LogError(Object message) { }
	// Offset : 0x6dafb4
	public static Void LogError(Object message, Object context) { }
	// Offset : 0x6db0d8
	public static Void LogErrorFormat(String format, Object[] args) { }
	// Offset : 0x6db1fc
	public static Void LogErrorFormat(Object context, String format, Object[] args) { }
	// Offset : 0x6d4ae8
	public static Void LogException(Exception exception) { }
	// Offset : 0x6db324
	public static Void LogException(Exception exception, Object context) { }
	// Offset : 0x6db444
	public static Void LogWarning(Object message) { }
	// Offset : 0x6db554
	public static Void LogWarning(Object message, Object context) { }
	// Offset : 0x6db678
	public static Void LogWarningFormat(Object context, String format, Object[] args) { }
	// Offset : 0x6d5194
	public static Void LogAssertion(Object message) { }
	// Offset : 0x6db7a0
	private static Void .cctor() { }
	// Offset : 0x6dabb8
	private static Void DrawLine_Injected(ref Vector3 start, ref Vector3 end, ref Color color, Single duration, Boolean depthTest) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Display
{
	// Fields
	internal IntPtr nativeDisplay; // 0x10
	public static Display[] displays; // 0x0
	private static Display _mainDisplay; // 0x8
	private static DisplaysUpdatedDelegate onDisplaysUpdated; // 0x10

	// Properties
	public Int32 renderingWidth { get; }
	public Int32 renderingHeight { get; }
	public Int32 systemWidth { get; }
	public Int32 systemHeight { get; }

	// Methods
	// Offset : 0x6dbab4
	internal Void .ctor() { }
	// Offset : 0x6dbaf4
	internal Void .ctor(IntPtr nativeDisplay) { }
	// Offset : 0x6dbb20
	public Int32 get_renderingWidth() { }
	// Offset : 0x6dbc28
	public Int32 get_renderingHeight() { }
	// Offset : 0x6dbcac
	public Int32 get_systemWidth() { }
	// Offset : 0x6dbdb4
	public Int32 get_systemHeight() { }
	// Offset : 0x6dbe38
	public static Vector3 RelativeMouseAt(Vector3 inputMouseCoordinates) { }
	// Offset : 0x6dbf68
	private static Void RecreateDisplayList(IntPtr[] nativeDisplay) { }
	// Offset : 0x6dc160
	private static Void FireDisplaysUpdated() { }
	// Offset : 0x6dbd30
	private static Void GetSystemExtImpl(IntPtr nativeDisplay, out Int32 w, out Int32 h) { }
	// Offset : 0x6dbba4
	private static Void GetRenderingExtImpl(IntPtr nativeDisplay, out Int32 w, out Int32 h) { }
	// Offset : 0x6dbedc
	private static Int32 RelativeMouseAtImpl(Int32 x, Int32 y, out Int32 rx, out Int32 ry) { }
	// Offset : 0x6dc4a8
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public sealed class DisplaysUpdatedDelegate : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6dc5ec
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x6dc210
	public virtual Void Invoke() { }
	// Offset : 0x6dc5fc
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x6dc630
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class ExcludeFromObjectFactoryAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6deb74
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class FailedToLoadScriptObject : Object
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class GameObject : Object
{
	// Fields

	// Properties
	public Transform transform { get; }
	public Int32 layer { get; set; }
	public Boolean activeSelf { get; }
	public Boolean activeInHierarchy { get; }
	public String tag { get; }

	// Methods
	// Offset : 0x6e053c
	public Void .ctor(String name) { }
	// Offset : 0x6e0630
	public Void .ctor() { }
	// Offset : 0x6e06a4
	public Void .ctor(String name, Type[] components) { }
	// Offset : 0x
	public T GetComponent() { }
	// Offset : 0x6d9434
	public Component GetComponent(Type type) { }
	// Offset : 0x6e0780
	internal Void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue) { }
	// Offset : 0x6e0804
	internal Component GetComponentByName(String type) { }
	// Offset : 0x6e0878
	public Component GetComponent(String type) { }
	// Offset : 0x6d9570
	public Component GetComponentInChildren(Type type, Boolean includeInactive) { }
	// Offset : 0x
	public T GetComponentInChildren() { }
	// Offset : 0x
	public T GetComponentInChildren(Boolean includeInactive) { }
	// Offset : 0x6d9628
	public Component GetComponentInParent(Type type) { }
	// Offset : 0x6e087c
	private Array GetComponentsInternal(Type type, Boolean useSearchTypeAsArrayReturnType, Boolean recursive, Boolean includeInactive, Boolean reverse, Object resultList) { }
	// Offset : 0x
	public T[] GetComponents() { }
	// Offset : 0x
	public Void GetComponents(List`1 results) { }
	// Offset : 0x
	public T[] GetComponentsInChildren(Boolean includeInactive) { }
	// Offset : 0x
	public Void GetComponentsInChildren(Boolean includeInactive, List`1 results) { }
	// Offset : 0x
	public T[] GetComponentsInChildren() { }
	// Offset : 0x
	public Void GetComponentsInParent(Boolean includeInactive, List`1 results) { }
	// Offset : 0x6e0930
	private Component Internal_AddComponentWithType(Type componentType) { }
	// Offset : 0x6e077c
	public Component AddComponent(Type componentType) { }
	// Offset : 0x
	public T AddComponent() { }
	// Offset : 0x6e09a4
	public Transform get_transform() { }
	// Offset : 0x6e0a10
	public Int32 get_layer() { }
	// Offset : 0x6e0a7c
	public Void set_layer(Int32 value) { }
	// Offset : 0x6e0af0
	public Void SetActive(Boolean value) { }
	// Offset : 0x6e0b64
	public Boolean get_activeSelf() { }
	// Offset : 0x6e0bd0
	public Boolean get_activeInHierarchy() { }
	// Offset : 0x6d9750
	public String get_tag() { }
	// Offset : 0x6d97f0
	public Boolean CompareTag(String tag) { }
	// Offset : 0x6e0c3c
	public Void SendMessage(String methodName, Object value, SendMessageOptions options) { }
	// Offset : 0x6e05bc
	private static Void Internal_CreateGameObject(GameObject self, String name) { }
	// Offset : 0x6e0cc8
	public static GameObject Find(String name) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Gizmos
{
	// Fields

	// Properties
	public static Color color { set; }

	// Methods
	// Offset : 0x6e0d34
	public static Void DrawLine(Vector3 from, Vector3 to) { }
	// Offset : 0x6e0ddc
	public static Void DrawWireSphere(Vector3 center, Single radius) { }
	// Offset : 0x6e0e7c
	public static Void DrawSphere(Vector3 center, Single radius) { }
	// Offset : 0x6e0f1c
	public static Void set_color(Color value) { }
	// Offset : 0x6e0d68
	private static Void DrawLine_Injected(ref Vector3 from, ref Vector3 to) { }
	// Offset : 0x6e0e08
	private static Void DrawWireSphere_Injected(ref Vector3 center, Single radius) { }
	// Offset : 0x6e0ea8
	private static Void DrawSphere_Injected(ref Vector3 center, Single radius) { }
	// Offset : 0x6e0f44
	private static Void set_color_Injected(ref Color value) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Gradient : IEquatable`1
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties

	// Methods
	// Offset : 0x6e1024
	public Void .ctor() { }
	// Offset : 0x6e1050
	private static IntPtr Init() { }
	// Offset : 0x6e10a8
	private Void Cleanup() { }
	// Offset : 0x6e1114
	private Boolean Internal_Equals(IntPtr other) { }
	// Offset : 0x6e1188
	protected override Void Finalize() { }
	// Offset : 0x6e11fc
	public override Boolean Equals(Object o) { }
	// Offset : 0x6e1314
	public Boolean Equals(Gradient other) { }
	// Offset : 0x6e13c0
	public override Int32 GetHashCode() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Screen
{
	// Fields

	// Properties
	public static Int32 width { get; }
	public static Int32 height { get; }
	public static Single dpi { get; }
	public static Int32 sleepTimeout { get; set; }

	// Methods
	// Offset : 0x612590
	public static Int32 get_width() { }
	// Offset : 0x6125e8
	public static Int32 get_height() { }
	// Offset : 0x612640
	public static Single get_dpi() { }
	// Offset : 0x612698
	public static Int32 get_sleepTimeout() { }
	// Offset : 0x6126f0
	public static Void set_sleepTimeout(Int32 value) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Resolution
{
	// Fields
	private Int32 m_Width; // 0x10
	private Int32 m_Height; // 0x14
	private Int32 m_RefreshRate; // 0x18

	// Properties

	// Methods
	// Offset : 0x2ce1b8
	public override String ToString() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class QualitySettings : Object
{
	// Fields

	// Properties
	public static ColorSpace activeColorSpace { get; }

	// Methods
	// Offset : 0x60c8e8
	public static ColorSpace get_activeColorSpace() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class LineRenderer : Renderer
{
	// Fields

	// Properties
	public Single startWidth { set; }
	public Single endWidth { set; }

	// Methods
	// Offset : 0x6e2494
	public Void set_startWidth(Single value) { }
	// Offset : 0x6e2508
	public Void set_endWidth(Single value) { }
	// Offset : 0x6e257c
	public Void SetPosition(Int32 index, Vector3 position) { }
	// Offset : 0x6e25a4
	private Void SetPosition_Injected(Int32 index, ref Vector3 position) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Renderer : Component
{
	// Fields

	// Properties
	public Bounds bounds { get; }
	public Int32 sortingLayerID { get; }
	public Int32 sortingOrder { get; }
	public Material material { get; }
	public Material sharedMaterial { get; }

	// Methods
	// Offset : 0x611a64
	public Bounds get_bounds() { }
	// Offset : 0x611b18
	private Material GetMaterial() { }
	// Offset : 0x611b84
	private Material GetSharedMaterial() { }
	// Offset : 0x611bf0
	public Int32 get_sortingLayerID() { }
	// Offset : 0x611c5c
	public Int32 get_sortingOrder() { }
	// Offset : 0x611cc8
	public Material get_material() { }
	// Offset : 0x611ccc
	public Material get_sharedMaterial() { }
	// Offset : 0x611aa4
	private Void get_bounds_Injected(out Bounds ret) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Shader : Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x61443c
	public static Int32 PropertyToID(String name) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Material : Object
{
	// Fields

	// Properties
	public Texture mainTexture { get; set; }

	// Methods
	// Offset : 0x6e33d8
	public Void .ctor(Shader shader) { }
	// Offset : 0x6e34cc
	public Void .ctor(Material source) { }
	// Offset : 0x6e35c0
	public Void .ctor(String contents) { }
	// Offset : 0x6e3458
	private static Void CreateWithShader(Material self, Shader shader) { }
	// Offset : 0x6e354c
	private static Void CreateWithMaterial(Material self, Material source) { }
	// Offset : 0x6e3630
	private static Void CreateWithString(Material self) { }
	// Offset : 0x6e369c
	public Texture get_mainTexture() { }
	// Offset : 0x6e3728
	public Void set_mainTexture(Texture value) { }
	// Offset : 0x6e37cc
	public Boolean HasProperty(Int32 nameID) { }
	// Offset : 0x6e3840
	public Boolean HasProperty(String name) { }
	// Offset : 0x6e3870
	public Void EnableKeyword(String keyword) { }
	// Offset : 0x6e38e4
	public Void DisableKeyword(String keyword) { }
	// Offset : 0x6e3958
	private Void SetFloatImpl(Int32 name, Single value) { }
	// Offset : 0x6e39e4
	private Void SetColorImpl(Int32 name, Color value) { }
	// Offset : 0x6e3a90
	private Void SetTextureImpl(Int32 name, Texture value) { }
	// Offset : 0x6e3b14
	private Texture GetTextureImpl(Int32 name) { }
	// Offset : 0x6e3b88
	private Void SetTextureOffsetImpl(Int32 name, Vector2 offset) { }
	// Offset : 0x6e3c30
	private Void SetTextureScaleImpl(Int32 name, Vector2 scale) { }
	// Offset : 0x6e3cd8
	public Void SetInt(String name, Int32 value) { }
	// Offset : 0x6e3d10
	public Void SetColor(String name, Color value) { }
	// Offset : 0x6e3794
	public Void SetTexture(String name, Texture value) { }
	// Offset : 0x6e36f8
	public Texture GetTexture(String name) { }
	// Offset : 0x6e3d78
	public Void SetTextureOffset(String name, Vector2 value) { }
	// Offset : 0x6e3dc4
	public Void SetTextureScale(String name, Vector2 value) { }
	// Offset : 0x6e3a0c
	private Void SetColorImpl_Injected(Int32 name, ref Color value) { }
	// Offset : 0x6e3bac
	private Void SetTextureOffsetImpl_Injected(Int32 name, ref Vector2 offset) { }
	// Offset : 0x6e3c54
	private Void SetTextureScaleImpl_Injected(Int32 name, ref Vector2 scale) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class MeshFilter : Component
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x606490
	private Void DontStripMeshFilter() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum LightmapBakeType
{
	// Fields
	public Int32 value__; // 0x10
	public const LightmapBakeType Realtime = 4; // 0x0
	public const LightmapBakeType Baked = 2; // 0x0
	public const LightmapBakeType Mixed = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum MixedLightingMode
{
	// Fields
	public Int32 value__; // 0x10
	public const MixedLightingMode IndirectOnly = 0; // 0x0
	public const MixedLightingMode Shadowmask = 2; // 0x0
	public const MixedLightingMode Subtractive = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum CameraClearFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const CameraClearFlags Skybox = 1; // 0x0
	public const CameraClearFlags Color = 2; // 0x0
	public const CameraClearFlags SolidColor = 2; // 0x0
	public const CameraClearFlags Depth = 3; // 0x0
	public const CameraClearFlags Nothing = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum MeshTopology
{
	// Fields
	public Int32 value__; // 0x10
	public const MeshTopology Triangles = 0; // 0x0
	public const MeshTopology Quads = 2; // 0x0
	public const MeshTopology Lines = 3; // 0x0
	public const MeshTopology LineStrip = 4; // 0x0
	public const MeshTopology Points = 5; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum ColorSpace
{
	// Fields
	public Int32 value__; // 0x10
	public const ColorSpace Uninitialized = 4294967295; // 0x0
	public const ColorSpace Gamma = 0; // 0x0
	public const ColorSpace Linear = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum TextureWrapMode
{
	// Fields
	public Int32 value__; // 0x10
	public const TextureWrapMode Repeat = 0; // 0x0
	public const TextureWrapMode Clamp = 1; // 0x0
	public const TextureWrapMode Mirror = 2; // 0x0
	public const TextureWrapMode MirrorOnce = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum TextureFormat
{
	// Fields
	public Int32 value__; // 0x10
	public const TextureFormat Alpha8 = 1; // 0x0
	public const TextureFormat ARGB4444 = 2; // 0x0
	public const TextureFormat RGB24 = 3; // 0x0
	public const TextureFormat RGBA32 = 4; // 0x0
	public const TextureFormat ARGB32 = 5; // 0x0
	public const TextureFormat RGB565 = 7; // 0x0
	public const TextureFormat R16 = 9; // 0x0
	public const TextureFormat DXT1 = 10; // 0x0
	public const TextureFormat DXT5 = 12; // 0x0
	public const TextureFormat RGBA4444 = 13; // 0x0
	public const TextureFormat BGRA32 = 14; // 0x0
	public const TextureFormat RHalf = 15; // 0x0
	public const TextureFormat RGHalf = 16; // 0x0
	public const TextureFormat RGBAHalf = 17; // 0x0
	public const TextureFormat RFloat = 18; // 0x0
	public const TextureFormat RGFloat = 19; // 0x0
	public const TextureFormat RGBAFloat = 20; // 0x0
	public const TextureFormat YUY2 = 21; // 0x0
	public const TextureFormat RGB9e5Float = 22; // 0x0
	public const TextureFormat BC4 = 26; // 0x0
	public const TextureFormat BC5 = 27; // 0x0
	public const TextureFormat BC6H = 24; // 0x0
	public const TextureFormat BC7 = 25; // 0x0
	public const TextureFormat DXT1Crunched = 28; // 0x0
	public const TextureFormat DXT5Crunched = 29; // 0x0
	public const TextureFormat PVRTC_RGB2 = 30; // 0x0
	public const TextureFormat PVRTC_RGBA2 = 31; // 0x0
	public const TextureFormat PVRTC_RGB4 = 32; // 0x0
	public const TextureFormat PVRTC_RGBA4 = 33; // 0x0
	public const TextureFormat ETC_RGB4 = 34; // 0x0
	public const TextureFormat EAC_R = 41; // 0x0
	public const TextureFormat EAC_R_SIGNED = 42; // 0x0
	public const TextureFormat EAC_RG = 43; // 0x0
	public const TextureFormat EAC_RG_SIGNED = 44; // 0x0
	public const TextureFormat ETC2_RGB = 45; // 0x0
	public const TextureFormat ETC2_RGBA1 = 46; // 0x0
	public const TextureFormat ETC2_RGBA8 = 47; // 0x0
	public const TextureFormat ASTC_RGB_4x4 = 48; // 0x0
	public const TextureFormat ASTC_RGB_5x5 = 49; // 0x0
	public const TextureFormat ASTC_RGB_6x6 = 50; // 0x0
	public const TextureFormat ASTC_RGB_8x8 = 51; // 0x0
	public const TextureFormat ASTC_RGB_10x10 = 52; // 0x0
	public const TextureFormat ASTC_RGB_12x12 = 53; // 0x0
	public const TextureFormat ASTC_RGBA_4x4 = 54; // 0x0
	public const TextureFormat ASTC_RGBA_5x5 = 55; // 0x0
	public const TextureFormat ASTC_RGBA_6x6 = 56; // 0x0
	public const TextureFormat ASTC_RGBA_8x8 = 57; // 0x0
	public const TextureFormat ASTC_RGBA_10x10 = 58; // 0x0
	public const TextureFormat ASTC_RGBA_12x12 = 59; // 0x0
	public const TextureFormat ETC_RGB4_3DS = 60; // 0x0
	public const TextureFormat ETC_RGBA8_3DS = 61; // 0x0
	public const TextureFormat RG16 = 62; // 0x0
	public const TextureFormat R8 = 63; // 0x0
	public const TextureFormat ETC_RGB4Crunched = 64; // 0x0
	public const TextureFormat ETC2_RGBA8Crunched = 65; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum RenderTextureFormat
{
	// Fields
	public Int32 value__; // 0x10
	public const RenderTextureFormat ARGB32 = 0; // 0x0
	public const RenderTextureFormat Depth = 1; // 0x0
	public const RenderTextureFormat ARGBHalf = 2; // 0x0
	public const RenderTextureFormat Shadowmap = 3; // 0x0
	public const RenderTextureFormat RGB565 = 4; // 0x0
	public const RenderTextureFormat ARGB4444 = 5; // 0x0
	public const RenderTextureFormat ARGB1555 = 6; // 0x0
	public const RenderTextureFormat Default = 7; // 0x0
	public const RenderTextureFormat ARGB2101010 = 8; // 0x0
	public const RenderTextureFormat DefaultHDR = 9; // 0x0
	public const RenderTextureFormat ARGB64 = 10; // 0x0
	public const RenderTextureFormat ARGBFloat = 11; // 0x0
	public const RenderTextureFormat RGFloat = 12; // 0x0
	public const RenderTextureFormat RGHalf = 13; // 0x0
	public const RenderTextureFormat RFloat = 14; // 0x0
	public const RenderTextureFormat RHalf = 15; // 0x0
	public const RenderTextureFormat R8 = 16; // 0x0
	public const RenderTextureFormat ARGBInt = 17; // 0x0
	public const RenderTextureFormat RGInt = 18; // 0x0
	public const RenderTextureFormat RInt = 19; // 0x0
	public const RenderTextureFormat BGRA32 = 20; // 0x0
	public const RenderTextureFormat RGB111110Float = 22; // 0x0
	public const RenderTextureFormat RG32 = 23; // 0x0
	public const RenderTextureFormat RGBAUShort = 24; // 0x0
	public const RenderTextureFormat RG16 = 25; // 0x0
	public const RenderTextureFormat BGRA10101010_XR = 26; // 0x0
	public const RenderTextureFormat BGR101010_XR = 27; // 0x0
	public const RenderTextureFormat R16 = 28; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum VRTextureUsage
{
	// Fields
	public Int32 value__; // 0x10
	public const VRTextureUsage None = 0; // 0x0
	public const VRTextureUsage OneEye = 1; // 0x0
	public const VRTextureUsage TwoEyes = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum RenderTextureCreationFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const RenderTextureCreationFlags MipMap = 1; // 0x0
	public const RenderTextureCreationFlags AutoGenerateMips = 2; // 0x0
	public const RenderTextureCreationFlags SRGB = 4; // 0x0
	public const RenderTextureCreationFlags EyeTexture = 8; // 0x0
	public const RenderTextureCreationFlags EnableRandomWrite = 16; // 0x0
	public const RenderTextureCreationFlags CreatedFromScript = 32; // 0x0
	public const RenderTextureCreationFlags AllowVerticalFlip = 128; // 0x0
	public const RenderTextureCreationFlags NoResolvedColorSurface = 256; // 0x0
	public const RenderTextureCreationFlags DynamicallyScalable = 1024; // 0x0
	public const RenderTextureCreationFlags BindMS = 2048; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum RenderTextureReadWrite
{
	// Fields
	public Int32 value__; // 0x10
	public const RenderTextureReadWrite Default = 0; // 0x0
	public const RenderTextureReadWrite Linear = 1; // 0x0
	public const RenderTextureReadWrite sRGB = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum RenderTextureMemoryless
{
	// Fields
	public Int32 value__; // 0x10
	public const RenderTextureMemoryless None = 0; // 0x0
	public const RenderTextureMemoryless Color = 1; // 0x0
	public const RenderTextureMemoryless Depth = 2; // 0x0
	public const RenderTextureMemoryless MSAA = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public enum TextureCreationFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const TextureCreationFlags None = 0; // 0x0
	public const TextureCreationFlags MipChain = 1; // 0x0
	public const TextureCreationFlags Crunch = 64; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public enum FormatUsage
{
	// Fields
	public Int32 value__; // 0x10
	public const FormatUsage Sample = 0; // 0x0
	public const FormatUsage Linear = 1; // 0x0
	public const FormatUsage Render = 3; // 0x0
	public const FormatUsage Blend = 4; // 0x0
	public const FormatUsage LoadStore = 8; // 0x0
	public const FormatUsage MSAA2x = 9; // 0x0
	public const FormatUsage MSAA4x = 10; // 0x0
	public const FormatUsage MSAA8x = 11; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public enum GraphicsFormat
{
	// Fields
	public Int32 value__; // 0x10
	public const GraphicsFormat None = 0; // 0x0
	public const GraphicsFormat R8_SRGB = 1; // 0x0
	public const GraphicsFormat R8G8_SRGB = 2; // 0x0
	public const GraphicsFormat R8G8B8_SRGB = 3; // 0x0
	public const GraphicsFormat R8G8B8A8_SRGB = 4; // 0x0
	public const GraphicsFormat R8_UNorm = 5; // 0x0
	public const GraphicsFormat R8G8_UNorm = 6; // 0x0
	public const GraphicsFormat R8G8B8_UNorm = 7; // 0x0
	public const GraphicsFormat R8G8B8A8_UNorm = 8; // 0x0
	public const GraphicsFormat R8_SNorm = 9; // 0x0
	public const GraphicsFormat R8G8_SNorm = 10; // 0x0
	public const GraphicsFormat R8G8B8_SNorm = 11; // 0x0
	public const GraphicsFormat R8G8B8A8_SNorm = 12; // 0x0
	public const GraphicsFormat R8_UInt = 13; // 0x0
	public const GraphicsFormat R8G8_UInt = 14; // 0x0
	public const GraphicsFormat R8G8B8_UInt = 15; // 0x0
	public const GraphicsFormat R8G8B8A8_UInt = 16; // 0x0
	public const GraphicsFormat R8_SInt = 17; // 0x0
	public const GraphicsFormat R8G8_SInt = 18; // 0x0
	public const GraphicsFormat R8G8B8_SInt = 19; // 0x0
	public const GraphicsFormat R8G8B8A8_SInt = 20; // 0x0
	public const GraphicsFormat R16_UNorm = 21; // 0x0
	public const GraphicsFormat R16G16_UNorm = 22; // 0x0
	public const GraphicsFormat R16G16B16_UNorm = 23; // 0x0
	public const GraphicsFormat R16G16B16A16_UNorm = 24; // 0x0
	public const GraphicsFormat R16_SNorm = 25; // 0x0
	public const GraphicsFormat R16G16_SNorm = 26; // 0x0
	public const GraphicsFormat R16G16B16_SNorm = 27; // 0x0
	public const GraphicsFormat R16G16B16A16_SNorm = 28; // 0x0
	public const GraphicsFormat R16_UInt = 29; // 0x0
	public const GraphicsFormat R16G16_UInt = 30; // 0x0
	public const GraphicsFormat R16G16B16_UInt = 31; // 0x0
	public const GraphicsFormat R16G16B16A16_UInt = 32; // 0x0
	public const GraphicsFormat R16_SInt = 33; // 0x0
	public const GraphicsFormat R16G16_SInt = 34; // 0x0
	public const GraphicsFormat R16G16B16_SInt = 35; // 0x0
	public const GraphicsFormat R16G16B16A16_SInt = 36; // 0x0
	public const GraphicsFormat R32_UInt = 37; // 0x0
	public const GraphicsFormat R32G32_UInt = 38; // 0x0
	public const GraphicsFormat R32G32B32_UInt = 39; // 0x0
	public const GraphicsFormat R32G32B32A32_UInt = 40; // 0x0
	public const GraphicsFormat R32_SInt = 41; // 0x0
	public const GraphicsFormat R32G32_SInt = 42; // 0x0
	public const GraphicsFormat R32G32B32_SInt = 43; // 0x0
	public const GraphicsFormat R32G32B32A32_SInt = 44; // 0x0
	public const GraphicsFormat R16_SFloat = 45; // 0x0
	public const GraphicsFormat R16G16_SFloat = 46; // 0x0
	public const GraphicsFormat R16G16B16_SFloat = 47; // 0x0
	public const GraphicsFormat R16G16B16A16_SFloat = 48; // 0x0
	public const GraphicsFormat R32_SFloat = 49; // 0x0
	public const GraphicsFormat R32G32_SFloat = 50; // 0x0
	public const GraphicsFormat R32G32B32_SFloat = 51; // 0x0
	public const GraphicsFormat R32G32B32A32_SFloat = 52; // 0x0
	public const GraphicsFormat B8G8R8_SRGB = 56; // 0x0
	public const GraphicsFormat B8G8R8A8_SRGB = 57; // 0x0
	public const GraphicsFormat B8G8R8_UNorm = 58; // 0x0
	public const GraphicsFormat B8G8R8A8_UNorm = 59; // 0x0
	public const GraphicsFormat B8G8R8_SNorm = 60; // 0x0
	public const GraphicsFormat B8G8R8A8_SNorm = 61; // 0x0
	public const GraphicsFormat B8G8R8_UInt = 62; // 0x0
	public const GraphicsFormat B8G8R8A8_UInt = 63; // 0x0
	public const GraphicsFormat B8G8R8_SInt = 64; // 0x0
	public const GraphicsFormat B8G8R8A8_SInt = 65; // 0x0
	public const GraphicsFormat R4G4B4A4_UNormPack16 = 66; // 0x0
	public const GraphicsFormat B4G4R4A4_UNormPack16 = 67; // 0x0
	public const GraphicsFormat R5G6B5_UNormPack16 = 68; // 0x0
	public const GraphicsFormat B5G6R5_UNormPack16 = 69; // 0x0
	public const GraphicsFormat R5G5B5A1_UNormPack16 = 70; // 0x0
	public const GraphicsFormat B5G5R5A1_UNormPack16 = 71; // 0x0
	public const GraphicsFormat A1R5G5B5_UNormPack16 = 72; // 0x0
	public const GraphicsFormat E5B9G9R9_UFloatPack32 = 73; // 0x0
	public const GraphicsFormat B10G11R11_UFloatPack32 = 74; // 0x0
	public const GraphicsFormat A2B10G10R10_UNormPack32 = 75; // 0x0
	public const GraphicsFormat A2B10G10R10_UIntPack32 = 76; // 0x0
	public const GraphicsFormat A2B10G10R10_SIntPack32 = 77; // 0x0
	public const GraphicsFormat A2R10G10B10_UNormPack32 = 78; // 0x0
	public const GraphicsFormat A2R10G10B10_UIntPack32 = 79; // 0x0
	public const GraphicsFormat A2R10G10B10_SIntPack32 = 80; // 0x0
	public const GraphicsFormat A2R10G10B10_XRSRGBPack32 = 81; // 0x0
	public const GraphicsFormat A2R10G10B10_XRUNormPack32 = 82; // 0x0
	public const GraphicsFormat R10G10B10_XRSRGBPack32 = 83; // 0x0
	public const GraphicsFormat R10G10B10_XRUNormPack32 = 84; // 0x0
	public const GraphicsFormat A10R10G10B10_XRSRGBPack32 = 85; // 0x0
	public const GraphicsFormat A10R10G10B10_XRUNormPack32 = 86; // 0x0
	public const GraphicsFormat D16_UNorm = 90; // 0x0
	public const GraphicsFormat D24_UNorm = 91; // 0x0
	public const GraphicsFormat D24_UNorm_S8_UInt = 92; // 0x0
	public const GraphicsFormat D32_SFloat = 93; // 0x0
	public const GraphicsFormat D32_SFloat_S8_Uint = 94; // 0x0
	public const GraphicsFormat S8_Uint = 95; // 0x0
	public const GraphicsFormat RGB_DXT1_SRGB = 96; // 0x0
	public const GraphicsFormat RGBA_DXT1_SRGB = 96; // 0x0
	public const GraphicsFormat RGB_DXT1_UNorm = 97; // 0x0
	public const GraphicsFormat RGBA_DXT1_UNorm = 97; // 0x0
	public const GraphicsFormat RGBA_DXT3_SRGB = 98; // 0x0
	public const GraphicsFormat RGBA_DXT3_UNorm = 99; // 0x0
	public const GraphicsFormat RGBA_DXT5_SRGB = 100; // 0x0
	public const GraphicsFormat RGBA_DXT5_UNorm = 101; // 0x0
	public const GraphicsFormat R_BC4_UNorm = 102; // 0x0
	public const GraphicsFormat R_BC4_SNorm = 103; // 0x0
	public const GraphicsFormat RG_BC5_UNorm = 104; // 0x0
	public const GraphicsFormat RG_BC5_SNorm = 105; // 0x0
	public const GraphicsFormat RGB_BC6H_UFloat = 106; // 0x0
	public const GraphicsFormat RGB_BC6H_SFloat = 107; // 0x0
	public const GraphicsFormat RGBA_BC7_SRGB = 108; // 0x0
	public const GraphicsFormat RGBA_BC7_UNorm = 109; // 0x0
	public const GraphicsFormat RGB_PVRTC_2Bpp_SRGB = 110; // 0x0
	public const GraphicsFormat RGB_PVRTC_2Bpp_UNorm = 111; // 0x0
	public const GraphicsFormat RGB_PVRTC_4Bpp_SRGB = 112; // 0x0
	public const GraphicsFormat RGB_PVRTC_4Bpp_UNorm = 113; // 0x0
	public const GraphicsFormat RGBA_PVRTC_2Bpp_SRGB = 114; // 0x0
	public const GraphicsFormat RGBA_PVRTC_2Bpp_UNorm = 115; // 0x0
	public const GraphicsFormat RGBA_PVRTC_4Bpp_SRGB = 116; // 0x0
	public const GraphicsFormat RGBA_PVRTC_4Bpp_UNorm = 117; // 0x0
	public const GraphicsFormat RGB_ETC_UNorm = 118; // 0x0
	public const GraphicsFormat RGB_ETC2_SRGB = 119; // 0x0
	public const GraphicsFormat RGB_ETC2_UNorm = 120; // 0x0
	public const GraphicsFormat RGB_A1_ETC2_SRGB = 121; // 0x0
	public const GraphicsFormat RGB_A1_ETC2_UNorm = 122; // 0x0
	public const GraphicsFormat RGBA_ETC2_SRGB = 123; // 0x0
	public const GraphicsFormat RGBA_ETC2_UNorm = 124; // 0x0
	public const GraphicsFormat R_EAC_UNorm = 125; // 0x0
	public const GraphicsFormat R_EAC_SNorm = 126; // 0x0
	public const GraphicsFormat RG_EAC_UNorm = 127; // 0x0
	public const GraphicsFormat RG_EAC_SNorm = 128; // 0x0
	public const GraphicsFormat RGBA_ASTC4X4_SRGB = 129; // 0x0
	public const GraphicsFormat RGBA_ASTC4X4_UNorm = 130; // 0x0
	public const GraphicsFormat RGBA_ASTC5X5_SRGB = 131; // 0x0
	public const GraphicsFormat RGBA_ASTC5X5_UNorm = 132; // 0x0
	public const GraphicsFormat RGBA_ASTC6X6_SRGB = 133; // 0x0
	public const GraphicsFormat RGBA_ASTC6X6_UNorm = 134; // 0x0
	public const GraphicsFormat RGBA_ASTC8X8_SRGB = 135; // 0x0
	public const GraphicsFormat RGBA_ASTC8X8_UNorm = 136; // 0x0
	public const GraphicsFormat RGBA_ASTC10X10_SRGB = 137; // 0x0
	public const GraphicsFormat RGBA_ASTC10X10_UNorm = 138; // 0x0
	public const GraphicsFormat RGBA_ASTC12X12_SRGB = 139; // 0x0
	public const GraphicsFormat RGBA_ASTC12X12_UNorm = 140; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum LightmapsMode
{
	// Fields
	public Int32 value__; // 0x10
	public const LightmapsMode NonDirectional = 0; // 0x0
	public const LightmapsMode CombinedDirectional = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Rendering
public enum VertexAttribute
{
	// Fields
	public Int32 value__; // 0x10
	public const VertexAttribute Position = 0; // 0x0
	public const VertexAttribute Normal = 1; // 0x0
	public const VertexAttribute Tangent = 2; // 0x0
	public const VertexAttribute Color = 3; // 0x0
	public const VertexAttribute TexCoord0 = 4; // 0x0
	public const VertexAttribute TexCoord1 = 5; // 0x0
	public const VertexAttribute TexCoord2 = 6; // 0x0
	public const VertexAttribute TexCoord3 = 7; // 0x0
	public const VertexAttribute TexCoord4 = 8; // 0x0
	public const VertexAttribute TexCoord5 = 9; // 0x0
	public const VertexAttribute TexCoord6 = 10; // 0x0
	public const VertexAttribute TexCoord7 = 11; // 0x0
	public const VertexAttribute BlendWeight = 12; // 0x0
	public const VertexAttribute BlendIndices = 13; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Rendering
public enum CompareFunction
{
	// Fields
	public Int32 value__; // 0x10
	public const CompareFunction Disabled = 0; // 0x0
	public const CompareFunction Never = 1; // 0x0
	public const CompareFunction Less = 2; // 0x0
	public const CompareFunction Equal = 3; // 0x0
	public const CompareFunction LessEqual = 4; // 0x0
	public const CompareFunction Greater = 5; // 0x0
	public const CompareFunction NotEqual = 6; // 0x0
	public const CompareFunction GreaterEqual = 7; // 0x0
	public const CompareFunction Always = 8; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Rendering
public enum ColorWriteMask
{
	// Fields
	public Int32 value__; // 0x10
	public const ColorWriteMask Alpha = 1; // 0x0
	public const ColorWriteMask Blue = 2; // 0x0
	public const ColorWriteMask Green = 4; // 0x0
	public const ColorWriteMask Red = 8; // 0x0
	public const ColorWriteMask All = 15; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Rendering
public enum StencilOp
{
	// Fields
	public Int32 value__; // 0x10
	public const StencilOp Keep = 0; // 0x0
	public const StencilOp Zero = 1; // 0x0
	public const StencilOp Replace = 2; // 0x0
	public const StencilOp IncrementSaturate = 3; // 0x0
	public const StencilOp DecrementSaturate = 4; // 0x0
	public const StencilOp Invert = 5; // 0x0
	public const StencilOp IncrementWrap = 6; // 0x0
	public const StencilOp DecrementWrap = 7; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Rendering
public enum ShadowSamplingMode
{
	// Fields
	public Int32 value__; // 0x10
	public const ShadowSamplingMode CompareDepths = 0; // 0x0
	public const ShadowSamplingMode RawDepth = 1; // 0x0
	public const ShadowSamplingMode None = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Rendering
public enum TextureDimension
{
	// Fields
	public Int32 value__; // 0x10
	public const TextureDimension Unknown = 4294967295; // 0x0
	public const TextureDimension None = 0; // 0x0
	public const TextureDimension Any = 1; // 0x0
	public const TextureDimension Tex2D = 2; // 0x0
	public const TextureDimension Tex3D = 3; // 0x0
	public const TextureDimension Cube = 4; // 0x0
	public const TextureDimension Tex2DArray = 5; // 0x0
	public const TextureDimension CubeArray = 6; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public class GraphicsFormatUtility
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6d9cb0
	public static GraphicsFormat GetGraphicsFormat(TextureFormat format, Boolean isSRGB) { }
	// Offset : 0x6df100
	private static GraphicsFormat GetGraphicsFormat_Native_TextureFormat(TextureFormat format, Boolean isSRGB) { }
	// Offset : 0x6df174
	public static Boolean IsSRGBFormat(GraphicsFormat format) { }
	// Offset : 0x6df1e0
	public static RenderTextureFormat GetRenderTextureFormat(GraphicsFormat format) { }
	// Offset : 0x6df24c
	internal static Boolean IsCompressedTextureFormat(TextureFormat format) { }
	// Offset : 0x6d9cb8
	public static Boolean IsCrunchFormat(TextureFormat format) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class SkinnedMeshRenderer : Renderer
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class MeshRenderer : Renderer
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x606494
	private Void DontStripMeshRenderer() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
[Serializable]
public class RectOffset
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private readonly Object m_SourceStyle; // 0x18

	// Properties
	public Int32 left { get; }
	public Int32 right { get; }
	public Int32 top { get; }
	public Int32 bottom { get; }
	public Int32 horizontal { get; }
	public Int32 vertical { get; }

	// Methods
	// Offset : 0x60e964
	public Void .ctor() { }
	// Offset : 0x60e990
	private static IntPtr InternalCreate() { }
	// Offset : 0x60e9e8
	private static Void InternalDestroy(IntPtr ptr) { }
	// Offset : 0x60ea54
	public Int32 get_left() { }
	// Offset : 0x60eac0
	public Int32 get_right() { }
	// Offset : 0x60eb2c
	public Int32 get_top() { }
	// Offset : 0x60eb98
	public Int32 get_bottom() { }
	// Offset : 0x60ec04
	public Int32 get_horizontal() { }
	// Offset : 0x60ec70
	public Int32 get_vertical() { }
	// Offset : 0x60ecdc
	protected override Void Finalize() { }
	// Offset : 0x60edbc
	public override String ToString() { }
	// Offset : 0x60ed5c
	private Void Destroy() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class GUIElement : Behaviour
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e045c
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class GUILayer : Behaviour
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e0460
	public GUIElement HitTest(Vector3 screenPosition) { }
	// Offset : 0x6e04a4
	private GUIElement HitTest(Vector2 screenPosition) { }
	// Offset : 0x6e04c8
	private GUIElement HitTest_Injected(ref Vector2 screenPosition) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal struct TouchScreenKeyboard_InternalConstructorHelperArguments
{
	// Fields
	public UInt32 keyboardType; // 0x10
	public UInt32 autocorrection; // 0x14
	public UInt32 multiline; // 0x18
	public UInt32 secure; // 0x1c
	public UInt32 alert; // 0x20
	public Int32 characterLimit; // 0x24

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class TouchScreenKeyboard
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private readonly Boolean <canGetSelection>k__BackingField; // 0x18
	private readonly Boolean <canSetSelection>k__BackingField; // 0x19
	private readonly TouchScreenKeyboardType <type>k__BackingField; // 0x1c

	// Properties
	public static Boolean isSupported { get; }
	public String text { get; set; }
	public static Boolean hideInput { set; }
	public Boolean active { get; set; }
	public Status status { get; }
	public Int32 characterLimit { set; }
	public Boolean canGetSelection { get; }
	public Boolean canSetSelection { get; }
	public RangeInt selection { get; set; }

	// Methods
	// Offset : 0x618380
	public Void .ctor(String text, TouchScreenKeyboardType keyboardType, Boolean autocorrection, Boolean multiline, Boolean secure, Boolean alert, String textPlaceholder, Int32 characterLimit) { }
	// Offset : 0x618544
	private static Void Internal_Destroy(IntPtr ptr) { }
	// Offset : 0x6185b0
	private Void Destroy() { }
	// Offset : 0x618618
	protected override Void Finalize() { }
	// Offset : 0x6184c0
	private static IntPtr TouchScreenKeyboard_InternalConstructorHelper(ref TouchScreenKeyboard_InternalConstructorHelperArguments arguments, String text, String textPlaceholder) { }
	// Offset : 0x61868c
	public static Boolean get_isSupported() { }
	// Offset : 0x6186ec
	public static TouchScreenKeyboard Open(String text, TouchScreenKeyboardType keyboardType, Boolean autocorrection, Boolean multiline, Boolean secure, Boolean alert, String textPlaceholder, Int32 characterLimit) { }
	// Offset : 0x6187ac
	public String get_text() { }
	// Offset : 0x618818
	public Void set_text(String value) { }
	// Offset : 0x61888c
	public static Void set_hideInput(Boolean value) { }
	// Offset : 0x6188f8
	public Boolean get_active() { }
	// Offset : 0x618964
	public Void set_active(Boolean value) { }
	// Offset : 0x6189d8
	public Status get_status() { }
	// Offset : 0x618a44
	public Void set_characterLimit(Int32 value) { }
	// Offset : 0x618ab8
	public Boolean get_canGetSelection() { }
	// Offset : 0x618ac0
	public Boolean get_canSetSelection() { }
	// Offset : 0x618ac8
	public RangeInt get_selection() { }
	// Offset : 0x618b6c
	public Void set_selection(RangeInt value) { }
	// Offset : 0x618af8
	private static Void GetSelection(out Int32 start, out Int32 length) { }
	// Offset : 0x618c48
	private static Void SetSelection(Int32 start, Int32 length) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public enum Status
{
	// Fields
	public Int32 value__; // 0x10
	public const Status Visible = 0; // 0x0
	public const Status Done = 1; // 0x0
	public const Status Canceled = 2; // 0x0
	public const Status LostFocus = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
[Serializable]
public struct Hash128 : IComparable, IComparable`1, IEquatable`1
{
	// Fields
	private UInt32 m_u32_0; // 0x10
	private UInt32 m_u32_1; // 0x14
	private UInt32 m_u32_2; // 0x18
	private UInt32 m_u32_3; // 0x1c

	// Properties

	// Methods
	// Offset : 0x2cf5e8
	public Void .ctor(UInt32 u32_0, UInt32 u32_1, UInt32 u32_2, UInt32 u32_3) { }
	// Offset : 0x2cf5f4
	public Int32 CompareTo(Hash128 rhs) { }
	// Offset : 0x2cf5fc
	public override String ToString() { }
	// Offset : 0x6e1518
	internal static String Internal_Hash128ToString(Hash128 hash128) { }
	// Offset : 0x2cf624
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2cf62c
	public Boolean Equals(Hash128 obj) { }
	// Offset : 0x2cf670
	public override Int32 GetHashCode() { }
	// Offset : 0x2cf678
	public Int32 CompareTo(Object obj) { }
	// Offset : 0x6e165c
	public static Boolean op_Equality(Hash128 hash1, Hash128 hash2) { }
	// Offset : 0x6e1444
	public static Boolean op_LessThan(Hash128 x, Hash128 y) { }
	// Offset : 0x6e1478
	public static Boolean op_GreaterThan(Hash128 x, Hash128 y) { }
	// Offset : 0x6e153c
	private static String Internal_Hash128ToString_Injected(ref Hash128 hash128) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum TouchPhase
{
	// Fields
	public Int32 value__; // 0x10
	public const TouchPhase Began = 0; // 0x0
	public const TouchPhase Moved = 1; // 0x0
	public const TouchPhase Stationary = 2; // 0x0
	public const TouchPhase Ended = 3; // 0x0
	public const TouchPhase Canceled = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum IMECompositionMode
{
	// Fields
	public Int32 value__; // 0x10
	public const IMECompositionMode Auto = 0; // 0x0
	public const IMECompositionMode On = 1; // 0x0
	public const IMECompositionMode Off = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum TouchType
{
	// Fields
	public Int32 value__; // 0x10
	public const TouchType Direct = 0; // 0x0
	public const TouchType Indirect = 1; // 0x0
	public const TouchType Stylus = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Touch
{
	// Fields
	private Int32 m_FingerId; // 0x10
	private Vector2 m_Position; // 0x14
	private Vector2 m_RawPosition; // 0x1c
	private Vector2 m_PositionDelta; // 0x24
	private Single m_TimeDelta; // 0x2c
	private Int32 m_TapCount; // 0x30
	private TouchPhase m_Phase; // 0x34
	private TouchType m_Type; // 0x38
	private Single m_Pressure; // 0x3c
	private Single m_maximumPossiblePressure; // 0x40
	private Single m_Radius; // 0x44
	private Single m_RadiusVariance; // 0x48
	private Single m_AltitudeAngle; // 0x4c
	private Single m_AzimuthAngle; // 0x50

	// Properties
	public Int32 fingerId { get; }
	public Vector2 position { get; }
	public Vector2 deltaPosition { get; }
	public TouchPhase phase { get; }
	public TouchType type { get; }

	// Methods
	// Offset : 0x2ce29c
	public Int32 get_fingerId() { }
	// Offset : 0x2ce2a4
	public Vector2 get_position() { }
	// Offset : 0x2ce2ac
	public Vector2 get_deltaPosition() { }
	// Offset : 0x2ce2b4
	public TouchPhase get_phase() { }
	// Offset : 0x2ce2bc
	public TouchType get_type() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Input
{
	// Fields

	// Properties
	public static Vector3 mousePosition { get; }
	public static Vector2 mouseScrollDelta { get; }
	public static IMECompositionMode imeCompositionMode { get; set; }
	public static String compositionString { get; }
	public static Vector2 compositionCursorPos { get; set; }
	public static Boolean mousePresent { get; }
	public static Int32 touchCount { get; }
	public static Boolean touchSupported { get; }
	public static Vector3 acceleration { get; }
	public static Touch[] touches { get; }

	// Methods
	// Offset : 0x6e17d8
	private static Boolean GetKeyDownInt(KeyCode key) { }
	// Offset : 0x6e1844
	public static Single GetAxis(String axisName) { }
	// Offset : 0x6e18b0
	public static Single GetAxisRaw(String axisName) { }
	// Offset : 0x6e191c
	public static Boolean GetButton(String buttonName) { }
	// Offset : 0x6e1988
	public static Boolean GetButtonDown(String buttonName) { }
	// Offset : 0x6e19f4
	public static Boolean GetButtonUp(String buttonName) { }
	// Offset : 0x6e1a60
	public static Boolean GetMouseButton(Int32 button) { }
	// Offset : 0x6e1acc
	public static Boolean GetMouseButtonDown(Int32 button) { }
	// Offset : 0x6e1b38
	public static Boolean GetMouseButtonUp(Int32 button) { }
	// Offset : 0x6e1ba4
	public static Touch GetTouch(Int32 index) { }
	// Offset : 0x6e1c6c
	public static Boolean GetKeyDown(KeyCode key) { }
	// Offset : 0x6e1c70
	public static Vector3 get_mousePosition() { }
	// Offset : 0x6e1d0c
	public static Vector2 get_mouseScrollDelta() { }
	// Offset : 0x6e1da0
	public static IMECompositionMode get_imeCompositionMode() { }
	// Offset : 0x6e1df8
	public static Void set_imeCompositionMode(IMECompositionMode value) { }
	// Offset : 0x6e1e64
	public static String get_compositionString() { }
	// Offset : 0x6e1ebc
	public static Vector2 get_compositionCursorPos() { }
	// Offset : 0x6e1f50
	public static Void set_compositionCursorPos(Vector2 value) { }
	// Offset : 0x6e1fe0
	public static Boolean get_mousePresent() { }
	// Offset : 0x6e2038
	public static Int32 get_touchCount() { }
	// Offset : 0x6e2090
	public static Boolean get_touchSupported() { }
	// Offset : 0x6e20e8
	public static Vector3 get_acceleration() { }
	// Offset : 0x6e2184
	public static Touch[] get_touches() { }
	// Offset : 0x6e1bf8
	private static Void GetTouch_Injected(Int32 index, out Touch ret) { }
	// Offset : 0x6e1ca0
	private static Void get_mousePosition_Injected(out Vector3 ret) { }
	// Offset : 0x6e1d34
	private static Void get_mouseScrollDelta_Injected(out Vector2 ret) { }
	// Offset : 0x6e1ee4
	private static Void get_compositionCursorPos_Injected(out Vector2 ret) { }
	// Offset : 0x6e1f74
	private static Void set_compositionCursorPos_Injected(ref Vector2 value) { }
	// Offset : 0x6e2118
	private static Void get_acceleration_Injected(out Vector3 ret) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum KeyCode
{
	// Fields
	public Int32 value__; // 0x10
	public const KeyCode None = 0; // 0x0
	public const KeyCode Backspace = 8; // 0x0
	public const KeyCode Delete = 127; // 0x0
	public const KeyCode Tab = 9; // 0x0
	public const KeyCode Clear = 12; // 0x0
	public const KeyCode Return = 13; // 0x0
	public const KeyCode Pause = 19; // 0x0
	public const KeyCode Escape = 27; // 0x0
	public const KeyCode Space = 32; // 0x0
	public const KeyCode Keypad0 = 256; // 0x0
	public const KeyCode Keypad1 = 257; // 0x0
	public const KeyCode Keypad2 = 258; // 0x0
	public const KeyCode Keypad3 = 259; // 0x0
	public const KeyCode Keypad4 = 260; // 0x0
	public const KeyCode Keypad5 = 261; // 0x0
	public const KeyCode Keypad6 = 262; // 0x0
	public const KeyCode Keypad7 = 263; // 0x0
	public const KeyCode Keypad8 = 264; // 0x0
	public const KeyCode Keypad9 = 265; // 0x0
	public const KeyCode KeypadPeriod = 266; // 0x0
	public const KeyCode KeypadDivide = 267; // 0x0
	public const KeyCode KeypadMultiply = 268; // 0x0
	public const KeyCode KeypadMinus = 269; // 0x0
	public const KeyCode KeypadPlus = 270; // 0x0
	public const KeyCode KeypadEnter = 271; // 0x0
	public const KeyCode KeypadEquals = 272; // 0x0
	public const KeyCode UpArrow = 273; // 0x0
	public const KeyCode DownArrow = 274; // 0x0
	public const KeyCode RightArrow = 275; // 0x0
	public const KeyCode LeftArrow = 276; // 0x0
	public const KeyCode Insert = 277; // 0x0
	public const KeyCode Home = 278; // 0x0
	public const KeyCode End = 279; // 0x0
	public const KeyCode PageUp = 280; // 0x0
	public const KeyCode PageDown = 281; // 0x0
	public const KeyCode F1 = 282; // 0x0
	public const KeyCode F2 = 283; // 0x0
	public const KeyCode F3 = 284; // 0x0
	public const KeyCode F4 = 285; // 0x0
	public const KeyCode F5 = 286; // 0x0
	public const KeyCode F6 = 287; // 0x0
	public const KeyCode F7 = 288; // 0x0
	public const KeyCode F8 = 289; // 0x0
	public const KeyCode F9 = 290; // 0x0
	public const KeyCode F10 = 291; // 0x0
	public const KeyCode F11 = 292; // 0x0
	public const KeyCode F12 = 293; // 0x0
	public const KeyCode F13 = 294; // 0x0
	public const KeyCode F14 = 295; // 0x0
	public const KeyCode F15 = 296; // 0x0
	public const KeyCode Alpha0 = 48; // 0x0
	public const KeyCode Alpha1 = 49; // 0x0
	public const KeyCode Alpha2 = 50; // 0x0
	public const KeyCode Alpha3 = 51; // 0x0
	public const KeyCode Alpha4 = 52; // 0x0
	public const KeyCode Alpha5 = 53; // 0x0
	public const KeyCode Alpha6 = 54; // 0x0
	public const KeyCode Alpha7 = 55; // 0x0
	public const KeyCode Alpha8 = 56; // 0x0
	public const KeyCode Alpha9 = 57; // 0x0
	public const KeyCode Exclaim = 33; // 0x0
	public const KeyCode DoubleQuote = 34; // 0x0
	public const KeyCode Hash = 35; // 0x0
	public const KeyCode Dollar = 36; // 0x0
	public const KeyCode Percent = 37; // 0x0
	public const KeyCode Ampersand = 38; // 0x0
	public const KeyCode Quote = 39; // 0x0
	public const KeyCode LeftParen = 40; // 0x0
	public const KeyCode RightParen = 41; // 0x0
	public const KeyCode Asterisk = 42; // 0x0
	public const KeyCode Plus = 43; // 0x0
	public const KeyCode Comma = 44; // 0x0
	public const KeyCode Minus = 45; // 0x0
	public const KeyCode Period = 46; // 0x0
	public const KeyCode Slash = 47; // 0x0
	public const KeyCode Colon = 58; // 0x0
	public const KeyCode Semicolon = 59; // 0x0
	public const KeyCode Less = 60; // 0x0
	public const KeyCode Equals = 61; // 0x0
	public const KeyCode Greater = 62; // 0x0
	public const KeyCode Question = 63; // 0x0
	public const KeyCode At = 64; // 0x0
	public const KeyCode LeftBracket = 91; // 0x0
	public const KeyCode Backslash = 92; // 0x0
	public const KeyCode RightBracket = 93; // 0x0
	public const KeyCode Caret = 94; // 0x0
	public const KeyCode Underscore = 95; // 0x0
	public const KeyCode BackQuote = 96; // 0x0
	public const KeyCode A = 97; // 0x0
	public const KeyCode B = 98; // 0x0
	public const KeyCode C = 99; // 0x0
	public const KeyCode D = 100; // 0x0
	public const KeyCode E = 101; // 0x0
	public const KeyCode F = 102; // 0x0
	public const KeyCode G = 103; // 0x0
	public const KeyCode H = 104; // 0x0
	public const KeyCode I = 105; // 0x0
	public const KeyCode J = 106; // 0x0
	public const KeyCode K = 107; // 0x0
	public const KeyCode L = 108; // 0x0
	public const KeyCode M = 109; // 0x0
	public const KeyCode N = 110; // 0x0
	public const KeyCode O = 111; // 0x0
	public const KeyCode P = 112; // 0x0
	public const KeyCode Q = 113; // 0x0
	public const KeyCode R = 114; // 0x0
	public const KeyCode S = 115; // 0x0
	public const KeyCode T = 116; // 0x0
	public const KeyCode U = 117; // 0x0
	public const KeyCode V = 118; // 0x0
	public const KeyCode W = 119; // 0x0
	public const KeyCode X = 120; // 0x0
	public const KeyCode Y = 121; // 0x0
	public const KeyCode Z = 122; // 0x0
	public const KeyCode LeftCurlyBracket = 123; // 0x0
	public const KeyCode Pipe = 124; // 0x0
	public const KeyCode RightCurlyBracket = 125; // 0x0
	public const KeyCode Tilde = 126; // 0x0
	public const KeyCode Numlock = 300; // 0x0
	public const KeyCode CapsLock = 301; // 0x0
	public const KeyCode ScrollLock = 302; // 0x0
	public const KeyCode RightShift = 303; // 0x0
	public const KeyCode LeftShift = 304; // 0x0
	public const KeyCode RightControl = 305; // 0x0
	public const KeyCode LeftControl = 306; // 0x0
	public const KeyCode RightAlt = 307; // 0x0
	public const KeyCode LeftAlt = 308; // 0x0
	public const KeyCode LeftCommand = 310; // 0x0
	public const KeyCode LeftApple = 310; // 0x0
	public const KeyCode LeftWindows = 311; // 0x0
	public const KeyCode RightCommand = 309; // 0x0
	public const KeyCode RightApple = 309; // 0x0
	public const KeyCode RightWindows = 312; // 0x0
	public const KeyCode AltGr = 313; // 0x0
	public const KeyCode Help = 315; // 0x0
	public const KeyCode Print = 316; // 0x0
	public const KeyCode SysReq = 317; // 0x0
	public const KeyCode Break = 318; // 0x0
	public const KeyCode Menu = 319; // 0x0
	public const KeyCode Mouse0 = 323; // 0x0
	public const KeyCode Mouse1 = 324; // 0x0
	public const KeyCode Mouse2 = 325; // 0x0
	public const KeyCode Mouse3 = 326; // 0x0
	public const KeyCode Mouse4 = 327; // 0x0
	public const KeyCode Mouse5 = 328; // 0x0
	public const KeyCode Mouse6 = 329; // 0x0
	public const KeyCode JoystickButton0 = 330; // 0x0
	public const KeyCode JoystickButton1 = 331; // 0x0
	public const KeyCode JoystickButton2 = 332; // 0x0
	public const KeyCode JoystickButton3 = 333; // 0x0
	public const KeyCode JoystickButton4 = 334; // 0x0
	public const KeyCode JoystickButton5 = 335; // 0x0
	public const KeyCode JoystickButton6 = 336; // 0x0
	public const KeyCode JoystickButton7 = 337; // 0x0
	public const KeyCode JoystickButton8 = 338; // 0x0
	public const KeyCode JoystickButton9 = 339; // 0x0
	public const KeyCode JoystickButton10 = 340; // 0x0
	public const KeyCode JoystickButton11 = 341; // 0x0
	public const KeyCode JoystickButton12 = 342; // 0x0
	public const KeyCode JoystickButton13 = 343; // 0x0
	public const KeyCode JoystickButton14 = 344; // 0x0
	public const KeyCode JoystickButton15 = 345; // 0x0
	public const KeyCode JoystickButton16 = 346; // 0x0
	public const KeyCode JoystickButton17 = 347; // 0x0
	public const KeyCode JoystickButton18 = 348; // 0x0
	public const KeyCode JoystickButton19 = 349; // 0x0
	public const KeyCode Joystick1Button0 = 350; // 0x0
	public const KeyCode Joystick1Button1 = 351; // 0x0
	public const KeyCode Joystick1Button2 = 352; // 0x0
	public const KeyCode Joystick1Button3 = 353; // 0x0
	public const KeyCode Joystick1Button4 = 354; // 0x0
	public const KeyCode Joystick1Button5 = 355; // 0x0
	public const KeyCode Joystick1Button6 = 356; // 0x0
	public const KeyCode Joystick1Button7 = 357; // 0x0
	public const KeyCode Joystick1Button8 = 358; // 0x0
	public const KeyCode Joystick1Button9 = 359; // 0x0
	public const KeyCode Joystick1Button10 = 360; // 0x0
	public const KeyCode Joystick1Button11 = 361; // 0x0
	public const KeyCode Joystick1Button12 = 362; // 0x0
	public const KeyCode Joystick1Button13 = 363; // 0x0
	public const KeyCode Joystick1Button14 = 364; // 0x0
	public const KeyCode Joystick1Button15 = 365; // 0x0
	public const KeyCode Joystick1Button16 = 366; // 0x0
	public const KeyCode Joystick1Button17 = 367; // 0x0
	public const KeyCode Joystick1Button18 = 368; // 0x0
	public const KeyCode Joystick1Button19 = 369; // 0x0
	public const KeyCode Joystick2Button0 = 370; // 0x0
	public const KeyCode Joystick2Button1 = 371; // 0x0
	public const KeyCode Joystick2Button2 = 372; // 0x0
	public const KeyCode Joystick2Button3 = 373; // 0x0
	public const KeyCode Joystick2Button4 = 374; // 0x0
	public const KeyCode Joystick2Button5 = 375; // 0x0
	public const KeyCode Joystick2Button6 = 376; // 0x0
	public const KeyCode Joystick2Button7 = 377; // 0x0
	public const KeyCode Joystick2Button8 = 378; // 0x0
	public const KeyCode Joystick2Button9 = 379; // 0x0
	public const KeyCode Joystick2Button10 = 380; // 0x0
	public const KeyCode Joystick2Button11 = 381; // 0x0
	public const KeyCode Joystick2Button12 = 382; // 0x0
	public const KeyCode Joystick2Button13 = 383; // 0x0
	public const KeyCode Joystick2Button14 = 384; // 0x0
	public const KeyCode Joystick2Button15 = 385; // 0x0
	public const KeyCode Joystick2Button16 = 386; // 0x0
	public const KeyCode Joystick2Button17 = 387; // 0x0
	public const KeyCode Joystick2Button18 = 388; // 0x0
	public const KeyCode Joystick2Button19 = 389; // 0x0
	public const KeyCode Joystick3Button0 = 390; // 0x0
	public const KeyCode Joystick3Button1 = 391; // 0x0
	public const KeyCode Joystick3Button2 = 392; // 0x0
	public const KeyCode Joystick3Button3 = 393; // 0x0
	public const KeyCode Joystick3Button4 = 394; // 0x0
	public const KeyCode Joystick3Button5 = 395; // 0x0
	public const KeyCode Joystick3Button6 = 396; // 0x0
	public const KeyCode Joystick3Button7 = 397; // 0x0
	public const KeyCode Joystick3Button8 = 398; // 0x0
	public const KeyCode Joystick3Button9 = 399; // 0x0
	public const KeyCode Joystick3Button10 = 400; // 0x0
	public const KeyCode Joystick3Button11 = 401; // 0x0
	public const KeyCode Joystick3Button12 = 402; // 0x0
	public const KeyCode Joystick3Button13 = 403; // 0x0
	public const KeyCode Joystick3Button14 = 404; // 0x0
	public const KeyCode Joystick3Button15 = 405; // 0x0
	public const KeyCode Joystick3Button16 = 406; // 0x0
	public const KeyCode Joystick3Button17 = 407; // 0x0
	public const KeyCode Joystick3Button18 = 408; // 0x0
	public const KeyCode Joystick3Button19 = 409; // 0x0
	public const KeyCode Joystick4Button0 = 410; // 0x0
	public const KeyCode Joystick4Button1 = 411; // 0x0
	public const KeyCode Joystick4Button2 = 412; // 0x0
	public const KeyCode Joystick4Button3 = 413; // 0x0
	public const KeyCode Joystick4Button4 = 414; // 0x0
	public const KeyCode Joystick4Button5 = 415; // 0x0
	public const KeyCode Joystick4Button6 = 416; // 0x0
	public const KeyCode Joystick4Button7 = 417; // 0x0
	public const KeyCode Joystick4Button8 = 418; // 0x0
	public const KeyCode Joystick4Button9 = 419; // 0x0
	public const KeyCode Joystick4Button10 = 420; // 0x0
	public const KeyCode Joystick4Button11 = 421; // 0x0
	public const KeyCode Joystick4Button12 = 422; // 0x0
	public const KeyCode Joystick4Button13 = 423; // 0x0
	public const KeyCode Joystick4Button14 = 424; // 0x0
	public const KeyCode Joystick4Button15 = 425; // 0x0
	public const KeyCode Joystick4Button16 = 426; // 0x0
	public const KeyCode Joystick4Button17 = 427; // 0x0
	public const KeyCode Joystick4Button18 = 428; // 0x0
	public const KeyCode Joystick4Button19 = 429; // 0x0
	public const KeyCode Joystick5Button0 = 430; // 0x0
	public const KeyCode Joystick5Button1 = 431; // 0x0
	public const KeyCode Joystick5Button2 = 432; // 0x0
	public const KeyCode Joystick5Button3 = 433; // 0x0
	public const KeyCode Joystick5Button4 = 434; // 0x0
	public const KeyCode Joystick5Button5 = 435; // 0x0
	public const KeyCode Joystick5Button6 = 436; // 0x0
	public const KeyCode Joystick5Button7 = 437; // 0x0
	public const KeyCode Joystick5Button8 = 438; // 0x0
	public const KeyCode Joystick5Button9 = 439; // 0x0
	public const KeyCode Joystick5Button10 = 440; // 0x0
	public const KeyCode Joystick5Button11 = 441; // 0x0
	public const KeyCode Joystick5Button12 = 442; // 0x0
	public const KeyCode Joystick5Button13 = 443; // 0x0
	public const KeyCode Joystick5Button14 = 444; // 0x0
	public const KeyCode Joystick5Button15 = 445; // 0x0
	public const KeyCode Joystick5Button16 = 446; // 0x0
	public const KeyCode Joystick5Button17 = 447; // 0x0
	public const KeyCode Joystick5Button18 = 448; // 0x0
	public const KeyCode Joystick5Button19 = 449; // 0x0
	public const KeyCode Joystick6Button0 = 450; // 0x0
	public const KeyCode Joystick6Button1 = 451; // 0x0
	public const KeyCode Joystick6Button2 = 452; // 0x0
	public const KeyCode Joystick6Button3 = 453; // 0x0
	public const KeyCode Joystick6Button4 = 454; // 0x0
	public const KeyCode Joystick6Button5 = 455; // 0x0
	public const KeyCode Joystick6Button6 = 456; // 0x0
	public const KeyCode Joystick6Button7 = 457; // 0x0
	public const KeyCode Joystick6Button8 = 458; // 0x0
	public const KeyCode Joystick6Button9 = 459; // 0x0
	public const KeyCode Joystick6Button10 = 460; // 0x0
	public const KeyCode Joystick6Button11 = 461; // 0x0
	public const KeyCode Joystick6Button12 = 462; // 0x0
	public const KeyCode Joystick6Button13 = 463; // 0x0
	public const KeyCode Joystick6Button14 = 464; // 0x0
	public const KeyCode Joystick6Button15 = 465; // 0x0
	public const KeyCode Joystick6Button16 = 466; // 0x0
	public const KeyCode Joystick6Button17 = 467; // 0x0
	public const KeyCode Joystick6Button18 = 468; // 0x0
	public const KeyCode Joystick6Button19 = 469; // 0x0
	public const KeyCode Joystick7Button0 = 470; // 0x0
	public const KeyCode Joystick7Button1 = 471; // 0x0
	public const KeyCode Joystick7Button2 = 472; // 0x0
	public const KeyCode Joystick7Button3 = 473; // 0x0
	public const KeyCode Joystick7Button4 = 474; // 0x0
	public const KeyCode Joystick7Button5 = 475; // 0x0
	public const KeyCode Joystick7Button6 = 476; // 0x0
	public const KeyCode Joystick7Button7 = 477; // 0x0
	public const KeyCode Joystick7Button8 = 478; // 0x0
	public const KeyCode Joystick7Button9 = 479; // 0x0
	public const KeyCode Joystick7Button10 = 480; // 0x0
	public const KeyCode Joystick7Button11 = 481; // 0x0
	public const KeyCode Joystick7Button12 = 482; // 0x0
	public const KeyCode Joystick7Button13 = 483; // 0x0
	public const KeyCode Joystick7Button14 = 484; // 0x0
	public const KeyCode Joystick7Button15 = 485; // 0x0
	public const KeyCode Joystick7Button16 = 486; // 0x0
	public const KeyCode Joystick7Button17 = 487; // 0x0
	public const KeyCode Joystick7Button18 = 488; // 0x0
	public const KeyCode Joystick7Button19 = 489; // 0x0
	public const KeyCode Joystick8Button0 = 490; // 0x0
	public const KeyCode Joystick8Button1 = 491; // 0x0
	public const KeyCode Joystick8Button2 = 492; // 0x0
	public const KeyCode Joystick8Button3 = 493; // 0x0
	public const KeyCode Joystick8Button4 = 494; // 0x0
	public const KeyCode Joystick8Button5 = 495; // 0x0
	public const KeyCode Joystick8Button6 = 496; // 0x0
	public const KeyCode Joystick8Button7 = 497; // 0x0
	public const KeyCode Joystick8Button8 = 498; // 0x0
	public const KeyCode Joystick8Button9 = 499; // 0x0
	public const KeyCode Joystick8Button10 = 500; // 0x0
	public const KeyCode Joystick8Button11 = 501; // 0x0
	public const KeyCode Joystick8Button12 = 502; // 0x0
	public const KeyCode Joystick8Button13 = 503; // 0x0
	public const KeyCode Joystick8Button14 = 504; // 0x0
	public const KeyCode Joystick8Button15 = 505; // 0x0
	public const KeyCode Joystick8Button16 = 506; // 0x0
	public const KeyCode Joystick8Button17 = 507; // 0x0
	public const KeyCode Joystick8Button18 = 508; // 0x0
	public const KeyCode Joystick8Button19 = 509; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct LayerMask
{
	// Fields
	private Int32 m_Mask; // 0x10

	// Properties

	// Methods
	// Offset : 0x6e241c
	public static Int32 op_Implicit(LayerMask mask) { }
	// Offset : 0x6e2420
	public static LayerMask op_Implicit(Int32 intVal) { }
	// Offset : 0x6e2428
	public static Int32 NameToLayer(String layerName) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal static class ManagedStreamHelpers
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e2f58
	internal static Void ValidateLoadFromStream(Stream stream) { }
	// Offset : 0x6e3098
	internal static Void ManagedStreamRead(Byte[] buffer, Int32 offset, Int32 count, Stream stream, IntPtr returnValueAddress) { }
	// Offset : 0x6e31bc
	internal static Void ManagedStreamSeek(Int64 offset, UInt32 origin, Stream stream, IntPtr returnValueAddress) { }
	// Offset : 0x6e32d8
	internal static Void ManagedStreamLength(Stream stream, IntPtr returnValueAddress) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Matrix4x4 : IEquatable`1
{
	// Fields
	public Single m00; // 0x10
	public Single m10; // 0x14
	public Single m20; // 0x18
	public Single m30; // 0x1c
	public Single m01; // 0x20
	public Single m11; // 0x24
	public Single m21; // 0x28
	public Single m31; // 0x2c
	public Single m02; // 0x30
	public Single m12; // 0x34
	public Single m22; // 0x38
	public Single m32; // 0x3c
	public Single m03; // 0x40
	public Single m13; // 0x44
	public Single m23; // 0x48
	public Single m33; // 0x4c
	private static readonly Matrix4x4 zeroMatrix; // 0x0
	private static readonly Matrix4x4 identityMatrix; // 0x40

	// Properties
	public Int32 Item { set; }
	public Int32 Item { set; }

	// Methods
	// Offset : 0x2cdb20
	public Void .ctor(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3) { }
	// Offset : 0x2cdb4c
	public Void set_Item(Int32 row, Int32 column, Single value) { }
	// Offset : 0x2cdb58
	public Void set_Item(Int32 index, Single value) { }
	// Offset : 0x2cdb60
	public override Int32 GetHashCode() { }
	// Offset : 0x2cdb68
	public override Boolean Equals(Object other) { }
	// Offset : 0x2cdb70
	public Boolean Equals(Matrix4x4 other) { }
	// Offset : 0x2cdbb8
	public Vector4 GetColumn(Int32 index) { }
	// Offset : 0x2cdbc0
	public Void SetColumn(Int32 index, Vector4 column) { }
	// Offset : 0x2cdbc8
	public Vector3 MultiplyPoint(Vector3 point) { }
	// Offset : 0x2cdbd0
	public Vector3 MultiplyPoint3x4(Vector3 point) { }
	// Offset : 0x2cdbd8
	public Vector3 MultiplyVector(Vector3 vector) { }
	// Offset : 0x2cdbe0
	public override String ToString() { }
	// Offset : 0x60513c
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Vector3 : IEquatable`1
{
	// Fields
	public const Single kEpsilon; // 0x0
	public const Single kEpsilonNormalSqrt; // 0x0
	public Single x; // 0x10
	public Single y; // 0x14
	public Single z; // 0x18
	private static readonly Vector3 zeroVector; // 0x0
	private static readonly Vector3 oneVector; // 0xc
	private static readonly Vector3 upVector; // 0x18
	private static readonly Vector3 downVector; // 0x24
	private static readonly Vector3 leftVector; // 0x30
	private static readonly Vector3 rightVector; // 0x3c
	private static readonly Vector3 forwardVector; // 0x48
	private static readonly Vector3 backVector; // 0x54
	private static readonly Vector3 positiveInfinityVector; // 0x60
	private static readonly Vector3 negativeInfinityVector; // 0x6c

	// Properties
	public Single Item { get; set; }
	public Vector3 normalized { get; }
	public Single magnitude { get; }
	public Single sqrMagnitude { get; }
	public static Vector3 zero { get; }
	public static Vector3 one { get; }
	public static Vector3 forward { get; }
	public static Vector3 back { get; }
	public static Vector3 up { get; }
	public static Vector3 down { get; }
	public static Vector3 left { get; }
	public static Vector3 right { get; }

	// Methods
	// Offset : 0x2ce3f0
	public Void .ctor(Single x, Single y, Single z) { }
	// Offset : 0x2ce3fc
	public Void .ctor(Single x, Single y) { }
	// Offset : 0x61bb2c
	public static Vector3 Lerp(Vector3 a, Vector3 b, Single t) { }
	// Offset : 0x2ce408
	public Single get_Item(Int32 index) { }
	// Offset : 0x2ce410
	public Void set_Item(Int32 index, Single value) { }
	// Offset : 0x61bd70
	public static Vector3 Cross(Vector3 lhs, Vector3 rhs) { }
	// Offset : 0x2ce418
	public override Int32 GetHashCode() { }
	// Offset : 0x2ce420
	public override Boolean Equals(Object other) { }
	// Offset : 0x2ce428
	public Boolean Equals(Vector3 other) { }
	// Offset : 0x609f58
	public static Vector3 Normalize(Vector3 value) { }
	// Offset : 0x2ce430
	public Void Normalize() { }
	// Offset : 0x2ce438
	public Vector3 get_normalized() { }
	// Offset : 0x60a03c
	public static Single Dot(Vector3 lhs, Vector3 rhs) { }
	// Offset : 0x61c098
	public static Vector3 Project(Vector3 vector, Vector3 onNormal) { }
	// Offset : 0x61c1e4
	public static Vector3 ProjectOnPlane(Vector3 vector, Vector3 planeNormal) { }
	// Offset : 0x61c2a8
	public static Single Angle(Vector3 from, Vector3 to) { }
	// Offset : 0x61c424
	public static Single Distance(Vector3 a, Vector3 b) { }
	// Offset : 0x61bee8
	public static Single Magnitude(Vector3 vector) { }
	// Offset : 0x2ce440
	public Single get_magnitude() { }
	// Offset : 0x61c5a8
	public static Single SqrMagnitude(Vector3 vector) { }
	// Offset : 0x2ce448
	public Single get_sqrMagnitude() { }
	// Offset : 0x61c5c0
	public static Vector3 Min(Vector3 lhs, Vector3 rhs) { }
	// Offset : 0x61c664
	public static Vector3 Max(Vector3 lhs, Vector3 rhs) { }
	// Offset : 0x6136a8
	public static Vector3 get_zero() { }
	// Offset : 0x61c708
	public static Vector3 get_one() { }
	// Offset : 0x6194e8
	public static Vector3 get_forward() { }
	// Offset : 0x61c774
	public static Vector3 get_back() { }
	// Offset : 0x60d2a0
	public static Vector3 get_up() { }
	// Offset : 0x61c7e0
	public static Vector3 get_down() { }
	// Offset : 0x61c84c
	public static Vector3 get_left() { }
	// Offset : 0x619188
	public static Vector3 get_right() { }
	// Offset : 0x60e104
	public static Vector3 op_Addition(Vector3 a, Vector3 b) { }
	// Offset : 0x61c298
	public static Vector3 op_Subtraction(Vector3 a, Vector3 b) { }
	// Offset : 0x61c8b8
	public static Vector3 op_UnaryNegation(Vector3 a) { }
	// Offset : 0x60d7bc
	public static Vector3 op_Multiply(Vector3 a, Single d) { }
	// Offset : 0x61c8c8
	public static Vector3 op_Multiply(Single d, Vector3 a) { }
	// Offset : 0x61bf98
	public static Vector3 op_Division(Vector3 a, Single d) { }
	// Offset : 0x61c8dc
	public static Boolean op_Equality(Vector3 lhs, Vector3 rhs) { }
	// Offset : 0x613714
	public static Boolean op_Inequality(Vector3 lhs, Vector3 rhs) { }
	// Offset : 0x2ce468
	public override String ToString() { }
	// Offset : 0x2ce470
	public String ToString(String format) { }
	// Offset : 0x61ccec
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Quaternion : IEquatable`1
{
	// Fields
	public Single x; // 0x10
	public Single y; // 0x14
	public Single z; // 0x18
	public Single w; // 0x1c
	private static readonly Quaternion identityQuaternion; // 0x0
	public const Single kEpsilon; // 0x0

	// Properties
	public static Quaternion identity { get; }
	public Vector3 eulerAngles { get; set; }

	// Methods
	// Offset : 0x2cde4c
	public Void .ctor(Single x, Single y, Single z, Single w) { }
	// Offset : 0x60c94c
	public static Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection) { }
	// Offset : 0x60ca60
	public static Quaternion Inverse(Quaternion rotation) { }
	// Offset : 0x60cb58
	public static Quaternion Slerp(Quaternion a, Quaternion b, Single t) { }
	// Offset : 0x60cc84
	public static Quaternion Lerp(Quaternion a, Quaternion b, Single t) { }
	// Offset : 0x60cdb0
	private static Quaternion Internal_FromEulerRad(Vector3 euler) { }
	// Offset : 0x60cea8
	private static Vector3 Internal_ToEulerRad(Quaternion rotation) { }
	// Offset : 0x60cfa4
	public static Quaternion AngleAxis(Single angle, Vector3 axis) { }
	// Offset : 0x60d0c4
	public static Quaternion LookRotation(Vector3 forward, Vector3 upwards) { }
	// Offset : 0x60d1d8
	public static Quaternion LookRotation(Vector3 forward) { }
	// Offset : 0x60d30c
	public static Quaternion get_identity() { }
	// Offset : 0x60d378
	public static Quaternion op_Multiply(Quaternion lhs, Quaternion rhs) { }
	// Offset : 0x60d3ec
	public static Vector3 op_Multiply(Quaternion rotation, Vector3 point) { }
	// Offset : 0x60d490
	private static Boolean IsEqualUsingDot(Single dot) { }
	// Offset : 0x60d4a4
	public static Boolean op_Equality(Quaternion lhs, Quaternion rhs) { }
	// Offset : 0x60d58c
	public static Boolean op_Inequality(Quaternion lhs, Quaternion rhs) { }
	// Offset : 0x60d56c
	public static Single Dot(Quaternion a, Quaternion b) { }
	// Offset : 0x60d654
	private static Vector3 Internal_MakePositive(Vector3 euler) { }
	// Offset : 0x2cde58
	public Vector3 get_eulerAngles() { }
	// Offset : 0x2cde60
	public Void set_eulerAngles(Vector3 value) { }
	// Offset : 0x60d894
	public static Quaternion Euler(Single x, Single y, Single z) { }
	// Offset : 0x60d958
	public static Quaternion Euler(Vector3 euler) { }
	// Offset : 0x2cde68
	public override Int32 GetHashCode() { }
	// Offset : 0x2cde70
	public override Boolean Equals(Object other) { }
	// Offset : 0x2cde78
	public Boolean Equals(Quaternion other) { }
	// Offset : 0x2cde80
	public override String ToString() { }
	// Offset : 0x60ddb0
	private static Void .cctor() { }
	// Offset : 0x60c9dc
	private static Void FromToRotation_Injected(ref Vector3 fromDirection, ref Vector3 toDirection, out Quaternion ret) { }
	// Offset : 0x60cae4
	private static Void Inverse_Injected(ref Quaternion rotation, out Quaternion ret) { }
	// Offset : 0x60cbf8
	private static Void Slerp_Injected(ref Quaternion a, ref Quaternion b, Single t, out Quaternion ret) { }
	// Offset : 0x60cd24
	private static Void Lerp_Injected(ref Quaternion a, ref Quaternion b, Single t, out Quaternion ret) { }
	// Offset : 0x60ce34
	private static Void Internal_FromEulerRad_Injected(ref Vector3 euler, out Quaternion ret) { }
	// Offset : 0x60cf30
	private static Void Internal_ToEulerRad_Injected(ref Quaternion rotation, out Vector3 ret) { }
	// Offset : 0x60d038
	private static Void AngleAxis_Injected(Single angle, ref Vector3 axis, out Quaternion ret) { }
	// Offset : 0x60d154
	private static Void LookRotation_Injected(ref Vector3 forward, ref Vector3 upwards, out Quaternion ret) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Mathf
{
	// Fields
	public static readonly Single Epsilon; // 0x0

	// Properties

	// Methods
	// Offset : 0x603a70
	public static Single PerlinNoise(Single x, Single y) { }
	// Offset : 0x603ae0
	public static Single Sin(Single f) { }
	// Offset : 0x603afc
	public static Single Cos(Single f) { }
	// Offset : 0x603b18
	public static Single Tan(Single f) { }
	// Offset : 0x603b34
	public static Single Asin(Single f) { }
	// Offset : 0x603b50
	public static Single Acos(Single f) { }
	// Offset : 0x603b6c
	public static Single Atan2(Single y, Single x) { }
	// Offset : 0x603b8c
	public static Single Sqrt(Single f) { }
	// Offset : 0x603ba4
	public static Single Abs(Single f) { }
	// Offset : 0x603bac
	public static Single Min(Single a, Single b) { }
	// Offset : 0x603bb8
	public static Int32 Min(Int32 a, Int32 b) { }
	// Offset : 0x603bc4
	public static Single Max(Single a, Single b) { }
	// Offset : 0x603bd0
	public static Single Max(Single[] values) { }
	// Offset : 0x603c9c
	public static Int32 Max(Int32 a, Int32 b) { }
	// Offset : 0x603ca8
	public static Single Pow(Single f, Single p) { }
	// Offset : 0x603cc8
	public static Single Log(Single f, Single p) { }
	// Offset : 0x603cec
	public static Single Floor(Single f) { }
	// Offset : 0x603cf4
	public static Single Round(Single f) { }
	// Offset : 0x603d88
	public static Int32 CeilToInt(Single f) { }
	// Offset : 0x603d90
	public static Int32 FloorToInt(Single f) { }
	// Offset : 0x603d98
	public static Int32 RoundToInt(Single f) { }
	// Offset : 0x603e2c
	public static Single Sign(Single f) { }
	// Offset : 0x603e40
	public static Single Clamp(Single value, Single min, Single max) { }
	// Offset : 0x603e5c
	public static Int32 Clamp(Int32 value, Int32 min, Int32 max) { }
	// Offset : 0x603e78
	public static Single Clamp01(Single value) { }
	// Offset : 0x603e94
	public static Single Lerp(Single a, Single b, Single t) { }
	// Offset : 0x603f2c
	public static Single MoveTowards(Single current, Single target, Single maxDelta) { }
	// Offset : 0x603fe8
	public static Boolean Approximately(Single a, Single b) { }
	// Offset : 0x60409c
	public static Single SmoothDamp(Single current, Single target, ref Single currentVelocity, Single smoothTime, Single maxSpeed, Single deltaTime) { }
	// Offset : 0x6041f0
	public static Single Repeat(Single t, Single length) { }
	// Offset : 0x604280
	public static Single InverseLerp(Single a, Single b, Single value) { }
	// Offset : 0x604324
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngineInternal
public struct MathfInternal
{
	// Fields
	public static Single FloatMinNormal; // 0x0
	public static Single FloatMinDenormal; // 0x4
	public static Boolean IsFlushToZeroEnabled; // 0x8

	// Properties

	// Methods
	// Offset : 0x967a0c
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Mesh : Object
{
	// Fields

	// Properties
	internal Boolean canAccess { get; }
	public Int32 subMeshCount { get; }
	public Vector3[] vertices { get; }
	public Vector3[] normals { get; }
	public Vector4[] tangents { get; }
	public Vector2[] uv { get; }
	public Vector2[] uv2 { get; }
	public Vector2[] uv3 { get; }
	public Vector2[] uv4 { get; }
	public Color32[] colors32 { get; }

	// Methods
	// Offset : 0x605300
	public Void .ctor() { }
	// Offset : 0x605378
	private static Void Internal_Create(Mesh mono) { }
	// Offset : 0x6053e4
	private Int32[] GetIndicesImpl(Int32 submesh, Boolean applyBaseVertex) { }
	// Offset : 0x605468
	private Void SetIndicesImpl(Int32 submesh, MeshTopology topology, Array indices, Int32 arraySize, Boolean calculateBounds, Int32 baseVertex) { }
	// Offset : 0x60551c
	private Void PrintErrorCantAccessChannel(VertexAttribute ch) { }
	// Offset : 0x605590
	internal Boolean HasChannel(VertexAttribute ch) { }
	// Offset : 0x605604
	private Void SetArrayForChannelImpl(VertexAttribute channel, InternalVertexChannelType format, Int32 dim, Array values, Int32 arraySize) { }
	// Offset : 0x6056a8
	private Array GetAllocArrayFromChannelImpl(VertexAttribute channel, InternalVertexChannelType format, Int32 dim) { }
	// Offset : 0x605734
	internal Boolean get_canAccess() { }
	// Offset : 0x6057a0
	public Int32 get_subMeshCount() { }
	// Offset : 0x60580c
	private Void ClearImpl(Boolean keepVertexLayout) { }
	// Offset : 0x605880
	private Void RecalculateBoundsImpl() { }
	// Offset : 0x6058ec
	internal VertexAttribute GetUVChannel(Int32 uvIndex) { }
	// Offset : 0x605988
	internal static Int32 DefaultDimensionForChannel(VertexAttribute channel) { }
	// Offset : 0x
	private T[] GetAllocArrayFromChannel(VertexAttribute channel, InternalVertexChannelType format, Int32 dim) { }
	// Offset : 0x
	private T[] GetAllocArrayFromChannel(VertexAttribute channel) { }
	// Offset : 0x605a50
	private Void SetSizedArrayForChannel(VertexAttribute channel, InternalVertexChannelType format, Int32 dim, Array values, Int32 valuesCount) { }
	// Offset : 0x
	private Void SetListForChannel(VertexAttribute channel, InternalVertexChannelType format, Int32 dim, List`1 values) { }
	// Offset : 0x
	private Void SetListForChannel(VertexAttribute channel, List`1 values) { }
	// Offset : 0x605acc
	public Vector3[] get_vertices() { }
	// Offset : 0x605b20
	public Vector3[] get_normals() { }
	// Offset : 0x605b74
	public Vector4[] get_tangents() { }
	// Offset : 0x605bc8
	public Vector2[] get_uv() { }
	// Offset : 0x605c1c
	public Vector2[] get_uv2() { }
	// Offset : 0x605c70
	public Vector2[] get_uv3() { }
	// Offset : 0x605cc4
	public Vector2[] get_uv4() { }
	// Offset : 0x605d18
	public Color32[] get_colors32() { }
	// Offset : 0x605d74
	public Void SetVertices(List`1 inVertices) { }
	// Offset : 0x605dd8
	public Void SetNormals(List`1 inNormals) { }
	// Offset : 0x605e3c
	public Void SetTangents(List`1 inTangents) { }
	// Offset : 0x605ea0
	public Void SetColors(List`1 inColors) { }
	// Offset : 0x
	private Void SetUvsImpl(Int32 uvIndex, Int32 dim, List`1 uvs) { }
	// Offset : 0x605f0c
	public Void SetUVs(Int32 channel, List`1 uvs) { }
	// Offset : 0x605f78
	private Void PrintErrorCantAccessIndices() { }
	// Offset : 0x606094
	private Boolean CheckCanAccessSubmesh(Int32 submesh, Boolean errorAboutTriangles) { }
	// Offset : 0x6061ac
	private Boolean CheckCanAccessSubmeshTriangles(Int32 submesh) { }
	// Offset : 0x6061b4
	private Boolean CheckCanAccessSubmeshIndices(Int32 submesh) { }
	// Offset : 0x6061bc
	public Int32[] GetIndices(Int32 submesh) { }
	// Offset : 0x6061c4
	public Int32[] GetIndices(Int32 submesh, Boolean applyBaseVertex) { }
	// Offset : 0x606254
	private Void SetTrianglesImpl(Int32 submesh, Array triangles, Int32 arraySize, Boolean calculateBounds, Int32 baseVertex) { }
	// Offset : 0x606278
	public Void SetTriangles(List`1 triangles, Int32 submesh) { }
	// Offset : 0x606284
	public Void SetTriangles(List`1 triangles, Int32 submesh, Boolean calculateBounds, Int32 baseVertex) { }
	// Offset : 0x6063b4
	public Void Clear() { }
	// Offset : 0x6063bc
	public Void RecalculateBounds() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
internal enum InternalVertexChannelType
{
	// Fields
	public Int32 value__; // 0x10
	public const InternalVertexChannelType Float = 0; // 0x0
	public const InternalVertexChannelType Color = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngineInternal
public class ScriptingUtils
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x967b04
	public static Delegate CreateDelegate(Type type, MethodInfo methodInfo) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class MonoBehaviour : Behaviour
{
	// Fields

	// Properties
	public Boolean useGUILayout { get; set; }

	// Methods
	// Offset : 0x606498
	public Void .ctor() { }
	// Offset : 0x6064a0
	public Boolean IsInvoking() { }
	// Offset : 0x606510
	public Void CancelInvoke() { }
	// Offset : 0x606580
	public Void Invoke(String methodName, Single time) { }
	// Offset : 0x606614
	public Void InvokeRepeating(String methodName, Single time, Single repeatRate) { }
	// Offset : 0x60670c
	public Void CancelInvoke(String methodName) { }
	// Offset : 0x606784
	public Boolean IsInvoking(String methodName) { }
	// Offset : 0x6067fc
	public Coroutine StartCoroutine(String methodName) { }
	// Offset : 0x606804
	public Coroutine StartCoroutine(String methodName, Object value) { }
	// Offset : 0x6069fc
	public Coroutine StartCoroutine(IEnumerator routine) { }
	// Offset : 0x606b44
	public Coroutine StartCoroutine_Auto(IEnumerator routine) { }
	// Offset : 0x606b48
	public Void StopCoroutine(IEnumerator routine) { }
	// Offset : 0x606c90
	public Void StopCoroutine(Coroutine routine) { }
	// Offset : 0x606dd8
	public Void StopCoroutine(String methodName) { }
	// Offset : 0x606e4c
	public Void StopAllCoroutines() { }
	// Offset : 0x606eb8
	public Boolean get_useGUILayout() { }
	// Offset : 0x606f24
	public Void set_useGUILayout(Boolean value) { }
	// Offset : 0x606f98
	public static Void print(Object message) { }
	// Offset : 0x606514
	private static Void Internal_CancelInvokeAll(MonoBehaviour self) { }
	// Offset : 0x6064a4
	private static Boolean Internal_IsInvokingAll(MonoBehaviour self) { }
	// Offset : 0x606588
	private static Void InvokeDelayed(MonoBehaviour self, String methodName, Single time, Single repeatRate) { }
	// Offset : 0x606710
	private static Void CancelInvoke(MonoBehaviour self, String methodName) { }
	// Offset : 0x606788
	private static Boolean IsInvoking(MonoBehaviour self, String methodName) { }
	// Offset : 0x60690c
	private static Boolean IsObjectMonoBehaviour(Object obj) { }
	// Offset : 0x606978
	private Coroutine StartCoroutineManaged(String methodName, Object value) { }
	// Offset : 0x606ad0
	private Coroutine StartCoroutineManaged2(IEnumerator enumerator) { }
	// Offset : 0x606d64
	private Void StopCoroutineManaged(Coroutine routine) { }
	// Offset : 0x606c1c
	private Void StopCoroutineFromEnumeratorManaged(IEnumerator routine) { }
	// Offset : 0x607000
	internal String GetScriptClassName() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class SendMouseEvents
{
	// Fields
	private static Boolean s_MouseUsed; // 0x0
	private static readonly HitInfo[] m_LastHit; // 0x8
	private static readonly HitInfo[] m_MouseDownHit; // 0x10
	private static readonly HitInfo[] m_CurrentHit; // 0x18
	private static Camera[] m_Cameras; // 0x20

	// Properties

	// Methods
	// Offset : 0x6128c4
	private static Void SetMouseMoved() { }
	// Offset : 0x612930
	private static Void HitTestLegacyGUI(Camera camera, Vector3 mousePosition, ref HitInfo hitInfo) { }
	// Offset : 0x612a64
	private static Void DoSendMouseEvents(Int32 skipRTCameras) { }
	// Offset : 0x6137c4
	private static Void SendEvents(Int32 i, HitInfo hit) { }
	// Offset : 0x613f34
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
private struct HitInfo
{
	// Fields
	public GameObject target; // 0x10
	public Camera camera; // 0x18

	// Properties

	// Methods
	// Offset : 0x2ce294
	public Void SendMessage(String name) { }
	// Offset : 0x613d80
	public static Boolean op_Implicit(HitInfo exists) { }
	// Offset : 0x613e70
	public static Boolean Compare(HitInfo lhs, HitInfo rhs) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal sealed class NoAllocHelpers
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public static Int32 SafeLength(List`1 values) { }
	// Offset : 0x606348
	public static Array ExtractArrayFromList(Object list) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Plane
{
	// Fields
	private Vector3 m_Normal; // 0x10
	private Single m_Distance; // 0x1c

	// Properties

	// Methods
	// Offset : 0x2cdc04
	public Void .ctor(Vector3 inNormal, Vector3 inPoint) { }
	// Offset : 0x2cdc0c
	public Boolean Raycast(Ray ray, out Single enter) { }
	// Offset : 0x2cdc44
	public override String ToString() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal interface IPlayerEditorConnectionNative
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void Initialize() { }
	// Offset : 0x
	public abstract Void DisconnectAll() { }
	// Offset : 0x
	public abstract Void SendMessage(Guid messageId, Byte[] data, Int32 playerId) { }
	// Offset : 0x
	public abstract Void Poll() { }
	// Offset : 0x
	public abstract Void RegisterInternal(Guid messageId) { }
	// Offset : 0x
	public abstract Void UnregisterInternal(Guid messageId) { }
	// Offset : 0x
	public abstract Boolean IsConnected() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class PlayerConnectionInternal : IPlayerEditorConnectionNative
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x607684
	public Void .ctor() { }
	// Offset : 0x60b484
	private Void UnityEngine.IPlayerEditorConnectionNative.SendMessage(Guid messageId, Byte[] data, Int32 playerId) { }
	// Offset : 0x60b618
	private Void UnityEngine.IPlayerEditorConnectionNative.Poll() { }
	// Offset : 0x60b674
	private Void UnityEngine.IPlayerEditorConnectionNative.RegisterInternal(Guid messageId) { }
	// Offset : 0x60b744
	private Void UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal(Guid messageId) { }
	// Offset : 0x60b814
	private Void UnityEngine.IPlayerEditorConnectionNative.Initialize() { }
	// Offset : 0x60b870
	private Boolean UnityEngine.IPlayerEditorConnectionNative.IsConnected() { }
	// Offset : 0x60b8cc
	private Void UnityEngine.IPlayerEditorConnectionNative.DisconnectAll() { }
	// Offset : 0x60b874
	private static Boolean IsConnected() { }
	// Offset : 0x60b818
	private static Void Initialize() { }
	// Offset : 0x60b6d8
	private static Void RegisterInternal(String messageId) { }
	// Offset : 0x60b7a8
	private static Void UnregisterInternal(String messageId) { }
	// Offset : 0x60b594
	private static Void SendMessage(String messageId, Byte[] data, Int32 playerId) { }
	// Offset : 0x60b61c
	private static Void PollInternal() { }
	// Offset : 0x60b8d0
	private static Void DisconnectAll() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.PlayerLoop
public struct Initialization
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PlayerUpdateTime
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct AsyncUploadTimeSlicedUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct SynchronizeState
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct SynchronizeInputs
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct XREarlyUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.PlayerLoop
public struct EarlyUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PollPlayerConnection
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ProfilerStartFrame
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PollHtcsPlayerConnection
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct GpuTimestamp
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct AnalyticsCoreStatsUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UnityWebRequestUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateStreamingManager
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ExecuteMainThreadJobs
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ProcessMouseInWindow
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ClearIntermediateRenderers
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ClearLines
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PresentBeforeUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ResetFrameStatsAfterPresent
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateAllUnityWebStreams
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateAsyncReadbackManager
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateTextureStreamingManager
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdatePreloading
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct RendererNotifyInvisible
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PlayerCleanupCachedData
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateMainGameViewRect
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateCanvasRectTransform
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateInputManager
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ProcessRemoteInput
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct XRUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ScriptRunDelayedStartupFrame
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateKinect
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DeliverIosPlatformEvents
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DispatchEventQueueEvents
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DirectorSampleTime
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PhysicsResetInterpolatedTransformPosition
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct SpriteAtlasManagerUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct TangoUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PerformanceAnalyticsUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.PlayerLoop
public struct FixedUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ClearLines
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DirectorFixedSampleTime
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct AudioFixedUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ScriptRunBehaviourFixedUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DirectorFixedUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct LegacyFixedAnimationUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct XRFixedUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PhysicsFixedUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct Physics2DFixedUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DirectorFixedUpdatePostPhysics
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ScriptRunDelayedFixedFrameRate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct NewInputFixedUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.PlayerLoop
public struct PreUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PhysicsUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct Physics2DUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct CheckTexFieldInput
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct IMGUISendQueuedEvents
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct SendMouseEvents
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct AIUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct WindUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateVideo
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct NewInputUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.PlayerLoop
public struct Update
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ScriptRunBehaviourUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DirectorUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ScriptRunDelayedDynamicFrameRate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ScriptRunDelayedTasks
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.PlayerLoop
public struct PreLateUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct AIUpdatePostScript
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DirectorUpdateAnimationBegin
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct LegacyAnimationUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DirectorUpdateAnimationEnd
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DirectorDeferredEvaluate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateNetworkManager
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateMasterServerInterface
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UNetUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct EndGraphicsJobsAfterScriptUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ParticleSystemBeginUpdateAll
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ScriptRunBehaviourLateUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ConstraintManagerUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.PlayerLoop
public struct PostLateUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PlayerSendFrameStarted
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateRectTransform
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateCanvasRectTransform
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PlayerUpdateCanvases
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateAudio
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateVideo
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DirectorLateUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ScriptRunDelayedDynamicFrameRate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct VFXUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ParticleSystemEndUpdateAll
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct EndGraphicsJobsAfterScriptLateUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateSubstance
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateCustomRenderTextures
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateAllRenderers
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct EnlightenRuntimeUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateAllSkinnedMeshes
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ProcessWebSendMessages
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct SortingGroupsUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateVideoTextures
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct DirectorRenderImage
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PlayerEmitCanvasGeometry
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct FinishFrameRendering
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct BatchModeUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PlayerSendFrameComplete
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateCaptureScreenshot
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PresentAfterDraw
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ClearImmediateRenderers
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct XRPostPresent
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct UpdateResolution
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct InputEndFrame
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct GUIClearEvents
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ShaderHandleErrors
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ResetInputAxis
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ThreadedLoadingDebug
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ProfilerSynchronizeStats
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct MemoryFrameMaintenance
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ExecuteGameCenterCallbacks
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct ProfilerEndFrame
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PlayerSendFramePostPresent
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PhysicsSkinnedClothBeginUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct PhysicsSkinnedClothFinishUpdate
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public struct TriggerEndOfFrameCallbacks
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.LowLevel
internal struct PlayerLoopSystemInternal
{
	// Fields
	public Type type; // 0x10
	public UpdateFunction updateDelegate; // 0x18
	public IntPtr updateFunction; // 0x20
	public IntPtr loopConditionFunction; // 0x28
	public Int32 numSubSystems; // 0x30

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.LowLevel
public struct PlayerLoopSystem
{
	// Fields
	public Type type; // 0x10
	public PlayerLoopSystem[] subSystemList; // 0x18
	public UpdateFunction updateDelegate; // 0x20
	public IntPtr updateFunction; // 0x28
	public IntPtr loopConditionFunction; // 0x30

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public sealed class UpdateFunction : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6deb94
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x6deba4
	public virtual Void Invoke() { }
	// Offset : 0x6dee3c
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x6dee70
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class PlayerPrefsException : Exception
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x60bb24
	public Void .ctor(String error) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class PlayerPrefs
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x60b928
	private static Boolean TrySetInt(String key, Int32 value) { }
	// Offset : 0x60b99c
	private static Boolean TrySetFloat(String key, Single value) { }
	// Offset : 0x60ba10
	private static Boolean TrySetSetString(String key, String value) { }
	// Offset : 0x60ba84
	public static Void SetInt(String key, Int32 value) { }
	// Offset : 0x60bb2c
	public static Int32 GetInt(String key, Int32 defaultValue) { }
	// Offset : 0x60bba0
	public static Void SetFloat(String key, Single value) { }
	// Offset : 0x60bc40
	public static Single GetFloat(String key, Single defaultValue) { }
	// Offset : 0x60bcb4
	public static Void SetString(String key, String value) { }
	// Offset : 0x60bd54
	public static String GetString(String key, String defaultValue) { }
	// Offset : 0x60bdc8
	public static Boolean HasKey(String key) { }
	// Offset : 0x60be34
	public static Void DeleteKey(String key) { }
	// Offset : 0x60bea0
	public static Void Save() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public abstract class PropertyAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x60c67c
	protected Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class TooltipAttribute : PropertyAttribute
{
	// Fields
	public readonly String tooltip; // 0x10

	// Properties

	// Methods
	// Offset : 0x61832c
	public Void .ctor(String tooltip) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class SpaceAttribute : PropertyAttribute
{
	// Fields
	public readonly Single height; // 0x10

	// Properties

	// Methods
	// Offset : 0x614580
	public Void .ctor() { }
	// Offset : 0x6145ac
	public Void .ctor(Single height) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class RangeAttribute : PropertyAttribute
{
	// Fields
	public readonly Single min; // 0x10
	public readonly Single max; // 0x14

	// Properties

	// Methods
	// Offset : 0x60df48
	public Void .ctor(Single min, Single max) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class TextAreaAttribute : PropertyAttribute
{
	// Fields
	public readonly Int32 minLines; // 0x10
	public readonly Int32 maxLines; // 0x14

	// Properties

	// Methods
	// Offset : 0x61709c
	public Void .ctor(Int32 minLines, Int32 maxLines) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class PropertyNameUtils
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x60c6bc
	public static PropertyName PropertyNameFromString(String name) { }
	// Offset : 0x60c874
	private static Void PropertyNameFromString_Injected(String name, out PropertyName ret) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct PropertyName : IEquatable`1
{
	// Fields
	internal Int32 id; // 0x10

	// Properties

	// Methods
	// Offset : 0x2cdddc
	public Void .ctor(String name) { }
	// Offset : 0x2cde14
	public Void .ctor(PropertyName other) { }
	// Offset : 0x2cde1c
	public Void .ctor(Int32 id) { }
	// Offset : 0x60c6f4
	public static Boolean op_Equality(PropertyName lhs, PropertyName rhs) { }
	// Offset : 0x2cde24
	public override Int32 GetHashCode() { }
	// Offset : 0x2cde2c
	public override Boolean Equals(Object other) { }
	// Offset : 0x2cde34
	public Boolean Equals(PropertyName other) { }
	// Offset : 0x60c7a0
	public static PropertyName op_Implicit(String name) { }
	// Offset : 0x60c7c8
	public static PropertyName op_Implicit(Int32 id) { }
	// Offset : 0x2cde44
	public override String ToString() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Random
{
	// Fields

	// Properties
	public static Single value { get; }

	// Methods
	// Offset : 0x60de08
	public static Single Range(Single min, Single max) { }
	// Offset : 0x60de78
	public static Int32 Range(Int32 min, Int32 max) { }
	// Offset : 0x60de7c
	private static Int32 RandomRangeInt(Int32 min, Int32 max) { }
	// Offset : 0x60def0
	public static Single get_value() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct RangeInt
{
	// Fields
	public Int32 start; // 0x10
	public Int32 length; // 0x14

	// Properties
	public Int32 end { get; }

	// Methods
	// Offset : 0x2cde88
	public Void .ctor(Int32 start, Int32 length) { }
	// Offset : 0x2cde90
	public Int32 get_end() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Ray
{
	// Fields
	private Vector3 m_Origin; // 0x10
	private Vector3 m_Direction; // 0x1c

	// Properties
	public Vector3 origin { get; }
	public Vector3 direction { get; }

	// Methods
	// Offset : 0x2cde9c
	public Void .ctor(Vector3 origin, Vector3 direction) { }
	// Offset : 0x2cdea4
	public Vector3 get_origin() { }
	// Offset : 0x2cdeb0
	public Vector3 get_direction() { }
	// Offset : 0x2cdebc
	public Vector3 GetPoint(Single distance) { }
	// Offset : 0x2cdec4
	public override String ToString() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Rect : IEquatable`1
{
	// Fields
	private Single m_XMin; // 0x10
	private Single m_YMin; // 0x14
	private Single m_Width; // 0x18
	private Single m_Height; // 0x1c

	// Properties
	public static Rect zero { get; }
	public Single x { get; set; }
	public Single y { get; set; }
	public Vector2 position { get; }
	public Vector2 center { get; }
	public Vector2 min { get; }
	public Vector2 max { get; }
	public Single width { get; set; }
	public Single height { get; set; }
	public Vector2 size { get; }
	public Single xMin { get; set; }
	public Single yMin { get; set; }
	public Single xMax { get; set; }
	public Single yMax { get; set; }

	// Methods
	// Offset : 0x2cdecc
	public Void .ctor(Single x, Single y, Single width, Single height) { }
	// Offset : 0x60e288
	public static Rect get_zero() { }
	// Offset : 0x2cded8
	public Single get_x() { }
	// Offset : 0x2cdee0
	public Void set_x(Single value) { }
	// Offset : 0x2cdee8
	public Single get_y() { }
	// Offset : 0x2cdef0
	public Void set_y(Single value) { }
	// Offset : 0x2cdef8
	public Vector2 get_position() { }
	// Offset : 0x2cdf00
	public Vector2 get_center() { }
	// Offset : 0x2cdf20
	public Vector2 get_min() { }
	// Offset : 0x2cdf28
	public Vector2 get_max() { }
	// Offset : 0x2cdf3c
	public Single get_width() { }
	// Offset : 0x2cdf44
	public Void set_width(Single value) { }
	// Offset : 0x2cdf4c
	public Single get_height() { }
	// Offset : 0x2cdf54
	public Void set_height(Single value) { }
	// Offset : 0x2cdf5c
	public Vector2 get_size() { }
	// Offset : 0x2cdf64
	public Single get_xMin() { }
	// Offset : 0x2cdf6c
	public Void set_xMin(Single value) { }
	// Offset : 0x2cdf88
	public Single get_yMin() { }
	// Offset : 0x2cdf90
	public Void set_yMin(Single value) { }
	// Offset : 0x2cdfac
	public Single get_xMax() { }
	// Offset : 0x2cdfbc
	public Void set_xMax(Single value) { }
	// Offset : 0x2cdfcc
	public Single get_yMax() { }
	// Offset : 0x2cdfdc
	public Void set_yMax(Single value) { }
	// Offset : 0x2cdfec
	public Boolean Contains(Vector3 point) { }
	// Offset : 0x60e3fc
	private static Rect OrderMinMax(Rect rect) { }
	// Offset : 0x2ce030
	public Boolean Overlaps(Rect other) { }
	// Offset : 0x2ce038
	public Boolean Overlaps(Rect other, Boolean allowInverse) { }
	// Offset : 0x60e508
	public static Boolean op_Inequality(Rect lhs, Rect rhs) { }
	// Offset : 0x60e538
	public static Boolean op_Equality(Rect lhs, Rect rhs) { }
	// Offset : 0x2ce044
	public override Int32 GetHashCode() { }
	// Offset : 0x2ce04c
	public override Boolean Equals(Object other) { }
	// Offset : 0x2ce054
	public Boolean Equals(Rect other) { }
	// Offset : 0x2ce05c
	public override String ToString() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class ReflectionProbe : Behaviour
{
	// Fields
	private static Action`2 reflectionProbeChanged; // 0x0
	private static Action`1 defaultReflectionSet; // 0x8

	// Properties

	// Methods
	// Offset : 0x6109d0
	private static Void CallReflectionProbeEvent(ReflectionProbe probe, ReflectionProbeEvent probeEvent) { }
	// Offset : 0x610a58
	private static Void CallSetDefaultReflection(Cubemap defaultReflectionCubemap) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public enum ReflectionProbeEvent
{
	// Fields
	public Int32 value__; // 0x10
	public const ReflectionProbeEvent ReflectionProbeAdded = 0; // 0x0
	public const ReflectionProbeEvent ReflectionProbeRemoved = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class ResourceRequest : AsyncOperation
{
	// Fields
	internal String m_Path; // 0x20
	internal Type m_Type; // 0x28

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Resources
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x611eb4
	public static Object Load(String path) { }
	// Offset : 0x611f34
	public static Object Load(String path, Type systemTypeInstance) { }
	// Offset : 0x611fa8
	public static Object GetBuiltinResource(Type type, String path) { }
	// Offset : 0x
	public static T GetBuiltinResource(String path) { }
	// Offset : 0x61201c
	public static Void UnloadAsset(Object assetToUnload) { }
	// Offset : 0x612088
	public static AsyncOperation UnloadUnusedAssets() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum RuntimeInitializeLoadType
{
	// Fields
	public Int32 value__; // 0x10
	public const RuntimeInitializeLoadType AfterSceneLoad = 0; // 0x0
	public const RuntimeInitializeLoadType BeforeSceneLoad = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class RuntimeInitializeOnLoadMethodAttribute : PreserveAttribute
{
	// Fields
	private RuntimeInitializeLoadType <loadType>k__BackingField; // 0x10

	// Properties
	private RuntimeInitializeLoadType loadType { set; }

	// Methods
	// Offset : 0x6120e0
	public Void .ctor(RuntimeInitializeLoadType loadType) { }
	// Offset : 0x612114
	private Void set_loadType(RuntimeInitializeLoadType value) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class ScriptableObject : Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6071a4
	public Void .ctor() { }
	// Offset : 0x6127c8
	public static ScriptableObject CreateInstance(Type type) { }
	// Offset : 0x
	public static T CreateInstance() { }
	// Offset : 0x61275c
	private static Void CreateScriptableObject(ScriptableObject self) { }
	// Offset : 0x6127cc
	private static ScriptableObject CreateScriptableObjectInstanceFromType(Type type) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public struct ScriptableRenderContext
{
	// Fields
	private IntPtr m_Ptr; // 0x10

	// Properties

	// Methods
	// Offset : 0x2cf4c8
	internal Void .ctor(IntPtr ptr) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class SelectionBaseAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6128bc
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class SerializePrivateVariables : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class SerializeField : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x614190
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class PreferBinarySerialization : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public interface ISerializationCallbackReceiver
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnBeforeSerialize() { }
	// Offset : 0x
	public abstract Void OnAfterDeserialize() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class ShaderVariantCollection : Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6144a8
	public Void WarmUp() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class ComputeShader : Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6d9864
	public Int32 FindKernel(String name) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct SortingLayer
{
	// Fields
	private Int32 m_Id; // 0x10

	// Properties

	// Methods
	// Offset : 0x614514
	public static Int32 GetLayerValueFromID(Int32 id) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public static class StackTraceUtility
{
	// Fields
	private static String projectFolder; // 0x0

	// Properties

	// Methods
	// Offset : 0x6150c4
	internal static Void SetProjectFolder(String folder) { }
	// Offset : 0x6151cc
	public static String ExtractStackTrace() { }
	// Offset : 0x615e54
	private static Boolean IsSystemStacktraceType(Object name) { }
	// Offset : 0x615fd8
	internal static Void ExtractStringFromExceptionInternal(Object exceptiono, out String message, out String stackTrace) { }
	// Offset : 0x6164a4
	internal static String PostprocessStacktrace(String oldString, Boolean stripEngineInternalInformation) { }
	// Offset : 0x615284
	internal static String ExtractFormattedStackTrace(StackTrace stackTrace) { }
	// Offset : 0x616c9c
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
[Serializable]
public class UnityException : Exception
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x61ac28
	public Void .ctor() { }
	// Offset : 0x6066d8
	public Void .ctor(String message) { }
	// Offset : 0x61ac90
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum OperatingSystemFamily
{
	// Fields
	public Int32 value__; // 0x10
	public const OperatingSystemFamily Other = 0; // 0x0
	public const OperatingSystemFamily MacOSX = 1; // 0x0
	public const OperatingSystemFamily Windows = 2; // 0x0
	public const OperatingSystemFamily Linux = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class SystemInfo
{
	// Fields

	// Properties
	public static OperatingSystemFamily operatingSystemFamily { get; }

	// Methods
	// Offset : 0x616cf8
	public static OperatingSystemFamily get_operatingSystemFamily() { }
	// Offset : 0x616d54
	private static Boolean IsValidEnumValue(Enum value) { }
	// Offset : 0x616de0
	public static Boolean SupportsRenderTextureFormat(RenderTextureFormat format) { }
	// Offset : 0x616f04
	public static Boolean SupportsTextureFormat(TextureFormat format) { }
	// Offset : 0x616cfc
	private static OperatingSystemFamily GetOperatingSystemFamily() { }
	// Offset : 0x616e98
	private static Boolean HasRenderTextureNative(RenderTextureFormat format) { }
	// Offset : 0x616fbc
	private static Boolean SupportsTextureFormatNative(TextureFormat format) { }
	// Offset : 0x617028
	public static Boolean IsFormatSupported(GraphicsFormat format, FormatUsage usage) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class TextAsset : Object
{
	// Fields

	// Properties
	public String text { get; }
	public Byte[] bytes { get; }

	// Methods
	// Offset : 0x6170d4
	public String get_text() { }
	// Offset : 0x617140
	public Byte[] get_bytes() { }
	// Offset : 0x6171ac
	public override String ToString() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Texture : Object
{
	// Fields

	// Properties
	public virtual Int32 width { get; set; }
	public virtual Int32 height { get; set; }
	public virtual Boolean isReadable { get; }
	public TextureWrapMode wrapMode { get; }
	public Vector2 texelSize { get; }

	// Methods
	// Offset : 0x610ad0
	protected Void .ctor() { }
	// Offset : 0x6171b0
	private Int32 GetDataWidth() { }
	// Offset : 0x61721c
	private Int32 GetDataHeight() { }
	// Offset : 0x617288
	public virtual Int32 get_width() { }
	// Offset : 0x61728c
	public virtual Void set_width(Int32 value) { }
	// Offset : 0x6172f4
	public virtual Int32 get_height() { }
	// Offset : 0x6172f8
	public virtual Void set_height(Int32 value) { }
	// Offset : 0x617360
	public virtual Boolean get_isReadable() { }
	// Offset : 0x6173cc
	public TextureWrapMode get_wrapMode() { }
	// Offset : 0x617438
	public Vector2 get_texelSize() { }
	// Offset : 0x6114b0
	internal Boolean ValidateFormat(RenderTextureFormat format) { }
	// Offset : 0x6174d4
	internal Boolean ValidateFormat(TextureFormat format) { }
	// Offset : 0x6110b0
	internal Boolean ValidateFormat(GraphicsFormat format, FormatUsage usage) { }
	// Offset : 0x617688
	internal UnityException CreateNonReadableException(Texture t) { }
	// Offset : 0x617460
	private Void get_texelSize_Injected(out Vector2 ret) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Texture2D : Texture
{
	// Fields

	// Properties
	public TextureFormat format { get; }
	public static Texture2D whiteTexture { get; }
	public override Boolean isReadable { get; }

	// Methods
	// Offset : 0x60c584
	public TextureFormat get_format() { }
	// Offset : 0x61775c
	public static Texture2D get_whiteTexture() { }
	// Offset : 0x6177b4
	public override Boolean get_isReadable() { }
	// Offset : 0x617820
	private Color GetPixelBilinearImpl(Int32 image, Single x, Single y) { }
	// Offset : 0x60c31c
	public Byte[] GetRawTextureData() { }
	// Offset : 0x6178e8
	public Color GetPixelBilinear(Single x, Single y) { }
	// Offset : 0x61784c
	private Void GetPixelBilinearImpl_Injected(Int32 image, Single x, Single y, out Color ret) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Cubemap : Texture
{
	// Fields

	// Properties
	public override Boolean isReadable { get; }

	// Methods
	// Offset : 0x6d9a94
	public Void .ctor(Int32 width, GraphicsFormat format, TextureCreationFlags flags) { }
	// Offset : 0x6d9bfc
	internal Void .ctor(Int32 width, TextureFormat textureFormat, Boolean mipChain, IntPtr nativeTex) { }
	// Offset : 0x6d9ce4
	public Void .ctor(Int32 width, TextureFormat textureFormat, Boolean mipChain) { }
	// Offset : 0x6d9d54
	private static Boolean Internal_CreateImpl(Cubemap mono, Int32 ext, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex) { }
	// Offset : 0x6d9b3c
	private static Void Internal_Create(Cubemap mono, Int32 ext, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex) { }
	// Offset : 0x6d9df0
	public override Boolean get_isReadable() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Texture3D : Texture
{
	// Fields

	// Properties
	public override Boolean isReadable { get; }

	// Methods
	// Offset : 0x617ce0
	public Void .ctor(Int32 width, Int32 height, Int32 depth, GraphicsFormat format, TextureCreationFlags flags) { }
	// Offset : 0x617e30
	public Void .ctor(Int32 width, Int32 height, Int32 depth, TextureFormat textureFormat, Boolean mipChain) { }
	// Offset : 0x617eec
	public override Boolean get_isReadable() { }
	// Offset : 0x617f58
	private static Boolean Internal_CreateImpl(Texture3D mono, Int32 w, Int32 h, Int32 d, GraphicsFormat format, TextureCreationFlags flags) { }
	// Offset : 0x617d64
	private static Void Internal_Create(Texture3D mono, Int32 w, Int32 h, Int32 d, GraphicsFormat format, TextureCreationFlags flags) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Texture2DArray : Texture
{
	// Fields

	// Properties
	public override Boolean isReadable { get; }

	// Methods
	// Offset : 0x6179b0
	public Void .ctor(Int32 width, Int32 height, Int32 depth, GraphicsFormat format, TextureCreationFlags flags) { }
	// Offset : 0x617b00
	public Void .ctor(Int32 width, Int32 height, Int32 depth, TextureFormat textureFormat, Boolean mipChain, Boolean linear) { }
	// Offset : 0x617bc4
	public Void .ctor(Int32 width, Int32 height, Int32 depth, TextureFormat textureFormat, Boolean mipChain) { }
	// Offset : 0x617bd0
	public override Boolean get_isReadable() { }
	// Offset : 0x617c3c
	private static Boolean Internal_CreateImpl(Texture2DArray mono, Int32 w, Int32 h, Int32 d, GraphicsFormat format, TextureCreationFlags flags) { }
	// Offset : 0x617a34
	private static Void Internal_Create(Texture2DArray mono, Int32 w, Int32 h, Int32 d, GraphicsFormat format, TextureCreationFlags flags) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class CubemapArray : Texture
{
	// Fields

	// Properties
	public override Boolean isReadable { get; }

	// Methods
	// Offset : 0x6d9e5c
	public Void .ctor(Int32 width, Int32 cubemapCount, GraphicsFormat format, TextureCreationFlags flags) { }
	// Offset : 0x6d9fa0
	public Void .ctor(Int32 width, Int32 cubemapCount, TextureFormat textureFormat, Boolean mipChain, Boolean linear) { }
	// Offset : 0x6da05c
	public Void .ctor(Int32 width, Int32 cubemapCount, TextureFormat textureFormat, Boolean mipChain) { }
	// Offset : 0x6da068
	public override Boolean get_isReadable() { }
	// Offset : 0x6da0d4
	private static Boolean Internal_CreateImpl(CubemapArray mono, Int32 ext, Int32 count, GraphicsFormat format, TextureCreationFlags flags) { }
	// Offset : 0x6d9ee0
	private static Void Internal_Create(CubemapArray mono, Int32 ext, Int32 count, GraphicsFormat format, TextureCreationFlags flags) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class RenderTexture : Texture
{
	// Fields

	// Properties
	public override Int32 width { get; set; }
	public override Int32 height { get; set; }
	public RenderTextureFormat format { set; }
	public Int32 depth { set; }
	public RenderTextureDescriptor descriptor { get; }

	// Methods
	// Offset : 0x610acc
	protected internal Void .ctor() { }
	// Offset : 0x610b38
	public Void .ctor(RenderTextureDescriptor desc) { }
	// Offset : 0x610db0
	public Void .ctor(RenderTexture textureToCopy) { }
	// Offset : 0x610fb0
	public Void .ctor(Int32 width, Int32 height, Int32 depth, GraphicsFormat format) { }
	// Offset : 0x6113b0
	public Void .ctor(Int32 width, Int32 height, Int32 depth, RenderTextureFormat format, RenderTextureReadWrite readWrite) { }
	// Offset : 0x6115e4
	public Void .ctor(Int32 width, Int32 height, Int32 depth, RenderTextureFormat format) { }
	// Offset : 0x6115ec
	public Void .ctor(Int32 width, Int32 height, Int32 depth) { }
	// Offset : 0x6115f8
	public override Int32 get_width() { }
	// Offset : 0x611664
	public override Void set_width(Int32 value) { }
	// Offset : 0x6116d8
	public override Int32 get_height() { }
	// Offset : 0x611744
	public override Void set_height(Int32 value) { }
	// Offset : 0x6112c8
	public Void set_format(RenderTextureFormat value) { }
	// Offset : 0x61133c
	internal Void SetSRGBReadWrite(Boolean srgb) { }
	// Offset : 0x610d40
	private static Void Internal_Create(RenderTexture rt) { }
	// Offset : 0x610dac
	private Void SetRenderTextureDescriptor(RenderTextureDescriptor desc) { }
	// Offset : 0x61182c
	private RenderTextureDescriptor GetDescriptor() { }
	// Offset : 0x611254
	public Void set_depth(Int32 value) { }
	// Offset : 0x610f48
	public RenderTextureDescriptor get_descriptor() { }
	// Offset : 0x610bb0
	private static Void ValidateRenderTextureDesc(RenderTextureDescriptor desc) { }
	// Offset : 0x6117b8
	private Void SetRenderTextureDescriptor_Injected(ref RenderTextureDescriptor desc) { }
	// Offset : 0x611878
	private Void GetDescriptor_Injected(out RenderTextureDescriptor ret) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct RenderTextureDescriptor
{
	// Fields
	private Int32 <width>k__BackingField; // 0x10
	private Int32 <height>k__BackingField; // 0x14
	private Int32 <msaaSamples>k__BackingField; // 0x18
	private Int32 <volumeDepth>k__BackingField; // 0x1c
	private RenderTextureFormat <colorFormat>k__BackingField; // 0x20
	private Int32 _depthBufferBits; // 0x24
	private static Int32[] depthFormatBits; // 0x0
	private TextureDimension <dimension>k__BackingField; // 0x28
	private ShadowSamplingMode <shadowSamplingMode>k__BackingField; // 0x2c
	private VRTextureUsage <vrUsage>k__BackingField; // 0x30
	private RenderTextureCreationFlags _flags; // 0x34
	private RenderTextureMemoryless <memoryless>k__BackingField; // 0x38

	// Properties
	public Int32 width { get; }
	public Int32 height { get; }
	public Int32 msaaSamples { get; }
	public Int32 volumeDepth { get; }
	public Int32 depthBufferBits { get; }

	// Methods
	// Offset : 0x2ce190
	public Int32 get_width() { }
	// Offset : 0x2ce198
	public Int32 get_height() { }
	// Offset : 0x2ce1a0
	public Int32 get_msaaSamples() { }
	// Offset : 0x2ce1a8
	public Int32 get_volumeDepth() { }
	// Offset : 0x2ce1b0
	public Int32 get_depthBufferBits() { }
	// Offset : 0x6119ac
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Time
{
	// Fields

	// Properties
	public static Single time { get; }
	public static Single deltaTime { get; }
	public static Single unscaledTime { get; }
	public static Single unscaledDeltaTime { get; }
	public static Single fixedDeltaTime { get; set; }
	public static Single timeScale { get; }
	public static Int32 frameCount { get; }
	public static Single realtimeSinceStartup { get; }

	// Methods
	// Offset : 0x617ffc
	public static Single get_time() { }
	// Offset : 0x618054
	public static Single get_deltaTime() { }
	// Offset : 0x6180ac
	public static Single get_unscaledTime() { }
	// Offset : 0x618104
	public static Single get_unscaledDeltaTime() { }
	// Offset : 0x61815c
	public static Single get_fixedDeltaTime() { }
	// Offset : 0x6181b4
	public static Void set_fixedDeltaTime(Single value) { }
	// Offset : 0x618224
	public static Single get_timeScale() { }
	// Offset : 0x61827c
	public static Int32 get_frameCount() { }
	// Offset : 0x6182d4
	public static Single get_realtimeSinceStartup() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum TouchScreenKeyboardType
{
	// Fields
	public Int32 value__; // 0x10
	public const TouchScreenKeyboardType Default = 0; // 0x0
	public const TouchScreenKeyboardType ASCIICapable = 1; // 0x0
	public const TouchScreenKeyboardType NumbersAndPunctuation = 2; // 0x0
	public const TouchScreenKeyboardType URL = 3; // 0x0
	public const TouchScreenKeyboardType NumberPad = 4; // 0x0
	public const TouchScreenKeyboardType PhonePad = 5; // 0x0
	public const TouchScreenKeyboardType NamePhonePad = 6; // 0x0
	public const TouchScreenKeyboardType EmailAddress = 7; // 0x0
	public const TouchScreenKeyboardType NintendoNetworkAccount = 8; // 0x0
	public const TouchScreenKeyboardType Social = 9; // 0x0
	public const TouchScreenKeyboardType Search = 10; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class TrackedReference
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties

	// Methods
	// Offset : 0x618cbc
	public static Boolean op_Equality(TrackedReference x, TrackedReference y) { }
	// Offset : 0x618d48
	public override Boolean Equals(Object o) { }
	// Offset : 0x618dd8
	public override Int32 GetHashCode() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal sealed class UnhandledExceptionHandler
{
	// Fields
	private static UnhandledExceptionEventHandler <>f__am$cache0; // 0x0

	// Properties

	// Methods
	// Offset : 0x61aa68
	private static Void RegisterUECatcher() { }
	// Offset : 0x61ab34
	private static Void <RegisterUECatcher>m__0(Object sender, UnhandledExceptionEventArgs e) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class UnityAPICompatibilityVersionAttribute : Attribute
{
	// Fields
	private String _version; // 0x10

	// Properties

	// Methods
	// Offset : 0x61abfc
	public Void .ctor(String version) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum HideFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const HideFlags None = 0; // 0x0
	public const HideFlags HideInHierarchy = 1; // 0x0
	public const HideFlags HideInInspector = 2; // 0x0
	public const HideFlags DontSaveInEditor = 4; // 0x0
	public const HideFlags NotEditable = 8; // 0x0
	public const HideFlags DontSaveInBuild = 16; // 0x0
	public const HideFlags DontUnloadUnusedAsset = 32; // 0x0
	public const HideFlags DontSave = 52; // 0x0
	public const HideFlags HideAndDontSave = 61; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Object
{
	// Fields
	private IntPtr m_CachedPtr; // 0x10
	internal static Int32 OffsetOfInstanceIDInCPlusPlusObject; // 0x0
	private const String objectIsNullMessage; // 0x0
	private const String cloneDestroyedMessage; // 0x0
	private const String instantPrefabTwiceMessage; // 0x0
	private const String instantPrefabShouldBeGameObjectMessage; // 0x0

	// Properties
	public String name { get; set; }
	public HideFlags hideFlags { set; }

	// Methods
	// Offset : 0x605370
	public Void .ctor() { }
	// Offset : 0x6091ec
	public override Int32 GetHashCode() { }
	// Offset : 0x6091f4
	public override Boolean Equals(Object other) { }
	// Offset : 0x6093d0
	public static Boolean op_Implicit(Object exists) { }
	// Offset : 0x609308
	private static Boolean CompareBaseObjects(Object lhs, Object rhs) { }
	// Offset : 0x609444
	private static Boolean IsNativeObjectAlive(Object o) { }
	// Offset : 0x60949c
	private IntPtr GetCachedPtr() { }
	// Offset : 0x606030
	public String get_name() { }
	// Offset : 0x609510
	public Void set_name(String value) { }
	// Offset : 0x6095f8
	public static Object Instantiate(Object original) { }
	// Offset : 0x6097c0
	public static Object Instantiate(Object original, Transform parent) { }
	// Offset : 0x609838
	public static Object Instantiate(Object original, Transform parent, Boolean instantiateInWorldSpace) { }
	// Offset : 0x
	public static T Instantiate(T original) { }
	// Offset : 0x
	public static T Instantiate(T original, Transform parent) { }
	// Offset : 0x
	public static T Instantiate(T original, Transform parent, Boolean worldPositionStays) { }
	// Offset : 0x6099f8
	public static Void Destroy(Object obj, Single t) { }
	// Offset : 0x609a6c
	public static Void Destroy(Object obj) { }
	// Offset : 0x609ad4
	public static Void DestroyImmediate(Object obj, Boolean allowDestroyingAssets) { }
	// Offset : 0x609b48
	public static Void DestroyImmediate(Object obj) { }
	// Offset : 0x609bb0
	public static Object[] FindObjectsOfType(Type type) { }
	// Offset : 0x609c1c
	public static Void DontDestroyOnLoad(Object target) { }
	// Offset : 0x607508
	public Void set_hideFlags(HideFlags value) { }
	// Offset : 0x6096c8
	private static Void CheckNullArgument(Object arg, String message) { }
	// Offset : 0x609c88
	public override String ToString() { }
	// Offset : 0x6072ac
	public static Boolean op_Equality(Object x, Object y) { }
	// Offset : 0x609d58
	public static Boolean op_Inequality(Object x, Object y) { }
	// Offset : 0x609754
	private static Object Internal_CloneSingle(Object data) { }
	// Offset : 0x609974
	private static Object Internal_CloneSingleWithParent(Object data, Transform parent, Boolean worldPositionStays) { }
	// Offset : 0x609cec
	private static String ToString(Object obj) { }
	// Offset : 0x6094a4
	private static String GetName(Object obj) { }
	// Offset : 0x609584
	private static Void SetName(Object obj, String name) { }
	// Offset : 0x609dd8
	internal static Object FindObjectFromInstanceID(Int32 instanceID) { }
	// Offset : 0x609e44
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
[Serializable]
public enum PersistentListenerMode
{
	// Fields
	public Int32 value__; // 0x10
	public const PersistentListenerMode EventDefined = 0; // 0x0
	public const PersistentListenerMode Void = 1; // 0x0
	public const PersistentListenerMode Object = 2; // 0x0
	public const PersistentListenerMode Int = 3; // 0x0
	public const PersistentListenerMode Float = 4; // 0x0
	public const PersistentListenerMode String = 5; // 0x0
	public const PersistentListenerMode Bool = 6; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
[Serializable]
internal class ArgumentCache : ISerializationCallbackReceiver
{
	// Fields
	private Object m_ObjectArgument; // 0x10
	private String m_ObjectArgumentAssemblyTypeName; // 0x18
	private Int32 m_IntArgument; // 0x20
	private Single m_FloatArgument; // 0x24
	private String m_StringArgument; // 0x28
	private Boolean m_BoolArgument; // 0x30

	// Properties
	public Object unityObjectArgument { get; }
	public String unityObjectArgumentAssemblyTypeName { get; }
	public Int32 intArgument { get; }
	public Single floatArgument { get; }
	public String stringArgument { get; }
	public Boolean boolArgument { get; }

	// Methods
	// Offset : 0x6dc644
	public Void .ctor() { }
	// Offset : 0x6dc64c
	public Object get_unityObjectArgument() { }
	// Offset : 0x6dc654
	public String get_unityObjectArgumentAssemblyTypeName() { }
	// Offset : 0x6dc65c
	public Int32 get_intArgument() { }
	// Offset : 0x6dc664
	public Single get_floatArgument() { }
	// Offset : 0x6dc66c
	public String get_stringArgument() { }
	// Offset : 0x6dc674
	public Boolean get_boolArgument() { }
	// Offset : 0x6dc67c
	private Void TidyAssemblyTypeName() { }
	// Offset : 0x6dc8b4
	public Void OnBeforeSerialize() { }
	// Offset : 0x6dc8b8
	public Void OnAfterDeserialize() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
internal abstract class BaseInvokableCall
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6dc8bc
	protected Void .ctor() { }
	// Offset : 0x6dc8c4
	protected Void .ctor(Object target, MethodInfo function) { }
	// Offset : 0x
	public abstract Void Invoke(Object[] args) { }
	// Offset : 0x
	protected static Void ThrowOnInvalidArg(Object arg) { }
	// Offset : 0x6dc988
	protected static Boolean AllowInvoke(Delegate delegate) { }
	// Offset : 0x
	public abstract Boolean Find(Object targetObj, MethodInfo method) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
internal class InvokableCall : BaseInvokableCall
{
	// Fields
	private UnityAction Delegate; // 0x10

	// Properties

	// Methods
	// Offset : 0x6dca50
	public Void .ctor(Object target, MethodInfo theFunction) { }
	// Offset : 0x6dcc64
	public Void .ctor(UnityAction action) { }
	// Offset : 0x6dcb78
	private Void add_Delegate(UnityAction value) { }
	// Offset : 0x6dcc94
	private Void remove_Delegate(UnityAction value) { }
	// Offset : 0x6dcd80
	public override Void Invoke(Object[] args) { }
	// Offset : 0x6dcdcc
	public Void Invoke() { }
	// Offset : 0x6dce18
	public override Boolean Find(Object targetObj, MethodInfo method) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
internal class InvokableCall`1 : BaseInvokableCall
{
	// Fields
	private UnityAction`1 Delegate; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object target, MethodInfo theFunction) { }
	// Offset : 0x
	public Void .ctor(UnityAction`1 action) { }
	// Offset : 0x
	protected Void add_Delegate(UnityAction`1 value) { }
	// Offset : 0x
	protected Void remove_Delegate(UnityAction`1 value) { }
	// Offset : 0x
	public override Void Invoke(Object[] args) { }
	// Offset : 0x
	public virtual Void Invoke(T1 args0) { }
	// Offset : 0x
	public override Boolean Find(Object targetObj, MethodInfo method) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
internal class InvokableCall`2 : BaseInvokableCall
{
	// Fields
	private UnityAction`2 Delegate; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object target, MethodInfo theFunction) { }
	// Offset : 0x
	public override Void Invoke(Object[] args) { }
	// Offset : 0x
	public override Boolean Find(Object targetObj, MethodInfo method) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
internal class InvokableCall`3 : BaseInvokableCall
{
	// Fields
	private UnityAction`3 Delegate; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object target, MethodInfo theFunction) { }
	// Offset : 0x
	public override Void Invoke(Object[] args) { }
	// Offset : 0x
	public override Boolean Find(Object targetObj, MethodInfo method) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
internal class InvokableCall`4 : BaseInvokableCall
{
	// Fields
	private UnityAction`4 Delegate; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object target, MethodInfo theFunction) { }
	// Offset : 0x
	public override Void Invoke(Object[] args) { }
	// Offset : 0x
	public override Boolean Find(Object targetObj, MethodInfo method) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
internal class CachedInvokableCall`1 : InvokableCall`1
{
	// Fields
	private readonly T m_Arg1; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object target, MethodInfo theFunction, T argument) { }
	// Offset : 0x
	public override Void Invoke(Object[] args) { }
	// Offset : 0x
	public override Void Invoke(T arg0) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
public enum UnityEventCallState
{
	// Fields
	public Int32 value__; // 0x10
	public const UnityEventCallState Off = 0; // 0x0
	public const UnityEventCallState EditorAndRuntime = 1; // 0x0
	public const UnityEventCallState RuntimeOnly = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
[Serializable]
internal class PersistentCall
{
	// Fields
	private Object m_Target; // 0x10
	private String m_MethodName; // 0x18
	private PersistentListenerMode m_Mode; // 0x20
	private ArgumentCache m_Arguments; // 0x28
	private UnityEventCallState m_CallState; // 0x30

	// Properties
	public Object target { get; }
	public String methodName { get; }
	public PersistentListenerMode mode { get; }
	public ArgumentCache arguments { get; }

	// Methods
	// Offset : 0x6dd36c
	public Void .ctor() { }
	// Offset : 0x6dd3e0
	public Object get_target() { }
	// Offset : 0x6dd3e8
	public String get_methodName() { }
	// Offset : 0x6dd3f0
	public PersistentListenerMode get_mode() { }
	// Offset : 0x6dd3f8
	public ArgumentCache get_arguments() { }
	// Offset : 0x6dd400
	public Boolean IsValid() { }
	// Offset : 0x6dd4b8
	public BaseInvokableCall GetRuntimeCall(UnityEventBase theEvent) { }
	// Offset : 0x6dd898
	private static BaseInvokableCall GetObjectCall(Object target, MethodInfo method, ArgumentCache arguments) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
[Serializable]
internal class PersistentCallGroup
{
	// Fields
	private List`1 m_Calls; // 0x10

	// Properties

	// Methods
	// Offset : 0x6dde00
	public Void .ctor() { }
	// Offset : 0x6dde74
	public Void Initialize(InvokableCallList invokableList, UnityEventBase unityEventBase) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
internal class InvokableCallList
{
	// Fields
	private readonly List`1 m_PersistentCalls; // 0x10
	private readonly List`1 m_RuntimeCalls; // 0x18
	private readonly List`1 m_ExecutingCalls; // 0x20
	private Boolean m_NeedsUpdate; // 0x28

	// Properties

	// Methods
	// Offset : 0x6dcebc
	public Void .ctor() { }
	// Offset : 0x6dcf6c
	public Void AddPersistentInvokableCall(BaseInvokableCall call) { }
	// Offset : 0x6dcfe8
	public Void AddListener(BaseInvokableCall call) { }
	// Offset : 0x6dd064
	public Void RemoveListener(Object targetObj, MethodInfo method) { }
	// Offset : 0x6dd238
	public Void ClearPersistent() { }
	// Offset : 0x6dd2a4
	public List`1 PrepareInvoke() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEventBase : ISerializationCallbackReceiver
{
	// Fields
	private InvokableCallList m_Calls; // 0x10
	private PersistentCallGroup m_PersistentCalls; // 0x18
	private Boolean m_CallsDirty; // 0x20

	// Properties

	// Methods
	// Offset : 0x6de044
	protected Void .ctor() { }
	// Offset : 0x6de6d0
	private Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }
	// Offset : 0x6de6d4
	private Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
	// Offset : 0x
	protected abstract MethodInfo FindMethod_Impl(String name, Object targetObj) { }
	// Offset : 0x
	internal abstract BaseInvokableCall GetDelegate(Object target, MethodInfo theFunction) { }
	// Offset : 0x6dd714
	internal MethodInfo FindMethod(PersistentCall call) { }
	// Offset : 0x6de714
	internal MethodInfo FindMethod(String name, Object listener, PersistentListenerMode mode, Type argumentType) { }
	// Offset : 0x6de6d8
	private Void DirtyPersistentCalls() { }
	// Offset : 0x6dea0c
	private Void RebuildPersistentCallsIfNeeded() { }
	// Offset : 0x6de168
	internal Void AddCall(BaseInvokableCall call) { }
	// Offset : 0x6dea5c
	protected Void RemoveListener(Object targetObj, MethodInfo method) { }
	// Offset : 0x6de69c
	internal List`1 PrepareInvoke() { }
	// Offset : 0x6deaa0
	public override String ToString() { }
	// Offset : 0x6de208
	public static MethodInfo GetValidMethodInfo(Object obj, String functionName, Type[] argumentTypes) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
public sealed class UnityAction : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6ddfec
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x6d6548
	public virtual Void Invoke() { }
	// Offset : 0x6ddffc
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x6de030
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
[Serializable]
public class UnityEvent : UnityEventBase
{
	// Fields
	private Object[] m_InvokeArray; // 0x28

	// Properties

	// Methods
	// Offset : 0x6de03c
	public Void .ctor() { }
	// Offset : 0x6de0d0
	public Void AddListener(UnityAction call) { }
	// Offset : 0x6de19c
	protected override MethodInfo FindMethod_Impl(String name, Object targetObj) { }
	// Offset : 0x6de458
	internal override BaseInvokableCall GetDelegate(Object target, MethodInfo theFunction) { }
	// Offset : 0x6de0fc
	private static BaseInvokableCall GetDelegate(UnityAction action) { }
	// Offset : 0x6de4c8
	public Void Invoke() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
public sealed class UnityAction`1 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Void Invoke(T0 arg0) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T0 arg0, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent`1 : UnityEventBase
{
	// Fields
	private Object[] m_InvokeArray; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public Void AddListener(UnityAction`1 call) { }
	// Offset : 0x
	public Void RemoveListener(UnityAction`1 call) { }
	// Offset : 0x
	protected override MethodInfo FindMethod_Impl(String name, Object targetObj) { }
	// Offset : 0x
	internal override BaseInvokableCall GetDelegate(Object target, MethodInfo theFunction) { }
	// Offset : 0x
	private static BaseInvokableCall GetDelegate(UnityAction`1 action) { }
	// Offset : 0x
	public Void Invoke(T0 arg0) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
public sealed class UnityAction`2 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Void Invoke(T0 arg0, T1 arg1) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent`2 : UnityEventBase
{
	// Fields
	private Object[] m_InvokeArray; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	protected override MethodInfo FindMethod_Impl(String name, Object targetObj) { }
	// Offset : 0x
	internal override BaseInvokableCall GetDelegate(Object target, MethodInfo theFunction) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
public sealed class UnityAction`3 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Void Invoke(T0 arg0, T1 arg1, T2 arg2) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent`3 : UnityEventBase
{
	// Fields
	private Object[] m_InvokeArray; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	protected override MethodInfo FindMethod_Impl(String name, Object targetObj) { }
	// Offset : 0x
	internal override BaseInvokableCall GetDelegate(Object target, MethodInfo theFunction) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
public sealed class UnityAction`4 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Void Invoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Events
[Serializable]
public abstract class UnityEvent`4 : UnityEventBase
{
	// Fields
	private Object[] m_InvokeArray; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	protected override MethodInfo FindMethod_Impl(String name, Object targetObj) { }
	// Offset : 0x
	internal override BaseInvokableCall GetDelegate(Object target, MethodInfo theFunction) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal class UnityLogWriter : TextWriter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x61ac98
	public Void .ctor() { }
	// Offset : 0x61ad00
	public static Void WriteStringToUnityLog(String s) { }
	// Offset : 0x61ad0c
	private static Void WriteStringToUnityLogImpl(String s) { }
	// Offset : 0x61ad78
	public static Void Init() { }
	// Offset : 0x61adf4
	public override Void Write(Char value) { }
	// Offset : 0x61ae24
	public override Void Write(String s) { }
	// Offset : 0x61ae34
	public override Void Write(Char[] buffer, Int32 index, Int32 count) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal sealed class UnitySynchronizationContext : SynchronizationContext
{
	// Fields
	private readonly List`1 m_AsyncWorkQueue; // 0x10
	private readonly List`1 m_CurrentFrameWork; // 0x18
	private readonly Int32 m_MainThreadID; // 0x20

	// Properties

	// Methods
	// Offset : 0x61ae50
	private Void .ctor(Int32 mainThreadID) { }
	// Offset : 0x61aefc
	private Void Exec() { }
	// Offset : 0x61b22c
	private static Void InitializeSynchronizationContext() { }
	// Offset : 0x61b2ec
	private static Void ExecuteTasks() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
private struct WorkRequest
{
	// Fields
	private readonly SendOrPostCallback m_DelagateCallback; // 0x10
	private readonly Object m_DelagateState; // 0x18
	private readonly ManualResetEvent m_WaitHandle; // 0x20

	// Properties

	// Methods
	// Offset : 0x2ce32c
	public Void Invoke() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Vector2 : IEquatable`1
{
	// Fields
	public Single x; // 0x10
	public Single y; // 0x14
	private static readonly Vector2 zeroVector; // 0x0
	private static readonly Vector2 oneVector; // 0x8
	private static readonly Vector2 upVector; // 0x10
	private static readonly Vector2 downVector; // 0x18
	private static readonly Vector2 leftVector; // 0x20
	private static readonly Vector2 rightVector; // 0x28
	private static readonly Vector2 positiveInfinityVector; // 0x30
	private static readonly Vector2 negativeInfinityVector; // 0x38
	public const Single kEpsilon; // 0x0
	public const Single kEpsilonNormalSqrt; // 0x0

	// Properties
	public Single Item { get; set; }
	public Vector2 normalized { get; }
	public Single magnitude { get; }
	public Single sqrMagnitude { get; }
	public static Vector2 zero { get; }
	public static Vector2 one { get; }
	public static Vector2 up { get; }
	public static Vector2 right { get; }

	// Methods
	// Offset : 0x2ce334
	public Void .ctor(Single x, Single y) { }
	// Offset : 0x2ce33c
	public Single get_Item(Int32 index) { }
	// Offset : 0x2ce344
	public Void set_Item(Int32 index, Single value) { }
	// Offset : 0x61b36c
	public static Vector2 Lerp(Vector2 a, Vector2 b, Single t) { }
	// Offset : 0x60fa04
	public static Vector2 Scale(Vector2 a, Vector2 b) { }
	// Offset : 0x2ce34c
	public Void Normalize() { }
	// Offset : 0x2ce354
	public Vector2 get_normalized() { }
	// Offset : 0x2ce380
	public override String ToString() { }
	// Offset : 0x2ce388
	public override Int32 GetHashCode() { }
	// Offset : 0x2ce3c4
	public override Boolean Equals(Object other) { }
	// Offset : 0x2ce3cc
	public Boolean Equals(Vector2 other) { }
	// Offset : 0x61b81c
	public static Single Dot(Vector2 lhs, Vector2 rhs) { }
	// Offset : 0x2ce3d4
	public Single get_magnitude() { }
	// Offset : 0x2ce3dc
	public Single get_sqrMagnitude() { }
	// Offset : 0x60fa84
	public static Vector2 op_Addition(Vector2 a, Vector2 b) { }
	// Offset : 0x60fa10
	public static Vector2 op_Subtraction(Vector2 a, Vector2 b) { }
	// Offset : 0x61b840
	public static Vector2 op_Multiply(Vector2 a, Vector2 b) { }
	// Offset : 0x61b84c
	public static Vector2 op_Division(Vector2 a, Vector2 b) { }
	// Offset : 0x61b858
	public static Vector2 op_Multiply(Vector2 a, Single d) { }
	// Offset : 0x61b574
	public static Vector2 op_Division(Vector2 a, Single d) { }
	// Offset : 0x61b864
	public static Boolean op_Equality(Vector2 lhs, Vector2 rhs) { }
	// Offset : 0x61b904
	public static Boolean op_Inequality(Vector2 lhs, Vector2 rhs) { }
	// Offset : 0x61b99c
	public static Vector2 op_Implicit(Vector3 v) { }
	// Offset : 0x61b9a0
	public static Vector3 op_Implicit(Vector2 v) { }
	// Offset : 0x610928
	public static Vector2 get_zero() { }
	// Offset : 0x60fa1c
	public static Vector2 get_one() { }
	// Offset : 0x61b9a8
	public static Vector2 get_up() { }
	// Offset : 0x61ba10
	public static Vector2 get_right() { }
	// Offset : 0x61ba78
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct Vector4 : IEquatable`1
{
	// Fields
	public const Single kEpsilon; // 0x0
	public Single x; // 0x10
	public Single y; // 0x14
	public Single z; // 0x18
	public Single w; // 0x1c
	private static readonly Vector4 zeroVector; // 0x0
	private static readonly Vector4 oneVector; // 0x10
	private static readonly Vector4 positiveInfinityVector; // 0x20
	private static readonly Vector4 negativeInfinityVector; // 0x30

	// Properties
	public Single Item { get; set; }
	public Single sqrMagnitude { get; }
	public static Vector4 zero { get; }

	// Methods
	// Offset : 0x2d33f0
	public Void .ctor(Single x, Single y, Single z, Single w) { }
	// Offset : 0x2d33fc
	public Single get_Item(Int32 index) { }
	// Offset : 0x2d3404
	public Void set_Item(Int32 index, Single value) { }
	// Offset : 0x9628b4
	public static Vector4 Lerp(Vector4 a, Vector4 b, Single t) { }
	// Offset : 0x2d340c
	public override Int32 GetHashCode() { }
	// Offset : 0x2d3414
	public override Boolean Equals(Object other) { }
	// Offset : 0x2d341c
	public Boolean Equals(Vector4 other) { }
	// Offset : 0x962b1c
	public static Single Dot(Vector4 a, Vector4 b) { }
	// Offset : 0x2d3424
	public Single get_sqrMagnitude() { }
	// Offset : 0x962bd0
	public static Vector4 get_zero() { }
	// Offset : 0x962c3c
	public static Vector4 op_Subtraction(Vector4 a, Vector4 b) { }
	// Offset : 0x962c50
	public static Vector4 op_Division(Vector4 a, Single d) { }
	// Offset : 0x962c64
	public static Boolean op_Equality(Vector4 lhs, Vector4 rhs) { }
	// Offset : 0x2d342c
	public override String ToString() { }
	// Offset : 0x962d24
	public static Single SqrMagnitude(Vector4 a) { }
	// Offset : 0x962fd4
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class WaitForEndOfFrame : YieldInstruction
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x963050
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class WaitForFixedUpdate : YieldInstruction
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class WaitForSeconds : YieldInstruction
{
	// Fields
	internal Single m_Seconds; // 0x10

	// Properties

	// Methods
	// Offset : 0x963060
	public Void .ctor(Single seconds) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class WaitForSecondsRealtime : CustomYieldInstruction
{
	// Fields
	private Single <waitTime>k__BackingField; // 0x10
	private Single m_WaitUntilTime; // 0x14

	// Properties
	public Single waitTime { get; set; }
	public override Boolean keepWaiting { get; }

	// Methods
	// Offset : 0x963094
	public Void .ctor(Single time) { }
	// Offset : 0x9630d8
	public Single get_waitTime() { }
	// Offset : 0x9630d0
	public Void set_waitTime(Single value) { }
	// Offset : 0x9630e0
	public override Boolean get_keepWaiting() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class YieldInstruction
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x963058
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Assertions
public static class Assert
{
	// Fields
	public static Boolean raiseExceptions; // 0x0

	// Properties

	// Methods
	// Offset : 0x6d4fe4
	private static Void Fail(String message, String userMessage) { }
	// Offset : 0x
	public static Void AreEqual(T expected, T actual, String message) { }
	// Offset : 0x
	public static Void AreEqual(T expected, T actual, String message, IEqualityComparer`1 comparer) { }
	// Offset : 0x6d52a4
	public static Void AreEqual(Object expected, Object actual, String message) { }
	// Offset : 0x6d55b8
	public static Void AreEqual(Int32 expected, Int32 actual) { }
	// Offset : 0x6d5654
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Assertions
public class AssertionException : Exception
{
	// Fields
	private String m_UserMessage; // 0x60

	// Properties
	public override String Message { get; }

	// Methods
	// Offset : 0x6d5168
	public Void .ctor(String message, String userMessage) { }
	// Offset : 0x6d56a4
	public override String get_Message() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Assertions
internal class AssertionMessageUtil
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6d5768
	public static String GetMessage(String failureMessage) { }
	// Offset : 0x6d587c
	public static String GetMessage(String failureMessage, String expected) { }
	// Offset : 0x6d5378
	public static String GetEqualityMessage(Object actual, Object expected, Boolean expectEqual) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
internal class BuiltinRuntimeReflectionSystem : IScriptableRuntimeReflectionSystem, IDisposable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6df038
	public Void .ctor() { }
	// Offset : 0x6df040
	public Boolean TickRealtimeProbes() { }
	// Offset : 0x6df09c
	public Void Dispose() { }
	// Offset : 0x6df0a0
	private Void Dispose(Boolean disposing) { }
	// Offset : 0x6df044
	private static Boolean BuiltinUpdate() { }
	// Offset : 0x6df0a4
	private static BuiltinRuntimeReflectionSystem Internal_BuiltinRuntimeReflectionSystem_New() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public interface IScriptableRuntimeReflectionSystem : IDisposable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Boolean TickRealtimeProbes() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public static class ScriptableRuntimeReflectionSystemSettings
{
	// Fields
	private static ScriptableRuntimeReflectionSystemWrapper s_Instance; // 0x0

	// Properties
	private static IScriptableRuntimeReflectionSystem Internal_ScriptableRuntimeReflectionSystemSettings_system { set; }
	private static ScriptableRuntimeReflectionSystemWrapper Internal_ScriptableRuntimeReflectionSystemSettings_instance { get; }

	// Methods
	// Offset : 0x6df910
	private static Void set_Internal_ScriptableRuntimeReflectionSystemSettings_system(IScriptableRuntimeReflectionSystem value) { }
	// Offset : 0x6dfaf4
	private static ScriptableRuntimeReflectionSystemWrapper get_Internal_ScriptableRuntimeReflectionSystemSettings_instance() { }
	// Offset : 0x6dfb5c
	private static Void ScriptingDirtyReflectionSystemInstance() { }
	// Offset : 0x6dfbb4
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
internal class ScriptableRuntimeReflectionSystemWrapper
{
	// Fields
	private IScriptableRuntimeReflectionSystem <implementation>k__BackingField; // 0x10

	// Properties
	internal IScriptableRuntimeReflectionSystem implementation { get; set; }

	// Methods
	// Offset : 0x6dfc20
	public Void .ctor() { }
	// Offset : 0x6dfae4
	internal IScriptableRuntimeReflectionSystem get_implementation() { }
	// Offset : 0x6dfaec
	internal Void set_implementation(IScriptableRuntimeReflectionSystem value) { }
	// Offset : 0x6dfc28
	private Void Internal_ScriptableRuntimeReflectionSystemWrapper_TickRealtimeProbes(IntPtr result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections
public sealed class ReadOnlyAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections
public sealed class WriteOnlyAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections
public sealed class DeallocateOnJobCompletionAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections
public sealed class NativeFixedLengthAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections
public sealed class NativeMatchesParallelForLengthAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections
public sealed class NativeDisableParallelForRestrictionAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeContainerAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeContainerIsReadOnlyAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeContainerIsAtomicWriteOnlyAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeContainerSupportsMinMaxWriteRestrictionAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeContainerSupportsDeallocateOnJobCompletionAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeContainerSupportsDeferredConvertListToArray : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeSetThreadIndexAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeContainerNeedsThreadIndexAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeDisableUnsafePtrRestrictionAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeDisableContainerSafetyRestrictionAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: Unity.Collections.LowLevel.Unsafe
public sealed class NativeSetClassTypeToNullOnScheduleAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Playables
public struct CameraPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10

	// Properties

	// Methods
	// Offset : 0x2cf48c
	public PlayableHandle GetHandle() { }
	// Offset : 0x2cf498
	public Boolean Equals(CameraPlayable other) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public struct FrameData
{
	// Fields
	internal UInt64 m_FrameID; // 0x10
	internal Double m_DeltaTime; // 0x18
	internal Single m_Weight; // 0x20
	internal Single m_EffectiveWeight; // 0x24
	internal Double m_EffectiveParentDelay; // 0x28
	internal Single m_EffectiveParentSpeed; // 0x30
	internal Single m_EffectiveSpeed; // 0x34
	internal Flags m_Flags; // 0x38
	internal PlayableOutput m_Output; // 0x40

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
internal enum Flags
{
	// Fields
	public Int32 value__; // 0x10
	public const Flags Evaluate = 1; // 0x0
	public const Flags SeekOccured = 2; // 0x0
	public const Flags Loop = 4; // 0x0
	public const Flags Hold = 8; // 0x0
	public const Flags EffectivePlayStateDelayed = 16; // 0x0
	public const Flags EffectivePlayStatePlaying = 32; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public interface INotificationReceiver
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public interface IPlayable
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public interface IPlayableBehaviour
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnGraphStart(Playable playable) { }
	// Offset : 0x
	public abstract Void OnGraphStop(Playable playable) { }
	// Offset : 0x
	public abstract Void OnPlayableCreate(Playable playable) { }
	// Offset : 0x
	public abstract Void OnPlayableDestroy(Playable playable) { }
	// Offset : 0x
	public abstract Void OnBehaviourPlay(Playable playable, FrameData info) { }
	// Offset : 0x
	public abstract Void OnBehaviourPause(Playable playable, FrameData info) { }
	// Offset : 0x
	public abstract Void PrepareFrame(Playable playable, FrameData info) { }
	// Offset : 0x
	public abstract Void ProcessFrame(Playable playable, FrameData info, Object playerData) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public interface IPlayableOutput
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Playables
public struct MaterialEffectPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10

	// Properties

	// Methods
	// Offset : 0x2cf4a0
	public PlayableHandle GetHandle() { }
	// Offset : 0x2cf4ac
	public Boolean Equals(MaterialEffectPlayable other) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public struct Playable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10
	private static readonly Playable m_NullPlayable; // 0x0

	// Properties
	public static Playable Null { get; }

	// Methods
	// Offset : 0x2cdc4c
	internal Void .ctor(PlayableHandle handle) { }
	// Offset : 0x60a3e4
	public static Playable get_Null() { }
	// Offset : 0x2cdc54
	public PlayableHandle GetHandle() { }
	// Offset : 0x2cdc60
	public Boolean Equals(Playable other) { }
	// Offset : 0x60a574
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public interface IPlayableAsset
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
[Serializable]
public abstract class PlayableAsset : ScriptableObject, IPlayableAsset
{
	// Fields

	// Properties
	public virtual Double duration { get; }
	public virtual IEnumerable`1 outputs { get; }

	// Methods
	// Offset : 0x60a650
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Playable CreatePlayable(PlayableGraph graph, GameObject owner) { }
	// Offset : 0x60a654
	public virtual Double get_duration() { }
	// Offset : 0x60a6bc
	public virtual IEnumerable`1 get_outputs() { }
	// Offset : 0x60a724
	internal static Void Internal_CreatePlayable(PlayableAsset asset, PlayableGraph graph, GameObject go, IntPtr ptr) { }
	// Offset : 0x60a834
	internal static Void Internal_GetPlayableAssetDuration(PlayableAsset asset, IntPtr ptrToDouble) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
[Serializable]
public abstract class PlayableBehaviour : IPlayableBehaviour, ICloneable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x60a8a8
	public Void .ctor() { }
	// Offset : 0x60a8b0
	public virtual Void OnGraphStart(Playable playable) { }
	// Offset : 0x60a8b4
	public virtual Void OnGraphStop(Playable playable) { }
	// Offset : 0x60a8b8
	public virtual Void OnPlayableCreate(Playable playable) { }
	// Offset : 0x60a8bc
	public virtual Void OnPlayableDestroy(Playable playable) { }
	// Offset : 0x60a8c0
	public virtual Void OnBehaviourPlay(Playable playable, FrameData info) { }
	// Offset : 0x60a8c4
	public virtual Void OnBehaviourPause(Playable playable, FrameData info) { }
	// Offset : 0x60a8c8
	public virtual Void PrepareFrame(Playable playable, FrameData info) { }
	// Offset : 0x60a8cc
	public virtual Void ProcessFrame(Playable playable, FrameData info, Object playerData) { }
	// Offset : 0x60a8d0
	public virtual Object Clone() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public struct PlayableBinding
{
	// Fields
	private String m_StreamName; // 0x10
	private Object m_SourceObject; // 0x18
	private Type m_SourceBindingType; // 0x20
	private CreateOutputMethod m_CreateOutputMethod; // 0x28
	public static readonly PlayableBinding[] None; // 0x0
	public static readonly Double DefaultDuration; // 0x8

	// Properties

	// Methods
	// Offset : 0x60a8d8
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
internal sealed class CreateOutputMethod : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x60a94c
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x60a95c
	public virtual PlayableOutput Invoke(PlayableGraph graph, String name) { }
	// Offset : 0x60ac48
	public virtual IAsyncResult BeginInvoke(PlayableGraph graph, String name, AsyncCallback callback, Object object) { }
	// Offset : 0x60ace0
	public virtual PlayableOutput EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public struct PlayableGraph
{
	// Fields
	internal IntPtr m_Handle; // 0x10
	internal UInt32 m_Version; // 0x18

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public struct PlayableHandle : IEquatable`1
{
	// Fields
	internal IntPtr m_Handle; // 0x10
	internal UInt32 m_Version; // 0x18
	private static readonly PlayableHandle m_Null; // 0x0

	// Properties
	public static PlayableHandle Null { get; }

	// Methods
	// Offset : 0x
	internal Boolean IsPlayableOfType() { }
	// Offset : 0x60a5e8
	public static PlayableHandle get_Null() { }
	// Offset : 0x60a4dc
	public static Boolean op_Equality(PlayableHandle x, PlayableHandle y) { }
	// Offset : 0x2cdd18
	public override Boolean Equals(Object p) { }
	// Offset : 0x2cdd20
	public Boolean Equals(PlayableHandle other) { }
	// Offset : 0x2cdd28
	public override Int32 GetHashCode() { }
	// Offset : 0x60ad20
	internal static Boolean CompareVersion(PlayableHandle lhs, PlayableHandle rhs) { }
	// Offset : 0x2cdd64
	internal Boolean IsValid() { }
	// Offset : 0x2cdd6c
	internal Type GetPlayableType() { }
	// Offset : 0x60b04c
	private static Void .cctor() { }
	// Offset : 0x60af10
	private static Boolean IsValid_Injected(ref PlayableHandle _unity_self) { }
	// Offset : 0x60afe0
	private static Type GetPlayableType_Injected(ref PlayableHandle _unity_self) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public struct PlayableOutput : IPlayableOutput, IEquatable`1
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x10
	private static readonly PlayableOutput m_NullPlayableOutput; // 0x0

	// Properties

	// Methods
	// Offset : 0x2cdd74
	internal Void .ctor(PlayableOutputHandle handle) { }
	// Offset : 0x2cdd7c
	public PlayableOutputHandle GetHandle() { }
	// Offset : 0x2cdd88
	public Boolean Equals(PlayableOutput other) { }
	// Offset : 0x60b1cc
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public struct PlayableOutputHandle : IEquatable`1
{
	// Fields
	internal IntPtr m_Handle; // 0x10
	internal UInt32 m_Version; // 0x18
	private static readonly PlayableOutputHandle m_Null; // 0x0

	// Properties
	public static PlayableOutputHandle Null { get; }

	// Methods
	// Offset : 0x60b240
	public static PlayableOutputHandle get_Null() { }
	// Offset : 0x2cdd90
	public override Int32 GetHashCode() { }
	// Offset : 0x60b134
	public static Boolean op_Equality(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }
	// Offset : 0x2cddcc
	public override Boolean Equals(Object p) { }
	// Offset : 0x2cddd4
	public Boolean Equals(PlayableOutputHandle other) { }
	// Offset : 0x60b2e0
	internal static Boolean CompareVersion(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }
	// Offset : 0x60b434
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Playables
public struct ScriptPlayableOutput : IPlayableOutput
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x10

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Playables
public struct TextureMixerPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10

	// Properties

	// Methods
	// Offset : 0x2cf4b4
	public PlayableHandle GetHandle() { }
	// Offset : 0x2cf4c0
	public Boolean Equals(TextureMixerPlayable other) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Playables
public struct TexturePlayableOutput : IPlayableOutput
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x10

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Internal
[Serializable]
public class DefaultValueAttribute : Attribute
{
	// Fields
	private Object DefaultValue; // 0x10

	// Properties
	public Object Value { get; }

	// Methods
	// Offset : 0x6e2280
	public Void .ctor(String value) { }
	// Offset : 0x6e22ac
	public Object get_Value() { }
	// Offset : 0x6e22b4
	public override Boolean Equals(Object obj) { }
	// Offset : 0x6e23ac
	public override Int32 GetHashCode() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Internal
[Serializable]
public class ExcludeFromDocsAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e2400
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public interface ILogger : ILogHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void Log(LogType logType, Object message) { }
	// Offset : 0x
	public abstract Void Log(LogType logType, Object message, Object context) { }
	// Offset : 0x
	public abstract Void LogFormat(LogType logType, String format, Object[] args) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public interface ILogHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void LogFormat(LogType logType, Object context, String format, Object[] args) { }
	// Offset : 0x
	public abstract Void LogException(Exception exception, Object context) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Logger : ILogger, ILogHandler
{
	// Fields
	private ILogHandler <logHandler>k__BackingField; // 0x10
	private Boolean <logEnabled>k__BackingField; // 0x18
	private LogType <filterLogType>k__BackingField; // 0x1c

	// Properties
	public ILogHandler logHandler { get; set; }
	public Boolean logEnabled { get; set; }
	public LogType filterLogType { get; set; }

	// Methods
	// Offset : 0x6db844
	public Void .ctor(ILogHandler logHandler) { }
	// Offset : 0x6e2644
	public ILogHandler get_logHandler() { }
	// Offset : 0x6e2628
	public Void set_logHandler(ILogHandler value) { }
	// Offset : 0x6e264c
	public Boolean get_logEnabled() { }
	// Offset : 0x6e2630
	public Void set_logEnabled(Boolean value) { }
	// Offset : 0x6e2654
	public LogType get_filterLogType() { }
	// Offset : 0x6e263c
	public Void set_filterLogType(LogType value) { }
	// Offset : 0x6e265c
	public Boolean IsLogTypeAllowed(LogType logType) { }
	// Offset : 0x6e2698
	private static String GetString(Object message) { }
	// Offset : 0x6e280c
	public Void Log(LogType logType, Object message) { }
	// Offset : 0x6e29cc
	public Void Log(LogType logType, Object message, Object context) { }
	// Offset : 0x6e2b9c
	public Void LogFormat(LogType logType, String format, Object[] args) { }
	// Offset : 0x6e2ce0
	public Void LogFormat(LogType logType, Object context, String format, Object[] args) { }
	// Offset : 0x6e2e34
	public Void LogException(Exception exception, Object context) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class MessageEventArgs
{
	// Fields
	public Int32 playerId; // 0x10
	public Byte[] data; // 0x18

	// Properties

	// Methods
	// Offset : 0x60706c
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Networking.PlayerConnection
public interface IEditorPlayerConnection
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class PlayerConnection : ScriptableObject, IEditorPlayerConnection
{
	// Fields
	internal static IPlayerEditorConnectionNative connectionNative; // 0x0
	private PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents; // 0x18
	private List`1 m_connectedPlayers; // 0x20
	private Boolean m_IsInitilized; // 0x28
	private static PlayerConnection s_Instance; // 0x8

	// Properties
	public static PlayerConnection instance { get; }
	public Boolean isConnected { get; }

	// Methods
	// Offset : 0x607074
	public Void .ctor() { }
	// Offset : 0x607214
	public static PlayerConnection get_instance() { }
	// Offset : 0x6073ac
	public Boolean get_isConnected() { }
	// Offset : 0x607320
	private static PlayerConnection CreateInstance() { }
	// Offset : 0x60757c
	public Void OnEnable() { }
	// Offset : 0x607494
	private IPlayerEditorConnectionNative GetConnectionNativeApi() { }
	// Offset : 0x60768c
	public Void Register(Guid messageId, UnityAction`1 callback) { }
	// Offset : 0x607ae4
	public Void Unregister(Guid messageId, UnityAction`1 callback) { }
	// Offset : 0x607e30
	public Void RegisterConnection(UnityAction`1 callback) { }
	// Offset : 0x607fb8
	public Void RegisterDisconnection(UnityAction`1 callback) { }
	// Offset : 0x608038
	public Void Send(Guid messageId, Byte[] data) { }
	// Offset : 0x6081d4
	public Boolean BlockUntilRecvMsg(Guid messageId, Int32 timeout) { }
	// Offset : 0x608430
	public Void DisconnectAll() { }
	// Offset : 0x608518
	private static Void MessageCallbackInternal(IntPtr data, UInt64 size, UInt64 guid, String messageId) { }
	// Offset : 0x608b48
	private static Void ConnectedCallbackInternal(Int32 playerId) { }
	// Offset : 0x608c04
	private static Void DisconnectedCallback(Int32 playerId) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
private sealed class <Register>c__AnonStorey0
{
	// Fields
	internal Guid messageId; // 0x10

	// Properties

	// Methods
	// Offset : 0x607964
	public Void .ctor() { }
	// Offset : 0x608ccc
	internal Boolean <>m__0(MessageTypeSubscribers x) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
private sealed class <Unregister>c__AnonStorey1
{
	// Fields
	internal Guid messageId; // 0x10

	// Properties

	// Methods
	// Offset : 0x607cd0
	public Void .ctor() { }
	// Offset : 0x608db4
	internal Boolean <>m__0(MessageTypeSubscribers x) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
private sealed class <BlockUntilRecvMsg>c__AnonStorey2
{
	// Fields
	internal Boolean msgReceived; // 0x10

	// Properties

	// Methods
	// Offset : 0x608428
	public Void .ctor() { }
	// Offset : 0x608cc0
	internal Void <>m__0(MessageEventArgs args) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
internal class PlayerEditorConnectionEvents
{
	// Fields
	public List`1 messageTypeSubscribers; // 0x10
	public ConnectionChangeEvent connectionEvent; // 0x18
	public ConnectionChangeEvent disconnectionEvent; // 0x20

	// Properties

	// Methods
	// Offset : 0x6070fc
	public Void .ctor() { }
	// Offset : 0x608644
	public Void InvokeMessageIdSubscribers(Guid messageId, Byte[] data, Int32 playerId) { }
	// Offset : 0x60796c
	public UnityEvent`1 AddAndCreate(Guid messageId) { }
	// Offset : 0x607cd8
	public Void UnregisterManagedCallback(Guid messageId, UnityAction`1 callback) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
[Serializable]
public class MessageEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x608f6c
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
[Serializable]
public class ConnectionChangeEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x608e6c
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
[Serializable]
public class MessageTypeSubscribers
{
	// Fields
	private String m_messageTypeId; // 0x10
	public Int32 subscriberCount; // 0x18
	public MessageEvent messageCallback; // 0x20

	// Properties
	public Guid MessageTypeId { get; set; }

	// Methods
	// Offset : 0x608ecc
	public Void .ctor() { }
	// Offset : 0x608d84
	public Guid get_MessageTypeId() { }
	// Offset : 0x608f34
	public Void set_MessageTypeId(Guid value) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
private sealed class <InvokeMessageIdSubscribers>c__AnonStorey0
{
	// Fields
	internal Guid messageId; // 0x10

	// Properties

	// Methods
	// Offset : 0x608ebc
	public Void .ctor() { }
	// Offset : 0x60907c
	internal Boolean <>m__0(MessageTypeSubscribers x) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
private sealed class <AddAndCreate>c__AnonStorey1
{
	// Fields
	internal Guid messageId; // 0x10

	// Properties

	// Methods
	// Offset : 0x608ec4
	public Void .ctor() { }
	// Offset : 0x608fc4
	internal Boolean <>m__0(MessageTypeSubscribers x) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
private sealed class <UnregisterManagedCallback>c__AnonStorey2
{
	// Fields
	internal Guid messageId; // 0x10

	// Properties

	// Methods
	// Offset : 0x608fbc
	public Void .ctor() { }
	// Offset : 0x609134
	internal Boolean <>m__0(MessageTypeSubscribers x) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public interface IRenderPipeline : IDisposable
{
	// Fields

	// Properties
	public abstract Boolean disposed { get; }

	// Methods
	// Offset : 0x
	public abstract Boolean get_disposed() { }
	// Offset : 0x
	public abstract Void Render(ScriptableRenderContext renderContext, Camera[] cameras) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public interface IRenderPipelineAsset
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void DestroyCreatedInstances() { }
	// Offset : 0x
	public abstract IRenderPipeline CreatePipeline() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public static class RenderPipelineManager
{
	// Fields
	private static IRenderPipelineAsset s_CurrentPipelineAsset; // 0x0
	private static IRenderPipeline <currentPipeline>k__BackingField; // 0x8

	// Properties
	public static IRenderPipeline currentPipeline { get; set; }

	// Methods
	// Offset : 0x6df2b8
	public static IRenderPipeline get_currentPipeline() { }
	// Offset : 0x6df308
	private static Void set_currentPipeline(IRenderPipeline value) { }
	// Offset : 0x6df35c
	internal static Void CleanupRenderPipeline() { }
	// Offset : 0x6df584
	private static Void DoRenderLoop_Internal(IRenderPipelineAsset pipe, Camera[] cameras, IntPtr loopPtr) { }
	// Offset : 0x6df6d0
	private static Void PrepareRenderPipeline(IRenderPipelineAsset pipe) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.Rendering
public class SupportedRenderingFeatures
{
	// Fields
	private static SupportedRenderingFeatures s_Active; // 0x0
	private ReflectionProbeSupportFlags <reflectionProbeSupportFlags>k__BackingField; // 0x10
	private LightmapMixedBakeMode <defaultMixedLightingMode>k__BackingField; // 0x14
	private LightmapMixedBakeMode <supportedMixedLightingModes>k__BackingField; // 0x18
	private LightmapBakeType <supportedLightmapBakeTypes>k__BackingField; // 0x1c
	private LightmapsMode <supportedLightmapsModes>k__BackingField; // 0x20
	private Boolean <rendererSupportsLightProbeProxyVolumes>k__BackingField; // 0x24
	private Boolean <rendererSupportsMotionVectors>k__BackingField; // 0x25
	private Boolean <rendererSupportsReceiveShadows>k__BackingField; // 0x26
	private Boolean <rendererSupportsReflectionProbes>k__BackingField; // 0x27
	private Boolean <rendererSupportsRendererPriority>k__BackingField; // 0x28
	private Boolean <rendererOverridesEnvironmentLighting>k__BackingField; // 0x29
	private Boolean <rendererOverridesFog>k__BackingField; // 0x2a
	private Boolean <rendererOverridesOtherLightingSettings>k__BackingField; // 0x2b

	// Properties
	public static SupportedRenderingFeatures active { get; set; }
	public LightmapMixedBakeMode defaultMixedLightingMode { get; }
	public LightmapMixedBakeMode supportedMixedLightingModes { get; }
	public LightmapBakeType supportedLightmapBakeTypes { get; }
	public LightmapsMode supportedLightmapsModes { get; }

	// Methods
	// Offset : 0x6df4f0
	public Void .ctor() { }
	// Offset : 0x6dfd30
	public static SupportedRenderingFeatures get_active() { }
	// Offset : 0x6df518
	public static Void set_active(SupportedRenderingFeatures value) { }
	// Offset : 0x6dfe14
	public LightmapMixedBakeMode get_defaultMixedLightingMode() { }
	// Offset : 0x6dfe1c
	public LightmapMixedBakeMode get_supportedMixedLightingModes() { }
	// Offset : 0x6dfe24
	public LightmapBakeType get_supportedLightmapBakeTypes() { }
	// Offset : 0x6dfe2c
	public LightmapsMode get_supportedLightmapsModes() { }
	// Offset : 0x6dfe34
	internal static Void FallbackMixedLightingModeByRef(IntPtr fallbackModePtr) { }
	// Offset : 0x6dffc4
	internal static Boolean IsMixedLightingModeSupported(MixedLightingMode mixedMode) { }
	// Offset : 0x6e0054
	internal static Void IsMixedLightingModeSupportedByRef(MixedLightingMode mixedMode, IntPtr isSupportedPtr) { }
	// Offset : 0x6e0198
	internal static Boolean IsLightmapBakeTypeSupported(LightmapBakeType bakeType) { }
	// Offset : 0x6e0228
	internal static Void IsLightmapBakeTypeSupportedByRef(LightmapBakeType bakeType, IntPtr isSupportedPtr) { }
	// Offset : 0x6e0330
	internal static Void IsLightmapsModeSupportedByRef(LightmapsMode mode, IntPtr isSupportedPtr) { }
	// Offset : 0x6e03d0
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public enum ReflectionProbeSupportFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const ReflectionProbeSupportFlags None = 0; // 0x0
	public const ReflectionProbeSupportFlags Rotation = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public enum LightmapMixedBakeMode
{
	// Fields
	public Int32 value__; // 0x10
	public const LightmapMixedBakeMode None = 0; // 0x0
	public const LightmapMixedBakeMode IndirectOnly = 1; // 0x0
	public const LightmapMixedBakeMode Subtractive = 2; // 0x0
	public const LightmapMixedBakeMode Shadowmask = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.SceneManagement
[Serializable]
public struct Scene
{
	// Fields
	private Int32 m_Handle; // 0x10

	// Properties
	public Int32 handle { get; }

	// Methods
	// Offset : 0x2ce214
	public Int32 get_handle() { }
	// Offset : 0x2ce21c
	public override Int32 GetHashCode() { }
	// Offset : 0x2ce224
	public override Boolean Equals(Object other) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.SceneManagement
public class SceneManager
{
	// Fields
	private static UnityAction`2 sceneLoaded; // 0x0
	private static UnityAction`1 sceneUnloaded; // 0x8
	private static UnityAction`2 activeSceneChanged; // 0x10

	// Properties
	public static Int32 sceneCount { get; }

	// Methods
	// Offset : 0x6121bc
	public static Int32 get_sceneCount() { }
	// Offset : 0x612214
	public static Scene GetSceneAt(Int32 index) { }
	// Offset : 0x6122b0
	private static AsyncOperation LoadSceneAsyncNameIndexInternal(String sceneName, Int32 sceneBuildIndex, LoadSceneParameters parameters, Boolean mustCompleteNextFrame) { }
	// Offset : 0x612364
	public static Void LoadScene(String sceneName) { }
	// Offset : 0x61236c
	public static Scene LoadScene(String sceneName, LoadSceneParameters parameters) { }
	// Offset : 0x6123b0
	public static AsyncOperation LoadSceneAsync(String sceneName, LoadSceneMode mode) { }
	// Offset : 0x6123e0
	public static AsyncOperation LoadSceneAsync(String sceneName, LoadSceneParameters parameters) { }
	// Offset : 0x61240c
	private static Void Internal_SceneLoaded(Scene scene, LoadSceneMode mode) { }
	// Offset : 0x612494
	private static Void Internal_SceneUnloaded(Scene scene) { }
	// Offset : 0x612508
	private static Void Internal_ActiveSceneChanged(Scene previousActiveScene, Scene newActiveScene) { }
	// Offset : 0x61223c
	private static Void GetSceneAt_Injected(Int32 index, out Scene ret) { }
	// Offset : 0x6122d8
	private static AsyncOperation LoadSceneAsyncNameIndexInternal_Injected(String sceneName, Int32 sceneBuildIndex, ref LoadSceneParameters parameters, Boolean mustCompleteNextFrame) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.SceneManagement
public enum LoadSceneMode
{
	// Fields
	public Int32 value__; // 0x10
	public const LoadSceneMode Single = 0; // 0x0
	public const LoadSceneMode Additive = 1; // 0x0
	public const LoadSceneMode SingleNoGc = 2; // 0x0
	public const LoadSceneMode SingleNoGc_NoScriptingGc = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.SceneManagement
public enum LocalPhysicsMode
{
	// Fields
	public Int32 value__; // 0x10
	public const LocalPhysicsMode None = 0; // 0x0
	public const LocalPhysicsMode Physics2D = 1; // 0x0
	public const LocalPhysicsMode Physics3D = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.SceneManagement
[Serializable]
public struct LoadSceneParameters
{
	// Fields
	private LoadSceneMode m_LoadSceneMode; // 0x10
	private LocalPhysicsMode m_LocalPhysicsMode; // 0x14

	// Properties

	// Methods
	// Offset : 0x2ce20c
	public Void .ctor(LoadSceneMode mode) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
internal sealed class ExtensionOfNativeClassAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x6e0454
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Scripting
public class PreserveAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x61210c
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Scripting.APIUpdating
public class MovedFromAttribute : Attribute
{
	// Fields
	private String <Namespace>k__BackingField; // 0x10
	private Boolean <IsInDifferentAssembly>k__BackingField; // 0x18

	// Properties
	private String Namespace { set; }
	private Boolean IsInDifferentAssembly { set; }

	// Methods
	// Offset : 0x612838
	public Void .ctor(String sourceNamespace) { }
	// Offset : 0x612868
	public Void .ctor(String sourceNamespace, Boolean isInDifferentAssembly) { }
	// Offset : 0x6128a8
	private Void set_Namespace(String value) { }
	// Offset : 0x6128b0
	private Void set_IsInDifferentAssembly(Boolean value) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Serialization
public class FormerlySerializedAsAttribute : Attribute
{
	// Fields
	private String m_oldName; // 0x10

	// Properties

	// Methods
	// Offset : 0x614164
	public Void .ctor(String oldName) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngineInternal
public enum TypeInferenceRules
{
	// Fields
	public Int32 value__; // 0x10
	public const TypeInferenceRules TypeReferencedByFirstArgument = 0; // 0x0
	public const TypeInferenceRules TypeReferencedBySecondArgument = 1; // 0x0
	public const TypeInferenceRules ArrayOfTypeReferencedByFirstArgument = 2; // 0x0
	public const TypeInferenceRules TypeOfFirstArgument = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngineInternal
[Serializable]
public class TypeInferenceRuleAttribute : Attribute
{
	// Fields
	private readonly String _rule; // 0x10

	// Properties

	// Methods
	// Offset : 0x967b0c
	public Void .ctor(TypeInferenceRules rule) { }
	// Offset : 0x967bc4
	public Void .ctor(String rule) { }
	// Offset : 0x967bf0
	public override String ToString() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngineInternal
internal static class NetFxCoreExtensions
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x967ac0
	public static Delegate CreateDelegate(MethodInfo self, Type delegateType, Object target) { }
	// Offset : 0x967ad8
	public static MethodInfo GetMethodInfo(Delegate self) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Profiling.Memory.Experimental
public class MetaData
{
	// Fields
	public String content; // 0x10
	public String platform; // 0x18
	public Texture2D screenshot; // 0x20

	// Properties

	// Methods
	// Offset : 0x60c314
	public Void .ctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Profiling.Memory.Experimental
public sealed class MemoryProfiler
{
	// Fields
	private static Action`2 snapshotFinished; // 0x0
	private static Action`1 createMetaData; // 0x8

	// Properties

	// Methods
	// Offset : 0x60befc
	private static Byte[] PrepareMetadata() { }
	// Offset : 0x60c388
	internal static Int32 WriteIntToByteArray(Byte[] array, Int32 offset, Int32 value) { }
	// Offset : 0x60c488
	internal static Int32 WriteStringToByteArray(Byte[] array, Int32 offset, String value) { }
	// Offset : 0x60c5f0
	private static Void FinalizeSnapshot(String path, Boolean result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum DrivenTransformProperties
{
	// Fields
	public Int32 value__; // 0x10
	public const DrivenTransformProperties None = 0; // 0x0
	public const DrivenTransformProperties All = 4294967295; // 0x0
	public const DrivenTransformProperties AnchoredPositionX = 2; // 0x0
	public const DrivenTransformProperties AnchoredPositionY = 4; // 0x0
	public const DrivenTransformProperties AnchoredPositionZ = 8; // 0x0
	public const DrivenTransformProperties Rotation = 16; // 0x0
	public const DrivenTransformProperties ScaleX = 32; // 0x0
	public const DrivenTransformProperties ScaleY = 64; // 0x0
	public const DrivenTransformProperties ScaleZ = 128; // 0x0
	public const DrivenTransformProperties AnchorMinX = 256; // 0x0
	public const DrivenTransformProperties AnchorMinY = 512; // 0x0
	public const DrivenTransformProperties AnchorMaxX = 1024; // 0x0
	public const DrivenTransformProperties AnchorMaxY = 2048; // 0x0
	public const DrivenTransformProperties SizeDeltaX = 4096; // 0x0
	public const DrivenTransformProperties SizeDeltaY = 8192; // 0x0
	public const DrivenTransformProperties PivotX = 16384; // 0x0
	public const DrivenTransformProperties PivotY = 32768; // 0x0
	public const DrivenTransformProperties AnchoredPosition = 6; // 0x0
	public const DrivenTransformProperties AnchoredPosition3D = 14; // 0x0
	public const DrivenTransformProperties Scale = 224; // 0x0
	public const DrivenTransformProperties AnchorMin = 768; // 0x0
	public const DrivenTransformProperties AnchorMax = 3072; // 0x0
	public const DrivenTransformProperties Anchors = 3840; // 0x0
	public const DrivenTransformProperties SizeDelta = 12288; // 0x0
	public const DrivenTransformProperties Pivot = 49152; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public struct DrivenRectTransformTracker
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x2cf3d4
	public Void Add(Object driver, RectTransform rectTransform, DrivenTransformProperties drivenProperties) { }
	// Offset : 0x2cf3d8
	public Void Clear() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class RectTransform : Transform
{
	// Fields
	private static ReapplyDrivenProperties reapplyDrivenProperties; // 0x0

	// Properties
	public Rect rect { get; }
	public Vector2 anchorMin { get; set; }
	public Vector2 anchorMax { get; set; }
	public Vector2 anchoredPosition { get; set; }
	public Vector2 sizeDelta { get; set; }
	public Vector2 pivot { get; set; }
	public Vector2 offsetMin { set; }
	public Vector2 offsetMax { set; }

	// Methods
	// Offset : 0x60eff4
	public static Void add_reapplyDrivenProperties(ReapplyDrivenProperties value) { }
	// Offset : 0x60f0f4
	public static Void remove_reapplyDrivenProperties(ReapplyDrivenProperties value) { }
	// Offset : 0x60f1f4
	public Rect get_rect() { }
	// Offset : 0x60f294
	public Vector2 get_anchorMin() { }
	// Offset : 0x60f330
	public Void set_anchorMin(Vector2 value) { }
	// Offset : 0x60f3c8
	public Vector2 get_anchorMax() { }
	// Offset : 0x60f464
	public Void set_anchorMax(Vector2 value) { }
	// Offset : 0x60f4fc
	public Vector2 get_anchoredPosition() { }
	// Offset : 0x60f598
	public Void set_anchoredPosition(Vector2 value) { }
	// Offset : 0x60f630
	public Vector2 get_sizeDelta() { }
	// Offset : 0x60f6cc
	public Void set_sizeDelta(Vector2 value) { }
	// Offset : 0x60f764
	public Vector2 get_pivot() { }
	// Offset : 0x60f800
	public Void set_pivot(Vector2 value) { }
	// Offset : 0x60f898
	public Void set_offsetMin(Vector2 value) { }
	// Offset : 0x60fa90
	public Void set_offsetMax(Vector2 value) { }
	// Offset : 0x60fbfc
	public Void GetLocalCorners(Vector3[] fourCornersArray) { }
	// Offset : 0x60fd68
	public Void GetWorldCorners(Vector3[] fourCornersArray) { }
	// Offset : 0x60ff24
	public Void SetInsetAndSizeFromParentEdge(Edge edge, Single inset, Single size) { }
	// Offset : 0x610224
	public Void SetSizeWithCurrentAnchors(Axis axis, Single size) { }
	// Offset : 0x6103f8
	internal static Void SendReapplyDrivenProperties(RectTransform driven) { }
	// Offset : 0x610308
	private Vector2 GetParentSize() { }
	// Offset : 0x60f220
	private Void get_rect_Injected(out Rect ret) { }
	// Offset : 0x60f2bc
	private Void get_anchorMin_Injected(out Vector2 ret) { }
	// Offset : 0x60f354
	private Void set_anchorMin_Injected(ref Vector2 value) { }
	// Offset : 0x60f3f0
	private Void get_anchorMax_Injected(out Vector2 ret) { }
	// Offset : 0x60f488
	private Void set_anchorMax_Injected(ref Vector2 value) { }
	// Offset : 0x60f524
	private Void get_anchoredPosition_Injected(out Vector2 ret) { }
	// Offset : 0x60f5bc
	private Void set_anchoredPosition_Injected(ref Vector2 value) { }
	// Offset : 0x60f658
	private Void get_sizeDelta_Injected(out Vector2 ret) { }
	// Offset : 0x60f6f0
	private Void set_sizeDelta_Injected(ref Vector2 value) { }
	// Offset : 0x60f78c
	private Void get_pivot_Injected(out Vector2 ret) { }
	// Offset : 0x60f824
	private Void set_pivot_Injected(ref Vector2 value) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public enum Edge
{
	// Fields
	public Int32 value__; // 0x10
	public const Edge Left = 0; // 0x0
	public const Edge Right = 1; // 0x0
	public const Edge Top = 2; // 0x0
	public const Edge Bottom = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public enum Axis
{
	// Fields
	public Int32 value__; // 0x10
	public const Axis Horizontal = 0; // 0x0
	public const Axis Vertical = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
public sealed class ReapplyDrivenProperties : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x610990
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x610464
	public virtual Void Invoke(RectTransform driven) { }
	// Offset : 0x6109a0
	public virtual IAsyncResult BeginInvoke(RectTransform driven, AsyncCallback callback, Object object) { }
	// Offset : 0x6109c4
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public class Transform : Component, IEnumerable
{
	// Fields

	// Properties
	public Vector3 position { get; set; }
	public Vector3 localPosition { get; set; }
	public Vector3 right { get; set; }
	public Vector3 up { get; }
	public Vector3 forward { get; set; }
	public Quaternion rotation { get; set; }
	public Quaternion localRotation { get; set; }
	public Vector3 localScale { get; set; }
	public Transform parent { get; set; }
	internal Transform parentInternal { get; set; }
	public Matrix4x4 worldToLocalMatrix { get; }
	public Matrix4x4 localToWorldMatrix { get; }
	public Int32 childCount { get; }
	public Vector3 lossyScale { get; }

	// Methods
	// Offset : 0x618de4
	protected Void .ctor() { }
	// Offset : 0x618dec
	public Vector3 get_position() { }
	// Offset : 0x618e90
	public Void set_position(Vector3 value) { }
	// Offset : 0x618f2c
	public Vector3 get_localPosition() { }
	// Offset : 0x618fd0
	public Void set_localPosition(Vector3 value) { }
	// Offset : 0x61906c
	public Vector3 get_right() { }
	// Offset : 0x6191f4
	public Void set_right(Vector3 value) { }
	// Offset : 0x619308
	public Vector3 get_up() { }
	// Offset : 0x6193f8
	public Vector3 get_forward() { }
	// Offset : 0x619554
	public Void set_forward(Vector3 value) { }
	// Offset : 0x61915c
	public Quaternion get_rotation() { }
	// Offset : 0x6192e0
	public Void set_rotation(Quaternion value) { }
	// Offset : 0x6196e4
	public Quaternion get_localRotation() { }
	// Offset : 0x619784
	public Void set_localRotation(Quaternion value) { }
	// Offset : 0x619820
	public Vector3 get_localScale() { }
	// Offset : 0x6198c4
	public Void set_localScale(Vector3 value) { }
	// Offset : 0x610924
	public Transform get_parent() { }
	// Offset : 0x619964
	public Void set_parent(Transform value) { }
	// Offset : 0x619960
	internal Transform get_parentInternal() { }
	// Offset : 0x619a10
	internal Void set_parentInternal(Transform value) { }
	// Offset : 0x619a18
	private Transform GetParent() { }
	// Offset : 0x619a84
	public Void SetParent(Transform p) { }
	// Offset : 0x619a8c
	public Void SetParent(Transform parent, Boolean worldPositionStays) { }
	// Offset : 0x619b10
	public Matrix4x4 get_worldToLocalMatrix() { }
	// Offset : 0x60fedc
	public Matrix4x4 get_localToWorldMatrix() { }
	// Offset : 0x619c40
	public Void Rotate(Vector3 eulers, Space relativeTo) { }
	// Offset : 0x619e68
	public Void Rotate(Vector3 eulers) { }
	// Offset : 0x619e70
	public Vector3 TransformPoint(Vector3 position) { }
	// Offset : 0x619f30
	public Vector3 InverseTransformPoint(Vector3 position) { }
	// Offset : 0x619ff0
	public Int32 get_childCount() { }
	// Offset : 0x61a05c
	public Void SetAsFirstSibling() { }
	// Offset : 0x61a0c8
	private static Transform FindRelativeTransformWithPath(Transform transform, String path, Boolean isActiveOnly) { }
	// Offset : 0x61a14c
	public Transform Find(String n) { }
	// Offset : 0x61a1ec
	public Vector3 get_lossyScale() { }
	// Offset : 0x61a290
	public Boolean IsChildOf(Transform parent) { }
	// Offset : 0x61a304
	public IEnumerator GetEnumerator() { }
	// Offset : 0x61a3a4
	public Transform GetChild(Int32 index) { }
	// Offset : 0x618e1c
	private Void get_position_Injected(out Vector3 ret) { }
	// Offset : 0x618eb8
	private Void set_position_Injected(ref Vector3 value) { }
	// Offset : 0x618f5c
	private Void get_localPosition_Injected(out Vector3 ret) { }
	// Offset : 0x618ff8
	private Void set_localPosition_Injected(ref Vector3 value) { }
	// Offset : 0x6195fc
	private Void get_rotation_Injected(out Quaternion ret) { }
	// Offset : 0x619670
	private Void set_rotation_Injected(ref Quaternion value) { }
	// Offset : 0x619710
	private Void get_localRotation_Injected(out Quaternion ret) { }
	// Offset : 0x6197ac
	private Void set_localRotation_Injected(ref Quaternion value) { }
	// Offset : 0x619850
	private Void get_localScale_Injected(out Vector3 ret) { }
	// Offset : 0x6198ec
	private Void set_localScale_Injected(ref Vector3 value) { }
	// Offset : 0x619b58
	private Void get_worldToLocalMatrix_Injected(out Matrix4x4 ret) { }
	// Offset : 0x619bcc
	private Void get_localToWorldMatrix_Injected(out Matrix4x4 ret) { }
	// Offset : 0x619eac
	private Void TransformPoint_Injected(ref Vector3 position, out Vector3 ret) { }
	// Offset : 0x619f6c
	private Void InverseTransformPoint_Injected(ref Vector3 position, out Vector3 ret) { }
	// Offset : 0x61a21c
	private Void get_lossyScale_Injected(out Vector3 ret) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: 
private class Enumerator : IEnumerator
{
	// Fields
	private Transform outer; // 0x10
	private Int32 currentIndex; // 0x18

	// Properties
	public Object Current { get; }

	// Methods
	// Offset : 0x61a370
	internal Void .ctor(Transform outer) { }
	// Offset : 0x61a418
	public Object get_Current() { }
	// Offset : 0x61a44c
	public Boolean MoveNext() { }
	// Offset : 0x61a494
	public Void Reset() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Experimental.U2D
[Serializable]
public struct SpriteBone
{
	// Fields
	private String m_Name; // 0x10
	private Vector3 m_Position; // 0x18
	private Quaternion m_Rotation; // 0x24
	private Single m_Length; // 0x34
	private Int32 m_ParentId; // 0x38

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.Sprites
public sealed class DataUtility
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x614f44
	public static Vector4 GetInnerUV(Sprite sprite) { }
	// Offset : 0x614f88
	public static Vector4 GetOuterUV(Sprite sprite) { }
	// Offset : 0x614fcc
	public static Vector4 GetPadding(Sprite sprite) { }
	// Offset : 0x615010
	public static Vector2 GetMinSize(Sprite sprite) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class SpriteRenderer : Renderer
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public enum SpritePackingMode
{
	// Fields
	public Int32 value__; // 0x10
	public const SpritePackingMode Tight = 0; // 0x0
	public const SpritePackingMode Rectangle = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine
public sealed class Sprite : Object
{
	// Fields

	// Properties
	public Bounds bounds { get; }
	public Rect rect { get; }
	public Vector4 border { get; }
	public Texture2D texture { get; }
	public Single pixelsPerUnit { get; }
	public Texture2D associatedAlphaSplitTexture { get; }
	public Vector2 pivot { get; }
	public Boolean packed { get; }
	public SpritePackingMode packingMode { get; }
	public Rect textureRect { get; }
	public Vector2[] vertices { get; }
	public UInt16[] triangles { get; }
	public Vector2[] uv { get; }

	// Methods
	// Offset : 0x6145e0
	private Void .ctor() { }
	// Offset : 0x614648
	internal Int32 GetPackingMode() { }
	// Offset : 0x6146b4
	internal Int32 GetPacked() { }
	// Offset : 0x614720
	internal Rect GetTextureRect() { }
	// Offset : 0x6147c0
	internal Vector4 GetInnerUVs() { }
	// Offset : 0x614860
	internal Vector4 GetOuterUVs() { }
	// Offset : 0x614900
	internal Vector4 GetPadding() { }
	// Offset : 0x6149a0
	public Bounds get_bounds() { }
	// Offset : 0x614a54
	public Rect get_rect() { }
	// Offset : 0x614af4
	public Vector4 get_border() { }
	// Offset : 0x614b94
	public Texture2D get_texture() { }
	// Offset : 0x614c00
	public Single get_pixelsPerUnit() { }
	// Offset : 0x614c6c
	public Texture2D get_associatedAlphaSplitTexture() { }
	// Offset : 0x614cd8
	public Vector2 get_pivot() { }
	// Offset : 0x614d74
	public Boolean get_packed() { }
	// Offset : 0x614d90
	public SpritePackingMode get_packingMode() { }
	// Offset : 0x614d94
	public Rect get_textureRect() { }
	// Offset : 0x614e00
	public Vector2[] get_vertices() { }
	// Offset : 0x614e6c
	public UInt16[] get_triangles() { }
	// Offset : 0x614ed8
	public Vector2[] get_uv() { }
	// Offset : 0x61474c
	private Void GetTextureRect_Injected(out Rect ret) { }
	// Offset : 0x6147ec
	private Void GetInnerUVs_Injected(out Vector4 ret) { }
	// Offset : 0x61488c
	private Void GetOuterUVs_Injected(out Vector4 ret) { }
	// Offset : 0x61492c
	private Void GetPadding_Injected(out Vector4 ret) { }
	// Offset : 0x6149e0
	private Void get_bounds_Injected(out Bounds ret) { }
	// Offset : 0x614a80
	private Void get_rect_Injected(out Rect ret) { }
	// Offset : 0x614b20
	private Void get_border_Injected(out Vector4 ret) { }
	// Offset : 0x614d00
	private Void get_pivot_Injected(out Vector2 ret) { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.U2D
public class SpriteAtlasManager
{
	// Fields
	private static Action`2 atlasRequested; // 0x0
	private static Action`1 atlasRegistered; // 0x8
	private static Action`1 <>f__mg$cache0; // 0x10

	// Properties

	// Methods
	// Offset : 0x61a514
	private static Boolean RequestAtlas(String tag) { }
	// Offset : 0x61a660
	public static Void add_atlasRegistered(Action`1 value) { }
	// Offset : 0x61a7a0
	public static Void remove_atlasRegistered(Action`1 value) { }
	// Offset : 0x61a8e0
	private static Void PostRegisteredAtlas(SpriteAtlas spriteAtlas) { }
	// Offset : 0x61a9a0
	internal static Void Register(SpriteAtlas spriteAtlas) { }
	// Offset : 0x61aa0c
	private static Void .cctor() { }
}

// Dll : UnityEngine.CoreModule.dll
// Namespace: UnityEngine.U2D
public class SpriteAtlas : Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x61a4a0
	public Boolean CanBindTo(Sprite sprite) { }
}

// Dll : UnityEngine.AssetBundleModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.AssetBundleModule.dll
// Namespace: UnityEngine
public class AssetBundle : Object
{
	// Fields

	// Properties
	public Boolean isStreamedSceneAssetBundle { get; }

	// Methods
	// Offset : 0x972d80
	private Void .ctor() { }
	// Offset : 0x972de8
	internal static AssetBundle LoadFromFile_Internal(String path, UInt32 crc, UInt64 offset) { }
	// Offset : 0x972e6c
	public static AssetBundle LoadFromFile(String path) { }
	// Offset : 0x972e78
	internal static AssetBundle LoadFromMemory_Internal(Byte[] binary, UInt32 crc) { }
	// Offset : 0x972eec
	public static AssetBundle LoadFromMemory(Byte[] binary) { }
	// Offset : 0x972ef4
	public Boolean get_isStreamedSceneAssetBundle() { }
	// Offset : 0x972f60
	public Object LoadAsset(String name) { }
	// Offset : 0x972ff0
	public Object LoadAsset(String name, Type type) { }
	// Offset : 0x9730f0
	private Object LoadAsset_Internal(String name, Type type) { }
	// Offset : 0x973174
	public Object[] LoadAllAssets() { }
	// Offset : 0x9731f4
	public Object[] LoadAllAssets(Type type) { }
	// Offset : 0x973320
	public Void Unload(Boolean unloadAllLoadedObjects) { }
	// Offset : 0x973394
	public String[] GetAllScenePaths() { }
	// Offset : 0x97329c
	internal Object[] LoadAssetWithSubAssets_Internal(String name, Type type) { }
}

// Dll : UnityEngine.AssetBundleModule.dll
// Namespace: UnityEngine
public class AssetBundleCreateRequest : AsyncOperation
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.AssetBundleModule.dll
// Namespace: UnityEngine
public class AssetBundleManifest : Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x973400
	public String[] GetAllDependencies(String assetBundleName) { }
}

// Dll : UnityEngine.AssetBundleModule.dll
// Namespace: UnityEngine
public class AssetBundleRecompressOperation : AsyncOperation
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.AssetBundleModule.dll
// Namespace: UnityEngine
public class AssetBundleRequest : AsyncOperation
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: UnityEngine.Networking
public class UnityWebRequestAsyncOperation : AsyncOperation
{
	// Fields
	private UnityWebRequest <webRequest>k__BackingField; // 0x20

	// Properties
	internal UnityWebRequest webRequest { set; }

	// Methods
	// Offset : 0x9614fc
	public Void .ctor() { }
	// Offset : 0x9603e8
	internal Void set_webRequest(UnityWebRequest value) { }
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: UnityEngine.Networking
public class UnityWebRequest : IDisposable
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	internal DownloadHandler m_DownloadHandler; // 0x18
	internal UploadHandler m_UploadHandler; // 0x20
	internal CertificateHandler m_CertificateHandler; // 0x28
	internal Uri m_Uri; // 0x30
	private Boolean <disposeCertificateHandlerOnDispose>k__BackingField; // 0x38
	private Boolean <disposeDownloadHandlerOnDispose>k__BackingField; // 0x39
	private Boolean <disposeUploadHandlerOnDispose>k__BackingField; // 0x3a

	// Properties
	public Boolean disposeCertificateHandlerOnDispose { get; set; }
	public Boolean disposeDownloadHandlerOnDispose { get; set; }
	public Boolean disposeUploadHandlerOnDispose { get; set; }
	public String method { set; }
	public String error { get; }
	public String url { get; set; }
	public Int64 responseCode { get; }
	public Boolean isModifiable { get; }
	public Boolean isDone { get; }
	public Boolean isNetworkError { get; }
	public Boolean isHttpError { get; }
	public Single downloadProgress { get; }
	public UInt64 downloadedBytes { get; }
	public UploadHandler uploadHandler { get; set; }
	public DownloadHandler downloadHandler { get; set; }
	public CertificateHandler certificateHandler { get; }

	// Methods
	// Offset : 0x95f9b0
	public Void .ctor(String url) { }
	// Offset : 0x95faf0
	public Void .ctor(String url, String method, DownloadHandler downloadHandler, UploadHandler uploadHandler) { }
	// Offset : 0x95ff54
	private static String GetWebErrorString(UnityWebRequestError err) { }
	// Offset : 0x95ffc0
	internal static String GetHTTPStatusString(Int64 responseCode) { }
	// Offset : 0x96002c
	public Boolean get_disposeCertificateHandlerOnDispose() { }
	// Offset : 0x960034
	public Void set_disposeCertificateHandlerOnDispose(Boolean value) { }
	// Offset : 0x960040
	public Boolean get_disposeDownloadHandlerOnDispose() { }
	// Offset : 0x960048
	public Void set_disposeDownloadHandlerOnDispose(Boolean value) { }
	// Offset : 0x960054
	public Boolean get_disposeUploadHandlerOnDispose() { }
	// Offset : 0x96005c
	public Void set_disposeUploadHandlerOnDispose(Boolean value) { }
	// Offset : 0x95f9f8
	internal static IntPtr Create() { }
	// Offset : 0x960068
	private Void Release() { }
	// Offset : 0x9600d4
	internal Void InternalDestroy() { }
	// Offset : 0x95fa50
	private Void InternalSetDefaults() { }
	// Offset : 0x9601a8
	protected override Void Finalize() { }
	// Offset : 0x960284
	public Void Dispose() { }
	// Offset : 0x960224
	private Void DisposeHandlers() { }
	// Offset : 0x96032c
	internal UnityWebRequestAsyncOperation BeginWebRequest() { }
	// Offset : 0x960398
	public AsyncOperation Send() { }
	// Offset : 0x9603c0
	public UnityWebRequestAsyncOperation SendWebRequest() { }
	// Offset : 0x96013c
	public Void Abort() { }
	// Offset : 0x9603f0
	private UnityWebRequestError SetMethod(UnityWebRequestMethod methodType) { }
	// Offset : 0x960464
	internal Void InternalSetMethod(UnityWebRequestMethod methodType) { }
	// Offset : 0x9605b8
	private UnityWebRequestError SetCustomMethod(String customMethodName) { }
	// Offset : 0x96062c
	internal Void InternalSetCustomMethod(String customMethodName) { }
	// Offset : 0x95fb78
	public Void set_method(String value) { }
	// Offset : 0x960714
	private UnityWebRequestError GetError() { }
	// Offset : 0x960780
	public String get_error() { }
	// Offset : 0x9609c8
	public String get_url() { }
	// Offset : 0x95fa64
	public Void set_url(String value) { }
	// Offset : 0x9609cc
	private String GetUrl() { }
	// Offset : 0x960f18
	private UnityWebRequestError SetUrl(String url) { }
	// Offset : 0x960e30
	private Void InternalSetUrl(String url) { }
	// Offset : 0x96095c
	public Int64 get_responseCode() { }
	// Offset : 0x960f8c
	private Boolean IsExecuting() { }
	// Offset : 0x96054c
	public Boolean get_isModifiable() { }
	// Offset : 0x960ff8
	public Boolean get_isDone() { }
	// Offset : 0x960884
	public Boolean get_isNetworkError() { }
	// Offset : 0x9608f0
	public Boolean get_isHttpError() { }
	// Offset : 0x961064
	private Single GetDownloadProgress() { }
	// Offset : 0x9610d0
	public Single get_downloadProgress() { }
	// Offset : 0x961114
	public UInt64 get_downloadedBytes() { }
	// Offset : 0x961180
	internal UnityWebRequestError InternalSetRequestHeader(String name, String value) { }
	// Offset : 0x961204
	public Void SetRequestHeader(String name, String value) { }
	// Offset : 0x961370
	private UnityWebRequestError SetUploadHandler(UploadHandler uh) { }
	// Offset : 0x9602bc
	public UploadHandler get_uploadHandler() { }
	// Offset : 0x95fe68
	public Void set_uploadHandler(UploadHandler value) { }
	// Offset : 0x9613e4
	private UnityWebRequestError SetDownloadHandler(DownloadHandler dh) { }
	// Offset : 0x9602b4
	public DownloadHandler get_downloadHandler() { }
	// Offset : 0x95fd7c
	public Void set_downloadHandler(DownloadHandler value) { }
	// Offset : 0x960324
	public CertificateHandler get_certificateHandler() { }
	// Offset : 0x961458
	public static UnityWebRequest Get(String uri) { }
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: 
internal enum UnityWebRequestMethod
{
	// Fields
	public Int32 value__; // 0x10
	public const UnityWebRequestMethod Get = 0; // 0x0
	public const UnityWebRequestMethod Post = 1; // 0x0
	public const UnityWebRequestMethod Put = 2; // 0x0
	public const UnityWebRequestMethod Head = 3; // 0x0
	public const UnityWebRequestMethod Custom = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: 
internal enum UnityWebRequestError
{
	// Fields
	public Int32 value__; // 0x10
	public const UnityWebRequestError OK = 0; // 0x0
	public const UnityWebRequestError Unknown = 1; // 0x0
	public const UnityWebRequestError SDKError = 2; // 0x0
	public const UnityWebRequestError UnsupportedProtocol = 3; // 0x0
	public const UnityWebRequestError MalformattedUrl = 4; // 0x0
	public const UnityWebRequestError CannotResolveProxy = 5; // 0x0
	public const UnityWebRequestError CannotResolveHost = 6; // 0x0
	public const UnityWebRequestError CannotConnectToHost = 7; // 0x0
	public const UnityWebRequestError AccessDenied = 8; // 0x0
	public const UnityWebRequestError GenericHttpError = 9; // 0x0
	public const UnityWebRequestError WriteError = 10; // 0x0
	public const UnityWebRequestError ReadError = 11; // 0x0
	public const UnityWebRequestError OutOfMemory = 12; // 0x0
	public const UnityWebRequestError Timeout = 13; // 0x0
	public const UnityWebRequestError HTTPPostError = 14; // 0x0
	public const UnityWebRequestError SSLCannotConnect = 15; // 0x0
	public const UnityWebRequestError Aborted = 16; // 0x0
	public const UnityWebRequestError TooManyRedirects = 17; // 0x0
	public const UnityWebRequestError ReceivedNoData = 18; // 0x0
	public const UnityWebRequestError SSLNotSupported = 19; // 0x0
	public const UnityWebRequestError FailedToSendData = 20; // 0x0
	public const UnityWebRequestError FailedToReceiveData = 21; // 0x0
	public const UnityWebRequestError SSLCertificateError = 22; // 0x0
	public const UnityWebRequestError SSLCipherNotAvailable = 23; // 0x0
	public const UnityWebRequestError SSLCACertError = 24; // 0x0
	public const UnityWebRequestError UnrecognizedContentEncoding = 25; // 0x0
	public const UnityWebRequestError LoginFailed = 26; // 0x0
	public const UnityWebRequestError SSLShutdownFailed = 27; // 0x0
	public const UnityWebRequestError NoInternetConnection = 28; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: UnityEngine
public class WWWForm
{
	// Fields

	// Properties
	internal static Encoding DefaultEncoding { get; }

	// Methods
	// Offset : 0x9615e4
	internal static Encoding get_DefaultEncoding() { }
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: UnityEngine
internal class WWWTranscoder
{
	// Fields
	private static Byte[] ucHexChars; // 0x0
	private static Byte[] lcHexChars; // 0x8
	private static Byte urlEscapeChar; // 0x10
	private static Byte[] urlSpace; // 0x18
	private static Byte[] dataSpace; // 0x20
	private static Byte[] urlForbidden; // 0x28
	private static Byte qpEscapeChar; // 0x30
	private static Byte[] qpSpace; // 0x38
	private static Byte[] qpForbidden; // 0x40

	// Properties

	// Methods
	// Offset : 0x961644
	private static Byte Hex2Byte(Byte[] b, Int32 offset) { }
	// Offset : 0x961730
	public static Byte[] URLDecode(Byte[] toEncode) { }
	// Offset : 0x961b2c
	private static Boolean ByteSubArrayEquals(Byte[] array, Int32 index, Byte[] comperand) { }
	// Offset : 0x9617a4
	public static Byte[] Decode(Byte[] input, Byte escapeChar, Byte[] space) { }
	// Offset : 0x961c18
	private static Void .cctor() { }
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: UnityEngineInternal
internal static class WebRequestUtils
{
	// Fields
	private static Regex domainRegex; // 0x0

	// Properties

	// Methods
	// Offset : 0x961eb0
	internal static String RedirectTo(String baseUri, String redirectUri) { }
	// Offset : 0x960a38
	internal static String MakeInitialUrl(String targetUrl, String localUrl) { }
	// Offset : 0x961fe0
	internal static String MakeUriString(Uri targetUri, String targetUrl, Boolean prependProtocol) { }
	// Offset : 0x962580
	private static String URLDecode(String encoded) { }
	// Offset : 0x962694
	private static Void .cctor() { }
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: UnityEngine.Networking
public class CertificateHandler : IDisposable
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties

	// Methods
	// Offset : 0x95ef84
	private Void Release() { }
	// Offset : 0x95eff0
	protected override Void Finalize() { }
	// Offset : 0x95f0c4
	protected virtual Boolean ValidateCertificate(Byte[] certificateData) { }
	// Offset : 0x95f0cc
	internal Boolean ValidateCertificateNative(Byte[] certificateData) { }
	// Offset : 0x95f064
	public Void Dispose() { }
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: UnityEngine.Networking
public class DownloadHandler : IDisposable
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties
	public Byte[] data { get; }
	public String text { get; }

	// Methods
	// Offset : 0x95f114
	internal Void .ctor() { }
	// Offset : 0x95f11c
	private Void Release() { }
	// Offset : 0x95f188
	protected override Void Finalize() { }
	// Offset : 0x95f1fc
	public Void Dispose() { }
	// Offset : 0x95f25c
	public Byte[] get_data() { }
	// Offset : 0x95f29c
	public String get_text() { }
	// Offset : 0x95f2dc
	protected virtual Byte[] GetData() { }
	// Offset : 0x95f2e4
	protected virtual String GetText() { }
	// Offset : 0x95f3d0
	private Encoding GetTextEncoder() { }
	// Offset : 0x95f744
	private String GetContentType() { }
	// Offset : 0x95f7b0
	protected virtual Boolean ReceiveData(Byte[] data, Int32 dataLength) { }
	// Offset : 0x95f7b8
	protected virtual Void CompleteContent() { }
	// Offset : 0x95f7bc
	internal static Byte[] InternalGetByteArray(DownloadHandler dh) { }
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: UnityEngine.Networking
public sealed class DownloadHandlerBuffer : DownloadHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x95f828
	public Void .ctor() { }
	// Offset : 0x95f87c
	private static IntPtr Create(DownloadHandlerBuffer obj) { }
	// Offset : 0x95f858
	private Void InternalCreateBuffer() { }
	// Offset : 0x95f8e8
	protected override Byte[] GetData() { }
	// Offset : 0x95f8ec
	private Byte[] InternalGetData() { }
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: UnityEngine.Networking
public class DownloadHandlerScript : DownloadHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x95f8f0
	public Void .ctor() { }
	// Offset : 0x95f944
	private static IntPtr Create(DownloadHandlerScript obj) { }
	// Offset : 0x95f920
	private Void InternalCreateScript() { }
}

// Dll : UnityEngine.UnityWebRequestModule.dll
// Namespace: UnityEngine.Networking
public class UploadHandler : IDisposable
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties

	// Methods
	// Offset : 0x961504
	private Void Release() { }
	// Offset : 0x961570
	protected override Void Finalize() { }
	// Offset : 0x9602c4
	public Void Dispose() { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
internal class AudioExtensionDefinition
{
	// Fields
	private String assemblyName; // 0x10
	private String extensionNamespace; // 0x18
	private String extensionTypeName; // 0x20
	private Type extensionType; // 0x28

	// Properties

	// Methods
	// Offset : 0x959f5c
	public Type GetExtensionType() { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
internal class AudioSpatializerExtensionDefinition
{
	// Fields
	public PropertyName spatializerName; // 0x10
	public AudioExtensionDefinition definition; // 0x18

	// Properties

	// Methods
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
internal class AudioAmbisonicExtensionDefinition
{
	// Fields
	public PropertyName ambisonicPluginName; // 0x10
	public AudioExtensionDefinition definition; // 0x18

	// Properties

	// Methods
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
internal class AudioListenerExtension : ScriptableObject
{
	// Fields
	private AudioListener m_audioListener; // 0x18

	// Properties
	public AudioListener audioListener { get; set; }

	// Methods
	// Offset : 0x95c298
	public Void .ctor() { }
	// Offset : 0x95b4dc
	public AudioListener get_audioListener() { }
	// Offset : 0x95b2a0
	public Void set_audioListener(AudioListener value) { }
	// Offset : 0x95c2a0
	public virtual Single ReadExtensionProperty(PropertyName propertyName) { }
	// Offset : 0x95c2a8
	public virtual Void WriteExtensionProperty(PropertyName propertyName, Single propertyValue) { }
	// Offset : 0x95c2ac
	public virtual Void ExtensionUpdate() { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
internal class AudioSourceExtension : ScriptableObject
{
	// Fields
	private AudioSource m_audioSource; // 0x18
	internal Int32 m_ExtensionManagerUpdateIndex; // 0x20

	// Properties
	public AudioSource audioSource { get; set; }

	// Methods
	// Offset : 0x95d2bc
	public Void .ctor() { }
	// Offset : 0x95ad34
	public AudioSource get_audioSource() { }
	// Offset : 0x95a744
	public Void set_audioSource(AudioSource value) { }
	// Offset : 0x95d2cc
	public virtual Single ReadExtensionProperty(PropertyName propertyName) { }
	// Offset : 0x95d2d4
	public virtual Void WriteExtensionProperty(PropertyName propertyName, Single propertyValue) { }
	// Offset : 0x95d2d8
	public virtual Void Play() { }
	// Offset : 0x95d2dc
	public virtual Void Stop() { }
	// Offset : 0x95d2e0
	public virtual Void ExtensionUpdate() { }
	// Offset : 0x95d2e4
	public Void OnDestroy() { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
internal sealed class AudioExtensionManager
{
	// Fields
	private static List`1 m_ListenerSpatializerExtensionDefinitions; // 0x0
	private static List`1 m_SourceSpatializerExtensionDefinitions; // 0x8
	private static List`1 m_SourceAmbisonicDecoderExtensionDefinitions; // 0x10
	private static List`1 m_SourceExtensionsToUpdate; // 0x18
	private static Int32 m_NextStopIndex; // 0x20
	private static Boolean m_BuiltinDefinitionsRegistered; // 0x24
	private static PropertyName m_SpatializerName; // 0x28
	private static PropertyName m_SpatializerExtensionName; // 0x2c
	private static PropertyName m_ListenerSpatializerExtensionName; // 0x30

	// Properties

	// Methods
	// Offset : 0x95a1d4
	internal static AudioSourceExtension AddSpatializerExtension(AudioSource source) { }
	// Offset : 0x95a980
	internal static AudioSourceExtension AddAmbisonicDecoderExtension(AudioSource source) { }
	// Offset : 0x95a74c
	internal static Void WriteExtensionProperties(AudioSourceExtension extension, String extensionName) { }
	// Offset : 0x95ae90
	internal static AudioListenerExtension AddSpatializerExtension(AudioListener listener) { }
	// Offset : 0x95b2a8
	internal static Void WriteExtensionProperties(AudioListenerExtension extension, String extensionName) { }
	// Offset : 0x95b638
	internal static Void AddExtensionToManager(AudioSourceExtension extension) { }
	// Offset : 0x95b738
	internal static Void RemoveExtensionFromManager(AudioSourceExtension extension) { }
	// Offset : 0x95b920
	internal static Void Update() { }
	// Offset : 0x95bef0
	internal static Void GetReadyToPlay(AudioSourceExtension extension) { }
	// Offset : 0x95a4fc
	private static Void RegisterBuiltinDefinitions() { }
	// Offset : 0x95be2c
	internal static Object GetAudioListener() { }
	// Offset : 0x95bfc8
	private static Void .cctor() { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine.Audio
public struct AudioPlayableOutput : IPlayableOutput
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x10

	// Properties

	// Methods
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine.Audio
public struct AudioClipPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10

	// Properties

	// Methods
	// Offset : 0x2d3254
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d3260
	public Boolean Equals(AudioClipPlayable other) { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine.Audio
public struct AudioMixerPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10

	// Properties

	// Methods
	// Offset : 0x2d3268
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d3274
	public Boolean Equals(AudioMixerPlayable other) { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine.Experimental.Audio
public class AudioSampleProvider : IDisposable
{
	// Fields
	private ConsumeSampleFramesNativeFunction m_ConsumeSampleFramesNativeFunction; // 0x10
	private UInt32 <id>k__BackingField; // 0x18
	private UInt16 <trackIndex>k__BackingField; // 0x1c
	private Object <owner>k__BackingField; // 0x20
	private UInt16 <channelCount>k__BackingField; // 0x28
	private UInt32 <sampleRate>k__BackingField; // 0x2c
	private SampleFramesHandler sampleFramesAvailable; // 0x30
	private SampleFramesHandler sampleFramesOverflow; // 0x38

	// Properties
	public UInt32 id { get; set; }

	// Methods
	// Offset : 0x95d45c
	protected override Void Finalize() { }
	// Offset : 0x95d4d0
	public Void Dispose() { }
	// Offset : 0x95d508
	public UInt32 get_id() { }
	// Offset : 0x95d584
	private Void set_id(UInt32 value) { }
	// Offset : 0x95d58c
	private Void InvokeSampleFramesAvailable(Int32 sampleFrameCount) { }
	// Offset : 0x95da90
	private Void InvokeSampleFramesOverflow(Int32 droppedSampleFrameCount) { }
	// Offset : 0x95d510
	private static Void InternalSetScriptingPtr(UInt32 providerId, AudioSampleProvider provider) { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: 
public sealed class ConsumeSampleFramesNativeFunction : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x95dab4
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x95dac4
	public virtual UInt32 Invoke(UInt32 providerId, IntPtr interleavedSampleFrames, UInt32 sampleFrameCount) { }
	// Offset : 0x95ddcc
	public virtual IAsyncResult BeginInvoke(UInt32 providerId, IntPtr interleavedSampleFrames, UInt32 sampleFrameCount, AsyncCallback callback, Object object) { }
	// Offset : 0x95de90
	public virtual UInt32 EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: 
public sealed class SampleFramesHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x95decc
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x95d5b0
	public virtual Void Invoke(AudioSampleProvider provider, UInt32 sampleFrameCount) { }
	// Offset : 0x95dedc
	public virtual IAsyncResult BeginInvoke(AudioSampleProvider provider, UInt32 sampleFrameCount, AsyncCallback callback, Object object) { }
	// Offset : 0x95df78
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
public sealed class AudioSettings
{
	// Fields
	private static AudioConfigurationChangeHandler OnAudioConfigurationChanged; // 0x0

	// Properties

	// Methods
	// Offset : 0x95a610
	public static String GetSpatializerPluginName() { }
	// Offset : 0x95c2b0
	internal static Void InvokeOnAudioConfigurationChanged(Boolean deviceWasChanged) { }
	// Offset : 0x95c5e0
	internal static Void InvokeOnAudioManagerUpdate() { }
	// Offset : 0x95c63c
	internal static Void InvokeOnAudioSourcePlay(AudioSource source) { }
	// Offset : 0x95ac00
	internal static String GetAmbisonicDecoderPluginName() { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: 
public sealed class AudioConfigurationChangeHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x95c868
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x95c31c
	public virtual Void Invoke(Boolean deviceWasChanged) { }
	// Offset : 0x95c878
	public virtual IAsyncResult BeginInvoke(Boolean deviceWasChanged, AsyncCallback callback, Object object) { }
	// Offset : 0x95c908
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
public sealed class AudioClip : Object
{
	// Fields
	private PCMReaderCallback m_PCMReaderCallback; // 0x18
	private PCMSetPositionCallback m_PCMSetPositionCallback; // 0x20

	// Properties
	public Single length { get; }
	public Boolean ambisonic { get; }

	// Methods
	// Offset : 0x959584
	private Void .ctor() { }
	// Offset : 0x9595f0
	public Single get_length() { }
	// Offset : 0x95965c
	public Boolean get_ambisonic() { }
	// Offset : 0x9596c8
	private Void InvokePCMReaderCallback_Internal(Single[] data) { }
	// Offset : 0x959b9c
	private Void InvokePCMSetPositionCallback_Internal(Int32 position) { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: 
public sealed class PCMReaderCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x959e74
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x9596dc
	public virtual Void Invoke(Single[] data) { }
	// Offset : 0x959e84
	public virtual IAsyncResult BeginInvoke(Single[] data, AsyncCallback callback, Object object) { }
	// Offset : 0x959ea8
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: 
public sealed class PCMSetPositionCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x959eb4
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x959bb0
	public virtual Void Invoke(Int32 position) { }
	// Offset : 0x959ec4
	public virtual IAsyncResult BeginInvoke(Int32 position, AsyncCallback callback, Object object) { }
	// Offset : 0x959f50
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
public class AudioBehaviour : Behaviour
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
public sealed class AudioListener : AudioBehaviour
{
	// Fields
	internal AudioListenerExtension spatializerExtension; // 0x18

	// Properties

	// Methods
	// Offset : 0x95b5a8
	internal Int32 GetNumExtensionProperties() { }
	// Offset : 0x95b4e4
	internal PropertyName ReadExtensionName(Int32 listenerIndex) { }
	// Offset : 0x95c11c
	private static Void INTERNAL_CALL_ReadExtensionName(AudioListener self, Int32 listenerIndex, out PropertyName value) { }
	// Offset : 0x95b50c
	internal PropertyName ReadExtensionPropertyName(Int32 listenerIndex) { }
	// Offset : 0x95c1a0
	private static Void INTERNAL_CALL_ReadExtensionPropertyName(AudioListener self, Int32 listenerIndex, out PropertyName value) { }
	// Offset : 0x95b534
	internal Single ReadExtensionPropertyValue(Int32 listenerIndex) { }
	// Offset : 0x95b614
	internal Void ClearExtensionProperties(PropertyName extensionName) { }
	// Offset : 0x95c224
	private static Void INTERNAL_CALL_ClearExtensionProperties(AudioListener self, ref PropertyName extensionName) { }
	// Offset : 0x95b1c4
	internal AudioListenerExtension AddExtension(Type extensionType) { }
}

// Dll : UnityEngine.AudioModule.dll
// Namespace: UnityEngine
public sealed class AudioSource : AudioBehaviour
{
	// Fields
	internal AudioSourceExtension spatializerExtension; // 0x18
	internal AudioSourceExtension ambisonicExtension; // 0x20

	// Properties
	public Single volume { get; set; }
	public Single time { set; }
	public AudioClip clip { get; set; }
	public Boolean isPlaying { get; }
	public Boolean loop { set; }
	public Single spatialBlend { set; }
	internal Boolean spatializeInternal { get; }
	public Boolean spatialize { get; }

	// Methods
	// Offset : 0x95c914
	public Single get_volume() { }
	// Offset : 0x95c980
	public Void set_volume(Single value) { }
	// Offset : 0x95c9f4
	public Void set_time(Single value) { }
	// Offset : 0x95c7fc
	public AudioClip get_clip() { }
	// Offset : 0x95ca68
	public Void set_clip(AudioClip value) { }
	// Offset : 0x95cadc
	public Void Play(UInt64 delay) { }
	// Offset : 0x95cb50
	public Void Play() { }
	// Offset : 0x95cb58
	public Void Stop() { }
	// Offset : 0x95be84
	public Boolean get_isPlaying() { }
	// Offset : 0x95cbc4
	public Void PlayOneShot(AudioClip clip, Single volumeScale) { }
	// Offset : 0x95ccf0
	private Void PlayOneShotHelper(AudioClip clip, Single volumeScale) { }
	// Offset : 0x95cd7c
	public static Void PlayClipAtPoint(AudioClip clip, Vector3 position, Single volume) { }
	// Offset : 0x95d060
	public Void set_loop(Boolean value) { }
	// Offset : 0x95cfec
	public Void set_spatialBlend(Single value) { }
	// Offset : 0x95d0d4
	internal Boolean get_spatializeInternal() { }
	// Offset : 0x95a4f8
	public Boolean get_spatialize() { }
	// Offset : 0x95ae00
	internal Int32 GetNumExtensionProperties() { }
	// Offset : 0x95ad3c
	internal PropertyName ReadExtensionName(Int32 sourceIndex) { }
	// Offset : 0x95d140
	private static Void INTERNAL_CALL_ReadExtensionName(AudioSource self, Int32 sourceIndex, out PropertyName value) { }
	// Offset : 0x95ad64
	internal PropertyName ReadExtensionPropertyName(Int32 sourceIndex) { }
	// Offset : 0x95d1c4
	private static Void INTERNAL_CALL_ReadExtensionPropertyName(AudioSource self, Int32 sourceIndex, out PropertyName value) { }
	// Offset : 0x95ad8c
	internal Single ReadExtensionPropertyValue(Int32 sourceIndex) { }
	// Offset : 0x95ae6c
	internal Void ClearExtensionProperties(PropertyName extensionName) { }
	// Offset : 0x95d248
	private static Void INTERNAL_CALL_ClearExtensionProperties(AudioSource self, ref PropertyName extensionName) { }
	// Offset : 0x95a668
	internal AudioSourceExtension AddSpatializerExtension(Type extensionType) { }
	// Offset : 0x95ac58
	internal AudioSourceExtension AddAmbisonicExtension(Type extensionType) { }
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
public enum FontStyle
{
	// Fields
	public Int32 value__; // 0x10
	public const FontStyle Normal = 0; // 0x0
	public const FontStyle Bold = 1; // 0x0
	public const FontStyle Italic = 2; // 0x0
	public const FontStyle BoldAndItalic = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
internal enum TextGenerationError
{
	// Fields
	public Int32 value__; // 0x10
	public const TextGenerationError None = 0; // 0x0
	public const TextGenerationError CustomSizeOnNonDynamicFont = 1; // 0x0
	public const TextGenerationError CustomStyleOnNonDynamicFont = 2; // 0x0
	public const TextGenerationError NoFont = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
public struct TextGenerationSettings
{
	// Fields
	public Font font; // 0x10
	public Color color; // 0x18
	public Int32 fontSize; // 0x28
	public Single lineSpacing; // 0x2c
	public Boolean richText; // 0x30
	public Single scaleFactor; // 0x34
	public FontStyle fontStyle; // 0x38
	public TextAnchor textAnchor; // 0x3c
	public Boolean alignByGeometry; // 0x40
	public Boolean resizeTextForBestFit; // 0x41
	public Int32 resizeTextMinSize; // 0x44
	public Int32 resizeTextMaxSize; // 0x48
	public Boolean updateBounds; // 0x4c
	public VerticalWrapMode verticalOverflow; // 0x50
	public HorizontalWrapMode horizontalOverflow; // 0x54
	public Vector2 generationExtents; // 0x58
	public Vector2 pivot; // 0x60
	public Boolean generateOutOfBounds; // 0x68

	// Properties

	// Methods
	// Offset : 0x2d3930
	private Boolean CompareColors(Color left, Color right) { }
	// Offset : 0x2d3934
	private Boolean CompareVector2(Vector2 left, Vector2 right) { }
	// Offset : 0x2d3938
	public Boolean Equals(TextGenerationSettings other) { }
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
public sealed class TextGenerator : IDisposable
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private String m_LastString; // 0x18
	private TextGenerationSettings m_LastSettings; // 0x20
	private Boolean m_HasGenerated; // 0x80
	private TextGenerationError m_LastValid; // 0x84
	private readonly List`1 m_Verts; // 0x88
	private readonly List`1 m_Characters; // 0x90
	private readonly List`1 m_Lines; // 0x98
	private Boolean m_CachedVerts; // 0xa0
	private Boolean m_CachedCharacters; // 0xa1
	private Boolean m_CachedLines; // 0xa2

	// Properties
	public Int32 characterCountVisible { get; }
	public IList`1 verts { get; }
	public IList`1 characters { get; }
	public IList`1 lines { get; }
	public Rect rectExtents { get; }
	public Int32 characterCount { get; }
	public Int32 lineCount { get; }

	// Methods
	// Offset : 0x96b460
	public Void .ctor() { }
	// Offset : 0x96b468
	public Void .ctor(Int32 initialCapacity) { }
	// Offset : 0x96b5a8
	protected override Void Finalize() { }
	// Offset : 0x96b6e0
	private Void System.IDisposable.Dispose() { }
	// Offset : 0x96b7ac
	public Int32 get_characterCountVisible() { }
	// Offset : 0x96b830
	private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings) { }
	// Offset : 0x96bb24
	public Void Invalidate() { }
	// Offset : 0x96bb2c
	public Void GetCharacters(List`1 characters) { }
	// Offset : 0x96bba4
	public Void GetLines(List`1 lines) { }
	// Offset : 0x96bc1c
	public Void GetVertices(List`1 vertices) { }
	// Offset : 0x96bc94
	public Single GetPreferredWidth(String str, TextGenerationSettings settings) { }
	// Offset : 0x96bd94
	public Single GetPreferredHeight(String str, TextGenerationSettings settings) { }
	// Offset : 0x96be10
	public Boolean PopulateWithErrors(String str, TextGenerationSettings settings, GameObject context) { }
	// Offset : 0x96bd14
	public Boolean Populate(String str, TextGenerationSettings settings) { }
	// Offset : 0x96c004
	private TextGenerationError PopulateWithError(String str, TextGenerationSettings settings) { }
	// Offset : 0x96c0e8
	private TextGenerationError PopulateAlways(String str, TextGenerationSettings settings) { }
	// Offset : 0x96c3b0
	public IList`1 get_verts() { }
	// Offset : 0x96c3ec
	public IList`1 get_characters() { }
	// Offset : 0x96c428
	public IList`1 get_lines() { }
	// Offset : 0x96bd68
	public Rect get_rectExtents() { }
	// Offset : 0x96b7c4
	public Int32 get_characterCount() { }
	// Offset : 0x96c4d8
	public Int32 get_lineCount() { }
	// Offset : 0x96b550
	private static IntPtr Internal_Create() { }
	// Offset : 0x96b740
	private static Void Internal_Destroy(IntPtr ptr) { }
	// Offset : 0x96c544
	internal Boolean Populate_Internal(String str, Font font, Color color, Int32 fontSize, Single scaleFactor, Single lineSpacing, FontStyle style, Boolean richText, Boolean resizeTextForBestFit, Int32 resizeTextMinSize, Int32 resizeTextMaxSize, Int32 verticalOverFlow, Int32 horizontalOverflow, Boolean updateBounds, TextAnchor anchor, Single extentsX, Single extentsY, Single pivotX, Single pivotY, Boolean generateOutOfBounds, Boolean alignByGeometry, out UInt32 error) { }
	// Offset : 0x96c204
	internal Boolean Populate_Internal(String str, Font font, Color color, Int32 fontSize, Single scaleFactor, Single lineSpacing, FontStyle style, Boolean richText, Boolean resizeTextForBestFit, Int32 resizeTextMinSize, Int32 resizeTextMaxSize, VerticalWrapMode verticalOverFlow, HorizontalWrapMode horizontalOverflow, Boolean updateBounds, TextAnchor anchor, Vector2 extents, Vector2 pivot, Boolean generateOutOfBounds, Boolean alignByGeometry, out TextGenerationError error) { }
	// Offset : 0x96bc20
	private Void GetVerticesInternal(Object vertices) { }
	// Offset : 0x96bb30
	private Void GetCharactersInternal(Object characters) { }
	// Offset : 0x96bba8
	private Void GetLinesInternal(Object lines) { }
	// Offset : 0x96c464
	private Void get_rectExtents_Injected(out Rect ret) { }
	// Offset : 0x96c600
	private Boolean Populate_Internal_Injected(String str, Font font, ref Color color, Int32 fontSize, Single scaleFactor, Single lineSpacing, FontStyle style, Boolean richText, Boolean resizeTextForBestFit, Int32 resizeTextMinSize, Int32 resizeTextMaxSize, Int32 verticalOverFlow, Int32 horizontalOverflow, Boolean updateBounds, TextAnchor anchor, Single extentsX, Single extentsY, Single pivotX, Single pivotY, Boolean generateOutOfBounds, Boolean alignByGeometry, out UInt32 error) { }
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
public enum TextAnchor
{
	// Fields
	public Int32 value__; // 0x10
	public const TextAnchor UpperLeft = 0; // 0x0
	public const TextAnchor UpperCenter = 1; // 0x0
	public const TextAnchor UpperRight = 2; // 0x0
	public const TextAnchor MiddleLeft = 3; // 0x0
	public const TextAnchor MiddleCenter = 4; // 0x0
	public const TextAnchor MiddleRight = 5; // 0x0
	public const TextAnchor LowerLeft = 6; // 0x0
	public const TextAnchor LowerCenter = 7; // 0x0
	public const TextAnchor LowerRight = 8; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
public enum HorizontalWrapMode
{
	// Fields
	public Int32 value__; // 0x10
	public const HorizontalWrapMode Wrap = 0; // 0x0
	public const HorizontalWrapMode Overflow = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
public enum VerticalWrapMode
{
	// Fields
	public Int32 value__; // 0x10
	public const VerticalWrapMode Truncate = 0; // 0x0
	public const VerticalWrapMode Overflow = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
public struct UICharInfo
{
	// Fields
	public Vector2 cursorPos; // 0x10
	public Single charWidth; // 0x18

	// Properties

	// Methods
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
public struct UILineInfo
{
	// Fields
	public Int32 startCharIdx; // 0x10
	public Int32 height; // 0x14
	public Single topY; // 0x18
	public Single leading; // 0x1c

	// Properties

	// Methods
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
public struct UIVertex
{
	// Fields
	public Vector3 position; // 0x10
	public Vector3 normal; // 0x1c
	public Vector4 tangent; // 0x28
	public Color32 color; // 0x38
	public Vector2 uv0; // 0x3c
	public Vector2 uv1; // 0x44
	public Vector2 uv2; // 0x4c
	public Vector2 uv3; // 0x54
	private static readonly Color32 s_DefaultColor; // 0x0
	private static readonly Vector4 s_DefaultTangent; // 0x4
	public static UIVertex simpleVert; // 0x14

	// Properties

	// Methods
	// Offset : 0x96c75c
	private static Void .cctor() { }
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: UnityEngine
public sealed class Font : Object
{
	// Fields
	private static Action`1 textureRebuilt; // 0x0
	private FontTextureRebuildCallback m_FontTextureRebuildCallback; // 0x18

	// Properties
	public Material material { get; }
	public Boolean dynamic { get; }
	public Int32 fontSize { get; }

	// Methods
	// Offset : 0x96a8b8
	public static Void add_textureRebuilt(Action`1 value) { }
	// Offset : 0x96a9b8
	public static Void remove_textureRebuilt(Action`1 value) { }
	// Offset : 0x96aab8
	public Material get_material() { }
	// Offset : 0x96ab24
	public Boolean get_dynamic() { }
	// Offset : 0x96ab90
	public Int32 get_fontSize() { }
	// Offset : 0x96abfc
	internal static Void InvokeTextureRebuilt_Internal(Font font) { }
	// Offset : 0x96af24
	public Boolean HasCharacter(Char c) { }
	// Offset : 0x96af2c
	private Boolean HasCharacter(Int32 c) { }
}

// Dll : UnityEngine.TextRenderingModule.dll
// Namespace: 
public sealed class FontTextureRebuildCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x96afa0
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x96ac8c
	public virtual Void Invoke() { }
	// Offset : 0x96afb0
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x96afe4
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.UnityWebRequestAssetBundleModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.UnityWebRequestAssetBundleModule.dll
// Namespace: UnityEngine.Networking
public static class UnityWebRequestAssetBundle
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x9750fc
	public static UnityWebRequest GetAssetBundle(String uri, CachedAssetBundle cachedAssetBundle, UInt32 crc) { }
}

// Dll : UnityEngine.UnityWebRequestAssetBundleModule.dll
// Namespace: UnityEngine.Networking
public sealed class DownloadHandlerAssetBundle : DownloadHandler
{
	// Fields

	// Properties
	public AssetBundle assetBundle { get; }

	// Methods
	// Offset : 0x974e28
	public Void .ctor(String url, CachedAssetBundle cachedBundle, UInt32 crc) { }
	// Offset : 0x974ee4
	private static IntPtr CreateCached(DownloadHandlerAssetBundle obj, String url, String name, Hash128 hash, UInt32 crc) { }
	// Offset : 0x974eac
	private Void InternalCreateAssetBundleCached(String url, String name, Hash128 hash, UInt32 crc) { }
	// Offset : 0x974fa8
	protected override Byte[] GetData() { }
	// Offset : 0x97501c
	protected override String GetText() { }
	// Offset : 0x975090
	public AssetBundle get_assetBundle() { }
	// Offset : 0x974f0c
	private static IntPtr CreateCached_Injected(DownloadHandlerAssetBundle obj, String url, String name, ref Hash128 hash, UInt32 crc) { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Experimental.Animations
public interface IAnimationJobPlayable : IPlayable
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public sealed class SharedBetweenAnimatorsAttribute : Attribute
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public abstract class StateMachineBehaviour : ScriptableObject
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x969878
	protected Void .ctor() { }
	// Offset : 0x969880
	public virtual Void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex) { }
	// Offset : 0x969884
	public virtual Void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex) { }
	// Offset : 0x969888
	public virtual Void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex) { }
	// Offset : 0x96988c
	public virtual Void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex) { }
	// Offset : 0x969890
	public virtual Void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex) { }
	// Offset : 0x969894
	public virtual Void OnStateMachineEnter(Animator animator, Int32 stateMachinePathHash) { }
	// Offset : 0x969898
	public virtual Void OnStateMachineExit(Animator animator, Int32 stateMachinePathHash) { }
	// Offset : 0x96989c
	public virtual Void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex, AnimatorControllerPlayable controller) { }
	// Offset : 0x9698a0
	public virtual Void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex, AnimatorControllerPlayable controller) { }
	// Offset : 0x9698a4
	public virtual Void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex, AnimatorControllerPlayable controller) { }
	// Offset : 0x9698a8
	public virtual Void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex, AnimatorControllerPlayable controller) { }
	// Offset : 0x9698ac
	public virtual Void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex, AnimatorControllerPlayable controller) { }
	// Offset : 0x9698b0
	public virtual Void OnStateMachineEnter(Animator animator, Int32 stateMachinePathHash, AnimatorControllerPlayable controller) { }
	// Offset : 0x9698b4
	public virtual Void OnStateMachineExit(Animator animator, Int32 stateMachinePathHash, AnimatorControllerPlayable controller) { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Animations
public struct AnimationClipPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10

	// Properties

	// Methods
	// Offset : 0x2d354c
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d3558
	public Boolean Equals(AnimationClipPlayable other) { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Experimental.Animations
public struct AnimationHumanStream
{
	// Fields
	private IntPtr stream; // 0x10

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Animations
public struct AnimationLayerMixerPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10
	private static readonly AnimationLayerMixerPlayable m_NullPlayable; // 0x0

	// Properties

	// Methods
	// Offset : 0x2d3560
	internal Void .ctor(PlayableHandle handle) { }
	// Offset : 0x2d3568
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d3574
	public Boolean Equals(AnimationLayerMixerPlayable other) { }
	// Offset : 0x967ee0
	private static Void .cctor() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Animations
public struct AnimationMixerPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10
	private static readonly AnimationMixerPlayable m_NullPlayable; // 0x0

	// Properties

	// Methods
	// Offset : 0x2d357c
	internal Void .ctor(PlayableHandle handle) { }
	// Offset : 0x2d3584
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d3590
	public Boolean Equals(AnimationMixerPlayable other) { }
	// Offset : 0x9680d4
	private static Void .cctor() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Animations
internal struct AnimationMotionXToDeltaPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10
	private static readonly AnimationMotionXToDeltaPlayable m_NullPlayable; // 0x0

	// Properties

	// Methods
	// Offset : 0x2d3598
	private Void .ctor(PlayableHandle handle) { }
	// Offset : 0x2d35a0
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d35ac
	public Boolean Equals(AnimationMotionXToDeltaPlayable other) { }
	// Offset : 0x9682c8
	private static Void .cctor() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Animations
internal struct AnimationOffsetPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10
	private static readonly AnimationOffsetPlayable m_NullPlayable; // 0x0

	// Properties

	// Methods
	// Offset : 0x2d35b4
	internal Void .ctor(PlayableHandle handle) { }
	// Offset : 0x2d35bc
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d35c8
	public Boolean Equals(AnimationOffsetPlayable other) { }
	// Offset : 0x968510
	private static Void .cctor() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Animations
public struct AnimationPlayableOutput : IPlayableOutput
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x10

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Animations
internal struct AnimationPosePlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10
	private static readonly AnimationPosePlayable m_NullPlayable; // 0x0

	// Properties

	// Methods
	// Offset : 0x2d35d0
	internal Void .ctor(PlayableHandle handle) { }
	// Offset : 0x2d35d8
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d35e4
	public Boolean Equals(AnimationPosePlayable other) { }
	// Offset : 0x968758
	private static Void .cctor() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Animations
internal struct AnimationRemoveScalePlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10
	private static readonly AnimationRemoveScalePlayable m_NullPlayable; // 0x0

	// Properties

	// Methods
	// Offset : 0x2d35ec
	internal Void .ctor(PlayableHandle handle) { }
	// Offset : 0x2d35f4
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d3600
	public Boolean Equals(AnimationRemoveScalePlayable other) { }
	// Offset : 0x9689a0
	private static Void .cctor() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Experimental.Animations
public struct AnimationScriptPlayable : IAnimationJobPlayable, IEquatable`1, IPlayable
{
	// Fields
	private PlayableHandle m_Handle; // 0x10
	private static readonly AnimationScriptPlayable m_NullPlayable; // 0x0

	// Properties

	// Methods
	// Offset : 0x2d36e4
	internal Void .ctor(PlayableHandle handle) { }
	// Offset : 0x2d36ec
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d36f8
	public Boolean Equals(AnimationScriptPlayable other) { }
	// Offset : 0x969770
	private static Void .cctor() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Experimental.Animations
public struct AnimationStream
{
	// Fields
	private UInt32 m_AnimatorBindingsVersion; // 0x10
	private IntPtr constant; // 0x18
	private IntPtr input; // 0x20
	private IntPtr output; // 0x28
	private IntPtr workspace; // 0x30
	private IntPtr inputStreamAccessor; // 0x38
	private IntPtr animationHandleBinder; // 0x40

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public struct AnimatorClipInfo
{
	// Fields
	private Int32 m_ClipInstanceID; // 0x10
	private Single m_Weight; // 0x14

	// Properties
	public Single weight { get; }

	// Methods
	// Offset : 0x2d362c
	public Single get_weight() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public struct AnimatorStateInfo
{
	// Fields
	private Int32 m_Name; // 0x10
	private Int32 m_Path; // 0x14
	private Int32 m_FullPath; // 0x18
	private Single m_NormalizedTime; // 0x1c
	private Single m_Length; // 0x20
	private Single m_Speed; // 0x24
	private Single m_SpeedMultiplier; // 0x28
	private Int32 m_Tag; // 0x2c
	private Int32 m_Loop; // 0x30

	// Properties
	public Single normalizedTime { get; }

	// Methods
	// Offset : 0x2d3640
	public Single get_normalizedTime() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public struct AnimatorTransitionInfo
{
	// Fields
	private Int32 m_FullPath; // 0x10
	private Int32 m_UserName; // 0x14
	private Int32 m_Name; // 0x18
	private Boolean m_HasFixedDuration; // 0x1c
	private Single m_Duration; // 0x20
	private Single m_NormalizedTime; // 0x24
	private Boolean m_AnyState; // 0x28
	private Int32 m_TransitionType; // 0x2c

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public class Animator : Behaviour
{
	// Fields

	// Properties
	public Single speed { set; }
	public RuntimeAnimatorController runtimeAnimatorController { get; set; }
	public Boolean hasBoundPlayables { get; }

	// Methods
	// Offset : 0x968cf8
	public Void SetFloat(String name, Single value) { }
	// Offset : 0x968d88
	public Void SetTrigger(String name) { }
	// Offset : 0x968e00
	public Void ResetTrigger(String name) { }
	// Offset : 0x968e78
	public Void set_speed(Single value) { }
	// Offset : 0x968eec
	public Void CrossFadeInFixedTime(String stateName, Single fixedTransitionDuration, Int32 layer, Single fixedTimeOffset) { }
	// Offset : 0x968fa8
	public Void CrossFadeInFixedTime(Int32 stateHashName, Single fixedTransitionDuration, Int32 layer, Single fixedTimeOffset, Single normalizedTransitionTime) { }
	// Offset : 0x96904c
	public Void CrossFade(String stateName, Single normalizedTransitionDuration, Int32 layer, Single normalizedTimeOffset) { }
	// Offset : 0x96909c
	public Void CrossFade(String stateName, Single normalizedTransitionDuration, Int32 layer, Single normalizedTimeOffset, Single normalizedTransitionTime) { }
	// Offset : 0x9690f8
	public Void CrossFade(Int32 stateHashName, Single normalizedTransitionDuration, Int32 layer, Single normalizedTimeOffset, Single normalizedTransitionTime) { }
	// Offset : 0x96919c
	public RuntimeAnimatorController get_runtimeAnimatorController() { }
	// Offset : 0x969208
	public Void set_runtimeAnimatorController(RuntimeAnimatorController value) { }
	// Offset : 0x96927c
	public Boolean get_hasBoundPlayables() { }
	// Offset : 0x968f3c
	public static Int32 StringToHash(String name) { }
	// Offset : 0x968cfc
	private Void SetFloatString(String name, Single value) { }
	// Offset : 0x968d8c
	private Void SetTriggerString(String name) { }
	// Offset : 0x968e04
	private Void ResetTriggerString(String name) { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine.Animations
public struct AnimatorControllerPlayable : IPlayable, IEquatable`1
{
	// Fields
	private PlayableHandle m_Handle; // 0x10
	private static readonly AnimatorControllerPlayable m_NullPlayable; // 0x0

	// Properties

	// Methods
	// Offset : 0x2d3608
	internal Void .ctor(PlayableHandle handle) { }
	// Offset : 0x2d3610
	public PlayableHandle GetHandle() { }
	// Offset : 0x2d361c
	public Void SetHandle(PlayableHandle handle) { }
	// Offset : 0x2d3624
	public Boolean Equals(AnimatorControllerPlayable other) { }
	// Offset : 0x968c58
	private static Void .cctor() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public class AnimatorOverrideController : RuntimeAnimatorController
{
	// Fields
	internal OnOverrideControllerDirtyCallback OnOverrideControllerDirty; // 0x18

	// Properties

	// Methods
	// Offset : 0x9692f0
	internal static Void OnInvalidateOverrideController(AnimatorOverrideController controller) { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: 
internal sealed class OnOverrideControllerDirtyCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x9695c4
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x96932c
	public virtual Void Invoke() { }
	// Offset : 0x9695d4
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x969608
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public struct SkeletonBone
{
	// Fields
	public String name; // 0x10
	internal String parentName; // 0x18
	public Vector3 position; // 0x20
	public Quaternion rotation; // 0x2c
	public Vector3 scale; // 0x3c

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public struct HumanLimit
{
	// Fields
	private Vector3 m_Min; // 0x10
	private Vector3 m_Max; // 0x1c
	private Vector3 m_Center; // 0x28
	private Single m_AxisLength; // 0x34
	private Int32 m_UseDefaultValues; // 0x38

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public struct HumanBone
{
	// Fields
	private String m_BoneName; // 0x10
	private String m_HumanName; // 0x18
	public HumanLimit limit; // 0x20

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public class RuntimeAnimatorController : Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x969810
	protected Void .ctor() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
internal enum AnimationEventSource
{
	// Fields
	public Int32 value__; // 0x10
	public const AnimationEventSource NoSource = 0; // 0x0
	public const AnimationEventSource Legacy = 1; // 0x0
	public const AnimationEventSource Animator = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
[Serializable]
public sealed class AnimationEvent
{
	// Fields
	internal Single m_Time; // 0x10
	internal String m_FunctionName; // 0x18
	internal String m_StringParameter; // 0x20
	internal Object m_ObjectReferenceParameter; // 0x28
	internal Single m_FloatParameter; // 0x30
	internal Int32 m_IntParameter; // 0x34
	internal Int32 m_MessageOptions; // 0x38
	internal AnimationEventSource m_Source; // 0x3c
	internal AnimationState m_StateSender; // 0x40
	internal AnimatorStateInfo m_AnimatorStateInfo; // 0x48
	internal AnimatorClipInfo m_AnimatorClipInfo; // 0x6c

	// Properties
	public Boolean isFiredByAnimator { get; }
	public AnimatorClipInfo animatorClipInfo { get; }

	// Methods
	// Offset : 0x967bf8
	public Void .ctor() { }
	// Offset : 0x967c64
	public Boolean get_isFiredByAnimator() { }
	// Offset : 0x967c74
	public AnimatorClipInfo get_animatorClipInfo() { }
}

// Dll : UnityEngine.AnimationModule.dll
// Namespace: UnityEngine
public sealed class AnimationState : TrackedReference
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.IMGUIModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.IMGUIModule.dll
// Namespace: UnityEngine
public sealed class Event
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private static Event s_Current; // 0x0
	private static Event s_MasterEvent; // 0x8
	private static Dictionary`2 <>f__switch$map0; // 0x10

	// Properties
	public EventType rawType { get; }
	public Vector2 mousePosition { get; }
	public EventModifiers modifiers { get; }
	public Char character { get; }
	public KeyCode keyCode { get; }
	public EventType type { get; }
	public String commandName { get; }
	public Boolean isKey { get; }
	public Boolean isMouse { get; }

	// Methods
	// Offset : 0x973c44
	public Void .ctor() { }
	// Offset : 0x973ce0
	public EventType get_rawType() { }
	// Offset : 0x973d4c
	public Vector2 get_mousePosition() { }
	// Offset : 0x973de8
	public EventModifiers get_modifiers() { }
	// Offset : 0x973e54
	public Char get_character() { }
	// Offset : 0x973ec0
	public KeyCode get_keyCode() { }
	// Offset : 0x973f2c
	public EventType get_type() { }
	// Offset : 0x973f98
	public String get_commandName() { }
	// Offset : 0x973c74
	private static IntPtr Internal_Create(Int32 displayIndex) { }
	// Offset : 0x974004
	private static Void Internal_Destroy(IntPtr ptr) { }
	// Offset : 0x974070
	public static Boolean PopEvent(Event outEvent) { }
	// Offset : 0x9740dc
	protected override Void Finalize() { }
	// Offset : 0x974194
	public Boolean get_isKey() { }
	// Offset : 0x9741b4
	public Boolean get_isMouse() { }
	// Offset : 0x9741f0
	public override Int32 GetHashCode() { }
	// Offset : 0x9742a0
	public override Boolean Equals(Object obj) { }
	// Offset : 0x9744ec
	public override String ToString() { }
	// Offset : 0x973d74
	private Void get_mousePosition_Injected(out Vector2 ret) { }
}

// Dll : UnityEngine.IMGUIModule.dll
// Namespace: UnityEngine
public enum EventType
{
	// Fields
	public Int32 value__; // 0x10
	public const EventType MouseDown = 0; // 0x0
	public const EventType MouseUp = 1; // 0x0
	public const EventType MouseMove = 2; // 0x0
	public const EventType MouseDrag = 3; // 0x0
	public const EventType KeyDown = 4; // 0x0
	public const EventType KeyUp = 5; // 0x0
	public const EventType ScrollWheel = 6; // 0x0
	public const EventType Repaint = 7; // 0x0
	public const EventType Layout = 8; // 0x0
	public const EventType DragUpdated = 9; // 0x0
	public const EventType DragPerform = 10; // 0x0
	public const EventType DragExited = 15; // 0x0
	public const EventType Ignore = 11; // 0x0
	public const EventType Used = 12; // 0x0
	public const EventType ValidateCommand = 13; // 0x0
	public const EventType ExecuteCommand = 14; // 0x0
	public const EventType ContextClick = 16; // 0x0
	public const EventType MouseEnterWindow = 20; // 0x0
	public const EventType MouseLeaveWindow = 21; // 0x0
	public const EventType mouseDown = 0; // 0x0
	public const EventType mouseUp = 1; // 0x0
	public const EventType mouseMove = 2; // 0x0
	public const EventType mouseDrag = 3; // 0x0
	public const EventType keyDown = 4; // 0x0
	public const EventType keyUp = 5; // 0x0
	public const EventType scrollWheel = 6; // 0x0
	public const EventType repaint = 7; // 0x0
	public const EventType layout = 8; // 0x0
	public const EventType dragUpdated = 9; // 0x0
	public const EventType dragPerform = 10; // 0x0
	public const EventType ignore = 11; // 0x0
	public const EventType used = 12; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.IMGUIModule.dll
// Namespace: UnityEngine
public enum EventModifiers
{
	// Fields
	public Int32 value__; // 0x10
	public const EventModifiers None = 0; // 0x0
	public const EventModifiers Shift = 1; // 0x0
	public const EventModifiers Control = 2; // 0x0
	public const EventModifiers Alt = 4; // 0x0
	public const EventModifiers Command = 8; // 0x0
	public const EventModifiers Numeric = 16; // 0x0
	public const EventModifiers CapsLock = 32; // 0x0
	public const EventModifiers FunctionKey = 64; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.IMGUIModule.dll
// Namespace: UnityEngine
public class GUIUtility
{
	// Fields

	// Properties
	public static String systemCopyBuffer { get; set; }

	// Methods
	// Offset : 0x974d64
	public static String get_systemCopyBuffer() { }
	// Offset : 0x974dbc
	public static Void set_systemCopyBuffer(String value) { }
}

// Dll : UnityEngine.Physics2DModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.Physics2DModule.dll
// Namespace: UnityEngine
public class Physics2D
{
	// Fields
	private static List`1 m_LastDisabledRigidbody2D; // 0x0

	// Properties

	// Methods
	// Offset : 0x97522c
	private static Void .cctor() { }
}

// Dll : UnityEngine.Physics2DModule.dll
// Namespace: UnityEngine
public struct RaycastHit2D
{
	// Fields
	private Vector2 m_Centroid; // 0x10
	private Vector2 m_Point; // 0x18
	private Vector2 m_Normal; // 0x20
	private Single m_Distance; // 0x28
	private Single m_Fraction; // 0x2c
	private Int32 m_Collider; // 0x30

	// Properties
	public Vector2 point { get; }
	public Vector2 normal { get; }
	public Single distance { get; }
	public Collider2D collider { get; }

	// Methods
	// Offset : 0x2fa68c
	public Vector2 get_point() { }
	// Offset : 0x2fa694
	public Vector2 get_normal() { }
	// Offset : 0x2fa69c
	public Single get_distance() { }
	// Offset : 0x2fa6a4
	public Collider2D get_collider() { }
}

// Dll : UnityEngine.Physics2DModule.dll
// Namespace: UnityEngine
public sealed class Rigidbody2D : Component
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.Physics2DModule.dll
// Namespace: UnityEngine
public class Collider2D : Behaviour
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public enum RigidbodyInterpolation
{
	// Fields
	public Int32 value__; // 0x10
	public const RigidbodyInterpolation None = 0; // 0x0
	public const RigidbodyInterpolation Interpolate = 1; // 0x0
	public const RigidbodyInterpolation Extrapolate = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class ControllerColliderHit
{
	// Fields
	internal CharacterController m_Controller; // 0x10
	internal Collider m_Collider; // 0x18
	internal Vector3 m_Point; // 0x20
	internal Vector3 m_Normal; // 0x2c
	internal Vector3 m_MoveDirection; // 0x38
	internal Single m_MoveLength; // 0x44
	internal Int32 m_Push; // 0x48

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class Collision
{
	// Fields
	internal Vector3 m_Impulse; // 0x10
	internal Vector3 m_RelativeVelocity; // 0x1c
	internal Rigidbody m_Rigidbody; // 0x28
	internal Collider m_Collider; // 0x30
	internal Int32 m_ContactCount; // 0x38
	internal ContactPoint[] m_RecycledContacts; // 0x40
	internal ContactPoint[] m_LegacyContacts; // 0x48

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public enum CollisionFlags
{
	// Fields
	public Int32 value__; // 0x10
	public const CollisionFlags None = 0; // 0x0
	public const CollisionFlags Sides = 1; // 0x0
	public const CollisionFlags Above = 2; // 0x0
	public const CollisionFlags Below = 4; // 0x0
	public const CollisionFlags CollidedSides = 1; // 0x0
	public const CollisionFlags CollidedAbove = 2; // 0x0
	public const CollisionFlags CollidedBelow = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public enum QueryTriggerInteraction
{
	// Fields
	public Int32 value__; // 0x10
	public const QueryTriggerInteraction UseGlobal = 0; // 0x0
	public const QueryTriggerInteraction Ignore = 1; // 0x0
	public const QueryTriggerInteraction Collide = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public enum CollisionDetectionMode
{
	// Fields
	public Int32 value__; // 0x10
	public const CollisionDetectionMode Discrete = 0; // 0x0
	public const CollisionDetectionMode Continuous = 1; // 0x0
	public const CollisionDetectionMode ContinuousDynamic = 2; // 0x0
	public const CollisionDetectionMode ContinuousSpeculative = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class PhysicMaterial : Object
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x96ff54
	public Void .ctor() { }
	// Offset : 0x96ffd0
	private static Void Internal_CreateDynamicsMaterial(PhysicMaterial mat, String name) { }
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public struct RaycastHit
{
	// Fields
	internal Vector3 m_Point; // 0x10
	internal Vector3 m_Normal; // 0x1c
	internal UInt32 m_FaceID; // 0x28
	internal Single m_Distance; // 0x2c
	internal Vector2 m_UV; // 0x30
	internal Int32 m_Collider; // 0x38

	// Properties
	public Collider collider { get; }
	public Vector3 point { get; }
	public Vector3 normal { get; }
	public Single distance { get; }

	// Methods
	// Offset : 0x2d3aa0
	public Collider get_collider() { }
	// Offset : 0x2d3aa8
	public Vector3 get_point() { }
	// Offset : 0x2d3ab4
	public Vector3 get_normal() { }
	// Offset : 0x2d3ac0
	public Single get_distance() { }
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class Rigidbody : Component
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class Collider : Component
{
	// Fields

	// Properties
	public Boolean enabled { get; }
	public Bounds bounds { get; }
	public PhysicMaterial material { get; }

	// Methods
	// Offset : 0x96fdc8
	public Boolean get_enabled() { }
	// Offset : 0x96fe34
	public Bounds get_bounds() { }
	// Offset : 0x96fee8
	public PhysicMaterial get_material() { }
	// Offset : 0x96fe74
	private Void get_bounds_Injected(out Bounds ret) { }
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class CharacterController : Collider
{
	// Fields

	// Properties
	public Boolean isGrounded { get; }
	public Single radius { get; set; }
	public Single height { get; set; }
	public Vector3 center { set; }
	public Single stepOffset { get; set; }
	public Single skinWidth { get; }

	// Methods
	// Offset : 0x96f918
	public CollisionFlags Move(Vector3 motion) { }
	// Offset : 0x96f9b4
	public Boolean get_isGrounded() { }
	// Offset : 0x96fa20
	public Single get_radius() { }
	// Offset : 0x96fa8c
	public Void set_radius(Single value) { }
	// Offset : 0x96fb00
	public Single get_height() { }
	// Offset : 0x96fb6c
	public Void set_height(Single value) { }
	// Offset : 0x96fbe0
	public Void set_center(Vector3 value) { }
	// Offset : 0x96fc7c
	public Single get_stepOffset() { }
	// Offset : 0x96fce8
	public Void set_stepOffset(Single value) { }
	// Offset : 0x96fd5c
	public Single get_skinWidth() { }
	// Offset : 0x96f940
	private CollisionFlags Move_Injected(ref Vector3 motion) { }
	// Offset : 0x96fc08
	private Void set_center_Injected(ref Vector3 value) { }
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class MeshCollider : Collider
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class CapsuleCollider : Collider
{
	// Fields

	// Properties
	public Vector3 center { get; }
	public Single radius { get; }
	public Single height { get; }
	public Int32 direction { get; }

	// Methods
	// Offset : 0x96f730
	public Vector3 get_center() { }
	// Offset : 0x96f7d4
	public Single get_radius() { }
	// Offset : 0x96f840
	public Single get_height() { }
	// Offset : 0x96f8ac
	public Int32 get_direction() { }
	// Offset : 0x96f760
	private Void get_center_Injected(out Vector3 ret) { }
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class BoxCollider : Collider
{
	// Fields

	// Properties
	public Vector3 center { get; }
	public Vector3 size { get; }

	// Methods
	// Offset : 0x96f5e8
	public Vector3 get_center() { }
	// Offset : 0x96f68c
	public Vector3 get_size() { }
	// Offset : 0x96f618
	private Void get_center_Injected(out Vector3 ret) { }
	// Offset : 0x96f6bc
	private Void get_size_Injected(out Vector3 ret) { }
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class SphereCollider : Collider
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public struct ContactPoint
{
	// Fields
	internal Vector3 m_Point; // 0x10
	internal Vector3 m_Normal; // 0x1c
	internal Int32 m_ThisColliderInstanceID; // 0x28
	internal Int32 m_OtherColliderInstanceID; // 0x2c
	internal Single m_Separation; // 0x30

	// Properties

	// Methods
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public struct PhysicsScene : IEquatable`1
{
	// Fields
	private Int32 m_Handle; // 0x10

	// Properties

	// Methods
	// Offset : 0x2d3a68
	public override String ToString() { }
	// Offset : 0x2d3a70
	public override Int32 GetHashCode() { }
	// Offset : 0x2d3a78
	public override Boolean Equals(Object other) { }
	// Offset : 0x2d3a80
	public Boolean Equals(PhysicsScene other) { }
	// Offset : 0x2d3a90
	public Boolean Raycast(Vector3 origin, Vector3 direction, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x9717ac
	private static Boolean Internal_RaycastTest(PhysicsScene physicsScene, Ray ray, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x2d3a98
	public Boolean Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x971878
	private static Boolean Internal_Raycast(PhysicsScene physicsScene, Ray ray, Single maxDistance, ref RaycastHit hit, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x9717d4
	private static Boolean Internal_RaycastTest_Injected(ref PhysicsScene physicsScene, ref Ray ray, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x9718a0
	private static Boolean Internal_Raycast_Injected(ref PhysicsScene physicsScene, ref Ray ray, Single maxDistance, ref RaycastHit hit, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
}

// Dll : UnityEngine.PhysicsModule.dll
// Namespace: UnityEngine
public class Physics
{
	// Fields

	// Properties
	public static PhysicsScene defaultPhysicsScene { get; }

	// Methods
	// Offset : 0x970044
	public static PhysicsScene get_defaultPhysicsScene() { }
	// Offset : 0x9700d8
	public static Boolean Raycast(Vector3 origin, Vector3 direction, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x9702d8
	public static Boolean Raycast(Vector3 origin, Vector3 direction, Single maxDistance, Int32 layerMask) { }
	// Offset : 0x97037c
	public static Boolean Raycast(Vector3 origin, Vector3 direction, Single maxDistance) { }
	// Offset : 0x970414
	public static Boolean Raycast(Vector3 origin, Vector3 direction) { }
	// Offset : 0x9704a4
	public static Boolean Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x9706d0
	public static Boolean Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, Single maxDistance, Int32 layerMask) { }
	// Offset : 0x97077c
	public static Boolean Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, Single maxDistance) { }
	// Offset : 0x970824
	public static Boolean Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo) { }
	// Offset : 0x9708c4
	public static Boolean Raycast(Ray ray, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x970974
	public static Boolean Raycast(Ray ray, Single maxDistance, Int32 layerMask) { }
	// Offset : 0x970a18
	public static Boolean Raycast(Ray ray, Single maxDistance) { }
	// Offset : 0x970ab8
	public static Boolean Raycast(Ray ray) { }
	// Offset : 0x970b58
	public static Boolean Raycast(Ray ray, out RaycastHit hitInfo, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x970c10
	public static Boolean Raycast(Ray ray, out RaycastHit hitInfo, Single maxDistance, Int32 layerMask) { }
	// Offset : 0x970cc4
	public static Boolean Raycast(Ray ray, out RaycastHit hitInfo, Single maxDistance) { }
	// Offset : 0x970d6c
	public static Boolean Raycast(Ray ray, out RaycastHit hitInfo) { }
	// Offset : 0x970e14
	private static Boolean Query_SphereCast(PhysicsScene physicsScene, Vector3 origin, Single radius, Vector3 direction, Single maxDistance, ref RaycastHit hitInfo, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x970f30
	private static Boolean Internal_SphereCast(PhysicsScene physicsScene, Vector3 origin, Single radius, Vector3 direction, out RaycastHit hitInfo, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x971080
	public static Boolean SphereCast(Vector3 origin, Single radius, Vector3 direction, out RaycastHit hitInfo, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x971130
	public static Boolean SphereCast(Vector3 origin, Single radius, Vector3 direction, out RaycastHit hitInfo, Single maxDistance, Int32 layerMask) { }
	// Offset : 0x9711dc
	private static RaycastHit[] Internal_RaycastAll(PhysicsScene physicsScene, Ray ray, Single maxDistance, Int32 mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x9712a4
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x971410
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, Single maxDistance, Int32 layerMask) { }
	// Offset : 0x971418
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, Single maxDistance) { }
	// Offset : 0x971424
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction) { }
	// Offset : 0x971438
	public static RaycastHit[] RaycastAll(Ray ray, Single maxDistance, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x9714bc
	public static RaycastHit[] RaycastAll(Ray ray, Single maxDistance, Int32 layerMask) { }
	// Offset : 0x971534
	public static RaycastHit[] RaycastAll(Ray ray, Single maxDistance) { }
	// Offset : 0x9715a8
	public static RaycastHit[] RaycastAll(Ray ray) { }
	// Offset : 0x97006c
	private static Void get_defaultPhysicsScene_Injected(out PhysicsScene ret) { }
	// Offset : 0x970e74
	private static Boolean Query_SphereCast_Injected(ref PhysicsScene physicsScene, ref Vector3 origin, Single radius, ref Vector3 direction, Single maxDistance, ref RaycastHit hitInfo, Int32 layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// Offset : 0x971200
	private static RaycastHit[] Internal_RaycastAll_Injected(ref PhysicsScene physicsScene, ref Ray ray, Single maxDistance, Int32 mask, QueryTriggerInteraction queryTriggerInteraction) { }
}

// Dll : UnityEngine.UIModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.UIModule.dll
// Namespace: UnityEngine
public enum RenderMode
{
	// Fields
	public Int32 value__; // 0x10
	public const RenderMode ScreenSpaceOverlay = 0; // 0x0
	public const RenderMode ScreenSpaceCamera = 1; // 0x0
	public const RenderMode WorldSpace = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UIModule.dll
// Namespace: UnityEngine
public sealed class Canvas : Behaviour
{
	// Fields
	private static WillRenderCanvases willRenderCanvases; // 0x0

	// Properties
	public RenderMode renderMode { get; }
	public Boolean isRootCanvas { get; }
	public Single scaleFactor { get; set; }
	public Single referencePixelsPerUnit { get; set; }
	public Boolean pixelPerfect { get; }
	public Int32 renderOrder { get; }
	public Boolean overrideSorting { get; set; }
	public Int32 sortingOrder { get; set; }
	public Int32 targetDisplay { get; }
	public Int32 sortingLayerID { get; set; }
	public Canvas rootCanvas { get; }
	public Camera worldCamera { get; }

	// Methods
	// Offset : 0x96c940
	public Void .ctor() { }
	// Offset : 0x96c948
	public static Void add_willRenderCanvases(WillRenderCanvases value) { }
	// Offset : 0x96ca48
	public static Void remove_willRenderCanvases(WillRenderCanvases value) { }
	// Offset : 0x96cb48
	public RenderMode get_renderMode() { }
	// Offset : 0x96cbb4
	public Boolean get_isRootCanvas() { }
	// Offset : 0x96cc20
	public Single get_scaleFactor() { }
	// Offset : 0x96cc8c
	public Void set_scaleFactor(Single value) { }
	// Offset : 0x96cd00
	public Single get_referencePixelsPerUnit() { }
	// Offset : 0x96cd6c
	public Void set_referencePixelsPerUnit(Single value) { }
	// Offset : 0x96cde0
	public Boolean get_pixelPerfect() { }
	// Offset : 0x96ce4c
	public Int32 get_renderOrder() { }
	// Offset : 0x96ceb8
	public Boolean get_overrideSorting() { }
	// Offset : 0x96cf24
	public Void set_overrideSorting(Boolean value) { }
	// Offset : 0x96cf98
	public Int32 get_sortingOrder() { }
	// Offset : 0x96d004
	public Void set_sortingOrder(Int32 value) { }
	// Offset : 0x96d078
	public Int32 get_targetDisplay() { }
	// Offset : 0x96d0e4
	public Int32 get_sortingLayerID() { }
	// Offset : 0x96d150
	public Void set_sortingLayerID(Int32 value) { }
	// Offset : 0x96d1c4
	public Canvas get_rootCanvas() { }
	// Offset : 0x96d230
	public Camera get_worldCamera() { }
	// Offset : 0x96d29c
	public static Material GetDefaultCanvasMaterial() { }
	// Offset : 0x96d2f4
	public static Material GetETC1SupportedCanvasMaterial() { }
	// Offset : 0x96d34c
	public static Void ForceUpdateCanvases() { }
	// Offset : 0x96d350
	private static Void SendWillRenderCanvases() { }
}

// Dll : UnityEngine.UIModule.dll
// Namespace: 
public sealed class WillRenderCanvases : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x96d64c
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x96d3b4
	public virtual Void Invoke() { }
	// Offset : 0x96d65c
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x96d690
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.UIModule.dll
// Namespace: UnityEngine
public static class UISystemProfilerApi
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x96f49c
	public static Void BeginSample(SampleType type) { }
	// Offset : 0x96f508
	public static Void EndSample(SampleType type) { }
	// Offset : 0x96f574
	public static Void AddMarker(String name, Object obj) { }
}

// Dll : UnityEngine.UIModule.dll
// Namespace: 
public enum SampleType
{
	// Fields
	public Int32 value__; // 0x10
	public const SampleType Layout = 0; // 0x0
	public const SampleType Render = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UIModule.dll
// Namespace: UnityEngine
public interface ICanvasRaycastFilter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Boolean IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
}

// Dll : UnityEngine.UIModule.dll
// Namespace: UnityEngine
public sealed class CanvasGroup : Behaviour, ICanvasRaycastFilter
{
	// Fields

	// Properties
	public Single alpha { get; set; }
	public Boolean interactable { get; }
	public Boolean blocksRaycasts { get; }
	public Boolean ignoreParentGroups { get; }

	// Methods
	// Offset : 0x96d69c
	public Single get_alpha() { }
	// Offset : 0x96d708
	public Void set_alpha(Single value) { }
	// Offset : 0x96d77c
	public Boolean get_interactable() { }
	// Offset : 0x96d7e8
	public Boolean get_blocksRaycasts() { }
	// Offset : 0x96d854
	public Boolean get_ignoreParentGroups() { }
	// Offset : 0x96d8c0
	public Boolean IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
}

// Dll : UnityEngine.UIModule.dll
// Namespace: UnityEngine
public sealed class CanvasRenderer : Component
{
	// Fields
	private Boolean <isMask>k__BackingField; // 0x18

	// Properties
	public Boolean hasPopInstruction { set; }
	public Int32 materialCount { get; set; }
	public Int32 popMaterialCount { set; }
	public Int32 absoluteDepth { get; }
	public Boolean hasMoved { get; }
	public Boolean cull { get; set; }

	// Methods
	// Offset : 0x96d8c4
	public Void set_hasPopInstruction(Boolean value) { }
	// Offset : 0x96d938
	public Int32 get_materialCount() { }
	// Offset : 0x96d9a4
	public Void set_materialCount(Int32 value) { }
	// Offset : 0x96da18
	public Void set_popMaterialCount(Int32 value) { }
	// Offset : 0x96da8c
	public Int32 get_absoluteDepth() { }
	// Offset : 0x96daf8
	public Boolean get_hasMoved() { }
	// Offset : 0x96db64
	public Boolean get_cull() { }
	// Offset : 0x96dbd0
	public Void set_cull(Boolean value) { }
	// Offset : 0x96dc44
	public Void SetColor(Color color) { }
	// Offset : 0x96dce0
	public Color GetColor() { }
	// Offset : 0x96dd80
	public Void EnableRectClipping(Rect rect) { }
	// Offset : 0x96de1c
	public Void DisableRectClipping() { }
	// Offset : 0x96de88
	public Void SetMaterial(Material material, Int32 index) { }
	// Offset : 0x96df0c
	public Void SetPopMaterial(Material material, Int32 index) { }
	// Offset : 0x96df90
	public Void SetTexture(Texture texture) { }
	// Offset : 0x96e004
	public Void SetAlphaTexture(Texture texture) { }
	// Offset : 0x96e078
	public Void SetMesh(Mesh mesh) { }
	// Offset : 0x96e0ec
	public Void Clear() { }
	// Offset : 0x96e158
	public Void SetMaterial(Material material, Texture texture) { }
	// Offset : 0x96e1bc
	public static Void SplitUIVertexStreams(List`1 verts, List`1 positions, List`1 colors, List`1 uv0S, List`1 uv1S, List`1 uv2S, List`1 uv3S, List`1 normals, List`1 tangents, List`1 indices) { }
	// Offset : 0x96e334
	public static Void CreateUIVertexStream(List`1 verts, List`1 positions, List`1 colors, List`1 uv0S, List`1 uv1S, List`1 uv2S, List`1 uv3S, List`1 normals, List`1 tangents, List`1 indices) { }
	// Offset : 0x96e410
	public static Void AddUIVertexStream(List`1 verts, List`1 positions, List`1 colors, List`1 uv0S, List`1 uv1S, List`1 uv2S, List`1 uv3S, List`1 normals, List`1 tangents) { }
	// Offset : 0x96e2c0
	private static Void SplitIndicesStreamsInternal(Object verts, Object indices) { }
	// Offset : 0x96e1f4
	private static Void SplitUIVertexStreamsInternal(Object verts, Object positions, Object colors, Object uv0S, Object uv1S, Object uv2S, Object uv3S, Object normals, Object tangents) { }
	// Offset : 0x96e340
	private static Void CreateUIVertexStreamInternal(Object verts, Object positions, Object colors, Object uv0S, Object uv1S, Object uv2S, Object uv3S, Object normals, Object tangents, Object indices) { }
	// Offset : 0x96dc6c
	private Void SetColor_Injected(ref Color color) { }
	// Offset : 0x96dd0c
	private Void GetColor_Injected(out Color ret) { }
	// Offset : 0x96dda8
	private Void EnableRectClipping_Injected(ref Rect rect) { }
}

// Dll : UnityEngine.UIModule.dll
// Namespace: UnityEngine
public sealed class RectTransformUtility
{
	// Fields
	private static readonly Vector3[] s_Corners; // 0x0

	// Properties

	// Methods
	// Offset : 0x96e41c
	public static Boolean RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam) { }
	// Offset : 0x96e52c
	public static Boolean ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector3 worldPoint) { }
	// Offset : 0x96e918
	public static Boolean ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector2 localPoint) { }
	// Offset : 0x96e75c
	public static Ray ScreenPointToRay(Camera cam, Vector2 screenPos) { }
	// Offset : 0x96ea6c
	public static Void FlipLayoutOnAxis(RectTransform rect, Int32 axis, Boolean keepPositioning, Boolean recursive) { }
	// Offset : 0x96eda8
	public static Void FlipLayoutAxes(RectTransform rect, Boolean keepPositioning, Boolean recursive) { }
	// Offset : 0x96f148
	private static Vector2 GetTransposed(Vector2 input) { }
	// Offset : 0x96f180
	public static Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas) { }
	// Offset : 0x96f2a0
	public static Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas) { }
	// Offset : 0x96e4a8
	private static Boolean PointInRectangle(Vector2 screenPoint, RectTransform rect, Camera cam) { }
	// Offset : 0x96f438
	private static Void .cctor() { }
	// Offset : 0x96f214
	private static Void PixelAdjustPoint_Injected(ref Vector2 point, Transform elementTransform, Canvas canvas, out Vector2 ret) { }
	// Offset : 0x96f330
	private static Void PixelAdjustRect_Injected(RectTransform rectTransform, Canvas canvas, out Rect ret) { }
	// Offset : 0x96f3b4
	private static Boolean PointInRectangle_Injected(ref Vector2 screenPoint, RectTransform rect, Camera cam) { }
}

// Dll : UnityEngine.UnityWebRequestWWWModule.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.UnityWebRequestWWWModule.dll
// Namespace: UnityEngine
public class WWW : CustomYieldInstruction, IDisposable
{
	// Fields
	private UnityWebRequest _uwr; // 0x10
	private AssetBundle _assetBundle; // 0x18

	// Properties
	public AssetBundle assetBundle { get; }
	public Byte[] bytes { get; }
	public String error { get; }
	public Boolean isDone { get; }
	public Single progress { get; }
	public String text { get; }
	public String url { get; }
	public override Boolean keepWaiting { get; }

	// Methods
	// Offset : 0x973474
	public Void .ctor(String url) { }
	// Offset : 0x9734c0
	internal Void .ctor(String url, String name, Hash128 hash, UInt32 crc) { }
	// Offset : 0x973570
	public static WWW LoadFromCacheOrDownload(String url, Int32 version) { }
	// Offset : 0x973578
	public static WWW LoadFromCacheOrDownload(String url, Int32 version, UInt32 crc) { }
	// Offset : 0x9735d4
	public static WWW LoadFromCacheOrDownload(String url, Hash128 hash, UInt32 crc) { }
	// Offset : 0x973668
	public AssetBundle get_assetBundle() { }
	// Offset : 0x973874
	public Byte[] get_bytes() { }
	// Offset : 0x973924
	public String get_error() { }
	// Offset : 0x973aa0
	public Boolean get_isDone() { }
	// Offset : 0x973ad0
	public Single get_progress() { }
	// Offset : 0x973b0c
	public String get_text() { }
	// Offset : 0x973bb4
	public String get_url() { }
	// Offset : 0x973be4
	public override Boolean get_keepWaiting() { }
	// Offset : 0x973c14
	public Void Dispose() { }
	// Offset : 0x973780
	private Boolean WaitUntilDoneIfPossible() { }
}

// Dll : UnityEngine.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib
[Serializable]
public class SharpZipBaseException : ApplicationException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x94d0ac
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x94d0bc
	public Void .ctor() { }
	// Offset : 0x94d0cc
	public Void .ctor(String message) { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.GZip
public class GZipInputStream : InflaterInputStream
{
	// Fields
	protected Crc32 crc; // 0x30
	private Boolean readGZIPHeader; // 0x38

	// Properties

	// Methods
	// Offset : 0x94d0d4
	public Void .ctor(Stream baseInputStream) { }
	// Offset : 0x94d0dc
	public Void .ctor(Stream baseInputStream, Int32 size) { }
	// Offset : 0x94d390
	public override Int32 Read(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x94d470
	private Boolean ReadHeader() { }
	// Offset : 0x94dbc4
	private Void ReadFooter() { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.GZip
[Serializable]
public class GZipException : SharpZipBaseException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x94d0a4
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x94d0b4
	public Void .ctor() { }
	// Offset : 0x94d0c4
	public Void .ctor(String message) { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Zip
[Serializable]
public class ZipException : SharpZipBaseException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x95221c
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x952224
	public Void .ctor() { }
	// Offset : 0x951a10
	public Void .ctor(String message) { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Zip.Compression
internal class InflaterDynHeader
{
	// Fields
	private static readonly Int32[] repMin; // 0x0
	private static readonly Int32[] repBits; // 0x8
	private static readonly Int32[] BL_ORDER; // 0x10
	private Byte[] blLens; // 0x10
	private Byte[] litdistLens; // 0x18
	private InflaterHuffmanTree blTree; // 0x20
	private Int32 mode; // 0x28
	private Int32 lnum; // 0x2c
	private Int32 dnum; // 0x30
	private Int32 blnum; // 0x34
	private Int32 num; // 0x38
	private Int32 repSymbol; // 0x3c
	private Byte lastLen; // 0x40
	private Int32 ptr; // 0x44

	// Properties

	// Methods
	// Offset : 0x9500d4
	public Void .ctor() { }
	// Offset : 0x9501fc
	public Boolean Decode(StreamManipulator input) { }
	// Offset : 0x950750
	public InflaterHuffmanTree BuildLitLenTree() { }
	// Offset : 0x9507f4
	public InflaterHuffmanTree BuildDistTree() { }
	// Offset : 0x950fdc
	private static Void .cctor() { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Zip.Compression
public class InflaterHuffmanTree
{
	// Fields
	private Int16[] tree; // 0x10
	public static InflaterHuffmanTree defLitLenTree; // 0x0
	public static InflaterHuffmanTree defDistTree; // 0x8

	// Properties

	// Methods
	// Offset : 0x9510c0
	private static Void .cctor() { }
	// Offset : 0x950fac
	public Void .ctor(Byte[] codeLengths) { }
	// Offset : 0x9513e0
	private Void BuildTree(Byte[] codeLengths) { }
	// Offset : 0x94f4f8
	public Int32 GetSymbol(StreamManipulator input) { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Zip.Compression
public class DeflaterHuffman
{
	// Fields
	private static readonly Int32[] BL_ORDER; // 0x0
	private static readonly Byte[] bit4Reverse; // 0x8
	private static Int16[] staticLCodes; // 0x10
	private static Byte[] staticLLength; // 0x18
	private static Int16[] staticDCodes; // 0x20
	private static Byte[] staticDLength; // 0x28

	// Properties

	// Methods
	// Offset : 0x94e550
	private static Void .cctor() { }
	// Offset : 0x94e9b4
	public static Int16 BitReverse(Int32 toReverse) { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Zip.Compression
public class Inflater
{
	// Fields
	private static readonly Int32[] CPLENS; // 0x0
	private static readonly Int32[] CPLEXT; // 0x8
	private static readonly Int32[] CPDIST; // 0x10
	private static readonly Int32[] CPDEXT; // 0x18
	private Int32 mode; // 0x10
	private Int32 readAdler; // 0x14
	private Int32 neededBits; // 0x18
	private Int32 repLength; // 0x1c
	private Int32 repDist; // 0x20
	private Int32 uncomprLen; // 0x24
	private Boolean isLastBlock; // 0x28
	private Int64 totalOut; // 0x30
	private Int64 totalIn; // 0x38
	private Boolean noHeader; // 0x40
	private StreamManipulator input; // 0x48
	private OutputWindow outputWindow; // 0x50
	private InflaterDynHeader dynHeader; // 0x58
	private InflaterHuffmanTree litlenTree; // 0x60
	private InflaterHuffmanTree distTree; // 0x68
	private Adler32 adler; // 0x70

	// Properties
	public Boolean IsNeedingInput { get; }
	public Boolean IsNeedingDictionary { get; }
	public Boolean IsFinished { get; }
	public Int64 TotalOut { get; }
	public Int32 RemainingInput { get; }

	// Methods
	// Offset : 0x94d158
	public Void .ctor(Boolean noHeader) { }
	// Offset : 0x94e3a0
	public Void Reset() { }
	// Offset : 0x94ebb0
	private Boolean DecodeHeader() { }
	// Offset : 0x94ee38
	private Boolean DecodeDict() { }
	// Offset : 0x94eec8
	private Boolean DecodeHuffman() { }
	// Offset : 0x94f90c
	private Boolean DecodeChksum() { }
	// Offset : 0x94fbfc
	private Boolean Decode() { }
	// Offset : 0x950894
	public Void SetInput(Byte[] buffer, Int32 index, Int32 count) { }
	// Offset : 0x950acc
	public Int32 Inflate(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x950e2c
	public Boolean get_IsNeedingInput() { }
	// Offset : 0x950e60
	public Boolean get_IsNeedingDictionary() { }
	// Offset : 0x94db7c
	public Boolean get_IsFinished() { }
	// Offset : 0x94e358
	public Int64 get_TotalOut() { }
	// Offset : 0x94e360
	public Int32 get_RemainingInput() { }
	// Offset : 0x950e98
	private static Void .cctor() { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Zip.Compression.Streams
public class InflaterInputBuffer
{
	// Fields
	private Int32 rawLength; // 0x10
	private Byte[] rawData; // 0x18
	private Int32 clearTextLength; // 0x20
	private Byte[] clearText; // 0x28
	private Int32 available; // 0x30
	private ICryptoTransform cryptoTransform; // 0x38
	private Stream inputStream; // 0x40

	// Properties
	public Int32 RawLength { get; }
	public Int32 Available { get; set; }

	// Methods
	// Offset : 0x95191c
	public Void .ctor(Stream stream, Int32 bufferSize) { }
	// Offset : 0x9519a0
	public Int32 get_RawLength() { }
	// Offset : 0x94e0a0
	public Int32 get_Available() { }
	// Offset : 0x94e398
	public Void set_Available(Int32 value) { }
	// Offset : 0x9519a8
	public Void SetInflaterInput(Inflater inflater) { }
	// Offset : 0x94e0a8
	public Void Fill() { }
	// Offset : 0x94e428
	public Int32 ReadClearTextBuffer(Byte[] outBuffer, Int32 offset, Int32 length) { }
	// Offset : 0x94e260
	public Int32 ReadLeByte() { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Zip.Compression.Streams
public class InflaterInputStream : Stream
{
	// Fields
	protected Inflater inf; // 0x10
	protected InflaterInputBuffer inputBuffer; // 0x18
	private Stream baseInputStream; // 0x20
	private Boolean isClosed; // 0x28
	private Boolean isStreamOwner; // 0x29

	// Properties
	public override Boolean CanRead { get; }
	public override Boolean CanSeek { get; }
	public override Boolean CanWrite { get; }
	public override Int64 Length { get; }
	public override Int64 Position { get; set; }

	// Methods
	// Offset : 0x94d238
	public Void .ctor(Stream baseInputStream, Inflater inflater, Int32 bufferSize) { }
	// Offset : 0x951a18
	protected Void Fill() { }
	// Offset : 0x951b08
	public override Boolean get_CanRead() { }
	// Offset : 0x951b54
	public override Boolean get_CanSeek() { }
	// Offset : 0x951b5c
	public override Boolean get_CanWrite() { }
	// Offset : 0x951b64
	public override Int64 get_Length() { }
	// Offset : 0x951b90
	public override Int64 get_Position() { }
	// Offset : 0x951bdc
	public override Void set_Position(Int64 value) { }
	// Offset : 0x951c50
	public override Void Flush() { }
	// Offset : 0x951c9c
	public override Int64 Seek(Int64 offset, SeekOrigin origin) { }
	// Offset : 0x951d10
	public override Void SetLength(Int64 value) { }
	// Offset : 0x951d84
	public override Void Write(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x951df8
	public override Void WriteByte(Byte value) { }
	// Offset : 0x951e6c
	public override IAsyncResult BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state) { }
	// Offset : 0x951ee0
	public override Void Close() { }
	// Offset : 0x94d9e4
	public override Int32 Read(Byte[] buffer, Int32 offset, Int32 count) { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Zip.Compression.Streams
public class StreamManipulator
{
	// Fields
	private Byte[] window_; // 0x10
	private Int32 windowStart_; // 0x18
	private Int32 windowEnd_; // 0x1c
	private UInt32 buffer_; // 0x20
	private Int32 bitsInBuffer_; // 0x24

	// Properties
	public Int32 AvailableBits { get; }
	public Int32 AvailableBytes { get; }
	public Boolean IsNeedingInput { get; }

	// Methods
	// Offset : 0x94eb38
	public Void .ctor() { }
	// Offset : 0x94ed14
	public Int32 PeekBits(Int32 bitCount) { }
	// Offset : 0x94ee20
	public Void DropBits(Int32 bitCount) { }
	// Offset : 0x951914
	public Int32 get_AvailableBits() { }
	// Offset : 0x950e84
	public Int32 get_AvailableBytes() { }
	// Offset : 0x9500bc
	public Void SkipToByteBoundary() { }
	// Offset : 0x9501ec
	public Boolean get_IsNeedingInput() { }
	// Offset : 0x952010
	public Int32 CopyBytes(Byte[] output, Int32 offset, Int32 length) { }
	// Offset : 0x94eba0
	public Void Reset() { }
	// Offset : 0x9508fc
	public Void SetInput(Byte[] buffer, Int32 offset, Int32 count) { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Zip.Compression.Streams
public class OutputWindow
{
	// Fields
	private Byte[] window; // 0x10
	private Int32 windowEnd; // 0x18
	private Int32 windowFilled; // 0x1c

	// Properties

	// Methods
	// Offset : 0x94f408
	public Void Write(Int32 value) { }
	// Offset : 0x951f48
	private Void SlowRepeat(Int32 repStart, Int32 length, Int32 distance) { }
	// Offset : 0x94f75c
	public Void Repeat(Int32 length, Int32 distance) { }
	// Offset : 0x9500dc
	public Int32 CopyStored(StreamManipulator input, Int32 length) { }
	// Offset : 0x94f3f8
	public Int32 GetFreeSpace() { }
	// Offset : 0x950e24
	public Int32 GetAvailable() { }
	// Offset : 0x950d08
	public Int32 CopyOutput(Byte[] output, Int32 offset, Int32 len) { }
	// Offset : 0x94eba8
	public Void Reset() { }
	// Offset : 0x94eb40
	public Void .ctor() { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Checksums
public interface IChecksum
{
	// Fields

	// Properties

	// Methods
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Checksums
public sealed class Adler32 : IChecksum
{
	// Fields
	private UInt32 checksum; // 0x10

	// Properties
	public Int64 Value { get; }

	// Methods
	// Offset : 0x94cae0
	public Int64 get_Value() { }
	// Offset : 0x94cae8
	public Void .ctor() { }
	// Offset : 0x94cb14
	public Void Reset() { }
	// Offset : 0x94cb20
	public Void Update(Byte[] buffer, Int32 offset, Int32 count) { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: ICSharpCode.SharpZipLib.Checksums
public sealed class Crc32 : IChecksum
{
	// Fields
	private static readonly UInt32[] CrcTable; // 0x0
	private UInt32 crc; // 0x10

	// Properties
	public Int64 Value { get; }

	// Methods
	// Offset : 0x94cd60
	public Int64 get_Value() { }
	// Offset : 0x94cd68
	public Void Update(Int32 value) { }
	// Offset : 0x94ce34
	public Void Update(Byte[] buffer, Int32 offset, Int32 count) { }
	// Offset : 0x94d020
	public Void .ctor() { }
	// Offset : 0x94d028
	private static Void .cctor() { }
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: 
internal sealed class <PrivateImplementationDetails>
{
	// Fields
	internal static readonly __StaticArrayInitTypeSize=76 1FDC8DB567F5AAA7068D0D2A601CD71657CBDF38; // 0x0
	internal static readonly __StaticArrayInitTypeSize=1024 373B494F210C656134C5728D551D4C97B013EB33; // 0x4c
	internal static readonly __StaticArrayInitTypeSize=116 67C0E784F3654B008A81E2988588CF4956CCF3DA; // 0x44c
	internal static readonly __StaticArrayInitTypeSize=120 79D521E6E3E55103005E9CC3FA43B3174FAF090F; // 0x4c0
	internal static readonly __StaticArrayInitTypeSize=16 89CE0E8EA590FD37283D6BEFD9E6805C8C47ADBD; // 0x538
	internal static readonly __StaticArrayInitTypeSize=12 A586F56BA53FACE320144ADA40A15A33B2715025; // 0x548
	internal static readonly __StaticArrayInitTypeSize=12 B564A7A433EE1DA50C5E152A99F25DBC09BA835F; // 0x554
	internal static readonly __StaticArrayInitTypeSize=120 D068832E6B13A623916709C1E0E25ADCBE7B455F; // 0x560
	internal static readonly __StaticArrayInitTypeSize=116 D8E4ACBC2D957C3344A3CAD69FCF9A60C8034DBF; // 0x5d8

	// Properties

	// Methods
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: 
private struct __StaticArrayInitTypeSize=12
{
	// Fields

	// Properties

	// Methods
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: 
private struct __StaticArrayInitTypeSize=16
{
	// Fields

	// Properties

	// Methods
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: 
private struct __StaticArrayInitTypeSize=76
{
	// Fields

	// Properties

	// Methods
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: 
private struct __StaticArrayInitTypeSize=116
{
	// Fields

	// Properties

	// Methods
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: 
private struct __StaticArrayInitTypeSize=120
{
	// Fields

	// Properties

	// Methods
}

// Dll : ICSharpCode.SharpZipLib.dll
// Namespace: 
private struct __StaticArrayInitTypeSize=1024
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public enum EventHandle
{
	// Fields
	public Int32 value__; // 0x10
	public const EventHandle Unused = 0; // 0x0
	public const EventHandle Used = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IPointerEnterHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnPointerEnter(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IPointerExitHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnPointerExit(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IPointerDownHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnPointerDown(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IPointerUpHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnPointerUp(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IPointerClickHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnPointerClick(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IBeginDragHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnBeginDrag(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IInitializePotentialDragHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnInitializePotentialDrag(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IDragHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnDrag(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IEndDragHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnEndDrag(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IDropHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnDrop(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IScrollHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnScroll(PointerEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IUpdateSelectedHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnUpdateSelected(BaseEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface ISelectHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnSelect(BaseEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IDeselectHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnDeselect(BaseEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface IMoveHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnMove(AxisEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface ISubmitHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnSubmit(BaseEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public interface ICancelHandler : IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnCancel(BaseEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public class EventSystem : UIBehaviour
{
	// Fields
	private List`1 m_SystemInputModules; // 0x18
	private BaseInputModule m_CurrentInputModule; // 0x20
	private static List`1 m_EventSystems; // 0x0
	private GameObject m_FirstSelected; // 0x28
	private Boolean m_sendNavigationEvents; // 0x30
	private Int32 m_DragThreshold; // 0x34
	private GameObject m_CurrentSelected; // 0x38
	private Boolean m_HasFocus; // 0x40
	private Boolean m_SelectionGuard; // 0x41
	private BaseEventData m_DummyData; // 0x48
	private static readonly Comparison`1 s_RaycastComparer; // 0x8
	private static Comparison`1 <>f__mg$cache0; // 0x10

	// Properties
	public static EventSystem current { get; set; }
	public Boolean sendNavigationEvents { get; set; }
	public Int32 pixelDragThreshold { get; set; }
	public BaseInputModule currentInputModule { get; }
	public GameObject firstSelectedGameObject { get; set; }
	public GameObject currentSelectedGameObject { get; }
	public GameObject lastSelectedGameObject { get; }
	public Boolean isFocused { get; }
	public Boolean alreadySelecting { get; }
	private BaseEventData baseEventDataCache { get; }

	// Methods
	// Offset : 0x49ba1c
	protected Void .ctor() { }
	// Offset : 0x49baa0
	public static EventSystem get_current() { }
	// Offset : 0x49bb80
	public static Void set_current(EventSystem value) { }
	// Offset : 0x49bca8
	public Boolean get_sendNavigationEvents() { }
	// Offset : 0x49bcb0
	public Void set_sendNavigationEvents(Boolean value) { }
	// Offset : 0x49bcbc
	public Int32 get_pixelDragThreshold() { }
	// Offset : 0x49bcc4
	public Void set_pixelDragThreshold(Int32 value) { }
	// Offset : 0x499e50
	public BaseInputModule get_currentInputModule() { }
	// Offset : 0x49bccc
	public GameObject get_firstSelectedGameObject() { }
	// Offset : 0x49bcd4
	public Void set_firstSelectedGameObject(GameObject value) { }
	// Offset : 0x499e84
	public GameObject get_currentSelectedGameObject() { }
	// Offset : 0x49bcdc
	public GameObject get_lastSelectedGameObject() { }
	// Offset : 0x49bce4
	public Boolean get_isFocused() { }
	// Offset : 0x49a504
	public Void UpdateModules() { }
	// Offset : 0x49bcec
	public Boolean get_alreadySelecting() { }
	// Offset : 0x499ed0
	public Void SetSelectedGameObject(GameObject selected, BaseEventData pointer) { }
	// Offset : 0x49bdc4
	private BaseEventData get_baseEventDataCache() { }
	// Offset : 0x49be34
	public Void SetSelectedGameObject(GameObject selected) { }
	// Offset : 0x49be64
	private static Int32 RaycastComparer(RaycastResult lhs, RaycastResult rhs) { }
	// Offset : 0x49c348
	public Void RaycastAll(PointerEventData eventData, List`1 raycastResults) { }
	// Offset : 0x49c5a0
	public Boolean IsPointerOverGameObject() { }
	// Offset : 0x49c5a8
	public Boolean IsPointerOverGameObject(Int32 pointerId) { }
	// Offset : 0x49c67c
	protected override Void OnEnable() { }
	// Offset : 0x49c708
	protected override Void OnDisable() { }
	// Offset : 0x49c80c
	private Void TickModules() { }
	// Offset : 0x49c950
	protected virtual Void OnApplicationFocus(Boolean hasFocus) { }
	// Offset : 0x49c95c
	protected virtual Void Update() { }
	// Offset : 0x49cc9c
	private Void ChangeEventModule(BaseInputModule module) { }
	// Offset : 0x49cdf4
	public override String ToString() { }
	// Offset : 0x49cfdc
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public class EventTrigger : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IInitializePotentialDragHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler
{
	// Fields
	private List`1 m_Delegates; // 0x18
	public List`1 delegates; // 0x20

	// Properties
	public List`1 triggers { get; set; }

	// Methods
	// Offset : 0x49d0ac
	protected Void .ctor() { }
	// Offset : 0x49d0b4
	public List`1 get_triggers() { }
	// Offset : 0x49d128
	public Void set_triggers(List`1 value) { }
	// Offset : 0x49d130
	private Void Execute(EventTriggerType id, BaseEventData eventData) { }
	// Offset : 0x49d234
	public virtual Void OnPointerEnter(PointerEventData eventData) { }
	// Offset : 0x49d244
	public virtual Void OnPointerExit(PointerEventData eventData) { }
	// Offset : 0x49d254
	public virtual Void OnDrag(PointerEventData eventData) { }
	// Offset : 0x49d264
	public virtual Void OnDrop(PointerEventData eventData) { }
	// Offset : 0x49d274
	public virtual Void OnPointerDown(PointerEventData eventData) { }
	// Offset : 0x49d284
	public virtual Void OnPointerUp(PointerEventData eventData) { }
	// Offset : 0x49d294
	public virtual Void OnPointerClick(PointerEventData eventData) { }
	// Offset : 0x49d2a4
	public virtual Void OnSelect(BaseEventData eventData) { }
	// Offset : 0x49d2b4
	public virtual Void OnDeselect(BaseEventData eventData) { }
	// Offset : 0x49d2c4
	public virtual Void OnScroll(PointerEventData eventData) { }
	// Offset : 0x49d2d4
	public virtual Void OnMove(AxisEventData eventData) { }
	// Offset : 0x49d2e4
	public virtual Void OnUpdateSelected(BaseEventData eventData) { }
	// Offset : 0x49d2f4
	public virtual Void OnInitializePotentialDrag(PointerEventData eventData) { }
	// Offset : 0x49d304
	public virtual Void OnBeginDrag(PointerEventData eventData) { }
	// Offset : 0x49d314
	public virtual Void OnEndDrag(PointerEventData eventData) { }
	// Offset : 0x49d324
	public virtual Void OnSubmit(BaseEventData eventData) { }
	// Offset : 0x49d334
	public virtual Void OnCancel(BaseEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class TriggerEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x49d3b0
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class Entry
{
	// Fields
	public EventTriggerType eventID; // 0x10
	public TriggerEvent callback; // 0x18

	// Properties

	// Methods
	// Offset : 0x49d344
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public enum EventTriggerType
{
	// Fields
	public Int32 value__; // 0x10
	public const EventTriggerType PointerEnter = 0; // 0x0
	public const EventTriggerType PointerExit = 1; // 0x0
	public const EventTriggerType PointerDown = 2; // 0x0
	public const EventTriggerType PointerUp = 3; // 0x0
	public const EventTriggerType PointerClick = 4; // 0x0
	public const EventTriggerType Drag = 5; // 0x0
	public const EventTriggerType Drop = 6; // 0x0
	public const EventTriggerType Scroll = 7; // 0x0
	public const EventTriggerType UpdateSelected = 8; // 0x0
	public const EventTriggerType Select = 9; // 0x0
	public const EventTriggerType Deselect = 10; // 0x0
	public const EventTriggerType Move = 11; // 0x0
	public const EventTriggerType InitializePotentialDrag = 12; // 0x0
	public const EventTriggerType BeginDrag = 13; // 0x0
	public const EventTriggerType EndDrag = 14; // 0x0
	public const EventTriggerType Submit = 15; // 0x0
	public const EventTriggerType Cancel = 16; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public static class ExecuteEvents
{
	// Fields
	private static readonly EventFunction`1 s_PointerEnterHandler; // 0x0
	private static readonly EventFunction`1 s_PointerExitHandler; // 0x8
	private static readonly EventFunction`1 s_PointerDownHandler; // 0x10
	private static readonly EventFunction`1 s_PointerUpHandler; // 0x18
	private static readonly EventFunction`1 s_PointerClickHandler; // 0x20
	private static readonly EventFunction`1 s_InitializePotentialDragHandler; // 0x28
	private static readonly EventFunction`1 s_BeginDragHandler; // 0x30
	private static readonly EventFunction`1 s_DragHandler; // 0x38
	private static readonly EventFunction`1 s_EndDragHandler; // 0x40
	private static readonly EventFunction`1 s_DropHandler; // 0x48
	private static readonly EventFunction`1 s_ScrollHandler; // 0x50
	private static readonly EventFunction`1 s_UpdateSelectedHandler; // 0x58
	private static readonly EventFunction`1 s_SelectHandler; // 0x60
	private static readonly EventFunction`1 s_DeselectHandler; // 0x68
	private static readonly EventFunction`1 s_MoveHandler; // 0x70
	private static readonly EventFunction`1 s_SubmitHandler; // 0x78
	private static readonly EventFunction`1 s_CancelHandler; // 0x80
	private static readonly ObjectPool`1 s_HandlerListPool; // 0x88
	private static readonly List`1 s_InternalTransformList; // 0x90
	private static EventFunction`1 <>f__mg$cache0; // 0x98
	private static EventFunction`1 <>f__mg$cache1; // 0xa0
	private static EventFunction`1 <>f__mg$cache2; // 0xa8
	private static EventFunction`1 <>f__mg$cache3; // 0xb0
	private static EventFunction`1 <>f__mg$cache4; // 0xb8
	private static EventFunction`1 <>f__mg$cache5; // 0xc0
	private static EventFunction`1 <>f__mg$cache6; // 0xc8
	private static EventFunction`1 <>f__mg$cache7; // 0xd0
	private static EventFunction`1 <>f__mg$cache8; // 0xd8
	private static EventFunction`1 <>f__mg$cache9; // 0xe0
	private static EventFunction`1 <>f__mg$cacheA; // 0xe8
	private static EventFunction`1 <>f__mg$cacheB; // 0xf0
	private static EventFunction`1 <>f__mg$cacheC; // 0xf8
	private static EventFunction`1 <>f__mg$cacheD; // 0x100
	private static EventFunction`1 <>f__mg$cacheE; // 0x108
	private static EventFunction`1 <>f__mg$cacheF; // 0x110
	private static EventFunction`1 <>f__mg$cache10; // 0x118

	// Properties
	public static EventFunction`1 pointerEnterHandler { get; }
	public static EventFunction`1 pointerExitHandler { get; }
	public static EventFunction`1 pointerDownHandler { get; }
	public static EventFunction`1 pointerUpHandler { get; }
	public static EventFunction`1 pointerClickHandler { get; }
	public static EventFunction`1 initializePotentialDrag { get; }
	public static EventFunction`1 beginDragHandler { get; }
	public static EventFunction`1 dragHandler { get; }
	public static EventFunction`1 endDragHandler { get; }
	public static EventFunction`1 dropHandler { get; }
	public static EventFunction`1 scrollHandler { get; }
	public static EventFunction`1 updateSelectedHandler { get; }
	public static EventFunction`1 selectHandler { get; }
	public static EventFunction`1 deselectHandler { get; }
	public static EventFunction`1 moveHandler { get; }
	public static EventFunction`1 submitHandler { get; }
	public static EventFunction`1 cancelHandler { get; }

	// Methods
	// Offset : 0x
	public static T ValidateEventData(BaseEventData data) { }
	// Offset : 0x49d400
	private static Void Execute(IPointerEnterHandler handler, BaseEventData eventData) { }
	// Offset : 0x49d524
	private static Void Execute(IPointerExitHandler handler, BaseEventData eventData) { }
	// Offset : 0x49d648
	private static Void Execute(IPointerDownHandler handler, BaseEventData eventData) { }
	// Offset : 0x49d76c
	private static Void Execute(IPointerUpHandler handler, BaseEventData eventData) { }
	// Offset : 0x49d890
	private static Void Execute(IPointerClickHandler handler, BaseEventData eventData) { }
	// Offset : 0x49d9b4
	private static Void Execute(IInitializePotentialDragHandler handler, BaseEventData eventData) { }
	// Offset : 0x49dad8
	private static Void Execute(IBeginDragHandler handler, BaseEventData eventData) { }
	// Offset : 0x49dbfc
	private static Void Execute(IDragHandler handler, BaseEventData eventData) { }
	// Offset : 0x49dd20
	private static Void Execute(IEndDragHandler handler, BaseEventData eventData) { }
	// Offset : 0x49de44
	private static Void Execute(IDropHandler handler, BaseEventData eventData) { }
	// Offset : 0x49df68
	private static Void Execute(IScrollHandler handler, BaseEventData eventData) { }
	// Offset : 0x49e08c
	private static Void Execute(IUpdateSelectedHandler handler, BaseEventData eventData) { }
	// Offset : 0x49e178
	private static Void Execute(ISelectHandler handler, BaseEventData eventData) { }
	// Offset : 0x49e264
	private static Void Execute(IDeselectHandler handler, BaseEventData eventData) { }
	// Offset : 0x49e350
	private static Void Execute(IMoveHandler handler, BaseEventData eventData) { }
	// Offset : 0x49e474
	private static Void Execute(ISubmitHandler handler, BaseEventData eventData) { }
	// Offset : 0x49e560
	private static Void Execute(ICancelHandler handler, BaseEventData eventData) { }
	// Offset : 0x49b0c8
	public static EventFunction`1 get_pointerEnterHandler() { }
	// Offset : 0x49b058
	public static EventFunction`1 get_pointerExitHandler() { }
	// Offset : 0x49e64c
	public static EventFunction`1 get_pointerDownHandler() { }
	// Offset : 0x49e6b4
	public static EventFunction`1 get_pointerUpHandler() { }
	// Offset : 0x49e71c
	public static EventFunction`1 get_pointerClickHandler() { }
	// Offset : 0x49e784
	public static EventFunction`1 get_initializePotentialDrag() { }
	// Offset : 0x49e7ec
	public static EventFunction`1 get_beginDragHandler() { }
	// Offset : 0x49e854
	public static EventFunction`1 get_dragHandler() { }
	// Offset : 0x49e8bc
	public static EventFunction`1 get_endDragHandler() { }
	// Offset : 0x49e924
	public static EventFunction`1 get_dropHandler() { }
	// Offset : 0x49e98c
	public static EventFunction`1 get_scrollHandler() { }
	// Offset : 0x49e9f4
	public static EventFunction`1 get_updateSelectedHandler() { }
	// Offset : 0x49bd5c
	public static EventFunction`1 get_selectHandler() { }
	// Offset : 0x49bcf4
	public static EventFunction`1 get_deselectHandler() { }
	// Offset : 0x49ea5c
	public static EventFunction`1 get_moveHandler() { }
	// Offset : 0x49eac4
	public static EventFunction`1 get_submitHandler() { }
	// Offset : 0x49eb2c
	public static EventFunction`1 get_cancelHandler() { }
	// Offset : 0x49eb94
	private static Void GetEventChain(GameObject root, IList`1 eventChain) { }
	// Offset : 0x
	public static Boolean Execute(GameObject target, BaseEventData eventData, EventFunction`1 functor) { }
	// Offset : 0x
	public static GameObject ExecuteHierarchy(GameObject root, BaseEventData eventData, EventFunction`1 callbackFunction) { }
	// Offset : 0x
	private static Boolean ShouldSendToComponent(Component component) { }
	// Offset : 0x
	private static Void GetEventList(GameObject go, IList`1 results) { }
	// Offset : 0x
	public static Boolean CanHandleEvent(GameObject go) { }
	// Offset : 0x
	public static GameObject GetEventHandler(GameObject root) { }
	// Offset : 0x49edc4
	private static Void .cctor() { }
	// Offset : 0x49f490
	private static Void <s_HandlerListPool>m__0(List`1 l) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public sealed class EventFunction`1 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Void Invoke(T1 handler, BaseEventData eventData) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T1 handler, BaseEventData eventData, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public enum MoveDirection
{
	// Fields
	public Int32 value__; // 0x10
	public const MoveDirection Left = 0; // 0x0
	public const MoveDirection Up = 1; // 0x0
	public const MoveDirection Right = 2; // 0x0
	public const MoveDirection Down = 3; // 0x0
	public const MoveDirection None = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
internal static class RaycasterManager
{
	// Fields
	private static readonly List`1 s_Raycasters; // 0x0

	// Properties

	// Methods
	// Offset : 0x49b7d8
	public static Void AddRaycaster(BaseRaycaster baseRaycaster) { }
	// Offset : 0x49c538
	public static List`1 GetRaycasters() { }
	// Offset : 0x49b92c
	public static Void RemoveRaycasters(BaseRaycaster baseRaycaster) { }
	// Offset : 0x4a361c
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public struct RaycastResult
{
	// Fields
	private GameObject m_GameObject; // 0x10
	public BaseRaycaster module; // 0x18
	public Single distance; // 0x20
	public Single index; // 0x24
	public Int32 depth; // 0x28
	public Int32 sortingLayer; // 0x2c
	public Int32 sortingOrder; // 0x30
	public Vector3 worldPosition; // 0x34
	public Vector3 worldNormal; // 0x40
	public Vector2 screenPosition; // 0x4c

	// Properties
	public GameObject gameObject { get; set; }
	public Boolean isValid { get; }

	// Methods
	// Offset : 0x2c9a38
	public GameObject get_gameObject() { }
	// Offset : 0x2c9a40
	public Void set_gameObject(GameObject value) { }
	// Offset : 0x2c9a48
	public Boolean get_isValid() { }
	// Offset : 0x2c9a50
	public Void Clear() { }
	// Offset : 0x2c9a58
	public override String ToString() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public abstract class UIBehaviour : MonoBehaviour
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x49a060
	protected Void .ctor() { }
	// Offset : 0x4a6720
	protected virtual Void Awake() { }
	// Offset : 0x49a500
	protected virtual Void OnEnable() { }
	// Offset : 0x4a6724
	protected virtual Void Start() { }
	// Offset : 0x49a6ac
	protected virtual Void OnDisable() { }
	// Offset : 0x4a6728
	protected virtual Void OnDestroy() { }
	// Offset : 0x4a672c
	public virtual Boolean IsActive() { }
	// Offset : 0x4a6734
	protected virtual Void OnRectTransformDimensionsChange() { }
	// Offset : 0x4a6738
	protected virtual Void OnBeforeTransformParentChanged() { }
	// Offset : 0x4a673c
	protected virtual Void OnTransformParentChanged() { }
	// Offset : 0x4a6740
	protected virtual Void OnDidApplyAnimationProperties() { }
	// Offset : 0x4a6744
	protected virtual Void OnCanvasGroupChanged() { }
	// Offset : 0x4a6748
	protected virtual Void OnCanvasHierarchyChanged() { }
	// Offset : 0x4a674c
	public Boolean IsDestroyed() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public class AxisEventData : BaseEventData
{
	// Fields
	private Vector2 <moveVector>k__BackingField; // 0x20
	private MoveDirection <moveDir>k__BackingField; // 0x28

	// Properties
	public Vector2 moveVector { get; set; }
	public MoveDirection moveDir { get; set; }

	// Methods
	// Offset : 0x499d48
	public Void .ctor(EventSystem eventSystem) { }
	// Offset : 0x499e14
	public Vector2 get_moveVector() { }
	// Offset : 0x499e04
	public Void set_moveVector(Vector2 value) { }
	// Offset : 0x499e1c
	public MoveDirection get_moveDir() { }
	// Offset : 0x499e0c
	public Void set_moveDir(MoveDirection value) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public abstract class AbstractEventData
{
	// Fields
	protected Boolean m_Used; // 0x10

	// Properties
	public virtual Boolean used { get; }

	// Methods
	// Offset : 0x499d24
	protected Void .ctor() { }
	// Offset : 0x499d2c
	public virtual Void Reset() { }
	// Offset : 0x499d34
	public virtual Void Use() { }
	// Offset : 0x499d40
	public virtual Boolean get_used() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public class BaseEventData : AbstractEventData
{
	// Fields
	private readonly EventSystem m_EventSystem; // 0x18

	// Properties
	public BaseInputModule currentInputModule { get; }
	public GameObject selectedObject { get; set; }

	// Methods
	// Offset : 0x499dd8
	public Void .ctor(EventSystem eventSystem) { }
	// Offset : 0x499e24
	public BaseInputModule get_currentInputModule() { }
	// Offset : 0x499e58
	public GameObject get_selectedObject() { }
	// Offset : 0x499e8c
	public Void set_selectedObject(GameObject value) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public class PointerEventData : BaseEventData
{
	// Fields
	private GameObject <pointerEnter>k__BackingField; // 0x20
	private GameObject m_PointerPress; // 0x28
	private GameObject <lastPress>k__BackingField; // 0x30
	private GameObject <rawPointerPress>k__BackingField; // 0x38
	private GameObject <pointerDrag>k__BackingField; // 0x40
	private RaycastResult <pointerCurrentRaycast>k__BackingField; // 0x48
	private RaycastResult <pointerPressRaycast>k__BackingField; // 0x90
	public List`1 hovered; // 0xd8
	private Boolean <eligibleForClick>k__BackingField; // 0xe0
	private Int32 <pointerId>k__BackingField; // 0xe4
	private Vector2 <position>k__BackingField; // 0xe8
	private Vector2 <delta>k__BackingField; // 0xf0
	private Vector2 <pressPosition>k__BackingField; // 0xf8
	private Vector3 <worldPosition>k__BackingField; // 0x100
	private Vector3 <worldNormal>k__BackingField; // 0x10c
	private Single <clickTime>k__BackingField; // 0x118
	private Int32 <clickCount>k__BackingField; // 0x11c
	private Vector2 <scrollDelta>k__BackingField; // 0x120
	private Boolean <useDragThreshold>k__BackingField; // 0x128
	private Boolean <dragging>k__BackingField; // 0x129
	private InputButton <button>k__BackingField; // 0x12c

	// Properties
	public GameObject pointerEnter { get; set; }
	public GameObject lastPress { get; set; }
	public GameObject rawPointerPress { get; set; }
	public GameObject pointerDrag { get; set; }
	public RaycastResult pointerCurrentRaycast { get; set; }
	public RaycastResult pointerPressRaycast { get; set; }
	public Boolean eligibleForClick { get; set; }
	public Int32 pointerId { get; set; }
	public Vector2 position { get; set; }
	public Vector2 delta { get; set; }
	public Vector2 pressPosition { get; set; }
	public Vector3 worldPosition { get; set; }
	public Vector3 worldNormal { get; set; }
	public Single clickTime { get; set; }
	public Int32 clickCount { get; set; }
	public Vector2 scrollDelta { get; set; }
	public Boolean useDragThreshold { get; set; }
	public Boolean dragging { get; set; }
	public InputButton button { get; set; }
	public Camera enterEventCamera { get; }
	public Camera pressEventCamera { get; }
	public GameObject pointerPress { get; set; }

	// Methods
	// Offset : 0x4a07f8
	public Void .ctor(EventSystem eventSystem) { }
	// Offset : 0x49b050
	public GameObject get_pointerEnter() { }
	// Offset : 0x49b0c0
	public Void set_pointerEnter(GameObject value) { }
	// Offset : 0x4a0954
	public GameObject get_lastPress() { }
	// Offset : 0x4a095c
	private Void set_lastPress(GameObject value) { }
	// Offset : 0x4a0964
	public GameObject get_rawPointerPress() { }
	// Offset : 0x4a096c
	public Void set_rawPointerPress(GameObject value) { }
	// Offset : 0x4a0974
	public GameObject get_pointerDrag() { }
	// Offset : 0x4a097c
	public Void set_pointerDrag(GameObject value) { }
	// Offset : 0x4a0984
	public RaycastResult get_pointerCurrentRaycast() { }
	// Offset : 0x4a09a4
	public Void set_pointerCurrentRaycast(RaycastResult value) { }
	// Offset : 0x4a09c0
	public RaycastResult get_pointerPressRaycast() { }
	// Offset : 0x4a09e0
	public Void set_pointerPressRaycast(RaycastResult value) { }
	// Offset : 0x4a09fc
	public Boolean get_eligibleForClick() { }
	// Offset : 0x4a08ec
	public Void set_eligibleForClick(Boolean value) { }
	// Offset : 0x4a0a04
	public Int32 get_pointerId() { }
	// Offset : 0x4a08f8
	public Void set_pointerId(Int32 value) { }
	// Offset : 0x4a0104
	public Vector2 get_position() { }
	// Offset : 0x4a0900
	public Void set_position(Vector2 value) { }
	// Offset : 0x4a0a0c
	public Vector2 get_delta() { }
	// Offset : 0x4a0908
	public Void set_delta(Vector2 value) { }
	// Offset : 0x4a0a14
	public Vector2 get_pressPosition() { }
	// Offset : 0x4a0910
	public Void set_pressPosition(Vector2 value) { }
	// Offset : 0x4a0a1c
	public Vector3 get_worldPosition() { }
	// Offset : 0x4a0a2c
	public Void set_worldPosition(Vector3 value) { }
	// Offset : 0x4a0a3c
	public Vector3 get_worldNormal() { }
	// Offset : 0x4a0a4c
	public Void set_worldNormal(Vector3 value) { }
	// Offset : 0x4a0a5c
	public Single get_clickTime() { }
	// Offset : 0x4a0918
	public Void set_clickTime(Single value) { }
	// Offset : 0x4a0a64
	public Int32 get_clickCount() { }
	// Offset : 0x4a0920
	public Void set_clickCount(Int32 value) { }
	// Offset : 0x4a0a6c
	public Vector2 get_scrollDelta() { }
	// Offset : 0x4a0928
	public Void set_scrollDelta(Vector2 value) { }
	// Offset : 0x4a0a78
	public Boolean get_useDragThreshold() { }
	// Offset : 0x4a0934
	public Void set_useDragThreshold(Boolean value) { }
	// Offset : 0x4a0a80
	public Boolean get_dragging() { }
	// Offset : 0x4a0940
	public Void set_dragging(Boolean value) { }
	// Offset : 0x4a0a88
	public InputButton get_button() { }
	// Offset : 0x4a094c
	public Void set_button(InputButton value) { }
	// Offset : 0x4a0a90
	public Boolean IsPointerMoving() { }
	// Offset : 0x4a0ac4
	public Boolean IsScrolling() { }
	// Offset : 0x4a0afc
	public Camera get_enterEventCamera() { }
	// Offset : 0x4a0bbc
	public Camera get_pressEventCamera() { }
	// Offset : 0x4a0c7c
	public GameObject get_pointerPress() { }
	// Offset : 0x4a0c84
	public Void set_pointerPress(GameObject value) { }
	// Offset : 0x4a0d10
	public override String ToString() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum InputButton
{
	// Fields
	public Int32 value__; // 0x10
	public const InputButton Left = 0; // 0x0
	public const InputButton Right = 1; // 0x0
	public const InputButton Middle = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum FramePressState
{
	// Fields
	public Int32 value__; // 0x10
	public const FramePressState Pressed = 0; // 0x0
	public const FramePressState Released = 1; // 0x0
	public const FramePressState PressedAndReleased = 2; // 0x0
	public const FramePressState NotChanged = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public class BaseInput : UIBehaviour
{
	// Fields

	// Properties
	public virtual String compositionString { get; }
	public virtual IMECompositionMode imeCompositionMode { get; set; }
	public virtual Vector2 compositionCursorPos { get; set; }
	public virtual Boolean mousePresent { get; }
	public virtual Vector2 mousePosition { get; }
	public virtual Vector2 mouseScrollDelta { get; }
	public virtual Boolean touchSupported { get; }
	public virtual Int32 touchCount { get; }

	// Methods
	// Offset : 0x49a058
	public Void .ctor() { }
	// Offset : 0x49a068
	public virtual String get_compositionString() { }
	// Offset : 0x49a070
	public virtual IMECompositionMode get_imeCompositionMode() { }
	// Offset : 0x49a078
	public virtual Void set_imeCompositionMode(IMECompositionMode value) { }
	// Offset : 0x49a084
	public virtual Vector2 get_compositionCursorPos() { }
	// Offset : 0x49a08c
	public virtual Void set_compositionCursorPos(Vector2 value) { }
	// Offset : 0x49a094
	public virtual Boolean get_mousePresent() { }
	// Offset : 0x49a09c
	public virtual Boolean GetMouseButtonDown(Int32 button) { }
	// Offset : 0x49a0a8
	public virtual Boolean GetMouseButtonUp(Int32 button) { }
	// Offset : 0x49a0b4
	public virtual Boolean GetMouseButton(Int32 button) { }
	// Offset : 0x49a0c0
	public virtual Vector2 get_mousePosition() { }
	// Offset : 0x49a150
	public virtual Vector2 get_mouseScrollDelta() { }
	// Offset : 0x49a158
	public virtual Boolean get_touchSupported() { }
	// Offset : 0x49a160
	public virtual Int32 get_touchCount() { }
	// Offset : 0x49a168
	public virtual Touch GetTouch(Int32 index) { }
	// Offset : 0x49a1d0
	public virtual Single GetAxisRaw(String axisName) { }
	// Offset : 0x49a1dc
	public virtual Boolean GetButtonDown(String buttonName) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public abstract class BaseInputModule : UIBehaviour
{
	// Fields
	protected List`1 m_RaycastResultCache; // 0x18
	private AxisEventData m_AxisEventData; // 0x20
	private EventSystem m_EventSystem; // 0x28
	private BaseEventData m_BaseEventData; // 0x30
	protected BaseInput m_InputOverride; // 0x38
	private BaseInput m_DefaultInput; // 0x40

	// Properties
	public BaseInput input { get; }
	public BaseInput inputOverride { get; set; }
	protected EventSystem eventSystem { get; }

	// Methods
	// Offset : 0x49a1e8
	protected Void .ctor() { }
	// Offset : 0x49a258
	public BaseInput get_input() { }
	// Offset : 0x49a480
	public BaseInput get_inputOverride() { }
	// Offset : 0x49a488
	public Void set_inputOverride(BaseInput value) { }
	// Offset : 0x49a490
	protected EventSystem get_eventSystem() { }
	// Offset : 0x49a498
	protected override Void OnEnable() { }
	// Offset : 0x49a680
	protected override Void OnDisable() { }
	// Offset : 0x
	public abstract Void Process() { }
	// Offset : 0x49a6b0
	protected static RaycastResult FindFirstRaycast(List`1 candidates) { }
	// Offset : 0x49a814
	protected static MoveDirection DetermineMoveDirection(Single x, Single y) { }
	// Offset : 0x49a820
	protected static MoveDirection DetermineMoveDirection(Single x, Single y, Single deadZone) { }
	// Offset : 0x49a904
	protected static GameObject FindCommonRoot(GameObject g1, GameObject g2) { }
	// Offset : 0x49aad0
	protected Void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget) { }
	// Offset : 0x49b130
	protected virtual AxisEventData GetAxisEventData(Single x, Single y, Single moveDeadZone) { }
	// Offset : 0x49b258
	protected virtual BaseEventData GetBaseEventData() { }
	// Offset : 0x49b308
	public virtual Boolean IsPointerOverGameObject(Int32 pointerId) { }
	// Offset : 0x49b310
	public virtual Boolean ShouldActivateModule() { }
	// Offset : 0x49b368
	public virtual Void DeactivateModule() { }
	// Offset : 0x49b36c
	public virtual Void ActivateModule() { }
	// Offset : 0x49b370
	public virtual Void UpdateModule() { }
	// Offset : 0x49b374
	public virtual Boolean IsModuleSupported() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public abstract class PointerInputModule : BaseInputModule
{
	// Fields
	public const Int32 kMouseLeftId; // 0x0
	public const Int32 kMouseRightId; // 0x0
	public const Int32 kMouseMiddleId; // 0x0
	public const Int32 kFakeTouchesId; // 0x0
	protected Dictionary`2 m_PointerData; // 0x48
	private readonly MouseState m_MouseState; // 0x50

	// Properties

	// Methods
	// Offset : 0x4a1ab8
	protected Void .ctor() { }
	// Offset : 0x4a1bb0
	protected Boolean GetPointerData(Int32 id, out PointerEventData data, Boolean create) { }
	// Offset : 0x4a1cac
	protected Void RemovePointerData(PointerEventData data) { }
	// Offset : 0x4a1d2c
	protected PointerEventData GetTouchPointerEventData(Touch input, out Boolean pressed, out Boolean released) { }
	// Offset : 0x4a2058
	protected Void CopyFromTo(PointerEventData from, PointerEventData to) { }
	// Offset : 0x4a212c
	protected FramePressState StateForMouseButton(Int32 buttonId) { }
	// Offset : 0x4a21f8
	protected virtual MouseState GetMousePointerEventData() { }
	// Offset : 0x4a2240
	protected virtual MouseState GetMousePointerEventData(Int32 id) { }
	// Offset : 0x4a2718
	protected PointerEventData GetLastPointerEventData(Int32 id) { }
	// Offset : 0x4a2744
	private static Boolean ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, Single threshold, Boolean useDragThreshold) { }
	// Offset : 0x4a2814
	protected virtual Void ProcessMove(PointerEventData pointerEvent) { }
	// Offset : 0x4a2858
	protected virtual Void ProcessDrag(PointerEventData pointerEvent) { }
	// Offset : 0x4a2a98
	public override Boolean IsPointerOverGameObject(Int32 pointerId) { }
	// Offset : 0x4a2b44
	protected Void ClearSelection() { }
	// Offset : 0x4a2cf0
	public override String ToString() { }
	// Offset : 0x4a3008
	protected Void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
protected class ButtonState
{
	// Fields
	private InputButton m_Button; // 0x10
	private MouseButtonEventData m_EventData; // 0x18

	// Properties
	public MouseButtonEventData eventData { get; set; }
	public InputButton button { get; set; }

	// Methods
	// Offset : 0x4a3104
	public Void .ctor() { }
	// Offset : 0x4a3110
	public MouseButtonEventData get_eventData() { }
	// Offset : 0x4a3118
	public Void set_eventData(MouseButtonEventData value) { }
	// Offset : 0x4a3120
	public InputButton get_button() { }
	// Offset : 0x4a3128
	public Void set_button(InputButton value) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
protected class MouseState
{
	// Fields
	private List`1 m_TrackedButtons; // 0x10

	// Properties

	// Methods
	// Offset : 0x4a1b40
	public Void .ctor() { }
	// Offset : 0x4a3160
	public Boolean AnyPressesThisFrame() { }
	// Offset : 0x4a3244
	public Boolean AnyReleasesThisFrame() { }
	// Offset : 0x4a3328
	public ButtonState GetButtonState(InputButton button) { }
	// Offset : 0x4a26b8
	public Void SetButtonState(InputButton button, FramePressState stateForMouseButton, PointerEventData data) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public class MouseButtonEventData
{
	// Fields
	public FramePressState buttonState; // 0x10
	public PointerEventData buttonData; // 0x18

	// Properties

	// Methods
	// Offset : 0x4a3130
	public Void .ctor() { }
	// Offset : 0x4a3138
	public Boolean PressedThisFrame() { }
	// Offset : 0x4a314c
	public Boolean ReleasedThisFrame() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public class StandaloneInputModule : PointerInputModule
{
	// Fields
	private Single m_PrevActionTime; // 0x58
	private Vector2 m_LastMoveVector; // 0x5c
	private Int32 m_ConsecutiveMoveCount; // 0x64
	private Vector2 m_LastMousePosition; // 0x68
	private Vector2 m_MousePosition; // 0x70
	private GameObject m_CurrentFocusedGameObject; // 0x78
	private PointerEventData m_InputPointerEvent; // 0x80
	private String m_HorizontalAxis; // 0x88
	private String m_VerticalAxis; // 0x90
	private String m_SubmitButton; // 0x98
	private String m_CancelButton; // 0xa0
	private Single m_InputActionsPerSecond; // 0xa8
	private Single m_RepeatDelay; // 0xac
	private Boolean m_ForceModuleActive; // 0xb0

	// Properties
	public InputMode inputMode { get; }
	public Boolean allowActivationOnMobileDevice { get; set; }
	public Boolean forceModuleActive { get; set; }
	public Single inputActionsPerSecond { get; set; }
	public Single repeatDelay { get; set; }
	public String horizontalAxis { get; set; }
	public String verticalAxis { get; set; }
	public String submitButton { get; set; }
	public String cancelButton { get; set; }

	// Methods
	// Offset : 0x4a3690
	protected Void .ctor() { }
	// Offset : 0x4a3720
	public InputMode get_inputMode() { }
	// Offset : 0x4a3728
	public Boolean get_allowActivationOnMobileDevice() { }
	// Offset : 0x4a3730
	public Void set_allowActivationOnMobileDevice(Boolean value) { }
	// Offset : 0x4a373c
	public Boolean get_forceModuleActive() { }
	// Offset : 0x4a3744
	public Void set_forceModuleActive(Boolean value) { }
	// Offset : 0x4a3750
	public Single get_inputActionsPerSecond() { }
	// Offset : 0x4a3758
	public Void set_inputActionsPerSecond(Single value) { }
	// Offset : 0x4a3760
	public Single get_repeatDelay() { }
	// Offset : 0x4a3768
	public Void set_repeatDelay(Single value) { }
	// Offset : 0x4a3770
	public String get_horizontalAxis() { }
	// Offset : 0x4a3778
	public Void set_horizontalAxis(String value) { }
	// Offset : 0x4a3780
	public String get_verticalAxis() { }
	// Offset : 0x4a3788
	public Void set_verticalAxis(String value) { }
	// Offset : 0x4a3790
	public String get_submitButton() { }
	// Offset : 0x4a3798
	public Void set_submitButton(String value) { }
	// Offset : 0x4a37a0
	public String get_cancelButton() { }
	// Offset : 0x4a37a8
	public Void set_cancelButton(String value) { }
	// Offset : 0x4a37b0
	private Boolean ShouldIgnoreEventsOnNoFocus() { }
	// Offset : 0x4a37d4
	public override Void UpdateModule() { }
	// Offset : 0x4a3950
	public override Boolean IsModuleSupported() { }
	// Offset : 0x4a3a04
	public override Boolean ShouldActivateModule() { }
	// Offset : 0x4a3d14
	public override Void ActivateModule() { }
	// Offset : 0x4a3ec8
	public override Void DeactivateModule() { }
	// Offset : 0x4a3ecc
	public override Void Process() { }
	// Offset : 0x4a467c
	private Boolean ProcessTouchEvents() { }
	// Offset : 0x4a487c
	protected Void ProcessTouchPress(PointerEventData pointerEvent, Boolean pressed, Boolean released) { }
	// Offset : 0x4a4438
	protected Boolean SendSubmitEventToSelectedObject() { }
	// Offset : 0x4a4da4
	private Vector2 GetRawMoveVector() { }
	// Offset : 0x4a4114
	protected Boolean SendMoveEventToSelectedObject() { }
	// Offset : 0x4a4874
	protected Void ProcessMouseEvent() { }
	// Offset : 0x4a52cc
	protected virtual Boolean ForceAutoSelect() { }
	// Offset : 0x4a4f84
	protected Void ProcessMouseEvent(Int32 id) { }
	// Offset : 0x4a3fc8
	protected Boolean SendUpdateEventToSelectedObject() { }
	// Offset : 0x4a52d4
	protected Void ProcessMousePress(MouseButtonEventData data) { }
	// Offset : 0x4a57e4
	protected GameObject GetCurrentFocusedGameObject() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum InputMode
{
	// Fields
	public Int32 value__; // 0x10
	public const InputMode Mouse = 0; // 0x0
	public const InputMode Buttons = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public class TouchInputModule : PointerInputModule
{
	// Fields
	private Vector2 m_LastMousePosition; // 0x58
	private Vector2 m_MousePosition; // 0x60
	private PointerEventData m_InputPointerEvent; // 0x68
	private Boolean m_ForceModuleActive; // 0x70

	// Properties
	public Boolean allowActivationOnStandalone { get; set; }
	public Boolean forceModuleActive { get; set; }

	// Methods
	// Offset : 0x4a57ec
	protected Void .ctor() { }
	// Offset : 0x4a57f0
	public Boolean get_allowActivationOnStandalone() { }
	// Offset : 0x4a57f8
	public Void set_allowActivationOnStandalone(Boolean value) { }
	// Offset : 0x4a5804
	public Boolean get_forceModuleActive() { }
	// Offset : 0x4a580c
	public Void set_forceModuleActive(Boolean value) { }
	// Offset : 0x4a5818
	public override Void UpdateModule() { }
	// Offset : 0x4a597c
	public override Boolean IsModuleSupported() { }
	// Offset : 0x4a59dc
	public override Boolean ShouldActivateModule() { }
	// Offset : 0x4a5b48
	private Boolean UseFakeInput() { }
	// Offset : 0x4a5ba4
	public override Void Process() { }
	// Offset : 0x4a5bdc
	private Void FakeTouches() { }
	// Offset : 0x4a5dcc
	private Void ProcessTouchEvents() { }
	// Offset : 0x4a5f8c
	protected Void ProcessTouchPress(PointerEventData pointerEvent, Boolean pressed, Boolean released) { }
	// Offset : 0x4a64b4
	public override Void DeactivateModule() { }
	// Offset : 0x4a64b8
	public override String ToString() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public abstract class BaseRaycaster : UIBehaviour
{
	// Fields

	// Properties
	public abstract Camera eventCamera { get; }
	public virtual Int32 priority { get; }
	public virtual Int32 sortOrderPriority { get; }
	public virtual Int32 renderOrderPriority { get; }

	// Methods
	// Offset : 0x49b37c
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Void Raycast(PointerEventData eventData, List`1 resultAppendList) { }
	// Offset : 0x
	public abstract Camera get_eventCamera() { }
	// Offset : 0x49b384
	public virtual Int32 get_priority() { }
	// Offset : 0x49b38c
	public virtual Int32 get_sortOrderPriority() { }
	// Offset : 0x49b394
	public virtual Int32 get_renderOrderPriority() { }
	// Offset : 0x49b39c
	public override String ToString() { }
	// Offset : 0x49b774
	protected override Void OnEnable() { }
	// Offset : 0x49b8c8
	protected override Void OnDisable() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public class Physics2DRaycaster : PhysicsRaycaster
{
	// Fields
	private RaycastHit2D[] m_Hits; // 0x38

	// Properties

	// Methods
	// Offset : 0x49f4ec
	protected Void .ctor() { }
	// Offset : 0x49f55c
	public override Void Raycast(PointerEventData eventData, List`1 resultAppendList) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.EventSystems
public class PhysicsRaycaster : BaseRaycaster
{
	// Fields
	protected const Int32 kNoEventMaskSet; // 0x0
	protected Camera m_EventCamera; // 0x18
	protected LayerMask m_EventMask; // 0x20
	protected Int32 m_MaxRayIntersections; // 0x24
	protected Int32 m_LastMaxRayIntersections; // 0x28
	private RaycastHit[] m_Hits; // 0x30
	private static Comparison`1 <>f__am$cache0; // 0x0

	// Properties
	public override Camera eventCamera { get; }
	public virtual Int32 depth { get; }
	public Int32 finalEventMask { get; }
	public LayerMask eventMask { get; set; }
	public Int32 maxRayIntersections { get; set; }

	// Methods
	// Offset : 0x49f524
	protected Void .ctor() { }
	// Offset : 0x4a010c
	public override Camera get_eventCamera() { }
	// Offset : 0x4a01b4
	public virtual Int32 get_depth() { }
	// Offset : 0x49fff0
	public Int32 get_finalEventMask() { }
	// Offset : 0x4a02ac
	public LayerMask get_eventMask() { }
	// Offset : 0x4a02b4
	public Void set_eventMask(LayerMask value) { }
	// Offset : 0x49ffe8
	public Int32 get_maxRayIntersections() { }
	// Offset : 0x4a02bc
	public Void set_maxRayIntersections(Int32 value) { }
	// Offset : 0x49fbc4
	protected Boolean ComputeRayAndDistance(PointerEventData eventData, ref Ray ray, ref Single distanceToClipPlane) { }
	// Offset : 0x4a02c4
	public override Void Raycast(PointerEventData eventData, List`1 resultAppendList) { }
	// Offset : 0x4a07b8
	private static Int32 <Raycast>m__0(RaycastHit r1, RaycastHit r2) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI.CoroutineTween
internal interface ITweenValue
{
	// Fields

	// Properties
	public abstract Boolean ignoreTimeScale { get; }
	public abstract Single duration { get; }

	// Methods
	// Offset : 0x
	public abstract Void TweenValue(Single floatPercentage) { }
	// Offset : 0x
	public abstract Boolean get_ignoreTimeScale() { }
	// Offset : 0x
	public abstract Single get_duration() { }
	// Offset : 0x
	public abstract Boolean ValidTarget() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI.CoroutineTween
internal struct ColorTween : ITweenValue
{
	// Fields
	private ColorTweenCallback m_Target; // 0x10
	private Color m_StartColor; // 0x18
	private Color m_TargetColor; // 0x28
	private ColorTweenMode m_TweenMode; // 0x38
	private Single m_Duration; // 0x3c
	private Boolean m_IgnoreTimeScale; // 0x40

	// Properties
	public Color startColor { get; set; }
	public Color targetColor { get; set; }
	public ColorTweenMode tweenMode { get; set; }
	public Single duration { get; set; }
	public Boolean ignoreTimeScale { get; set; }

	// Methods
	// Offset : 0x2c9b7c
	public Color get_startColor() { }
	// Offset : 0x2c9b88
	public Void set_startColor(Color value) { }
	// Offset : 0x2c9b94
	public Color get_targetColor() { }
	// Offset : 0x2c9ba0
	public Void set_targetColor(Color value) { }
	// Offset : 0x2c9bac
	public ColorTweenMode get_tweenMode() { }
	// Offset : 0x2c9bb4
	public Void set_tweenMode(ColorTweenMode value) { }
	// Offset : 0x2c9bbc
	public Single get_duration() { }
	// Offset : 0x2c9bc4
	public Void set_duration(Single value) { }
	// Offset : 0x2c9bcc
	public Boolean get_ignoreTimeScale() { }
	// Offset : 0x2c9bd4
	public Void set_ignoreTimeScale(Boolean value) { }
	// Offset : 0x2c9be0
	public Void TweenValue(Single floatPercentage) { }
	// Offset : 0x2c9be8
	public Void AddOnChangedCallback(UnityAction`1 callback) { }
	// Offset : 0x2c9bf0
	public Boolean GetIgnoreTimescale() { }
	// Offset : 0x2c9bf8
	public Single GetDuration() { }
	// Offset : 0x2c9c00
	public Boolean ValidTarget() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum ColorTweenMode
{
	// Fields
	public Int32 value__; // 0x10
	public const ColorTweenMode All = 0; // 0x0
	public const ColorTweenMode RGB = 1; // 0x0
	public const ColorTweenMode Alpha = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public class ColorTweenCallback : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4ab1d4
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI.CoroutineTween
internal struct FloatTween : ITweenValue
{
	// Fields
	private FloatTweenCallback m_Target; // 0x10
	private Single m_StartValue; // 0x18
	private Single m_TargetValue; // 0x1c
	private Single m_Duration; // 0x20
	private Boolean m_IgnoreTimeScale; // 0x24

	// Properties
	public Single startValue { get; set; }
	public Single targetValue { get; set; }
	public Single duration { get; set; }
	public Boolean ignoreTimeScale { get; set; }

	// Methods
	// Offset : 0x2c9c5c
	public Single get_startValue() { }
	// Offset : 0x2c9c64
	public Void set_startValue(Single value) { }
	// Offset : 0x2c9c6c
	public Single get_targetValue() { }
	// Offset : 0x2c9c74
	public Void set_targetValue(Single value) { }
	// Offset : 0x2c9c7c
	public Single get_duration() { }
	// Offset : 0x2c9c84
	public Void set_duration(Single value) { }
	// Offset : 0x2c9c8c
	public Boolean get_ignoreTimeScale() { }
	// Offset : 0x2c9c94
	public Void set_ignoreTimeScale(Boolean value) { }
	// Offset : 0x2c9ca0
	public Void TweenValue(Single floatPercentage) { }
	// Offset : 0x2c9ca8
	public Void AddOnChangedCallback(UnityAction`1 callback) { }
	// Offset : 0x2c9cb0
	public Boolean GetIgnoreTimescale() { }
	// Offset : 0x2c9cb8
	public Single GetDuration() { }
	// Offset : 0x2c9cc0
	public Boolean ValidTarget() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public class FloatTweenCallback : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4ab3e8
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI.CoroutineTween
internal class TweenRunner`1
{
	// Fields
	protected MonoBehaviour m_CoroutineContainer; // 0x0
	protected IEnumerator m_Tween; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	private static IEnumerator Start(T tweenInfo) { }
	// Offset : 0x
	public Void Init(MonoBehaviour coroutineContainer) { }
	// Offset : 0x
	public Void StartTween(T info) { }
	// Offset : 0x
	public Void StopTween() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal T tweenInfo; // 0x0
	internal Single <elapsedTime>__0; // 0x0
	internal Single <percentage>__1; // 0x0
	internal Object $current; // 0x0
	internal Boolean $disposing; // 0x0
	internal Int32 $PC; // 0x0

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	public Void Reset() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
[Serializable]
public class AnimationTriggers
{
	// Fields
	private const String kDefaultNormalAnimName; // 0x0
	private const String kDefaultSelectedAnimName; // 0x0
	private const String kDefaultPressedAnimName; // 0x0
	private const String kDefaultDisabledAnimName; // 0x0
	private String m_NormalTrigger; // 0x10
	private String m_HighlightedTrigger; // 0x18
	private String m_PressedTrigger; // 0x20
	private String m_DisabledTrigger; // 0x28

	// Properties
	public String normalTrigger { get; set; }
	public String highlightedTrigger { get; set; }
	public String pressedTrigger { get; set; }
	public String disabledTrigger { get; set; }

	// Methods
	// Offset : 0x4a686c
	public Void .ctor() { }
	// Offset : 0x4a68f4
	public String get_normalTrigger() { }
	// Offset : 0x4a68fc
	public Void set_normalTrigger(String value) { }
	// Offset : 0x4a6904
	public String get_highlightedTrigger() { }
	// Offset : 0x4a690c
	public Void set_highlightedTrigger(String value) { }
	// Offset : 0x4a6914
	public String get_pressedTrigger() { }
	// Offset : 0x4a691c
	public Void set_pressedTrigger(String value) { }
	// Offset : 0x4a6924
	public String get_disabledTrigger() { }
	// Offset : 0x4a692c
	public Void set_disabledTrigger(String value) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Button : Selectable, IPointerClickHandler, ISubmitHandler, IEventSystemHandler
{
	// Fields
	private ButtonClickedEvent m_OnClick; // 0xd8

	// Properties
	public ButtonClickedEvent onClick { get; set; }

	// Methods
	// Offset : 0x4a759c
	protected Void .ctor() { }
	// Offset : 0x4a762c
	public ButtonClickedEvent get_onClick() { }
	// Offset : 0x4a7634
	public Void set_onClick(ButtonClickedEvent value) { }
	// Offset : 0x4a763c
	private Void Press() { }
	// Offset : 0x4a7714
	public virtual Void OnPointerClick(PointerEventData eventData) { }
	// Offset : 0x4a7758
	public virtual Void OnSubmit(BaseEventData eventData) { }
	// Offset : 0x4a7828
	private IEnumerator OnFinishSubmit() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class ButtonClickedEvent : UnityEvent
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4a7624
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private sealed class <OnFinishSubmit>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal Single <fadeTime>__0; // 0x10
	internal Single <elapsedTime>__0; // 0x14
	internal Button $this; // 0x18
	internal Object $current; // 0x20
	internal Boolean $disposing; // 0x28
	internal Int32 $PC; // 0x2c

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x4a7898
	public Void .ctor() { }
	// Offset : 0x4a78a0
	public Boolean MoveNext() { }
	// Offset : 0x4a79fc
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x4a7a04
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x4a7a0c
	public Void Dispose() { }
	// Offset : 0x4a7a20
	public Void Reset() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public enum CanvasUpdate
{
	// Fields
	public Int32 value__; // 0x10
	public const CanvasUpdate Prelayout = 0; // 0x0
	public const CanvasUpdate Layout = 1; // 0x0
	public const CanvasUpdate PostLayout = 2; // 0x0
	public const CanvasUpdate PreRender = 3; // 0x0
	public const CanvasUpdate LatePreRender = 4; // 0x0
	public const CanvasUpdate MaxUpdateValue = 5; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface ICanvasElement
{
	// Fields

	// Properties
	public abstract Transform transform { get; }

	// Methods
	// Offset : 0x
	public abstract Void Rebuild(CanvasUpdate executing) { }
	// Offset : 0x
	public abstract Transform get_transform() { }
	// Offset : 0x
	public abstract Void LayoutComplete() { }
	// Offset : 0x
	public abstract Void GraphicUpdateComplete() { }
	// Offset : 0x
	public abstract Boolean IsDestroyed() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class CanvasUpdateRegistry
{
	// Fields
	private static CanvasUpdateRegistry s_Instance; // 0x0
	private Boolean m_PerformingLayoutUpdate; // 0x10
	private Boolean m_PerformingGraphicUpdate; // 0x11
	private readonly IndexedSet`1 m_LayoutRebuildQueue; // 0x18
	private readonly IndexedSet`1 m_GraphicRebuildQueue; // 0x20
	private static readonly Comparison`1 s_SortLayoutFunction; // 0x8
	private static Comparison`1 <>f__mg$cache0; // 0x10

	// Properties
	public static CanvasUpdateRegistry instance { get; }

	// Methods
	// Offset : 0x4a8454
	protected Void .ctor() { }
	// Offset : 0x4a851c
	public static CanvasUpdateRegistry get_instance() { }
	// Offset : 0x4a85dc
	private Boolean ObjectValidForUpdate(ICanvasElement element) { }
	// Offset : 0x4a86bc
	private Void CleanInvalidItems() { }
	// Offset : 0x4a8acc
	private Void PerformUpdate() { }
	// Offset : 0x4a95c4
	private static Int32 ParentCount(Transform child) { }
	// Offset : 0x4a96b0
	private static Int32 SortLayoutList(ICanvasElement x, ICanvasElement y) { }
	// Offset : 0x4a9888
	public static Void RegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }
	// Offset : 0x4a99b0
	public static Boolean TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }
	// Offset : 0x4a9900
	private Boolean InternalRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }
	// Offset : 0x4a9a28
	public static Void RegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }
	// Offset : 0x4a9b98
	public static Boolean TryRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }
	// Offset : 0x4a9aa0
	private Boolean InternalRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }
	// Offset : 0x4a9c10
	public static Void UnRegisterCanvasElementForRebuild(ICanvasElement element) { }
	// Offset : 0x4a9ca4
	private Void InternalUnRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }
	// Offset : 0x4a9e68
	private Void InternalUnRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }
	// Offset : 0x4aa02c
	public static Boolean IsRebuildingLayout() { }
	// Offset : 0x4aa09c
	public static Boolean IsRebuildingGraphics() { }
	// Offset : 0x4aa10c
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
[Serializable]
public struct ColorBlock : IEquatable`1
{
	// Fields
	private Color m_NormalColor; // 0x10
	private Color m_HighlightedColor; // 0x20
	private Color m_PressedColor; // 0x30
	private Color m_DisabledColor; // 0x40
	private Single m_ColorMultiplier; // 0x50
	private Single m_FadeDuration; // 0x54

	// Properties
	public Color normalColor { get; set; }
	public Color highlightedColor { get; set; }
	public Color pressedColor { get; set; }
	public Color disabledColor { get; set; }
	public Single colorMultiplier { get; set; }
	public Single fadeDuration { get; set; }
	public static ColorBlock defaultColorBlock { get; }

	// Methods
	// Offset : 0x2c9a60
	public Color get_normalColor() { }
	// Offset : 0x2c9a6c
	public Void set_normalColor(Color value) { }
	// Offset : 0x2c9a78
	public Color get_highlightedColor() { }
	// Offset : 0x2c9a84
	public Void set_highlightedColor(Color value) { }
	// Offset : 0x2c9a90
	public Color get_pressedColor() { }
	// Offset : 0x2c9a9c
	public Void set_pressedColor(Color value) { }
	// Offset : 0x2c9aa8
	public Color get_disabledColor() { }
	// Offset : 0x2c9ab4
	public Void set_disabledColor(Color value) { }
	// Offset : 0x2c9ac0
	public Single get_colorMultiplier() { }
	// Offset : 0x2c9ac8
	public Void set_colorMultiplier(Single value) { }
	// Offset : 0x2c9ad0
	public Single get_fadeDuration() { }
	// Offset : 0x2c9ad8
	public Void set_fadeDuration(Single value) { }
	// Offset : 0x4aa804
	public static ColorBlock get_defaultColorBlock() { }
	// Offset : 0x2c9ae0
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2c9ae8
	public Boolean Equals(ColorBlock other) { }
	// Offset : 0x4aaac4
	public static Boolean op_Equality(ColorBlock point1, ColorBlock point2) { }
	// Offset : 0x4aab04
	public static Boolean op_Inequality(ColorBlock point1, ColorBlock point2) { }
	// Offset : 0x2c9b28
	public override Int32 GetHashCode() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public static class DefaultControls
{
	// Fields
	private const Single kWidth; // 0x0
	private const Single kThickHeight; // 0x0
	private const Single kThinHeight; // 0x0
	private static Vector2 s_ThickElementSize; // 0x0
	private static Vector2 s_ThinElementSize; // 0x8
	private static Vector2 s_ImageElementSize; // 0x10
	private static Color s_DefaultSelectableColor; // 0x18
	private static Color s_PanelColor; // 0x28
	private static Color s_TextColor; // 0x38

	// Properties

	// Methods
	// Offset : 0x4ab448
	private static GameObject CreateUIElementRoot(String name, Vector2 size) { }
	// Offset : 0x4ab4fc
	private static GameObject CreateUIObject(String name, GameObject parent) { }
	// Offset : 0x4ab6e8
	private static Void SetDefaultTextValues(Text lbl) { }
	// Offset : 0x4ab7b8
	private static Void SetDefaultColorTransitionValues(Selectable slider) { }
	// Offset : 0x4ab5b8
	private static Void SetParentAndAlign(GameObject child, GameObject parent) { }
	// Offset : 0x4ab854
	private static Void SetLayerRecursively(GameObject go, Int32 layer) { }
	// Offset : 0x4ab984
	public static GameObject CreatePanel(Resources resources) { }
	// Offset : 0x4abbe8
	public static GameObject CreateButton(Resources resources) { }
	// Offset : 0x4abf1c
	public static GameObject CreateText(Resources resources) { }
	// Offset : 0x4ac010
	public static GameObject CreateImage(Resources resources) { }
	// Offset : 0x4ac0ac
	public static GameObject CreateRawImage(Resources resources) { }
	// Offset : 0x4ac148
	public static GameObject CreateSlider(Resources resources) { }
	// Offset : 0x4ac8cc
	public static GameObject CreateScrollbar(Resources resources) { }
	// Offset : 0x4accd0
	public static GameObject CreateToggle(Resources resources) { }
	// Offset : 0x4ad2ac
	public static GameObject CreateInputField(Resources resources) { }
	// Offset : 0x4ad88c
	public static GameObject CreateDropdown(Resources resources) { }
	// Offset : 0x4af07c
	public static GameObject CreateScrollView(Resources resources) { }
	// Offset : 0x4af998
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public struct Resources
{
	// Fields
	public Sprite standard; // 0x10
	public Sprite background; // 0x18
	public Sprite inputField; // 0x20
	public Sprite knob; // 0x28
	public Sprite checkmark; // 0x30
	public Sprite dropdown; // 0x38
	public Sprite mask; // 0x40

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Dropdown : Selectable, IPointerClickHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler
{
	// Fields
	private RectTransform m_Template; // 0xd8
	private Text m_CaptionText; // 0xe0
	private Image m_CaptionImage; // 0xe8
	private Text m_ItemText; // 0xf0
	private Image m_ItemImage; // 0xf8
	private Int32 m_Value; // 0x100
	private OptionDataList m_Options; // 0x108
	private DropdownEvent m_OnValueChanged; // 0x110
	private GameObject m_Dropdown; // 0x118
	private GameObject m_Blocker; // 0x120
	private List`1 m_Items; // 0x128
	private TweenRunner`1 m_AlphaTweenRunner; // 0x130
	private Boolean validTemplate; // 0x138
	private static OptionData s_NoOptionData; // 0x0

	// Properties
	public RectTransform template { get; set; }
	public Text captionText { get; set; }
	public Image captionImage { get; set; }
	public Text itemText { get; set; }
	public Image itemImage { get; set; }
	public List`1 options { get; set; }
	public DropdownEvent onValueChanged { get; set; }
	public Int32 value { get; set; }

	// Methods
	// Offset : 0x4afb3c
	protected Void .ctor() { }
	// Offset : 0x4afc10
	public RectTransform get_template() { }
	// Offset : 0x4aed38
	public Void set_template(RectTransform value) { }
	// Offset : 0x4afc18
	public Text get_captionText() { }
	// Offset : 0x4aed40
	public Void set_captionText(Text value) { }
	// Offset : 0x4afc20
	public Image get_captionImage() { }
	// Offset : 0x4afc28
	public Void set_captionImage(Image value) { }
	// Offset : 0x4afc30
	public Text get_itemText() { }
	// Offset : 0x4aed48
	public Void set_itemText(Text value) { }
	// Offset : 0x4afc38
	public Image get_itemImage() { }
	// Offset : 0x4afc40
	public Void set_itemImage(Image value) { }
	// Offset : 0x4aed50
	public List`1 get_options() { }
	// Offset : 0x4afc48
	public Void set_options(List`1 value) { }
	// Offset : 0x4afc94
	public DropdownEvent get_onValueChanged() { }
	// Offset : 0x4afc9c
	public Void set_onValueChanged(DropdownEvent value) { }
	// Offset : 0x4afca4
	public Int32 get_value() { }
	// Offset : 0x4afcac
	public Void set_value(Int32 value) { }
	// Offset : 0x4afdfc
	protected override Void Awake() { }
	// Offset : 0x4affa0
	protected override Void Start() { }
	// Offset : 0x4aed80
	public Void RefreshShownValue() { }
	// Offset : 0x4affa4
	public Void AddOptions(List`1 options) { }
	// Offset : 0x4b0020
	public Void AddOptions(List`1 options) { }
	// Offset : 0x4b0138
	public Void AddOptions(List`1 options) { }
	// Offset : 0x4b0250
	public Void ClearOptions() { }
	// Offset : 0x4b02bc
	private Void SetupTemplate() { }
	// Offset : 0x
	private static T GetOrAddComponent(GameObject go) { }
	// Offset : 0x4b0910
	public virtual Void OnPointerClick(PointerEventData eventData) { }
	// Offset : 0x4b1a58
	public virtual Void OnSubmit(BaseEventData eventData) { }
	// Offset : 0x4b1a5c
	public virtual Void OnCancel(BaseEventData eventData) { }
	// Offset : 0x4b0914
	public Void Show() { }
	// Offset : 0x4b2228
	protected virtual GameObject CreateBlocker(Canvas rootCanvas) { }
	// Offset : 0x4b2610
	protected virtual Void DestroyBlocker(GameObject blocker) { }
	// Offset : 0x4b2678
	protected virtual GameObject CreateDropdownList(GameObject template) { }
	// Offset : 0x4b26e8
	protected virtual Void DestroyDropdownList(GameObject dropdownList) { }
	// Offset : 0x4b2750
	protected virtual DropdownItem CreateItem(DropdownItem itemTemplate) { }
	// Offset : 0x4b27c0
	protected virtual Void DestroyItem(DropdownItem item) { }
	// Offset : 0x4b1bd8
	private DropdownItem AddItem(OptionData data, Boolean selected, DropdownItem itemTemplate, List`1 items) { }
	// Offset : 0x4b27c4
	private Void AlphaFadeList(Single duration, Single alpha) { }
	// Offset : 0x4b2108
	private Void AlphaFadeList(Single duration, Single start, Single end) { }
	// Offset : 0x4b2860
	private Void SetAlpha(Single alpha) { }
	// Offset : 0x4b1a60
	public Void Hide() { }
	// Offset : 0x4b292c
	private IEnumerator DelayedDestroyDropdownList(Single delay) { }
	// Offset : 0x4b29c0
	private Void OnSelectItem(Toggle toggle) { }
	// Offset : 0x4b2b34
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
protected internal class DropdownItem : MonoBehaviour, IPointerEnterHandler, ICancelHandler, IEventSystemHandler
{
	// Fields
	private Text m_Text; // 0x18
	private Image m_Image; // 0x20
	private RectTransform m_RectTransform; // 0x28
	private Toggle m_Toggle; // 0x30

	// Properties
	public Text text { get; set; }
	public Image image { get; set; }
	public RectTransform rectTransform { get; set; }
	public Toggle toggle { get; set; }

	// Methods
	// Offset : 0x5357f4
	public Void .ctor() { }
	// Offset : 0x5357fc
	public Text get_text() { }
	// Offset : 0x535804
	public Void set_text(Text value) { }
	// Offset : 0x53580c
	public Image get_image() { }
	// Offset : 0x535814
	public Void set_image(Image value) { }
	// Offset : 0x53581c
	public RectTransform get_rectTransform() { }
	// Offset : 0x535824
	public Void set_rectTransform(RectTransform value) { }
	// Offset : 0x53579c
	public Toggle get_toggle() { }
	// Offset : 0x53582c
	public Void set_toggle(Toggle value) { }
	// Offset : 0x535834
	public virtual Void OnPointerEnter(PointerEventData eventData) { }
	// Offset : 0x5358c8
	public virtual Void OnCancel(BaseEventData eventData) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class OptionData
{
	// Fields
	private String m_Text; // 0x10
	private Sprite m_Image; // 0x18

	// Properties
	public String text { get; set; }
	public Sprite image { get; set; }

	// Methods
	// Offset : 0x535974
	public Void .ctor() { }
	// Offset : 0x53597c
	public Void .ctor(String text) { }
	// Offset : 0x5359b0
	public Void .ctor(Sprite image) { }
	// Offset : 0x5359e4
	public Void .ctor(String text, Sprite image) { }
	// Offset : 0x535a1c
	public String get_text() { }
	// Offset : 0x5359a8
	public Void set_text(String value) { }
	// Offset : 0x535a24
	public Sprite get_image() { }
	// Offset : 0x5359dc
	public Void set_image(Sprite value) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class OptionDataList
{
	// Fields
	private List`1 m_Options; // 0x10

	// Properties
	public List`1 options { get; set; }

	// Methods
	// Offset : 0x535a2c
	public Void .ctor() { }
	// Offset : 0x535aa8
	public List`1 get_options() { }
	// Offset : 0x535aa0
	public Void set_options(List`1 value) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class DropdownEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5357a4
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private sealed class <Show>c__AnonStorey1
{
	// Fields
	internal DropdownItem item; // 0x10
	internal Dropdown $this; // 0x18

	// Properties

	// Methods
	// Offset : 0x535750
	public Void .ctor() { }
	// Offset : 0x535758
	internal Void <>m__0(Boolean x) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private sealed class <DelayedDestroyDropdownList>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal Single delay; // 0x10
	internal Dropdown $this; // 0x18
	internal Object $current; // 0x20
	internal Boolean $disposing; // 0x28
	internal Int32 $PC; // 0x2c

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x5353f0
	public Void .ctor() { }
	// Offset : 0x5353f8
	public Boolean MoveNext() { }
	// Offset : 0x5356c4
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x5356cc
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x5356d4
	public Void Dispose() { }
	// Offset : 0x5356e8
	public Void Reset() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
[Serializable]
public class FontData : ISerializationCallbackReceiver
{
	// Fields
	private Font m_Font; // 0x10
	private Int32 m_FontSize; // 0x18
	private FontStyle m_FontStyle; // 0x1c
	private Boolean m_BestFit; // 0x20
	private Int32 m_MinSize; // 0x24
	private Int32 m_MaxSize; // 0x28
	private TextAnchor m_Alignment; // 0x2c
	private Boolean m_AlignByGeometry; // 0x30
	private Boolean m_RichText; // 0x31
	private HorizontalWrapMode m_HorizontalOverflow; // 0x34
	private VerticalWrapMode m_VerticalOverflow; // 0x38
	private Single m_LineSpacing; // 0x3c

	// Properties
	public static FontData defaultFontData { get; }
	public Font font { get; set; }
	public Int32 fontSize { get; set; }
	public FontStyle fontStyle { get; set; }
	public Boolean bestFit { get; set; }
	public Int32 minSize { get; set; }
	public Int32 maxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public Boolean alignByGeometry { get; set; }
	public Boolean richText { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public Single lineSpacing { get; set; }

	// Methods
	// Offset : 0x535ab0
	public Void .ctor() { }
	// Offset : 0x535ab8
	public static FontData get_defaultFontData() { }
	// Offset : 0x535bf0
	public Font get_font() { }
	// Offset : 0x535bf8
	public Void set_font(Font value) { }
	// Offset : 0x535c00
	public Int32 get_fontSize() { }
	// Offset : 0x535c08
	public Void set_fontSize(Int32 value) { }
	// Offset : 0x535c10
	public FontStyle get_fontStyle() { }
	// Offset : 0x535c18
	public Void set_fontStyle(FontStyle value) { }
	// Offset : 0x535c20
	public Boolean get_bestFit() { }
	// Offset : 0x535c28
	public Void set_bestFit(Boolean value) { }
	// Offset : 0x535c34
	public Int32 get_minSize() { }
	// Offset : 0x535c3c
	public Void set_minSize(Int32 value) { }
	// Offset : 0x535c44
	public Int32 get_maxSize() { }
	// Offset : 0x535c4c
	public Void set_maxSize(Int32 value) { }
	// Offset : 0x535c54
	public TextAnchor get_alignment() { }
	// Offset : 0x535c5c
	public Void set_alignment(TextAnchor value) { }
	// Offset : 0x535c64
	public Boolean get_alignByGeometry() { }
	// Offset : 0x535c6c
	public Void set_alignByGeometry(Boolean value) { }
	// Offset : 0x535c78
	public Boolean get_richText() { }
	// Offset : 0x535c80
	public Void set_richText(Boolean value) { }
	// Offset : 0x535c8c
	public HorizontalWrapMode get_horizontalOverflow() { }
	// Offset : 0x535c94
	public Void set_horizontalOverflow(HorizontalWrapMode value) { }
	// Offset : 0x535c9c
	public VerticalWrapMode get_verticalOverflow() { }
	// Offset : 0x535ca4
	public Void set_verticalOverflow(VerticalWrapMode value) { }
	// Offset : 0x535cac
	public Single get_lineSpacing() { }
	// Offset : 0x535cb4
	public Void set_lineSpacing(Single value) { }
	// Offset : 0x535cbc
	private Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }
	// Offset : 0x535cc0
	private Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public static class FontUpdateTracker
{
	// Fields
	private static Dictionary`2 m_Tracked; // 0x0
	private static Action`1 <>f__mg$cache0; // 0x8
	private static Action`1 <>f__mg$cache1; // 0x10

	// Properties

	// Methods
	// Offset : 0x535d78
	public static Void TrackText(Text t) { }
	// Offset : 0x53606c
	private static Void RebuildForFont(Font f) { }
	// Offset : 0x5361e0
	public static Void UntrackText(Text t) { }
	// Offset : 0x536478
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public abstract class Graphic : UIBehaviour, ICanvasElement
{
	// Fields
	protected static Material s_DefaultUI; // 0x0
	protected static Texture2D s_WhiteTexture; // 0x8
	protected Material m_Material; // 0x18
	private Color m_Color; // 0x20
	private Boolean m_RaycastTarget; // 0x30
	private RectTransform m_RectTransform; // 0x38
	private CanvasRenderer m_CanvasRenderer; // 0x40
	private Canvas m_Canvas; // 0x48
	private Boolean m_VertsDirty; // 0x50
	private Boolean m_MaterialDirty; // 0x51
	protected UnityAction m_OnDirtyLayoutCallback; // 0x58
	protected UnityAction m_OnDirtyVertsCallback; // 0x60
	protected UnityAction m_OnDirtyMaterialCallback; // 0x68
	protected static Mesh s_Mesh; // 0x10
	private static readonly VertexHelper s_VertexHelper; // 0x18
	private readonly TweenRunner`1 m_ColorTweenRunner; // 0x70
	private Boolean <useLegacyMeshGeneration>k__BackingField; // 0x78

	// Properties
	public static Material defaultGraphicMaterial { get; }
	public virtual Color color { get; set; }
	public virtual Boolean raycastTarget { get; set; }
	protected Boolean useLegacyMeshGeneration { get; set; }
	public Int32 depth { get; }
	public RectTransform rectTransform { get; }
	public Canvas canvas { get; }
	public CanvasRenderer canvasRenderer { get; }
	public virtual Material defaultMaterial { get; }
	public virtual Material material { get; set; }
	public virtual Material materialForRendering { get; }
	public virtual Texture mainTexture { get; }
	protected static Mesh workerMesh { get; }

	// Methods
	// Offset : 0x5364ec
	protected Void .ctor() { }
	// Offset : 0x5365bc
	public static Material get_defaultGraphicMaterial() { }
	// Offset : 0x5366b4
	public virtual Color get_color() { }
	// Offset : 0x5366c0
	public virtual Void set_color(Color value) { }
	// Offset : 0x536720
	public virtual Boolean get_raycastTarget() { }
	// Offset : 0x536728
	public virtual Void set_raycastTarget(Boolean value) { }
	// Offset : 0x536734
	protected Boolean get_useLegacyMeshGeneration() { }
	// Offset : 0x5365b0
	protected Void set_useLegacyMeshGeneration(Boolean value) { }
	// Offset : 0x53673c
	public virtual Void SetAllDirty() { }
	// Offset : 0x5367d8
	public virtual Void SetLayoutDirty() { }
	// Offset : 0x5368f8
	public virtual Void SetVerticesDirty() { }
	// Offset : 0x5369b0
	public virtual Void SetMaterialDirty() { }
	// Offset : 0x536a68
	protected override Void OnRectTransformDimensionsChange() { }
	// Offset : 0x536b64
	protected override Void OnBeforeTransformParentChanged() { }
	// Offset : 0x536e28
	protected override Void OnTransformParentChanged() { }
	// Offset : 0x537270
	public Int32 get_depth() { }
	// Offset : 0x536898
	public RectTransform get_rectTransform() { }
	// Offset : 0x536c18
	public Canvas get_canvas() { }
	// Offset : 0x536f1c
	private Void CacheCanvas() { }
	// Offset : 0x5372a0
	public CanvasRenderer get_canvasRenderer() { }
	// Offset : 0x537300
	public virtual Material get_defaultMaterial() { }
	// Offset : 0x53735c
	public virtual Material get_material() { }
	// Offset : 0x53740c
	public virtual Void set_material(Material value) { }
	// Offset : 0x5374cc
	public virtual Material get_materialForRendering() { }
	// Offset : 0x537728
	public virtual Texture get_mainTexture() { }
	// Offset : 0x537790
	protected override Void OnEnable() { }
	// Offset : 0x5378e8
	protected override Void OnDisable() { }
	// Offset : 0x537a38
	protected override Void OnCanvasHierarchyChanged() { }
	// Offset : 0x537b8c
	public virtual Void OnCullingChanged() { }
	// Offset : 0x537c34
	public virtual Void Rebuild(CanvasUpdate update) { }
	// Offset : 0x537cf4
	public virtual Void LayoutComplete() { }
	// Offset : 0x537cf8
	public virtual Void GraphicUpdateComplete() { }
	// Offset : 0x537cfc
	protected virtual Void UpdateMaterial() { }
	// Offset : 0x537e38
	protected virtual Void UpdateGeometry() { }
	// Offset : 0x538314
	private Void DoMeshGeneration() { }
	// Offset : 0x537e48
	private Void DoLegacyMeshGeneration() { }
	// Offset : 0x538824
	protected static Mesh get_workerMesh() { }
	// Offset : 0x53897c
	protected virtual Void OnFillVBO(List`1 vbo) { }
	// Offset : 0x538980
	protected virtual Void OnPopulateMesh(Mesh m) { }
	// Offset : 0x538a50
	protected virtual Void OnPopulateMesh(VertexHelper vh) { }
	// Offset : 0x538e94
	protected override Void OnDidApplyAnimationProperties() { }
	// Offset : 0x538ed8
	public virtual Void SetNativeSize() { }
	// Offset : 0x538edc
	public virtual Boolean Raycast(Vector2 sp, Camera eventCamera) { }
	// Offset : 0x5392f4
	public Vector2 PixelAdjustPoint(Vector2 point) { }
	// Offset : 0x538d30
	public Rect GetPixelAdjustedRect() { }
	// Offset : 0x539460
	public virtual Void CrossFadeColor(Color targetColor, Single duration, Boolean ignoreTimeScale, Boolean useAlpha) { }
	// Offset : 0x539500
	public virtual Void CrossFadeColor(Color targetColor, Single duration, Boolean ignoreTimeScale, Boolean useAlpha, Boolean useRGB) { }
	// Offset : 0x5397dc
	private static Color CreateColorFromAlpha(Single alpha) { }
	// Offset : 0x539804
	public virtual Void CrossFadeAlpha(Single alpha, Single duration, Boolean ignoreTimeScale) { }
	// Offset : 0x5398ec
	public Void RegisterDirtyLayoutCallback(UnityAction action) { }
	// Offset : 0x5399b0
	public Void UnregisterDirtyLayoutCallback(UnityAction action) { }
	// Offset : 0x539a74
	public Void RegisterDirtyVerticesCallback(UnityAction action) { }
	// Offset : 0x539b38
	public Void UnregisterDirtyVerticesCallback(UnityAction action) { }
	// Offset : 0x539bfc
	public Void RegisterDirtyMaterialCallback(UnityAction action) { }
	// Offset : 0x539cc0
	public Void UnregisterDirtyMaterialCallback(UnityAction action) { }
	// Offset : 0x539d84
	private static Void .cctor() { }
	// Offset : 0x539e08
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class GraphicRaycaster : BaseRaycaster
{
	// Fields
	protected const Int32 kNoEventMaskSet; // 0x0
	private Boolean m_IgnoreReversedGraphics; // 0x18
	private BlockingObjects m_BlockingObjects; // 0x1c
	protected LayerMask m_BlockingMask; // 0x20
	private Canvas m_Canvas; // 0x28
	private List`1 m_RaycastResults; // 0x30
	private static readonly List`1 s_SortedGraphics; // 0x0
	private static Comparison`1 <>f__am$cache0; // 0x8

	// Properties
	public override Int32 sortOrderPriority { get; }
	public override Int32 renderOrderPriority { get; }
	public Boolean ignoreReversedGraphics { get; set; }
	public BlockingObjects blockingObjects { get; set; }
	private Canvas canvas { get; }
	public override Camera eventCamera { get; }

	// Methods
	// Offset : 0x539e10
	protected Void .ctor() { }
	// Offset : 0x539e9c
	public override Int32 get_sortOrderPriority() { }
	// Offset : 0x539fa0
	public override Int32 get_renderOrderPriority() { }
	// Offset : 0x53a024
	public Boolean get_ignoreReversedGraphics() { }
	// Offset : 0x53a02c
	public Void set_ignoreReversedGraphics(Boolean value) { }
	// Offset : 0x53a038
	public BlockingObjects get_blockingObjects() { }
	// Offset : 0x53a040
	public Void set_blockingObjects(BlockingObjects value) { }
	// Offset : 0x539f08
	private Canvas get_canvas() { }
	// Offset : 0x53a048
	public override Void Raycast(PointerEventData eventData, List`1 resultAppendList) { }
	// Offset : 0x53b6b8
	public override Camera get_eventCamera() { }
	// Offset : 0x53b0f4
	private static Void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList`1 foundGraphics, List`1 results) { }
	// Offset : 0x53b838
	private static Void .cctor() { }
	// Offset : 0x53b8ac
	private static Int32 <Raycast>m__0(Graphic g1, Graphic g2) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum BlockingObjects
{
	// Fields
	public Int32 value__; // 0x10
	public const BlockingObjects None = 0; // 0x0
	public const BlockingObjects TwoD = 1; // 0x0
	public const BlockingObjects ThreeD = 2; // 0x0
	public const BlockingObjects All = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class GraphicRegistry
{
	// Fields
	private static GraphicRegistry s_Instance; // 0x0
	private readonly Dictionary`2 m_Graphics; // 0x10
	private static readonly List`1 s_EmptyList; // 0x8

	// Properties
	public static GraphicRegistry instance { get; }

	// Methods
	// Offset : 0x53b914
	protected Void .ctor() { }
	// Offset : 0x53ba14
	public static GraphicRegistry get_instance() { }
	// Offset : 0x5370c4
	public static Void RegisterGraphicForCanvas(Canvas c, Graphic graphic) { }
	// Offset : 0x536c9c
	public static Void UnregisterGraphicForCanvas(Canvas c, Graphic graphic) { }
	// Offset : 0x53b01c
	public static IList`1 GetGraphicsForCanvas(Canvas canvas) { }
	// Offset : 0x53bad4
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
internal interface IGraphicEnabledDisabled
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnSiblingGraphicEnabledDisabled() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Image : MaskableGraphic, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter
{
	// Fields
	protected static Material s_ETC1DefaultUI; // 0x0
	private Sprite m_Sprite; // 0xb0
	private Sprite m_OverrideSprite; // 0xb8
	private Type m_Type; // 0xc0
	private Boolean m_PreserveAspect; // 0xc4
	private Boolean m_FillCenter; // 0xc5
	private FillMethod m_FillMethod; // 0xc8
	private Single m_FillAmount; // 0xcc
	private Boolean m_FillClockwise; // 0xd0
	private Int32 m_FillOrigin; // 0xd4
	private Single m_AlphaHitTestMinimumThreshold; // 0xd8
	private Boolean m_Tracked; // 0xdc
	private Boolean m_UseSpriteMesh; // 0xdd
	private static readonly Vector2[] s_VertScratch; // 0x8
	private static readonly Vector2[] s_UVScratch; // 0x10
	private static readonly Vector3[] s_Xy; // 0x18
	private static readonly Vector3[] s_Uv; // 0x20
	private static List`1 m_TrackedTexturelessImages; // 0x28
	private static Boolean s_Initialized; // 0x30
	private static Action`1 <>f__mg$cache0; // 0x38

	// Properties
	public Sprite sprite { get; set; }
	public Sprite overrideSprite { get; set; }
	private Sprite activeSprite { get; }
	public Type type { get; set; }
	public Boolean preserveAspect { get; set; }
	public Boolean fillCenter { get; set; }
	public FillMethod fillMethod { get; set; }
	public Single fillAmount { get; set; }
	public Boolean fillClockwise { get; set; }
	public Int32 fillOrigin { get; set; }
	public Single eventAlphaThreshold { get; set; }
	public Single alphaHitTestMinimumThreshold { get; set; }
	public Boolean useSpriteMesh { get; set; }
	public static Material defaultETC1GraphicMaterial { get; }
	public override Texture mainTexture { get; }
	public Boolean hasBorder { get; }
	public Single pixelsPerUnit { get; }
	public override Material material { get; set; }
	public virtual Single minWidth { get; }
	public virtual Single preferredWidth { get; }
	public virtual Single flexibleWidth { get; }
	public virtual Single minHeight { get; }
	public virtual Single preferredHeight { get; }
	public virtual Single flexibleHeight { get; }
	public virtual Int32 layoutPriority { get; }

	// Methods
	// Offset : 0x53e138
	protected Void .ctor() { }
	// Offset : 0x53e188
	public Sprite get_sprite() { }
	// Offset : 0x53e190
	public Void set_sprite(Sprite value) { }
	// Offset : 0x53e348
	public Sprite get_overrideSprite() { }
	// Offset : 0x53e3dc
	public Void set_overrideSprite(Sprite value) { }
	// Offset : 0x53e34c
	private Sprite get_activeSprite() { }
	// Offset : 0x53e484
	public Type get_type() { }
	// Offset : 0x53e48c
	public Void set_type(Type value) { }
	// Offset : 0x53e52c
	public Boolean get_preserveAspect() { }
	// Offset : 0x53e534
	public Void set_preserveAspect(Boolean value) { }
	// Offset : 0x53e5d4
	public Boolean get_fillCenter() { }
	// Offset : 0x53e5dc
	public Void set_fillCenter(Boolean value) { }
	// Offset : 0x53e67c
	public FillMethod get_fillMethod() { }
	// Offset : 0x53e684
	public Void set_fillMethod(FillMethod value) { }
	// Offset : 0x53e71c
	public Single get_fillAmount() { }
	// Offset : 0x53e724
	public Void set_fillAmount(Single value) { }
	// Offset : 0x53e7f0
	public Boolean get_fillClockwise() { }
	// Offset : 0x53e7f8
	public Void set_fillClockwise(Boolean value) { }
	// Offset : 0x53e898
	public Int32 get_fillOrigin() { }
	// Offset : 0x53e8a0
	public Void set_fillOrigin(Int32 value) { }
	// Offset : 0x53e940
	public Single get_eventAlphaThreshold() { }
	// Offset : 0x53e958
	public Void set_eventAlphaThreshold(Single value) { }
	// Offset : 0x53e950
	public Single get_alphaHitTestMinimumThreshold() { }
	// Offset : 0x53e968
	public Void set_alphaHitTestMinimumThreshold(Single value) { }
	// Offset : 0x53e970
	public Boolean get_useSpriteMesh() { }
	// Offset : 0x53e978
	public Void set_useSpriteMesh(Boolean value) { }
	// Offset : 0x53ea18
	public static Material get_defaultETC1GraphicMaterial() { }
	// Offset : 0x53eb10
	public override Texture get_mainTexture() { }
	// Offset : 0x53ed14
	public Boolean get_hasBorder() { }
	// Offset : 0x53ede8
	public Single get_pixelsPerUnit() { }
	// Offset : 0x53ef0c
	public override Material get_material() { }
	// Offset : 0x53f084
	public override Void set_material(Material value) { }
	// Offset : 0x53f088
	public virtual Void OnBeforeSerialize() { }
	// Offset : 0x53f08c
	public virtual Void OnAfterDeserialize() { }
	// Offset : 0x53f148
	private Void PreserveSpriteAspectRatio(ref Rect rect, Vector2 spriteSize) { }
	// Offset : 0x53f2b8
	private Vector4 GetDrawingDimensions(Boolean shouldPreserveAspect) { }
	// Offset : 0x53f640
	public override Void SetNativeSize() { }
	// Offset : 0x53f83c
	protected override Void OnPopulateMesh(VertexHelper toFill) { }
	// Offset : 0x53e238
	private Void TrackSprite() { }
	// Offset : 0x5438f8
	protected override Void OnEnable() { }
	// Offset : 0x543920
	protected override Void OnDisable() { }
	// Offset : 0x543a30
	protected override Void UpdateMaterial() { }
	// Offset : 0x53f98c
	private Void GenerateSimpleSprite(VertexHelper vh, Boolean lPreserveAspect) { }
	// Offset : 0x53fd50
	private Void GenerateSprite(VertexHelper vh, Boolean lPreserveAspect) { }
	// Offset : 0x5402cc
	private Void GenerateSlicedSprite(VertexHelper toFill) { }
	// Offset : 0x540c60
	private Void GenerateTiledSprite(VertexHelper toFill) { }
	// Offset : 0x543fe8
	private static Void AddQuad(VertexHelper vertexHelper, Vector3[] quadPositions, Color32 color, Vector3[] quadUVs) { }
	// Offset : 0x543d74
	private static Void AddQuad(VertexHelper vertexHelper, Vector2 posMin, Vector2 posMax, Color32 color, Vector2 uvMin, Vector2 uvMax) { }
	// Offset : 0x543b68
	private Vector4 GetAdjustedBorders(Vector4 border, Rect adjustedRect) { }
	// Offset : 0x542188
	private Void GenerateFilledSprite(VertexHelper toFill, Boolean preserveAspect) { }
	// Offset : 0x5441dc
	private static Boolean RadialCut(Vector3[] xy, Vector3[] uv, Single fill, Boolean invert, Int32 corner) { }
	// Offset : 0x544348
	private static Void RadialCut(Vector3[] xy, Single cos, Single sin, Boolean invert, Int32 corner) { }
	// Offset : 0x544bb0
	public virtual Void CalculateLayoutInputHorizontal() { }
	// Offset : 0x544bb4
	public virtual Void CalculateLayoutInputVertical() { }
	// Offset : 0x544bb8
	public virtual Single get_minWidth() { }
	// Offset : 0x544bc0
	public virtual Single get_preferredWidth() { }
	// Offset : 0x544cdc
	public virtual Single get_flexibleWidth() { }
	// Offset : 0x544ce4
	public virtual Single get_minHeight() { }
	// Offset : 0x544cec
	public virtual Single get_preferredHeight() { }
	// Offset : 0x544e08
	public virtual Single get_flexibleHeight() { }
	// Offset : 0x544e10
	public virtual Int32 get_layoutPriority() { }
	// Offset : 0x544e18
	public virtual Boolean IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera) { }
	// Offset : 0x545328
	private Vector2 MapCoordinate(Vector2 local, Rect rect) { }
	// Offset : 0x54582c
	private static Void RebuildImage(SpriteAtlas spriteAtlas) { }
	// Offset : 0x543764
	private static Void TrackImage(Image g) { }
	// Offset : 0x5439a4
	private static Void UnTrackImage(Image g) { }
	// Offset : 0x5459e0
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Type
{
	// Fields
	public Int32 value__; // 0x10
	public const Type Simple = 0; // 0x0
	public const Type Sliced = 1; // 0x0
	public const Type Tiled = 2; // 0x0
	public const Type Filled = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum FillMethod
{
	// Fields
	public Int32 value__; // 0x10
	public const FillMethod Horizontal = 0; // 0x0
	public const FillMethod Vertical = 1; // 0x0
	public const FillMethod Radial90 = 2; // 0x0
	public const FillMethod Radial180 = 3; // 0x0
	public const FillMethod Radial360 = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum OriginHorizontal
{
	// Fields
	public Int32 value__; // 0x10
	public const OriginHorizontal Left = 0; // 0x0
	public const OriginHorizontal Right = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum OriginVertical
{
	// Fields
	public Int32 value__; // 0x10
	public const OriginVertical Bottom = 0; // 0x0
	public const OriginVertical Top = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Origin90
{
	// Fields
	public Int32 value__; // 0x10
	public const Origin90 BottomLeft = 0; // 0x0
	public const Origin90 TopLeft = 1; // 0x0
	public const Origin90 TopRight = 2; // 0x0
	public const Origin90 BottomRight = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Origin180
{
	// Fields
	public Int32 value__; // 0x10
	public const Origin180 Bottom = 0; // 0x0
	public const Origin180 Left = 1; // 0x0
	public const Origin180 Top = 2; // 0x0
	public const Origin180 Right = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Origin360
{
	// Fields
	public Int32 value__; // 0x10
	public const Origin360 Bottom = 0; // 0x0
	public const Origin360 Right = 1; // 0x0
	public const Origin360 Top = 2; // 0x0
	public const Origin360 Left = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface IMask
{
	// Fields

	// Properties
	public abstract RectTransform rectTransform { get; }

	// Methods
	// Offset : 0x
	public abstract Boolean Enabled() { }
	// Offset : 0x
	public abstract RectTransform get_rectTransform() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface IMaskable
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void RecalculateMasking() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class InputField : Selectable, IUpdateSelectedHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement, ILayoutElement, IEventSystemHandler
{
	// Fields
	protected TouchScreenKeyboard m_Keyboard; // 0xd8
	private static readonly Char[] kSeparators; // 0x0
	protected Text m_TextComponent; // 0xe0
	protected Graphic m_Placeholder; // 0xe8
	private ContentType m_ContentType; // 0xf0
	private InputType m_InputType; // 0xf4
	private Char m_AsteriskChar; // 0xf8
	private TouchScreenKeyboardType m_KeyboardType; // 0xfc
	private LineType m_LineType; // 0x100
	private Boolean m_HideMobileInput; // 0x104
	private CharacterValidation m_CharacterValidation; // 0x108
	private Int32 m_CharacterLimit; // 0x10c
	private SubmitEvent m_OnEndEdit; // 0x110
	private OnChangeEvent m_OnValueChanged; // 0x118
	private OnValidateInput m_OnValidateInput; // 0x120
	private Color m_CaretColor; // 0x128
	private Boolean m_CustomCaretColor; // 0x138
	private Color m_SelectionColor; // 0x13c
	protected String m_Text; // 0x150
	private Single m_CaretBlinkRate; // 0x158
	private Int32 m_CaretWidth; // 0x15c
	private Boolean m_ReadOnly; // 0x160
	protected Int32 m_CaretPosition; // 0x164
	protected Int32 m_CaretSelectPosition; // 0x168
	private RectTransform caretRectTrans; // 0x170
	protected UIVertex[] m_CursorVerts; // 0x178
	private TextGenerator m_InputTextCache; // 0x180
	private CanvasRenderer m_CachedInputRenderer; // 0x188
	private Boolean m_PreventFontCallback; // 0x190
	protected Mesh m_Mesh; // 0x198
	private Boolean m_AllowInput; // 0x1a0
	private Boolean m_ShouldActivateNextUpdate; // 0x1a1
	private Boolean m_UpdateDrag; // 0x1a2
	private Boolean m_DragPositionOutOfBounds; // 0x1a3
	private const Single kHScrollSpeed; // 0x0
	private const Single kVScrollSpeed; // 0x0
	protected Boolean m_CaretVisible; // 0x1a4
	private Coroutine m_BlinkCoroutine; // 0x1a8
	private Single m_BlinkStartTime; // 0x1b0
	protected Int32 m_DrawStart; // 0x1b4
	protected Int32 m_DrawEnd; // 0x1b8
	private Coroutine m_DragCoroutine; // 0x1c0
	private String m_OriginalText; // 0x1c8
	private Boolean m_WasCanceled; // 0x1d0
	private Boolean m_HasDoneFocusTransition; // 0x1d1
	private WaitForSecondsRealtime m_WaitForSecondsRealtime; // 0x1d8
	private const String kEmailSpecialCharacters; // 0x0
	private Event m_ProcessingEvent; // 0x1e0
	private const Int32 k_MaxTextLength; // 0x0

	// Properties
	private BaseInput input { get; }
	private String compositionString { get; }
	protected Mesh mesh { get; }
	protected TextGenerator cachedInputTextGenerator { get; }
	public Boolean shouldHideMobileInput { get; set; }
	private Boolean shouldActivateOnSelect { get; }
	public String text { get; set; }
	public Boolean isFocused { get; }
	public Single caretBlinkRate { get; set; }
	public Int32 caretWidth { get; set; }
	public Text textComponent { get; set; }
	public Graphic placeholder { get; set; }
	public Color caretColor { get; set; }
	public Boolean customCaretColor { get; set; }
	public Color selectionColor { get; set; }
	public SubmitEvent onEndEdit { get; set; }
	public OnChangeEvent onValueChange { get; set; }
	public OnChangeEvent onValueChanged { get; set; }
	public OnValidateInput onValidateInput { get; set; }
	public Int32 characterLimit { get; set; }
	public ContentType contentType { get; set; }
	public LineType lineType { get; set; }
	public InputType inputType { get; set; }
	public TouchScreenKeyboard touchScreenKeyboard { get; }
	public TouchScreenKeyboardType keyboardType { get; set; }
	public CharacterValidation characterValidation { get; set; }
	public Boolean readOnly { get; set; }
	public Boolean multiLine { get; }
	public Char asteriskChar { get; set; }
	public Boolean wasCanceled { get; }
	protected Int32 caretPositionInternal { get; set; }
	protected Int32 caretSelectPositionInternal { get; set; }
	private Boolean hasSelection { get; }
	public Int32 caretPosition { get; set; }
	public Int32 selectionAnchorPosition { get; set; }
	public Int32 selectionFocusPosition { get; set; }
	private static String clipboard { get; set; }
	public virtual Single minWidth { get; }
	public virtual Single preferredWidth { get; }
	public virtual Single flexibleWidth { get; }
	public virtual Single minHeight { get; }
	public virtual Single preferredHeight { get; }
	public virtual Single flexibleHeight { get; }
	public virtual Int32 layoutPriority { get; }

	// Methods
	// Offset : 0x545ad0
	protected Void .ctor() { }
	// Offset : 0x545e1c
	private BaseInput get_input() { }
	// Offset : 0x545f88
	private String get_compositionString() { }
	// Offset : 0x54604c
	protected Mesh get_mesh() { }
	// Offset : 0x5460f0
	protected TextGenerator get_cachedInputTextGenerator() { }
	// Offset : 0x54615c
	public Void set_shouldHideMobileInput(Boolean value) { }
	// Offset : 0x5461bc
	public Boolean get_shouldHideMobileInput() { }
	// Offset : 0x546210
	private Boolean get_shouldActivateOnSelect() { }
	// Offset : 0x546230
	public String get_text() { }
	// Offset : 0x546238
	public Void set_text(String value) { }
	// Offset : 0x546bb4
	public Boolean get_isFocused() { }
	// Offset : 0x546bbc
	public Single get_caretBlinkRate() { }
	// Offset : 0x546bc4
	public Void set_caretBlinkRate(Single value) { }
	// Offset : 0x546ca8
	public Int32 get_caretWidth() { }
	// Offset : 0x546cb0
	public Void set_caretWidth(Int32 value) { }
	// Offset : 0x546d94
	public Text get_textComponent() { }
	// Offset : 0x546d9c
	public Void set_textComponent(Text value) { }
	// Offset : 0x54702c
	public Graphic get_placeholder() { }
	// Offset : 0x547034
	public Void set_placeholder(Graphic value) { }
	// Offset : 0x547094
	public Color get_caretColor() { }
	// Offset : 0x547108
	public Void set_caretColor(Color value) { }
	// Offset : 0x547100
	public Boolean get_customCaretColor() { }
	// Offset : 0x547144
	public Void set_customCaretColor(Boolean value) { }
	// Offset : 0x547168
	public Color get_selectionColor() { }
	// Offset : 0x54717c
	public Void set_selectionColor(Color value) { }
	// Offset : 0x5471b8
	public SubmitEvent get_onEndEdit() { }
	// Offset : 0x5471c0
	public Void set_onEndEdit(SubmitEvent value) { }
	// Offset : 0x547220
	public OnChangeEvent get_onValueChange() { }
	// Offset : 0x547230
	public Void set_onValueChange(OnChangeEvent value) { }
	// Offset : 0x547228
	public OnChangeEvent get_onValueChanged() { }
	// Offset : 0x547234
	public Void set_onValueChanged(OnChangeEvent value) { }
	// Offset : 0x546654
	public OnValidateInput get_onValidateInput() { }
	// Offset : 0x547294
	public Void set_onValidateInput(OnValidateInput value) { }
	// Offset : 0x546674
	public Int32 get_characterLimit() { }
	// Offset : 0x5472f4
	public Void set_characterLimit(Int32 value) { }
	// Offset : 0x547890
	public ContentType get_contentType() { }
	// Offset : 0x547898
	public Void set_contentType(ContentType value) { }
	// Offset : 0x5479e0
	public LineType get_lineType() { }
	// Offset : 0x5479e8
	public Void set_lineType(LineType value) { }
	// Offset : 0x547b5c
	public InputType get_inputType() { }
	// Offset : 0x547b64
	public Void set_inputType(InputType value) { }
	// Offset : 0x547c08
	public TouchScreenKeyboard get_touchScreenKeyboard() { }
	// Offset : 0x547c10
	public TouchScreenKeyboardType get_keyboardType() { }
	// Offset : 0x547c18
	public Void set_keyboardType(TouchScreenKeyboardType value) { }
	// Offset : 0x54665c
	public CharacterValidation get_characterValidation() { }
	// Offset : 0x547ca4
	public Void set_characterValidation(CharacterValidation value) { }
	// Offset : 0x547d30
	public Boolean get_readOnly() { }
	// Offset : 0x547d38
	public Void set_readOnly(Boolean value) { }
	// Offset : 0x547d44
	public Boolean get_multiLine() { }
	// Offset : 0x547d58
	public Char get_asteriskChar() { }
	// Offset : 0x547d60
	public Void set_asteriskChar(Char value) { }
	// Offset : 0x547ddc
	public Boolean get_wasCanceled() { }
	// Offset : 0x547de4
	protected Void ClampPos(ref Int32 pos) { }
	// Offset : 0x547e60
	protected Int32 get_caretPositionInternal() { }
	// Offset : 0x547e9c
	protected Void set_caretPositionInternal(Int32 value) { }
	// Offset : 0x547eac
	protected Int32 get_caretSelectPositionInternal() { }
	// Offset : 0x547ee8
	protected Void set_caretSelectPositionInternal(Int32 value) { }
	// Offset : 0x547ef8
	private Boolean get_hasSelection() { }
	// Offset : 0x547f2c
	public Int32 get_caretPosition() { }
	// Offset : 0x547f68
	public Void set_caretPosition(Int32 value) { }
	// Offset : 0x54805c
	public Int32 get_selectionAnchorPosition() { }
	// Offset : 0x547f94
	public Void set_selectionAnchorPosition(Int32 value) { }
	// Offset : 0x548098
	public Int32 get_selectionFocusPosition() { }
	// Offset : 0x547ff8
	public Void set_selectionFocusPosition(Int32 value) { }
	// Offset : 0x5480d4
	protected override Void OnEnable() { }
	// Offset : 0x54837c
	protected override Void OnDisable() { }
	// Offset : 0x548788
	private IEnumerator CaretBlink() { }
	// Offset : 0x548800
	private Void SetCaretVisible() { }
	// Offset : 0x546c48
	private Void SetCaretActive() { }
	// Offset : 0x548848
	private Void UpdateCaretMaterial() { }
	// Offset : 0x5489a0
	protected Void OnFocus() { }
	// Offset : 0x5489a4
	protected Void SelectAll() { }
	// Offset : 0x5489f8
	public Void MoveTextEnd(Boolean shift) { }
	// Offset : 0x548a6c
	public Void MoveTextStart(Boolean shift) { }
	// Offset : 0x548ac4
	private static String get_clipboard() { }
	// Offset : 0x548acc
	private static Void set_clipboard(String value) { }
	// Offset : 0x548ad4
	private Boolean InPlaceEditing() { }
	// Offset : 0x548af4
	private Void UpdateCaretFromKeyboard() { }
	// Offset : 0x548bb8
	protected virtual Void LateUpdate() { }
	// Offset : 0x54a4ec
	public Vector2 ScreenToLocal(Vector2 screen) { }
	// Offset : 0x54a884
	private Int32 GetUnclampedCharacterLineFromPosition(Vector2 pos, TextGenerator generator) { }
	// Offset : 0x54ab58
	protected Int32 GetCharacterIndexFromPosition(Vector2 pos) { }
	// Offset : 0x54b154
	private Boolean MayDrag(PointerEventData eventData) { }
	// Offset : 0x54b274
	public virtual Void OnBeginDrag(PointerEventData eventData) { }
	// Offset : 0x54b2a0
	public virtual Void OnDrag(PointerEventData eventData) { }
	// Offset : 0x54b4dc
	private IEnumerator MouseDragOutsideRect(PointerEventData eventData) { }
	// Offset : 0x54b578
	public virtual Void OnEndDrag(PointerEventData eventData) { }
	// Offset : 0x54b5a0
	public override Void OnPointerDown(PointerEventData eventData) { }
	// Offset : 0x54b7f4
	protected EditState KeyPressed(Event evt) { }
	// Offset : 0x54c360
	private Boolean IsValidChar(Char c) { }
	// Offset : 0x54c3e4
	public Void ProcessEvent(Event e) { }
	// Offset : 0x54c3e8
	public virtual Void OnUpdateSelected(BaseEventData eventData) { }
	// Offset : 0x54bdf0
	private String GetSelectedString() { }
	// Offset : 0x54c594
	private Int32 FindtNextWordBegin() { }
	// Offset : 0x54c22c
	private Void MoveRight(Boolean shift, Boolean ctrl) { }
	// Offset : 0x54c6b4
	private Int32 FindtPrevWordBegin() { }
	// Offset : 0x54c110
	private Void MoveLeft(Boolean shift, Boolean ctrl) { }
	// Offset : 0x54c774
	private Int32 DetermineCharacterLine(Int32 charPos, TextGenerator generator) { }
	// Offset : 0x54c8f8
	private Int32 LineUpCharacterPosition(Int32 originalPos, Boolean goToFirstChar) { }
	// Offset : 0x54cda8
	private Int32 LineDownCharacterPosition(Int32 originalPos, Boolean goToLastChar) { }
	// Offset : 0x54c354
	private Void MoveDown(Boolean shift) { }
	// Offset : 0x54d174
	private Void MoveDown(Boolean shift, Boolean goToLastChar) { }
	// Offset : 0x54c348
	private Void MoveUp(Boolean shift) { }
	// Offset : 0x54d2dc
	private Void MoveUp(Boolean shift, Boolean goToFirstChar) { }
	// Offset : 0x54beb0
	private Void Delete() { }
	// Offset : 0x54bd1c
	private Void ForwardSpace() { }
	// Offset : 0x54bc3c
	private Void Backspace() { }
	// Offset : 0x54d41c
	private Void Insert(Char c) { }
	// Offset : 0x546b90
	private Void SendOnValueChangedAndUpdateLabel() { }
	// Offset : 0x54d520
	private Void SendOnValueChanged() { }
	// Offset : 0x54d59c
	protected Void SendOnSubmit() { }
	// Offset : 0x54d618
	protected virtual Void Append(String input) { }
	// Offset : 0x54d710
	protected virtual Void Append(Char input) { }
	// Offset : 0x547398
	protected Void UpdateLabel() { }
	// Offset : 0x54e8f0
	private Boolean IsSelectionVisible() { }
	// Offset : 0x54e960
	private static Int32 GetLineStartPosition(TextGenerator gen, Int32 line) { }
	// Offset : 0x54af28
	private static Int32 GetLineEndPosition(TextGenerator gen, Int32 line) { }
	// Offset : 0x54d84c
	private Void SetDrawRangeToContainCaretPosition(Int32 caretPos) { }
	// Offset : 0x54eb6c
	public Void ForceLabelUpdate() { }
	// Offset : 0x546d2c
	private Void MarkGeometryAsDirty() { }
	// Offset : 0x54eb70
	public virtual Void Rebuild(CanvasUpdate update) { }
	// Offset : 0x54f0e8
	public virtual Void LayoutComplete() { }
	// Offset : 0x54f0ec
	public virtual Void GraphicUpdateComplete() { }
	// Offset : 0x54eb80
	private Void UpdateGeometry() { }
	// Offset : 0x549470
	private Void AssignPositioningIfNeeded() { }
	// Offset : 0x54f0f0
	private Void OnFillVBO(Mesh vbo) { }
	// Offset : 0x54f380
	private Void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset) { }
	// Offset : 0x550944
	private Void CreateCursorVerts() { }
	// Offset : 0x54fccc
	private Void GenerateHightlight(VertexHelper vbo, Vector2 roundingOffset) { }
	// Offset : 0x549d34
	protected Char Validate(String text, Int32 pos, Char ch) { }
	// Offset : 0x550ad4
	public Void ActivateInputField() { }
	// Offset : 0x549174
	private Void ActivateInputFieldInternal() { }
	// Offset : 0x550c68
	public override Void OnSelect(BaseEventData eventData) { }
	// Offset : 0x550cac
	public virtual Void OnPointerClick(PointerEventData eventData) { }
	// Offset : 0x5485b4
	public Void DeactivateInputField() { }
	// Offset : 0x550cf8
	public override Void OnDeselect(BaseEventData eventData) { }
	// Offset : 0x550d28
	public virtual Void OnSubmit(BaseEventData eventData) { }
	// Offset : 0x547914
	private Void EnforceContentType() { }
	// Offset : 0x545d60
	private Void EnforceTextHOverflow() { }
	// Offset : 0x547ab4
	private Void SetToCustomIfContentTypeIsNot(ContentType[] allowedContentTypes) { }
	// Offset : 0x547bf0
	private Void SetToCustom() { }
	// Offset : 0x550db0
	protected override Void DoStateTransition(SelectionState state, Boolean instant) { }
	// Offset : 0x550ddc
	public virtual Void CalculateLayoutInputHorizontal() { }
	// Offset : 0x550de0
	public virtual Void CalculateLayoutInputVertical() { }
	// Offset : 0x550de4
	public virtual Single get_minWidth() { }
	// Offset : 0x550dec
	public virtual Single get_preferredWidth() { }
	// Offset : 0x550f80
	public virtual Single get_flexibleWidth() { }
	// Offset : 0x550f88
	public virtual Single get_minHeight() { }
	// Offset : 0x550f90
	public virtual Single get_preferredHeight() { }
	// Offset : 0x551148
	public virtual Single get_flexibleHeight() { }
	// Offset : 0x551150
	public virtual Int32 get_layoutPriority() { }
	// Offset : 0x551158
	private static Void .cctor() { }
	// Offset : 0x5511d4
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum ContentType
{
	// Fields
	public Int32 value__; // 0x10
	public const ContentType Standard = 0; // 0x0
	public const ContentType Autocorrected = 1; // 0x0
	public const ContentType IntegerNumber = 2; // 0x0
	public const ContentType DecimalNumber = 3; // 0x0
	public const ContentType Alphanumeric = 4; // 0x0
	public const ContentType Name = 5; // 0x0
	public const ContentType EmailAddress = 6; // 0x0
	public const ContentType Password = 7; // 0x0
	public const ContentType Pin = 8; // 0x0
	public const ContentType Custom = 9; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum InputType
{
	// Fields
	public Int32 value__; // 0x10
	public const InputType Standard = 0; // 0x0
	public const InputType AutoCorrect = 1; // 0x0
	public const InputType Password = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum CharacterValidation
{
	// Fields
	public Int32 value__; // 0x10
	public const CharacterValidation None = 0; // 0x0
	public const CharacterValidation Integer = 1; // 0x0
	public const CharacterValidation Decimal = 2; // 0x0
	public const CharacterValidation Alphanumeric = 3; // 0x0
	public const CharacterValidation Name = 4; // 0x0
	public const CharacterValidation EmailAddress = 5; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum LineType
{
	// Fields
	public Int32 value__; // 0x10
	public const LineType SingleLine = 0; // 0x0
	public const LineType MultiLineSubmit = 1; // 0x0
	public const LineType MultiLineNewline = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public sealed class OnValidateInput : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x546664
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x54667c
	public virtual Char Invoke(String text, Int32 charIndex, Char addedChar) { }
	// Offset : 0x551890
	public virtual IAsyncResult BeginInvoke(String text, Int32 charIndex, Char addedChar, AsyncCallback callback, Object object) { }
	// Offset : 0x55194c
	public virtual Char EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class SubmitEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x545cc0
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class OnChangeEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x545d10
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
protected enum EditState
{
	// Fields
	public Int32 value__; // 0x10
	public const EditState Continue = 0; // 0x0
	public const EditState Finish = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private sealed class <CaretBlink>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal Single <blinkPeriod>__1; // 0x10
	internal Boolean <blinkState>__1; // 0x14
	internal InputField $this; // 0x18
	internal Object $current; // 0x20
	internal Boolean $disposing; // 0x28
	internal Int32 $PC; // 0x2c

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x5487f8
	public Void .ctor() { }
	// Offset : 0x5511dc
	public Boolean MoveNext() { }
	// Offset : 0x5513b4
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x5513bc
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x5513c4
	public Void Dispose() { }
	// Offset : 0x5513d8
	public Void Reset() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private sealed class <MouseDragOutsideRect>c__Iterator1 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal PointerEventData eventData; // 0x10
	internal Vector2 <localMousePos>__1; // 0x18
	internal Rect <rect>__1; // 0x20
	internal Single <delay>__1; // 0x30
	internal InputField $this; // 0x38
	internal Object $current; // 0x40
	internal Boolean $disposing; // 0x48
	internal Int32 $PC; // 0x4c

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x54b570
	public Void .ctor() { }
	// Offset : 0x551440
	public Boolean MoveNext() { }
	// Offset : 0x551804
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x55180c
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x551814
	public Void Dispose() { }
	// Offset : 0x551828
	public Void Reset() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Mask : UIBehaviour, ICanvasRaycastFilter, IMaterialModifier
{
	// Fields
	private RectTransform m_RectTransform; // 0x18
	private Boolean m_ShowMaskGraphic; // 0x20
	private Graphic m_Graphic; // 0x28
	private Material m_MaskMaterial; // 0x30
	private Material m_UnmaskMaterial; // 0x38

	// Properties
	public RectTransform rectTransform { get; }
	public Boolean showMaskGraphic { get; set; }
	public Graphic graphic { get; }

	// Methods
	// Offset : 0x5792b0
	protected Void .ctor() { }
	// Offset : 0x5792c0
	public RectTransform get_rectTransform() { }
	// Offset : 0x579320
	public Boolean get_showMaskGraphic() { }
	// Offset : 0x579328
	public Void set_showMaskGraphic(Boolean value) { }
	// Offset : 0x579420
	public Graphic get_graphic() { }
	// Offset : 0x579480
	public virtual Boolean MaskEnabled() { }
	// Offset : 0x579538
	public virtual Void OnSiblingGraphicEnabledDisabled() { }
	// Offset : 0x57953c
	protected override Void OnEnable() { }
	// Offset : 0x57990c
	protected override Void OnDisable() { }
	// Offset : 0x579c80
	public virtual Boolean IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
	// Offset : 0x579d48
	public virtual Material GetModifiedMaterial(Material baseMaterial) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public abstract class MaskableGraphic : Graphic, IClippable, IMaskable, IMaterialModifier
{
	// Fields
	protected Boolean m_ShouldRecalculateStencil; // 0x79
	protected Material m_MaskMaterial; // 0x80
	private RectMask2D m_ParentMask; // 0x88
	private Boolean m_Maskable; // 0x90
	protected Boolean m_IncludeForMasking; // 0x91
	private CullStateChangedEvent m_OnCullStateChanged; // 0x98
	protected Boolean m_ShouldRecalculate; // 0xa0
	protected Int32 m_StencilValue; // 0xa4
	private readonly Vector3[] m_Corners; // 0xa8

	// Properties
	public CullStateChangedEvent onCullStateChanged { get; set; }
	public Boolean maskable { get; set; }
	private Rect rootCanvasRect { get; }

	// Methods
	// Offset : 0x57bfc4
	protected Void .ctor() { }
	// Offset : 0x57c0cc
	public CullStateChangedEvent get_onCullStateChanged() { }
	// Offset : 0x57c0d4
	public Void set_onCullStateChanged(CullStateChangedEvent value) { }
	// Offset : 0x57c0dc
	public Boolean get_maskable() { }
	// Offset : 0x57c0e4
	public Void set_maskable(Boolean value) { }
	// Offset : 0x57c158
	public virtual Material GetModifiedMaterial(Material baseMaterial) { }
	// Offset : 0x57c2f0
	public virtual Void Cull(Rect clipRect, Boolean validRect) { }
	// Offset : 0x57c680
	private Void UpdateCull(Boolean cull) { }
	// Offset : 0x57c79c
	public virtual Void SetClipRect(Rect clipRect, Boolean validRect) { }
	// Offset : 0x57c828
	protected override Void OnEnable() { }
	// Offset : 0x57cadc
	protected override Void OnDisable() { }
	// Offset : 0x57cbf4
	protected override Void OnTransformParentChanged() { }
	// Offset : 0x57cc6c
	public virtual Void ParentMaskStateChanged() { }
	// Offset : 0x57cc70
	protected override Void OnCanvasHierarchyChanged() { }
	// Offset : 0x57c350
	private Rect get_rootCanvasRect() { }
	// Offset : 0x57c910
	private Void UpdateClipParent() { }
	// Offset : 0x57ced0
	public virtual Void RecalculateClipping() { }
	// Offset : 0x57ced4
	public virtual Void RecalculateMasking() { }
	// Offset : 0x57cf74
	private GameObject UnityEngine.UI.IClippable.get_gameObject() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class CullStateChangedEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x57c07c
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class MaskUtilities
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x57b240
	public Void .ctor() { }
	// Offset : 0x57b248
	public static Void Notify2DMaskStateChanged(Component mask) { }
	// Offset : 0x57964c
	public static Void NotifyStencilStateChanged(Component mask) { }
	// Offset : 0x57a034
	public static Transform FindRootSortOverrideCanvas(Transform start) { }
	// Offset : 0x57a1e0
	public static Int32 GetStencilDepth(Transform transform, Transform stopAfter) { }
	// Offset : 0x57b50c
	public static Boolean IsDescendantOrSelf(Transform father, Transform child) { }
	// Offset : 0x57b6ac
	public static RectMask2D GetRectMaskForClippable(IClippable clippable) { }
	// Offset : 0x57bc14
	public static Void GetRectMasksForClip(RectMask2D clipper, List`1 masks) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
internal static class Misc
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x57cf7c
	public static Void Destroy(Object obj) { }
	// Offset : 0x57d0a8
	public static Void DestroyImmediate(Object obj) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
[Serializable]
public struct Navigation : IEquatable`1
{
	// Fields
	private Mode m_Mode; // 0x10
	private Selectable m_SelectOnUp; // 0x18
	private Selectable m_SelectOnDown; // 0x20
	private Selectable m_SelectOnLeft; // 0x28
	private Selectable m_SelectOnRight; // 0x30

	// Properties
	public Mode mode { get; set; }
	public Selectable selectOnUp { get; set; }
	public Selectable selectOnDown { get; set; }
	public Selectable selectOnLeft { get; set; }
	public Selectable selectOnRight { get; set; }
	public static Navigation defaultNavigation { get; }

	// Methods
	// Offset : 0x2cc054
	public Mode get_mode() { }
	// Offset : 0x2cc05c
	public Void set_mode(Mode value) { }
	// Offset : 0x2cc064
	public Selectable get_selectOnUp() { }
	// Offset : 0x2cc06c
	public Void set_selectOnUp(Selectable value) { }
	// Offset : 0x2cc074
	public Selectable get_selectOnDown() { }
	// Offset : 0x2cc07c
	public Void set_selectOnDown(Selectable value) { }
	// Offset : 0x2cc084
	public Selectable get_selectOnLeft() { }
	// Offset : 0x2cc08c
	public Void set_selectOnLeft(Selectable value) { }
	// Offset : 0x2cc094
	public Selectable get_selectOnRight() { }
	// Offset : 0x2cc09c
	public Void set_selectOnRight(Selectable value) { }
	// Offset : 0x57d1d0
	public static Navigation get_defaultNavigation() { }
	// Offset : 0x2cc0a4
	public Boolean Equals(Navigation other) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Mode
{
	// Fields
	public Int32 value__; // 0x10
	public const Mode None = 0; // 0x0
	public const Mode Horizontal = 1; // 0x0
	public const Mode Vertical = 2; // 0x0
	public const Mode Automatic = 3; // 0x0
	public const Mode Explicit = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class RawImage : MaskableGraphic
{
	// Fields
	private Texture m_Texture; // 0xb0
	private Rect m_UVRect; // 0xb8

	// Properties
	public override Texture mainTexture { get; }
	public Texture texture { get; set; }
	public Rect uvRect { get; set; }

	// Methods
	// Offset : 0x57e1a0
	protected Void .ctor() { }
	// Offset : 0x57e214
	public override Texture get_mainTexture() { }
	// Offset : 0x57e3f0
	public Texture get_texture() { }
	// Offset : 0x57e3f8
	public Void set_texture(Texture value) { }
	// Offset : 0x57e4e4
	public Rect get_uvRect() { }
	// Offset : 0x57e4f0
	public Void set_uvRect(Rect value) { }
	// Offset : 0x57e598
	public override Void SetNativeSize() { }
	// Offset : 0x57e7e4
	protected override Void OnPopulateMesh(VertexHelper vh) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class RectMask2D : UIBehaviour, IClipper, ICanvasRaycastFilter
{
	// Fields
	private readonly RectangularVertexClipper m_VertexClipper; // 0x18
	private RectTransform m_RectTransform; // 0x20
	private HashSet`1 m_ClipTargets; // 0x28
	private Boolean m_ShouldRecalculateClipRects; // 0x30
	private List`1 m_Clippers; // 0x38
	private Rect m_LastClipRectCanvasSpace; // 0x40
	private Boolean m_ForceClip; // 0x50
	private Canvas m_Canvas; // 0x58
	private Vector3[] m_Corners; // 0x60

	// Properties
	private Canvas Canvas { get; }
	public Rect canvasRect { get; }
	public RectTransform rectTransform { get; }
	private Rect rootCanvasRect { get; }

	// Methods
	// Offset : 0x57eec4
	protected Void .ctor() { }
	// Offset : 0x57f000
	private Canvas get_Canvas() { }
	// Offset : 0x57f19c
	public Rect get_canvasRect() { }
	// Offset : 0x57f1f0
	public RectTransform get_rectTransform() { }
	// Offset : 0x57f53c
	protected override Void OnEnable() { }
	// Offset : 0x57f578
	protected override Void OnDisable() { }
	// Offset : 0x57f61c
	public virtual Boolean IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
	// Offset : 0x57f6e4
	private Rect get_rootCanvasRect() { }
	// Offset : 0x57f9a4
	public virtual Void PerformClipping() { }
	// Offset : 0x57ce1c
	public Void AddClippable(IClippable clippable) { }
	// Offset : 0x57cce8
	public Void RemoveClippable(IClippable clippable) { }
	// Offset : 0x57fe58
	protected override Void OnTransformParentChanged() { }
	// Offset : 0x57fe84
	protected override Void OnCanvasHierarchyChanged() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Scrollbar : Selectable, IBeginDragHandler, IDragHandler, IInitializePotentialDragHandler, ICanvasElement, IEventSystemHandler
{
	// Fields
	private RectTransform m_HandleRect; // 0xd8
	private Direction m_Direction; // 0xe0
	private Single m_Value; // 0xe4
	private Single m_Size; // 0xe8
	private Int32 m_NumberOfSteps; // 0xec
	private ScrollEvent m_OnValueChanged; // 0xf0
	private RectTransform m_ContainerRect; // 0xf8
	private Vector2 m_Offset; // 0x100
	private DrivenRectTransformTracker m_Tracker; // 0x108
	private Coroutine m_PointerDownRepeat; // 0x110
	private Boolean isPointerDownAndNotDragging; // 0x118

	// Properties
	public RectTransform handleRect { get; set; }
	public Direction direction { get; set; }
	public Single value { get; set; }
	public Single size { get; set; }
	public Int32 numberOfSteps { get; set; }
	public ScrollEvent onValueChanged { get; set; }
	private Single stepSize { get; }
	private Axis axis { get; }
	private Boolean reverseValue { get; }

	// Methods
	// Offset : 0x587738
	protected Void .ctor() { }
	// Offset : 0x587930
	public RectTransform get_handleRect() { }
	// Offset : 0x587938
	public Void set_handleRect(RectTransform value) { }
	// Offset : 0x587cac
	public Direction get_direction() { }
	// Offset : 0x587cb4
	public Void set_direction(Direction value) { }
	// Offset : 0x587d30
	public Single get_value() { }
	// Offset : 0x585cc8
	public Void set_value(Single value) { }
	// Offset : 0x587e44
	public Single get_size() { }
	// Offset : 0x585ad0
	public Void set_size(Single value) { }
	// Offset : 0x587e4c
	public Int32 get_numberOfSteps() { }
	// Offset : 0x587e54
	public Void set_numberOfSteps(Int32 value) { }
	// Offset : 0x583184
	public ScrollEvent get_onValueChanged() { }
	// Offset : 0x587ee0
	public Void set_onValueChanged(ScrollEvent value) { }
	// Offset : 0x587ee8
	private Single get_stepSize() { }
	// Offset : 0x587f14
	public virtual Void Rebuild(CanvasUpdate executing) { }
	// Offset : 0x587f18
	public virtual Void LayoutComplete() { }
	// Offset : 0x587f1c
	public virtual Void GraphicUpdateComplete() { }
	// Offset : 0x587f20
	protected override Void OnEnable() { }
	// Offset : 0x58810c
	protected override Void OnDisable() { }
	// Offset : 0x5879bc
	private Void UpdateCachedReferences() { }
	// Offset : 0x587e3c
	private Void Set(Single input) { }
	// Offset : 0x588008
	private Void Set(Single input, Boolean sendCallback) { }
	// Offset : 0x5881fc
	protected override Void OnRectTransformDimensionsChange() { }
	// Offset : 0x58825c
	private Axis get_axis() { }
	// Offset : 0x588278
	private Boolean get_reverseValue() { }
	// Offset : 0x587ad8
	private Void UpdateVisuals() { }
	// Offset : 0x58828c
	private Void UpdateDrag(PointerEventData eventData) { }
	// Offset : 0x5885dc
	private Boolean MayDrag(PointerEventData eventData) { }
	// Offset : 0x588680
	public virtual Void OnBeginDrag(PointerEventData eventData) { }
	// Offset : 0x588908
	public virtual Void OnDrag(PointerEventData eventData) { }
	// Offset : 0x5889b4
	public override Void OnPointerDown(PointerEventData eventData) { }
	// Offset : 0x588b88
	protected IEnumerator ClickRepeat(PointerEventData eventData) { }
	// Offset : 0x588c24
	public override Void OnPointerUp(PointerEventData eventData) { }
	// Offset : 0x588c9c
	public override Void OnMove(AxisEventData eventData) { }
	// Offset : 0x58909c
	public override Selectable FindSelectableOnLeft() { }
	// Offset : 0x589224
	public override Selectable FindSelectableOnRight() { }
	// Offset : 0x589390
	public override Selectable FindSelectableOnUp() { }
	// Offset : 0x5894fc
	public override Selectable FindSelectableOnDown() { }
	// Offset : 0x589668
	public virtual Void OnInitializePotentialDrag(PointerEventData eventData) { }
	// Offset : 0x58969c
	public Void SetDirection(Direction direction, Boolean includeRectLayouts) { }
	// Offset : 0x589830
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Direction
{
	// Fields
	public Int32 value__; // 0x10
	public const Direction LeftToRight = 0; // 0x0
	public const Direction RightToLeft = 1; // 0x0
	public const Direction BottomToTop = 2; // 0x0
	public const Direction TopToBottom = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class ScrollEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x5877fc
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private enum Axis
{
	// Fields
	public Int32 value__; // 0x10
	public const Axis Horizontal = 0; // 0x0
	public const Axis Vertical = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private sealed class <ClickRepeat>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal PointerEventData eventData; // 0x10
	internal Scrollbar $this; // 0x18
	internal Object $current; // 0x20
	internal Boolean $disposing; // 0x28
	internal Int32 $PC; // 0x2c

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x588c1c
	public Void .ctor() { }
	// Offset : 0x589838
	public Boolean MoveNext() { }
	// Offset : 0x589af4
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x589afc
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x589b04
	public Void Dispose() { }
	// Offset : 0x589b18
	public Void Reset() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class ScrollRect : UIBehaviour, IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, ICanvasElement, ILayoutElement, ILayoutGroup, IEventSystemHandler, ILayoutController
{
	// Fields
	private RectTransform m_Content; // 0x18
	private Boolean m_Horizontal; // 0x20
	private Boolean m_Vertical; // 0x21
	private MovementType m_MovementType; // 0x24
	private Single m_Elasticity; // 0x28
	private Boolean m_Inertia; // 0x2c
	private Single m_DecelerationRate; // 0x30
	private Single m_ScrollSensitivity; // 0x34
	private RectTransform m_Viewport; // 0x38
	private Scrollbar m_HorizontalScrollbar; // 0x40
	private Scrollbar m_VerticalScrollbar; // 0x48
	private ScrollbarVisibility m_HorizontalScrollbarVisibility; // 0x50
	private ScrollbarVisibility m_VerticalScrollbarVisibility; // 0x54
	private Single m_HorizontalScrollbarSpacing; // 0x58
	private Single m_VerticalScrollbarSpacing; // 0x5c
	private ScrollRectEvent m_OnValueChanged; // 0x60
	private Vector2 m_PointerStartLocalCursor; // 0x68
	protected Vector2 m_ContentStartPosition; // 0x70
	private RectTransform m_ViewRect; // 0x78
	protected Bounds m_ContentBounds; // 0x80
	private Bounds m_ViewBounds; // 0x98
	private Vector2 m_Velocity; // 0xb0
	private Boolean m_Dragging; // 0xb8
	private Boolean m_Scrolling; // 0xb9
	private Vector2 m_PrevPosition; // 0xbc
	private Bounds m_PrevContentBounds; // 0xc4
	private Bounds m_PrevViewBounds; // 0xdc
	private Boolean m_HasRebuiltLayout; // 0xf4
	private Boolean m_HSliderExpand; // 0xf5
	private Boolean m_VSliderExpand; // 0xf6
	private Single m_HSliderHeight; // 0xf8
	private Single m_VSliderWidth; // 0xfc
	private RectTransform m_Rect; // 0x100
	private RectTransform m_HorizontalScrollbarRect; // 0x108
	private RectTransform m_VerticalScrollbarRect; // 0x110
	private DrivenRectTransformTracker m_Tracker; // 0x118
	private readonly Vector3[] m_Corners; // 0x120

	// Properties
	public RectTransform content { get; set; }
	public Boolean horizontal { get; set; }
	public Boolean vertical { get; set; }
	public MovementType movementType { get; set; }
	public Single elasticity { get; set; }
	public Boolean inertia { get; set; }
	public Single decelerationRate { get; set; }
	public Single scrollSensitivity { get; set; }
	public RectTransform viewport { get; set; }
	public Scrollbar horizontalScrollbar { get; set; }
	public Scrollbar verticalScrollbar { get; set; }
	public ScrollbarVisibility horizontalScrollbarVisibility { get; set; }
	public ScrollbarVisibility verticalScrollbarVisibility { get; set; }
	public Single horizontalScrollbarSpacing { get; set; }
	public Single verticalScrollbarSpacing { get; set; }
	public ScrollRectEvent onValueChanged { get; set; }
	protected RectTransform viewRect { get; }
	public Vector2 velocity { get; set; }
	private RectTransform rectTransform { get; }
	public Vector2 normalizedPosition { get; set; }
	public Single horizontalNormalizedPosition { get; set; }
	public Single verticalNormalizedPosition { get; set; }
	private Boolean hScrollingNeeded { get; }
	private Boolean vScrollingNeeded { get; }
	public virtual Single minWidth { get; }
	public virtual Single preferredWidth { get; }
	public virtual Single flexibleWidth { get; }
	public virtual Single minHeight { get; }
	public virtual Single preferredHeight { get; }
	public virtual Single flexibleHeight { get; }
	public virtual Int32 layoutPriority { get; }

	// Methods
	// Offset : 0x582d34
	protected Void .ctor() { }
	// Offset : 0x582e78
	public RectTransform get_content() { }
	// Offset : 0x582e80
	public Void set_content(RectTransform value) { }
	// Offset : 0x582e88
	public Boolean get_horizontal() { }
	// Offset : 0x582e90
	public Void set_horizontal(Boolean value) { }
	// Offset : 0x582e9c
	public Boolean get_vertical() { }
	// Offset : 0x582ea4
	public Void set_vertical(Boolean value) { }
	// Offset : 0x582eb0
	public MovementType get_movementType() { }
	// Offset : 0x582eb8
	public Void set_movementType(MovementType value) { }
	// Offset : 0x582ec0
	public Single get_elasticity() { }
	// Offset : 0x582ec8
	public Void set_elasticity(Single value) { }
	// Offset : 0x582ed0
	public Boolean get_inertia() { }
	// Offset : 0x582ed8
	public Void set_inertia(Boolean value) { }
	// Offset : 0x582ee4
	public Single get_decelerationRate() { }
	// Offset : 0x582eec
	public Void set_decelerationRate(Single value) { }
	// Offset : 0x582ef4
	public Single get_scrollSensitivity() { }
	// Offset : 0x582efc
	public Void set_scrollSensitivity(Single value) { }
	// Offset : 0x582f04
	public RectTransform get_viewport() { }
	// Offset : 0x582f0c
	public Void set_viewport(RectTransform value) { }
	// Offset : 0x582fec
	public Scrollbar get_horizontalScrollbar() { }
	// Offset : 0x582ff4
	public Void set_horizontalScrollbar(Scrollbar value) { }
	// Offset : 0x58318c
	public Scrollbar get_verticalScrollbar() { }
	// Offset : 0x583194
	public Void set_verticalScrollbar(Scrollbar value) { }
	// Offset : 0x583324
	public ScrollbarVisibility get_horizontalScrollbarVisibility() { }
	// Offset : 0x58332c
	public Void set_horizontalScrollbarVisibility(ScrollbarVisibility value) { }
	// Offset : 0x583334
	public ScrollbarVisibility get_verticalScrollbarVisibility() { }
	// Offset : 0x58333c
	public Void set_verticalScrollbarVisibility(ScrollbarVisibility value) { }
	// Offset : 0x583344
	public Single get_horizontalScrollbarSpacing() { }
	// Offset : 0x58334c
	public Void set_horizontalScrollbarSpacing(Single value) { }
	// Offset : 0x583400
	public Single get_verticalScrollbarSpacing() { }
	// Offset : 0x583408
	public Void set_verticalScrollbarSpacing(Single value) { }
	// Offset : 0x583410
	public ScrollRectEvent get_onValueChanged() { }
	// Offset : 0x583418
	public Void set_onValueChanged(ScrollRectEvent value) { }
	// Offset : 0x583420
	protected RectTransform get_viewRect() { }
	// Offset : 0x583558
	public Vector2 get_velocity() { }
	// Offset : 0x583560
	public Void set_velocity(Vector2 value) { }
	// Offset : 0x583568
	private RectTransform get_rectTransform() { }
	// Offset : 0x583600
	public virtual Void Rebuild(CanvasUpdate executing) { }
	// Offset : 0x584350
	public virtual Void LayoutComplete() { }
	// Offset : 0x584354
	public virtual Void GraphicUpdateComplete() { }
	// Offset : 0x5836b4
	private Void UpdateCachedData() { }
	// Offset : 0x584358
	protected override Void OnEnable() { }
	// Offset : 0x584514
	protected override Void OnDisable() { }
	// Offset : 0x584740
	public override Boolean IsActive() { }
	// Offset : 0x5847d0
	private Void EnsureLayoutHasRebuilt() { }
	// Offset : 0x584854
	public virtual Void StopMovement() { }
	// Offset : 0x5848c0
	public virtual Void OnScroll(PointerEventData data) { }
	// Offset : 0x584c08
	public virtual Void OnInitializePotentialDrag(PointerEventData eventData) { }
	// Offset : 0x584c9c
	public virtual Void OnBeginDrag(PointerEventData eventData) { }
	// Offset : 0x584e30
	public virtual Void OnEndDrag(PointerEventData eventData) { }
	// Offset : 0x584e70
	public virtual Void OnDrag(PointerEventData eventData) { }
	// Offset : 0x5851dc
	protected virtual Void SetContentAnchoredPosition(Vector2 position) { }
	// Offset : 0x585320
	protected virtual Void LateUpdate() { }
	// Offset : 0x58426c
	protected Void UpdatePrevData() { }
	// Offset : 0x584000
	private Void UpdateScrollbars(Vector2 offset) { }
	// Offset : 0x585a2c
	public Vector2 get_normalizedPosition() { }
	// Offset : 0x585e20
	public Void set_normalizedPosition(Vector2 value) { }
	// Offset : 0x585b78
	public Single get_horizontalNormalizedPosition() { }
	// Offset : 0x585eb0
	public Void set_horizontalNormalizedPosition(Single value) { }
	// Offset : 0x585cd0
	public Single get_verticalNormalizedPosition() { }
	// Offset : 0x585f08
	public Void set_verticalNormalizedPosition(Single value) { }
	// Offset : 0x585f60
	private Void SetHorizontalNormalizedPosition(Single value) { }
	// Offset : 0x585fb8
	private Void SetVerticalNormalizedPosition(Single value) { }
	// Offset : 0x586010
	protected virtual Void SetNormalizedPosition(Single value, Int32 axis) { }
	// Offset : 0x585130
	private static Single RubberDelta(Single overStretching, Single viewSize) { }
	// Offset : 0x58625c
	protected override Void OnRectTransformDimensionsChange() { }
	// Offset : 0x586260
	private Boolean get_hScrollingNeeded() { }
	// Offset : 0x5862c8
	private Boolean get_vScrollingNeeded() { }
	// Offset : 0x586330
	public virtual Void CalculateLayoutInputHorizontal() { }
	// Offset : 0x586334
	public virtual Void CalculateLayoutInputVertical() { }
	// Offset : 0x586338
	public virtual Single get_minWidth() { }
	// Offset : 0x586340
	public virtual Single get_preferredWidth() { }
	// Offset : 0x586348
	public virtual Single get_flexibleWidth() { }
	// Offset : 0x586350
	public virtual Single get_minHeight() { }
	// Offset : 0x586358
	public virtual Single get_preferredHeight() { }
	// Offset : 0x586360
	public virtual Single get_flexibleHeight() { }
	// Offset : 0x586368
	public virtual Int32 get_layoutPriority() { }
	// Offset : 0x586370
	public virtual Void SetLayoutHorizontal() { }
	// Offset : 0x586b84
	public virtual Void SetLayoutVertical() { }
	// Offset : 0x585a84
	private Void UpdateScrollbarVisibility() { }
	// Offset : 0x5870c4
	private static Void UpdateOneScrollbarVisibility(Boolean xScrollingNeeded, Boolean xAxisEnabled, ScrollbarVisibility scrollbarVisibility, Scrollbar scrollbar) { }
	// Offset : 0x586cf8
	private Void UpdateScrollbarLayout() { }
	// Offset : 0x583adc
	protected Void UpdateBounds() { }
	// Offset : 0x587204
	internal static Void AdjustBounds(ref Bounds viewBounds, ref Vector2 contentPivot, ref Vector3 contentSize, ref Vector3 contentPos) { }
	// Offset : 0x586a54
	private Bounds GetBounds() { }
	// Offset : 0x587344
	internal static Bounds InternalGetBounds(Vector3[] corners, ref Matrix4x4 viewWorldToLocalMatrix) { }
	// Offset : 0x584bcc
	private Vector2 CalculateOffset(Vector2 delta) { }
	// Offset : 0x58754c
	internal static Vector2 InternalCalculateOffset(ref Bounds viewBounds, ref Bounds contentBounds, Boolean horizontal, Boolean vertical, MovementType movementType, ref Vector2 delta) { }
	// Offset : 0x583354
	protected Void SetDirty() { }
	// Offset : 0x582f14
	protected Void SetDirtyCaching() { }
	// Offset : 0x587730
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum MovementType
{
	// Fields
	public Int32 value__; // 0x10
	public const MovementType Unrestricted = 0; // 0x0
	public const MovementType Elastic = 1; // 0x0
	public const MovementType Clamped = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum ScrollbarVisibility
{
	// Fields
	public Int32 value__; // 0x10
	public const ScrollbarVisibility Permanent = 0; // 0x0
	public const ScrollbarVisibility AutoHide = 1; // 0x0
	public const ScrollbarVisibility AutoHideAndExpandViewport = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class ScrollRectEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x582e28
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Selectable : UIBehaviour, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IEventSystemHandler
{
	// Fields
	private static List`1 s_List; // 0x0
	private Navigation m_Navigation; // 0x18
	private Transition m_Transition; // 0x40
	private ColorBlock m_Colors; // 0x44
	private SpriteState m_SpriteState; // 0x90
	private AnimationTriggers m_AnimationTriggers; // 0xa8
	private Boolean m_Interactable; // 0xb0
	private Graphic m_TargetGraphic; // 0xb8
	private Boolean m_GroupsAllowInteraction; // 0xc0
	private SelectionState m_CurrentSelectionState; // 0xc4
	private Boolean <isPointerInside>k__BackingField; // 0xc8
	private Boolean <isPointerDown>k__BackingField; // 0xc9
	private Boolean <hasSelection>k__BackingField; // 0xca
	private readonly List`1 m_CanvasGroupCache; // 0xd0

	// Properties
	public static List`1 allSelectables { get; }
	public Navigation navigation { get; set; }
	public Transition transition { get; set; }
	public ColorBlock colors { get; set; }
	public SpriteState spriteState { get; set; }
	public AnimationTriggers animationTriggers { get; set; }
	public Graphic targetGraphic { get; set; }
	public Boolean interactable { get; set; }
	private Boolean isPointerInside { get; set; }
	private Boolean isPointerDown { get; set; }
	private Boolean hasSelection { get; set; }
	public Image image { get; set; }
	public Animator animator { get; }
	protected SelectionState currentSelectionState { get; }

	// Methods
	// Offset : 0x58784c
	protected Void .ctor() { }
	// Offset : 0x589b80
	public static List`1 get_allSelectables() { }
	// Offset : 0x5890c0
	public Navigation get_navigation() { }
	// Offset : 0x589be8
	public Void set_navigation(Navigation value) { }
	// Offset : 0x589c94
	public Transition get_transition() { }
	// Offset : 0x589c9c
	public Void set_transition(Transition value) { }
	// Offset : 0x589d1c
	public ColorBlock get_colors() { }
	// Offset : 0x589d3c
	public Void set_colors(ColorBlock value) { }
	// Offset : 0x589de0
	public SpriteState get_spriteState() { }
	// Offset : 0x589df4
	public Void set_spriteState(SpriteState value) { }
	// Offset : 0x589e90
	public AnimationTriggers get_animationTriggers() { }
	// Offset : 0x589e98
	public Void set_animationTriggers(AnimationTriggers value) { }
	// Offset : 0x589f18
	public Graphic get_targetGraphic() { }
	// Offset : 0x589f20
	public Void set_targetGraphic(Graphic value) { }
	// Offset : 0x589fa0
	public Boolean get_interactable() { }
	// Offset : 0x589fa8
	public Void set_interactable(Boolean value) { }
	// Offset : 0x58a1b4
	private Boolean get_isPointerInside() { }
	// Offset : 0x58a1bc
	private Void set_isPointerInside(Boolean value) { }
	// Offset : 0x58a1c8
	private Boolean get_isPointerDown() { }
	// Offset : 0x58a1d0
	private Void set_isPointerDown(Boolean value) { }
	// Offset : 0x58a1dc
	private Boolean get_hasSelection() { }
	// Offset : 0x58a1e4
	private Void set_hasSelection(Boolean value) { }
	// Offset : 0x58a1f0
	public Image get_image() { }
	// Offset : 0x58a274
	public Void set_image(Image value) { }
	// Offset : 0x58a27c
	public Animator get_animator() { }
	// Offset : 0x58a2cc
	protected override Void Awake() { }
	// Offset : 0x58a35c
	protected override Void OnCanvasGroupChanged() { }
	// Offset : 0x58a558
	public virtual Boolean IsInteractable() { }
	// Offset : 0x58a578
	protected override Void OnDidApplyAnimationProperties() { }
	// Offset : 0x587f5c
	protected override Void OnEnable() { }
	// Offset : 0x58a640
	protected override Void OnTransformParentChanged() { }
	// Offset : 0x589c8c
	private Void OnSetProperty() { }
	// Offset : 0x588138
	protected override Void OnDisable() { }
	// Offset : 0x58a68c
	protected SelectionState get_currentSelectionState() { }
	// Offset : 0x58a694
	protected virtual Void InstantClearState() { }
	// Offset : 0x58ab8c
	protected virtual Void DoStateTransition(SelectionState state, Boolean instant) { }
	// Offset : 0x58ae4c
	public Selectable FindSelectable(Vector3 dir) { }
	// Offset : 0x58b38c
	private static Vector3 GetPointOnRectEdge(RectTransform rect, Vector2 dir) { }
	// Offset : 0x58b5d8
	private Void Navigate(AxisEventData eventData, Selectable sel) { }
	// Offset : 0x5890dc
	public virtual Selectable FindSelectableOnLeft() { }
	// Offset : 0x589248
	public virtual Selectable FindSelectableOnRight() { }
	// Offset : 0x5893b4
	public virtual Selectable FindSelectableOnUp() { }
	// Offset : 0x589520
	public virtual Selectable FindSelectableOnDown() { }
	// Offset : 0x588f8c
	public virtual Void OnMove(AxisEventData eventData) { }
	// Offset : 0x58a734
	private Void StartColorTween(Color targetColor, Boolean instant) { }
	// Offset : 0x58a868
	private Void DoSpriteSwap(Sprite newSprite) { }
	// Offset : 0x58a928
	private Void TriggerAnimation(String triggername) { }
	// Offset : 0x58b6c8
	protected Boolean IsHighlighted(BaseEventData eventData) { }
	// Offset : 0x58b960
	protected Boolean IsPressed(BaseEventData eventData) { }
	// Offset : 0x58b8fc
	protected Boolean IsPressed() { }
	// Offset : 0x58a170
	protected Void UpdateSelectionState(BaseEventData eventData) { }
	// Offset : 0x58b964
	private Void EvaluateAndTransitionToSelectionState(BaseEventData eventData) { }
	// Offset : 0x58a580
	private Void InternalEvaluateAndTransitionToSelectionState(Boolean instant) { }
	// Offset : 0x588a10
	public virtual Void OnPointerDown(PointerEventData eventData) { }
	// Offset : 0x588c48
	public virtual Void OnPointerUp(PointerEventData eventData) { }
	// Offset : 0x58ba00
	public virtual Void OnPointerEnter(PointerEventData eventData) { }
	// Offset : 0x58ba0c
	public virtual Void OnPointerExit(PointerEventData eventData) { }
	// Offset : 0x58ba14
	public virtual Void OnSelect(BaseEventData eventData) { }
	// Offset : 0x58ba20
	public virtual Void OnDeselect(BaseEventData eventData) { }
	// Offset : 0x58ba28
	public virtual Void Select() { }
	// Offset : 0x58bb6c
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Transition
{
	// Fields
	public Int32 value__; // 0x10
	public const Transition None = 0; // 0x0
	public const Transition ColorTint = 1; // 0x0
	public const Transition SpriteSwap = 2; // 0x0
	public const Transition Animation = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
protected enum SelectionState
{
	// Fields
	public Int32 value__; // 0x10
	public const SelectionState Normal = 0; // 0x0
	public const SelectionState Highlighted = 1; // 0x0
	public const SelectionState Pressed = 2; // 0x0
	public const SelectionState Disabled = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
internal static class SetPropertyUtility
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x58bbe0
	public static Boolean SetColor(ref Color currentValue, Color newValue) { }
	// Offset : 0x
	public static Boolean SetStruct(ref T currentValue, T newValue) { }
	// Offset : 0x
	public static Boolean SetClass(ref T currentValue, T newValue) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Slider : Selectable, IDragHandler, IInitializePotentialDragHandler, ICanvasElement, IEventSystemHandler
{
	// Fields
	private RectTransform m_FillRect; // 0xd8
	private RectTransform m_HandleRect; // 0xe0
	private Direction m_Direction; // 0xe8
	private Single m_MinValue; // 0xec
	private Single m_MaxValue; // 0xf0
	private Boolean m_WholeNumbers; // 0xf4
	protected Single m_Value; // 0xf8
	private SliderEvent m_OnValueChanged; // 0x100
	private Image m_FillImage; // 0x108
	private Transform m_FillTransform; // 0x110
	private RectTransform m_FillContainerRect; // 0x118
	private Transform m_HandleTransform; // 0x120
	private RectTransform m_HandleContainerRect; // 0x128
	private Vector2 m_Offset; // 0x130
	private DrivenRectTransformTracker m_Tracker; // 0x138

	// Properties
	public RectTransform fillRect { get; set; }
	public RectTransform handleRect { get; set; }
	public Direction direction { get; set; }
	public Single minValue { get; set; }
	public Single maxValue { get; set; }
	public Boolean wholeNumbers { get; set; }
	public virtual Single value { get; set; }
	public Single normalizedValue { get; set; }
	public SliderEvent onValueChanged { get; set; }
	private Single stepSize { get; }
	private Axis axis { get; }
	private Boolean reverseValue { get; }

	// Methods
	// Offset : 0x58c0f0
	protected Void .ctor() { }
	// Offset : 0x58c200
	public RectTransform get_fillRect() { }
	// Offset : 0x58c208
	public Void set_fillRect(RectTransform value) { }
	// Offset : 0x58c978
	public RectTransform get_handleRect() { }
	// Offset : 0x58c980
	public Void set_handleRect(RectTransform value) { }
	// Offset : 0x58ca04
	public Direction get_direction() { }
	// Offset : 0x58ca0c
	public Void set_direction(Direction value) { }
	// Offset : 0x58ca88
	public Single get_minValue() { }
	// Offset : 0x58ca90
	public Void set_minValue(Single value) { }
	// Offset : 0x58cb70
	public Single get_maxValue() { }
	// Offset : 0x58cb78
	public Void set_maxValue(Single value) { }
	// Offset : 0x58cc00
	public Boolean get_wholeNumbers() { }
	// Offset : 0x58cc08
	public Void set_wholeNumbers(Boolean value) { }
	// Offset : 0x58cc90
	public virtual Single get_value() { }
	// Offset : 0x58cd7c
	public virtual Void set_value(Single value) { }
	// Offset : 0x58cd80
	public Single get_normalizedValue() { }
	// Offset : 0x58ce7c
	public Void set_normalizedValue(Single value) { }
	// Offset : 0x58cf38
	public SliderEvent get_onValueChanged() { }
	// Offset : 0x58cf40
	public Void set_onValueChanged(SliderEvent value) { }
	// Offset : 0x58cf48
	private Single get_stepSize() { }
	// Offset : 0x58cf70
	public virtual Void Rebuild(CanvasUpdate executing) { }
	// Offset : 0x58cf74
	public virtual Void LayoutComplete() { }
	// Offset : 0x58cf78
	public virtual Void GraphicUpdateComplete() { }
	// Offset : 0x58cf7c
	protected override Void OnEnable() { }
	// Offset : 0x58cfe8
	protected override Void OnDisable() { }
	// Offset : 0x58d014
	protected override Void OnDidApplyAnimationProperties() { }
	// Offset : 0x58c28c
	private Void UpdateCachedReferences() { }
	// Offset : 0x58d290
	private Single ClampValue(Single input) { }
	// Offset : 0x58cb18
	private Void Set(Single input) { }
	// Offset : 0x58d3e8
	protected virtual Void Set(Single input, Boolean sendCallback) { }
	// Offset : 0x58d4bc
	protected override Void OnRectTransformDimensionsChange() { }
	// Offset : 0x58d3cc
	private Axis get_axis() { }
	// Offset : 0x58d3b8
	private Boolean get_reverseValue() { }
	// Offset : 0x58c638
	private Void UpdateVisuals() { }
	// Offset : 0x58d51c
	private Void UpdateDrag(PointerEventData eventData, Camera cam) { }
	// Offset : 0x58d7c4
	private Boolean MayDrag(PointerEventData eventData) { }
	// Offset : 0x58d868
	public override Void OnPointerDown(PointerEventData eventData) { }
	// Offset : 0x58daa8
	public virtual Void OnDrag(PointerEventData eventData) { }
	// Offset : 0x58db00
	public override Void OnMove(AxisEventData eventData) { }
	// Offset : 0x58de2c
	public override Selectable FindSelectableOnLeft() { }
	// Offset : 0x58de50
	public override Selectable FindSelectableOnRight() { }
	// Offset : 0x58de74
	public override Selectable FindSelectableOnUp() { }
	// Offset : 0x58de98
	public override Selectable FindSelectableOnDown() { }
	// Offset : 0x58debc
	public virtual Void OnInitializePotentialDrag(PointerEventData eventData) { }
	// Offset : 0x58def0
	public Void SetDirection(Direction direction, Boolean includeRectLayouts) { }
	// Offset : 0x58e084
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Direction
{
	// Fields
	public Int32 value__; // 0x10
	public const Direction LeftToRight = 0; // 0x0
	public const Direction RightToLeft = 1; // 0x0
	public const Direction BottomToTop = 2; // 0x0
	public const Direction TopToBottom = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class SliderEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x58c1b0
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private enum Axis
{
	// Fields
	public Int32 value__; // 0x10
	public const Axis Horizontal = 0; // 0x0
	public const Axis Vertical = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
[Serializable]
public struct SpriteState : IEquatable`1
{
	// Fields
	private Sprite m_HighlightedSprite; // 0x10
	private Sprite m_PressedSprite; // 0x18
	private Sprite m_DisabledSprite; // 0x20

	// Properties
	public Sprite highlightedSprite { get; set; }
	public Sprite pressedSprite { get; set; }
	public Sprite disabledSprite { get; set; }

	// Methods
	// Offset : 0x2cc3c0
	public Sprite get_highlightedSprite() { }
	// Offset : 0x2cc3c8
	public Void set_highlightedSprite(Sprite value) { }
	// Offset : 0x2cc3d0
	public Sprite get_pressedSprite() { }
	// Offset : 0x2cc3d8
	public Void set_pressedSprite(Sprite value) { }
	// Offset : 0x2cc3e0
	public Sprite get_disabledSprite() { }
	// Offset : 0x2cc3e8
	public Void set_disabledSprite(Sprite value) { }
	// Offset : 0x2cc3f0
	public Boolean Equals(SpriteState other) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public static class StencilMaterial
{
	// Fields
	private static List`1 m_List; // 0x0

	// Properties

	// Methods
	// Offset : 0x58e1ac
	public static Material Add(Material baseMat, Int32 stencilID) { }
	// Offset : 0x57a4fc
	public static Material Add(Material baseMat, Int32 stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask) { }
	// Offset : 0x57a598
	public static Material Add(Material baseMat, Int32 stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, Int32 readMask, Int32 writeMask) { }
	// Offset : 0x579a94
	public static Void Remove(Material customMat) { }
	// Offset : 0x58e1c4
	public static Void ClearAll() { }
	// Offset : 0x58e328
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private class MatEntry
{
	// Fields
	public Material baseMat; // 0x10
	public Material customMat; // 0x18
	public Int32 count; // 0x20
	public Int32 stencilId; // 0x24
	public StencilOp operation; // 0x28
	public CompareFunction compareFunction; // 0x2c
	public Int32 readMask; // 0x30
	public Int32 writeMask; // 0x34
	public Boolean useAlphaClip; // 0x38
	public ColorWriteMask colorMask; // 0x3c

	// Properties

	// Methods
	// Offset : 0x58e1b4
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Text : MaskableGraphic, ILayoutElement
{
	// Fields
	private FontData m_FontData; // 0xb0
	protected String m_Text; // 0xb8
	private TextGenerator m_TextCache; // 0xc0
	private TextGenerator m_TextCacheForLayout; // 0xc8
	protected static Material s_DefaultText; // 0x0
	protected Boolean m_DisableFontTextureRebuiltCallback; // 0xd0
	private readonly UIVertex[] m_TempVerts; // 0xd8

	// Properties
	public TextGenerator cachedTextGenerator { get; }
	public TextGenerator cachedTextGeneratorForLayout { get; }
	public override Texture mainTexture { get; }
	public Font font { get; set; }
	public virtual String text { get; set; }
	public Boolean supportRichText { get; set; }
	public Boolean resizeTextForBestFit { get; set; }
	public Int32 resizeTextMinSize { get; set; }
	public Int32 resizeTextMaxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public Boolean alignByGeometry { get; set; }
	public Int32 fontSize { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public Single lineSpacing { get; set; }
	public FontStyle fontStyle { get; set; }
	public Single pixelsPerUnit { get; }
	public virtual Single minWidth { get; }
	public virtual Single preferredWidth { get; }
	public virtual Single flexibleWidth { get; }
	public virtual Single minHeight { get; }
	public virtual Single preferredHeight { get; }
	public virtual Single flexibleHeight { get; }
	public virtual Int32 layoutPriority { get; }

	// Methods
	// Offset : 0x58e39c
	protected Void .ctor() { }
	// Offset : 0x58e448
	public TextGenerator get_cachedTextGenerator() { }
	// Offset : 0x58e524
	public TextGenerator get_cachedTextGeneratorForLayout() { }
	// Offset : 0x58e590
	public override Texture get_mainTexture() { }
	// Offset : 0x58e798
	public Void FontTextureChanged() { }
	// Offset : 0x58e768
	public Font get_font() { }
	// Offset : 0x58e908
	public Void set_font(Font value) { }
	// Offset : 0x58ea3c
	public virtual String get_text() { }
	// Offset : 0x58ea44
	public virtual Void set_text(String value) { }
	// Offset : 0x58ebb8
	public Boolean get_supportRichText() { }
	// Offset : 0x58ebe8
	public Void set_supportRichText(Boolean value) { }
	// Offset : 0x58ecb8
	public Boolean get_resizeTextForBestFit() { }
	// Offset : 0x58ece8
	public Void set_resizeTextForBestFit(Boolean value) { }
	// Offset : 0x58edb8
	public Int32 get_resizeTextMinSize() { }
	// Offset : 0x58ede8
	public Void set_resizeTextMinSize(Int32 value) { }
	// Offset : 0x58eeb8
	public Int32 get_resizeTextMaxSize() { }
	// Offset : 0x58eee8
	public Void set_resizeTextMaxSize(Int32 value) { }
	// Offset : 0x58efb8
	public TextAnchor get_alignment() { }
	// Offset : 0x58efe8
	public Void set_alignment(TextAnchor value) { }
	// Offset : 0x58f0b8
	public Boolean get_alignByGeometry() { }
	// Offset : 0x58f0e8
	public Void set_alignByGeometry(Boolean value) { }
	// Offset : 0x58f18c
	public Int32 get_fontSize() { }
	// Offset : 0x58f1bc
	public Void set_fontSize(Int32 value) { }
	// Offset : 0x58f28c
	public HorizontalWrapMode get_horizontalOverflow() { }
	// Offset : 0x58f2bc
	public Void set_horizontalOverflow(HorizontalWrapMode value) { }
	// Offset : 0x58f38c
	public VerticalWrapMode get_verticalOverflow() { }
	// Offset : 0x58f3bc
	public Void set_verticalOverflow(VerticalWrapMode value) { }
	// Offset : 0x58f48c
	public Single get_lineSpacing() { }
	// Offset : 0x58f4bc
	public Void set_lineSpacing(Single value) { }
	// Offset : 0x58f58c
	public FontStyle get_fontStyle() { }
	// Offset : 0x58f5bc
	public Void set_fontStyle(FontStyle value) { }
	// Offset : 0x58f68c
	public Single get_pixelsPerUnit() { }
	// Offset : 0x58f844
	protected override Void OnEnable() { }
	// Offset : 0x58f8d4
	protected override Void OnDisable() { }
	// Offset : 0x58f944
	protected override Void UpdateGeometry() { }
	// Offset : 0x58f9dc
	internal Void AssignDefaultFont() { }
	// Offset : 0x58fa40
	public TextGenerationSettings GetGenerationSettings(Vector2 extents) { }
	// Offset : 0x58fddc
	public static Vector2 GetTextAnchorPivot(TextAnchor anchor) { }
	// Offset : 0x58ff14
	protected override Void OnPopulateMesh(VertexHelper toFill) { }
	// Offset : 0x59097c
	public virtual Void CalculateLayoutInputHorizontal() { }
	// Offset : 0x590980
	public virtual Void CalculateLayoutInputVertical() { }
	// Offset : 0x590984
	public virtual Single get_minWidth() { }
	// Offset : 0x59098c
	public virtual Single get_preferredWidth() { }
	// Offset : 0x590a88
	public virtual Single get_flexibleWidth() { }
	// Offset : 0x590a90
	public virtual Single get_minHeight() { }
	// Offset : 0x590a98
	public virtual Single get_preferredHeight() { }
	// Offset : 0x590b80
	public virtual Single get_flexibleHeight() { }
	// Offset : 0x590b88
	public virtual Int32 get_layoutPriority() { }
	// Offset : 0x590b90
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Toggle : Selectable, IPointerClickHandler, ISubmitHandler, ICanvasElement, IEventSystemHandler
{
	// Fields
	public ToggleTransition toggleTransition; // 0xd8
	public Graphic graphic; // 0xe0
	private ToggleGroup m_Group; // 0xe8
	public ToggleEvent onValueChanged; // 0xf0
	private Boolean m_IsOn; // 0xf8

	// Properties
	public ToggleGroup group { get; set; }
	public Boolean isOn { get; set; }

	// Methods
	// Offset : 0x590be0
	protected Void .ctor() { }
	// Offset : 0x590cb8
	public ToggleGroup get_group() { }
	// Offset : 0x590cc0
	public Void set_group(ToggleGroup value) { }
	// Offset : 0x590fd0
	public virtual Void Rebuild(CanvasUpdate executing) { }
	// Offset : 0x590fd4
	public virtual Void LayoutComplete() { }
	// Offset : 0x590fd8
	public virtual Void GraphicUpdateComplete() { }
	// Offset : 0x590fdc
	protected override Void OnEnable() { }
	// Offset : 0x591014
	protected override Void OnDisable() { }
	// Offset : 0x591040
	protected override Void OnDidApplyAnimationProperties() { }
	// Offset : 0x590cf0
	private Void SetToggleGroup(ToggleGroup newGroup, Boolean setMemberValue) { }
	// Offset : 0x5912c4
	public Boolean get_isOn() { }
	// Offset : 0x59140c
	public Void set_isOn(Boolean value) { }
	// Offset : 0x591160
	private Void Set(Boolean value) { }
	// Offset : 0x591418
	private Void Set(Boolean value, Boolean sendCallback) { }
	// Offset : 0x590ec8
	private Void PlayEffect(Boolean instant) { }
	// Offset : 0x5916c8
	protected override Void Start() { }
	// Offset : 0x5916d0
	private Void InternalToggle() { }
	// Offset : 0x591768
	public virtual Void OnPointerClick(PointerEventData eventData) { }
	// Offset : 0x5917b4
	public virtual Void OnSubmit(BaseEventData eventData) { }
	// Offset : 0x5917b8
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum ToggleTransition
{
	// Fields
	public Int32 value__; // 0x10
	public const ToggleTransition None = 0; // 0x0
	public const ToggleTransition Fade = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
[Serializable]
public class ToggleEvent : UnityEvent`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x590c68
	public Void .ctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class ToggleGroup : UIBehaviour
{
	// Fields
	private Boolean m_AllowSwitchOff; // 0x18
	private List`1 m_Toggles; // 0x20
	private static Predicate`1 <>f__am$cache0; // 0x0
	private static Func`2 <>f__am$cache1; // 0x8

	// Properties
	public Boolean allowSwitchOff { get; set; }

	// Methods
	// Offset : 0x5917c0
	protected Void .ctor() { }
	// Offset : 0x5916c0
	public Boolean get_allowSwitchOff() { }
	// Offset : 0x591834
	public Void set_allowSwitchOff(Boolean value) { }
	// Offset : 0x591840
	private Void ValidateToggleIsInGroup(Toggle toggle) { }
	// Offset : 0x5912cc
	public Void NotifyToggleOn(Toggle toggle) { }
	// Offset : 0x59116c
	public Void UnregisterToggle(Toggle toggle) { }
	// Offset : 0x591218
	public Void RegisterToggle(Toggle toggle) { }
	// Offset : 0x5915b8
	public Boolean AnyTogglesOn() { }
	// Offset : 0x591a14
	public IEnumerable`1 ActiveToggles() { }
	// Offset : 0x591ad0
	public Void SetAllTogglesOff() { }
	// Offset : 0x591bac
	private static Boolean <AnyTogglesOn>m__0(Toggle x) { }
	// Offset : 0x591bd4
	private static Boolean <ActiveToggles>m__1(Toggle x) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class ClipperRegistry
{
	// Fields
	private static ClipperRegistry s_Instance; // 0x0
	private readonly IndexedSet`1 m_Clippers; // 0x10

	// Properties
	public static ClipperRegistry instance { get; }

	// Methods
	// Offset : 0x4aa1ac
	protected Void .ctor() { }
	// Offset : 0x4a93f0
	public static ClipperRegistry get_instance() { }
	// Offset : 0x4a946c
	public Void Cull() { }
	// Offset : 0x4aa21c
	public static Void Register(IClipper c) { }
	// Offset : 0x4aa2a0
	public static Void Unregister(IClipper c) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public static class Clipping
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4aa314
	public static Rect FindCullAndClipWorldRect(List`1 rectMaskParents, out Boolean validRect) { }
	// Offset : 0x4aa5a4
	private static Rect RectIntersect(Rect a, Rect b) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface IClipper
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void PerformClipping() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface IClippable
{
	// Fields

	// Properties
	public abstract GameObject gameObject { get; }
	public abstract RectTransform rectTransform { get; }

	// Methods
	// Offset : 0x
	public abstract GameObject get_gameObject() { }
	// Offset : 0x
	public abstract Void RecalculateClipping() { }
	// Offset : 0x
	public abstract RectTransform get_rectTransform() { }
	// Offset : 0x
	public abstract Void Cull(Rect clipRect, Boolean validRect) { }
	// Offset : 0x
	public abstract Void SetClipRect(Rect value, Boolean validRect) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
internal class RectangularVertexClipper
{
	// Fields
	private readonly Vector3[] m_WorldCorners; // 0x10
	private readonly Vector3[] m_CanvasCorners; // 0x18

	// Properties

	// Methods
	// Offset : 0x57ef90
	public Void .ctor() { }
	// Offset : 0x57f250
	public Rect GetCanvasRect(RectTransform t, Canvas c) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class AspectRatioFitter : UIBehaviour, ILayoutSelfController, ILayoutController
{
	// Fields
	private AspectMode m_AspectMode; // 0x18
	private Single m_AspectRatio; // 0x1c
	private RectTransform m_Rect; // 0x20
	private Boolean m_DelayedSetDirty; // 0x28
	private DrivenRectTransformTracker m_Tracker; // 0x29

	// Properties
	public AspectMode aspectMode { get; set; }
	public Single aspectRatio { get; set; }
	private RectTransform rectTransform { get; }

	// Methods
	// Offset : 0x4a6934
	protected Void .ctor() { }
	// Offset : 0x4a6948
	public AspectMode get_aspectMode() { }
	// Offset : 0x4a6950
	public Void set_aspectMode(AspectMode value) { }
	// Offset : 0x4a69d0
	public Single get_aspectRatio() { }
	// Offset : 0x4a69d8
	public Void set_aspectRatio(Single value) { }
	// Offset : 0x4a6a54
	private RectTransform get_rectTransform() { }
	// Offset : 0x4a6aec
	protected override Void OnEnable() { }
	// Offset : 0x4a6af0
	protected override Void OnDisable() { }
	// Offset : 0x4a6b74
	protected virtual Void Update() { }
	// Offset : 0x4a6b88
	protected override Void OnRectTransformDimensionsChange() { }
	// Offset : 0x4a6b8c
	private Void UpdateRect() { }
	// Offset : 0x4a6ff8
	private Single GetSizeDeltaToProduceSize(Single size, Int32 axis) { }
	// Offset : 0x4a6ee0
	private Vector2 GetParentSize() { }
	// Offset : 0x4a70d4
	public virtual Void SetLayoutHorizontal() { }
	// Offset : 0x4a70d8
	public virtual Void SetLayoutVertical() { }
	// Offset : 0x4a69cc
	protected Void SetDirty() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum AspectMode
{
	// Fields
	public Int32 value__; // 0x10
	public const AspectMode None = 0; // 0x0
	public const AspectMode WidthControlsHeight = 1; // 0x0
	public const AspectMode HeightControlsWidth = 2; // 0x0
	public const AspectMode FitInParent = 3; // 0x0
	public const AspectMode EnvelopeParent = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class CanvasScaler : UIBehaviour
{
	// Fields
	private ScaleMode m_UiScaleMode; // 0x18
	protected Single m_ReferencePixelsPerUnit; // 0x1c
	protected Single m_ScaleFactor; // 0x20
	protected Vector2 m_ReferenceResolution; // 0x24
	protected ScreenMatchMode m_ScreenMatchMode; // 0x2c
	protected Single m_MatchWidthOrHeight; // 0x30
	private const Single kLogBase; // 0x0
	protected Unit m_PhysicalUnit; // 0x34
	protected Single m_FallbackScreenDPI; // 0x38
	protected Single m_DefaultSpriteDPI; // 0x3c
	protected Single m_DynamicPixelsPerUnit; // 0x40
	private Canvas m_Canvas; // 0x48
	private Single m_PrevScaleFactor; // 0x50
	private Single m_PrevReferencePixelsPerUnit; // 0x54

	// Properties
	public ScaleMode uiScaleMode { get; set; }
	public Single referencePixelsPerUnit { get; set; }
	public Single scaleFactor { get; set; }
	public Vector2 referenceResolution { get; set; }
	public ScreenMatchMode screenMatchMode { get; set; }
	public Single matchWidthOrHeight { get; set; }
	public Unit physicalUnit { get; set; }
	public Single fallbackScreenDPI { get; set; }
	public Single defaultSpriteDPI { get; set; }
	public Single dynamicPixelsPerUnit { get; set; }

	// Methods
	// Offset : 0x4a7a88
	protected Void .ctor() { }
	// Offset : 0x4a7b10
	public ScaleMode get_uiScaleMode() { }
	// Offset : 0x4a7b18
	public Void set_uiScaleMode(ScaleMode value) { }
	// Offset : 0x4a7b20
	public Single get_referencePixelsPerUnit() { }
	// Offset : 0x4a7b28
	public Void set_referencePixelsPerUnit(Single value) { }
	// Offset : 0x4a7b30
	public Single get_scaleFactor() { }
	// Offset : 0x4a7b38
	public Void set_scaleFactor(Single value) { }
	// Offset : 0x4a7bbc
	public Vector2 get_referenceResolution() { }
	// Offset : 0x4a7bc4
	public Void set_referenceResolution(Vector2 value) { }
	// Offset : 0x4a7cc4
	public ScreenMatchMode get_screenMatchMode() { }
	// Offset : 0x4a7ccc
	public Void set_screenMatchMode(ScreenMatchMode value) { }
	// Offset : 0x4a7cd4
	public Single get_matchWidthOrHeight() { }
	// Offset : 0x4a7cdc
	public Void set_matchWidthOrHeight(Single value) { }
	// Offset : 0x4a7ce4
	public Unit get_physicalUnit() { }
	// Offset : 0x4a7cec
	public Void set_physicalUnit(Unit value) { }
	// Offset : 0x4a7cf4
	public Single get_fallbackScreenDPI() { }
	// Offset : 0x4a7cfc
	public Void set_fallbackScreenDPI(Single value) { }
	// Offset : 0x4a7d04
	public Single get_defaultSpriteDPI() { }
	// Offset : 0x4a7d0c
	public Void set_defaultSpriteDPI(Single value) { }
	// Offset : 0x4a7d8c
	public Single get_dynamicPixelsPerUnit() { }
	// Offset : 0x4a7d94
	public Void set_dynamicPixelsPerUnit(Single value) { }
	// Offset : 0x4a7d9c
	protected override Void OnEnable() { }
	// Offset : 0x4a7e20
	protected override Void OnDisable() { }
	// Offset : 0x4a7f00
	protected virtual Void Update() { }
	// Offset : 0x4a7f44
	protected virtual Void Handle() { }
	// Offset : 0x4a80c4
	protected virtual Void HandleWorldCanvas() { }
	// Offset : 0x4a80f0
	protected virtual Void HandleConstantPixelSize() { }
	// Offset : 0x4a811c
	protected virtual Void HandleScaleWithScreenSize() { }
	// Offset : 0x4a83dc
	protected virtual Void HandleConstantPhysicalSize() { }
	// Offset : 0x4a7e50
	protected Void SetScaleFactor(Single scaleFactor) { }
	// Offset : 0x4a7ea8
	protected Void SetReferencePixelsPerUnit(Single referencePixelsPerUnit) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum ScaleMode
{
	// Fields
	public Int32 value__; // 0x10
	public const ScaleMode ConstantPixelSize = 0; // 0x0
	public const ScaleMode ScaleWithScreenSize = 1; // 0x0
	public const ScaleMode ConstantPhysicalSize = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum ScreenMatchMode
{
	// Fields
	public Int32 value__; // 0x10
	public const ScreenMatchMode MatchWidthOrHeight = 0; // 0x0
	public const ScreenMatchMode Expand = 1; // 0x0
	public const ScreenMatchMode Shrink = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Unit
{
	// Fields
	public Int32 value__; // 0x10
	public const Unit Centimeters = 0; // 0x0
	public const Unit Millimeters = 1; // 0x0
	public const Unit Inches = 2; // 0x0
	public const Unit Points = 3; // 0x0
	public const Unit Picas = 4; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class ContentSizeFitter : UIBehaviour, ILayoutSelfController, ILayoutController
{
	// Fields
	protected FitMode m_HorizontalFit; // 0x18
	protected FitMode m_VerticalFit; // 0x1c
	private RectTransform m_Rect; // 0x20
	private DrivenRectTransformTracker m_Tracker; // 0x28

	// Properties
	public FitMode horizontalFit { get; set; }
	public FitMode verticalFit { get; set; }
	private RectTransform rectTransform { get; }

	// Methods
	// Offset : 0x4aabcc
	protected Void .ctor() { }
	// Offset : 0x4aabd8
	public FitMode get_horizontalFit() { }
	// Offset : 0x4aabe0
	public Void set_horizontalFit(FitMode value) { }
	// Offset : 0x4aad0c
	public FitMode get_verticalFit() { }
	// Offset : 0x4aad14
	public Void set_verticalFit(FitMode value) { }
	// Offset : 0x4aad90
	private RectTransform get_rectTransform() { }
	// Offset : 0x4aae28
	protected override Void OnEnable() { }
	// Offset : 0x4aae2c
	protected override Void OnDisable() { }
	// Offset : 0x4aaeb0
	protected override Void OnRectTransformDimensionsChange() { }
	// Offset : 0x4aaeb4
	private Void HandleSelfFittingAlongAxis(Int32 axis) { }
	// Offset : 0x4aaf9c
	public virtual Void SetLayoutHorizontal() { }
	// Offset : 0x4aafcc
	public virtual Void SetLayoutVertical() { }
	// Offset : 0x4aac5c
	protected Void SetDirty() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum FitMode
{
	// Fields
	public Int32 value__; // 0x10
	public const FitMode Unconstrained = 0; // 0x0
	public const FitMode MinSize = 1; // 0x0
	public const FitMode PreferredSize = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class GridLayoutGroup : LayoutGroup
{
	// Fields
	protected Corner m_StartCorner; // 0x58
	protected Axis m_StartAxis; // 0x5c
	protected Vector2 m_CellSize; // 0x60
	protected Vector2 m_Spacing; // 0x68
	protected Constraint m_Constraint; // 0x70
	protected Int32 m_ConstraintCount; // 0x74

	// Properties
	public Corner startCorner { get; set; }
	public Axis startAxis { get; set; }
	public Vector2 cellSize { get; set; }
	public Vector2 spacing { get; set; }
	public Constraint constraint { get; set; }
	public Int32 constraintCount { get; set; }

	// Methods
	// Offset : 0x53bb48
	protected Void .ctor() { }
	// Offset : 0x53bcf8
	public Corner get_startCorner() { }
	// Offset : 0x53bd00
	public Void set_startCorner(Corner value) { }
	// Offset : 0x53bd64
	public Axis get_startAxis() { }
	// Offset : 0x53bd6c
	public Void set_startAxis(Axis value) { }
	// Offset : 0x53bdd0
	public Vector2 get_cellSize() { }
	// Offset : 0x53bdd8
	public Void set_cellSize(Vector2 value) { }
	// Offset : 0x53be44
	public Vector2 get_spacing() { }
	// Offset : 0x53be4c
	public Void set_spacing(Vector2 value) { }
	// Offset : 0x53beb8
	public Constraint get_constraint() { }
	// Offset : 0x53bec0
	public Void set_constraint(Constraint value) { }
	// Offset : 0x53bf24
	public Int32 get_constraintCount() { }
	// Offset : 0x53bf2c
	public Void set_constraintCount(Int32 value) { }
	// Offset : 0x53bfc4
	public override Void CalculateLayoutInputHorizontal() { }
	// Offset : 0x53c5f0
	public override Void CalculateLayoutInputVertical() { }
	// Offset : 0x53c8c0
	public override Void SetLayoutHorizontal() { }
	// Offset : 0x53d0c8
	public override Void SetLayoutVertical() { }
	// Offset : 0x53c8c8
	private Void SetCellsAlongAxis(Int32 axis) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Corner
{
	// Fields
	public Int32 value__; // 0x10
	public const Corner UpperLeft = 0; // 0x0
	public const Corner UpperRight = 1; // 0x0
	public const Corner LowerLeft = 2; // 0x0
	public const Corner LowerRight = 3; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Axis
{
	// Fields
	public Int32 value__; // 0x10
	public const Axis Horizontal = 0; // 0x0
	public const Axis Vertical = 1; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public enum Constraint
{
	// Fields
	public Int32 value__; // 0x10
	public const Constraint Flexible = 0; // 0x0
	public const Constraint FixedColumnCount = 1; // 0x0
	public const Constraint FixedRowCount = 2; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x53d31c
	protected Void .ctor() { }
	// Offset : 0x53d344
	public override Void CalculateLayoutInputHorizontal() { }
	// Offset : 0x53d60c
	public override Void CalculateLayoutInputVertical() { }
	// Offset : 0x53d618
	public override Void SetLayoutHorizontal() { }
	// Offset : 0x53dc50
	public override Void SetLayoutVertical() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public abstract class HorizontalOrVerticalLayoutGroup : LayoutGroup
{
	// Fields
	protected Single m_Spacing; // 0x58
	protected Boolean m_ChildForceExpandWidth; // 0x5c
	protected Boolean m_ChildForceExpandHeight; // 0x5d
	protected Boolean m_ChildControlWidth; // 0x5e
	protected Boolean m_ChildControlHeight; // 0x5f

	// Properties
	public Single spacing { get; set; }
	public Boolean childForceExpandWidth { get; set; }
	public Boolean childForceExpandHeight { get; set; }
	public Boolean childControlWidth { get; set; }
	public Boolean childControlHeight { get; set; }

	// Methods
	// Offset : 0x53d330
	protected Void .ctor() { }
	// Offset : 0x53dc5c
	public Single get_spacing() { }
	// Offset : 0x53dc64
	public Void set_spacing(Single value) { }
	// Offset : 0x53dcc8
	public Boolean get_childForceExpandWidth() { }
	// Offset : 0x53dcd0
	public Void set_childForceExpandWidth(Boolean value) { }
	// Offset : 0x53dd34
	public Boolean get_childForceExpandHeight() { }
	// Offset : 0x53dd3c
	public Void set_childForceExpandHeight(Boolean value) { }
	// Offset : 0x53dda0
	public Boolean get_childControlWidth() { }
	// Offset : 0x53dda8
	public Void set_childControlWidth(Boolean value) { }
	// Offset : 0x53de0c
	public Boolean get_childControlHeight() { }
	// Offset : 0x53de14
	public Void set_childControlHeight(Boolean value) { }
	// Offset : 0x53d370
	protected Void CalcAlongAxis(Int32 axis, Boolean isVertical) { }
	// Offset : 0x53d624
	protected Void SetChildrenAlongAxis(Int32 axis, Boolean isVertical) { }
	// Offset : 0x53de78
	private Void GetChildSizes(RectTransform child, Int32 axis, Boolean controlSize, Boolean childForceExpand, out Single min, out Single preferred, out Single flexible) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface ILayoutElement
{
	// Fields

	// Properties
	public abstract Single minWidth { get; }
	public abstract Single preferredWidth { get; }
	public abstract Single flexibleWidth { get; }
	public abstract Single minHeight { get; }
	public abstract Single preferredHeight { get; }
	public abstract Single flexibleHeight { get; }
	public abstract Int32 layoutPriority { get; }

	// Methods
	// Offset : 0x
	public abstract Void CalculateLayoutInputHorizontal() { }
	// Offset : 0x
	public abstract Void CalculateLayoutInputVertical() { }
	// Offset : 0x
	public abstract Single get_minWidth() { }
	// Offset : 0x
	public abstract Single get_preferredWidth() { }
	// Offset : 0x
	public abstract Single get_flexibleWidth() { }
	// Offset : 0x
	public abstract Single get_minHeight() { }
	// Offset : 0x
	public abstract Single get_preferredHeight() { }
	// Offset : 0x
	public abstract Single get_flexibleHeight() { }
	// Offset : 0x
	public abstract Int32 get_layoutPriority() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface ILayoutController
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void SetLayoutHorizontal() { }
	// Offset : 0x
	public abstract Void SetLayoutVertical() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface ILayoutGroup : ILayoutController
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface ILayoutSelfController : ILayoutController
{
	// Fields

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface ILayoutIgnorer
{
	// Fields

	// Properties
	public abstract Boolean ignoreLayout { get; }

	// Methods
	// Offset : 0x
	public abstract Boolean get_ignoreLayout() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class LayoutElement : UIBehaviour, ILayoutElement, ILayoutIgnorer
{
	// Fields
	private Boolean m_IgnoreLayout; // 0x18
	private Single m_MinWidth; // 0x1c
	private Single m_MinHeight; // 0x20
	private Single m_PreferredWidth; // 0x24
	private Single m_PreferredHeight; // 0x28
	private Single m_FlexibleWidth; // 0x2c
	private Single m_FlexibleHeight; // 0x30
	private Int32 m_LayoutPriority; // 0x34

	// Properties
	public virtual Boolean ignoreLayout { get; set; }
	public virtual Single minWidth { get; set; }
	public virtual Single minHeight { get; set; }
	public virtual Single preferredWidth { get; set; }
	public virtual Single preferredHeight { get; set; }
	public virtual Single flexibleWidth { get; set; }
	public virtual Single flexibleHeight { get; set; }
	public virtual Int32 layoutPriority { get; set; }

	// Methods
	// Offset : 0x551988
	protected Void .ctor() { }
	// Offset : 0x5519b0
	public virtual Boolean get_ignoreLayout() { }
	// Offset : 0x5519b8
	public virtual Void set_ignoreLayout(Boolean value) { }
	// Offset : 0x551b0c
	public virtual Void CalculateLayoutInputHorizontal() { }
	// Offset : 0x551b10
	public virtual Void CalculateLayoutInputVertical() { }
	// Offset : 0x551b14
	public virtual Single get_minWidth() { }
	// Offset : 0x551b1c
	public virtual Void set_minWidth(Single value) { }
	// Offset : 0x551b98
	public virtual Single get_minHeight() { }
	// Offset : 0x551ba0
	public virtual Void set_minHeight(Single value) { }
	// Offset : 0x551c1c
	public virtual Single get_preferredWidth() { }
	// Offset : 0x551c24
	public virtual Void set_preferredWidth(Single value) { }
	// Offset : 0x551ca0
	public virtual Single get_preferredHeight() { }
	// Offset : 0x551ca8
	public virtual Void set_preferredHeight(Single value) { }
	// Offset : 0x551d24
	public virtual Single get_flexibleWidth() { }
	// Offset : 0x551d2c
	public virtual Void set_flexibleWidth(Single value) { }
	// Offset : 0x551da8
	public virtual Single get_flexibleHeight() { }
	// Offset : 0x551db0
	public virtual Void set_flexibleHeight(Single value) { }
	// Offset : 0x551e2c
	public virtual Int32 get_layoutPriority() { }
	// Offset : 0x551e34
	public virtual Void set_layoutPriority(Int32 value) { }
	// Offset : 0x551eb0
	protected override Void OnEnable() { }
	// Offset : 0x551ed8
	protected override Void OnTransformParentChanged() { }
	// Offset : 0x551edc
	protected override Void OnDisable() { }
	// Offset : 0x551f04
	protected override Void OnDidApplyAnimationProperties() { }
	// Offset : 0x551f08
	protected override Void OnBeforeTransformParentChanged() { }
	// Offset : 0x551a34
	protected Void SetDirty() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public abstract class LayoutGroup : UIBehaviour, ILayoutElement, ILayoutGroup, ILayoutController
{
	// Fields
	protected RectOffset m_Padding; // 0x18
	protected TextAnchor m_ChildAlignment; // 0x20
	private RectTransform m_Rect; // 0x28
	protected DrivenRectTransformTracker m_Tracker; // 0x30
	private Vector2 m_TotalMinSize; // 0x34
	private Vector2 m_TotalPreferredSize; // 0x3c
	private Vector2 m_TotalFlexibleSize; // 0x44
	private List`1 m_RectChildren; // 0x50

	// Properties
	public RectOffset padding { get; set; }
	public TextAnchor childAlignment { get; set; }
	protected RectTransform rectTransform { get; }
	protected List`1 rectChildren { get; }
	public virtual Single minWidth { get; }
	public virtual Single preferredWidth { get; }
	public virtual Single flexibleWidth { get; }
	public virtual Single minHeight { get; }
	public virtual Single preferredHeight { get; }
	public virtual Single flexibleHeight { get; }
	public virtual Int32 layoutPriority { get; }
	private Boolean isRootLayoutGroup { get; }

	// Methods
	// Offset : 0x53bbf4
	protected Void .ctor() { }
	// Offset : 0x53c588
	public RectOffset get_padding() { }
	// Offset : 0x551f0c
	public Void set_padding(RectOffset value) { }
	// Offset : 0x551f70
	public TextAnchor get_childAlignment() { }
	// Offset : 0x551f78
	public Void set_childAlignment(TextAnchor value) { }
	// Offset : 0x53c828
	protected RectTransform get_rectTransform() { }
	// Offset : 0x53c580
	protected List`1 get_rectChildren() { }
	// Offset : 0x53c184
	public virtual Void CalculateLayoutInputHorizontal() { }
	// Offset : 0x
	public abstract Void CalculateLayoutInputVertical() { }
	// Offset : 0x551fdc
	public virtual Single get_minWidth() { }
	// Offset : 0x551fec
	public virtual Single get_preferredWidth() { }
	// Offset : 0x551ffc
	public virtual Single get_flexibleWidth() { }
	// Offset : 0x55200c
	public virtual Single get_minHeight() { }
	// Offset : 0x55201c
	public virtual Single get_preferredHeight() { }
	// Offset : 0x55202c
	public virtual Single get_flexibleHeight() { }
	// Offset : 0x55203c
	public virtual Int32 get_layoutPriority() { }
	// Offset : 0x
	public abstract Void SetLayoutHorizontal() { }
	// Offset : 0x
	public abstract Void SetLayoutVertical() { }
	// Offset : 0x552044
	protected override Void OnEnable() { }
	// Offset : 0x552178
	protected override Void OnDisable() { }
	// Offset : 0x552208
	protected override Void OnDidApplyAnimationProperties() { }
	// Offset : 0x53e12c
	protected Single GetTotalMinSize(Int32 axis) { }
	// Offset : 0x53e120
	protected Single GetTotalPreferredSize(Int32 axis) { }
	// Offset : 0x53e114
	protected Single GetTotalFlexibleSize(Int32 axis) { }
	// Offset : 0x53d0d0
	protected Single GetStartOffset(Int32 axis, Single requiredSpaceWithoutPadding) { }
	// Offset : 0x53dfac
	protected Single GetAlignmentOnAxis(Int32 axis) { }
	// Offset : 0x53c590
	protected Void SetLayoutInputForAxis(Single totalMin, Single totalPreferred, Single totalFlexible, Int32 axis) { }
	// Offset : 0x53dff8
	protected Void SetChildAlongAxis(RectTransform rect, Int32 axis, Single pos) { }
	// Offset : 0x53d228
	protected Void SetChildAlongAxis(RectTransform rect, Int32 axis, Single pos, Single size) { }
	// Offset : 0x55220c
	private Boolean get_isRootLayoutGroup() { }
	// Offset : 0x552378
	protected override Void OnRectTransformDimensionsChange() { }
	// Offset : 0x5523b8
	protected virtual Void OnTransformChildrenChanged() { }
	// Offset : 0x
	protected Void SetProperty(ref T currentValue, T newValue) { }
	// Offset : 0x55206c
	protected Void SetDirty() { }
	// Offset : 0x5523bc
	private IEnumerator DelayedSetDirty(RectTransform rectTransform) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private sealed class <DelayedSetDirty>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal RectTransform rectTransform; // 0x10
	internal Object $current; // 0x18
	internal Boolean $disposing; // 0x20
	internal Int32 $PC; // 0x24

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x576508
	public Void .ctor() { }
	// Offset : 0x576510
	public Boolean MoveNext() { }
	// Offset : 0x5769d0
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x5769d8
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x5769e0
	public Void Dispose() { }
	// Offset : 0x5769f4
	public Void Reset() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class LayoutRebuilder : ICanvasElement
{
	// Fields
	private RectTransform m_ToRebuild; // 0x10
	private Int32 m_CachedHashFromTransform; // 0x18
	private static ObjectPool`1 s_Rebuilders; // 0x0
	private static ReapplyDrivenProperties <>f__mg$cache0; // 0x8
	private static Predicate`1 <>f__am$cache0; // 0x10
	private static UnityAction`1 <>f__am$cache1; // 0x18
	private static UnityAction`1 <>f__am$cache2; // 0x20
	private static UnityAction`1 <>f__am$cache3; // 0x28
	private static UnityAction`1 <>f__am$cache4; // 0x30

	// Properties
	public Transform transform { get; }

	// Methods
	// Offset : 0x576a5c
	private static Void .cctor() { }
	// Offset : 0x576b68
	public Void .ctor() { }
	// Offset : 0x576b70
	private Void Initialize(RectTransform controller) { }
	// Offset : 0x576bcc
	private Void Clear() { }
	// Offset : 0x576bd8
	private static Void ReapplyDrivenProperties(RectTransform driven) { }
	// Offset : 0x576c3c
	public Transform get_transform() { }
	// Offset : 0x576c44
	public Boolean IsDestroyed() { }
	// Offset : 0x576cb4
	private static Void StripDisabledBehavioursFromList(List`1 components) { }
	// Offset : 0x576dc4
	public static Void ForceRebuildLayoutImmediate(RectTransform layoutRoot) { }
	// Offset : 0x576ec0
	public Void Rebuild(CanvasUpdate executing) { }
	// Offset : 0x5774d4
	private Void PerformLayoutControl(RectTransform rect, UnityAction`1 action) { }
	// Offset : 0x5771a0
	private Void PerformLayoutCalculation(RectTransform rect, UnityAction`1 action) { }
	// Offset : 0x5765dc
	public static Void MarkLayoutForRebuild(RectTransform rect) { }
	// Offset : 0x577850
	private static Boolean ValidController(RectTransform layoutRoot, List`1 comps) { }
	// Offset : 0x577a68
	private static Void MarkLayoutRootForRebuild(RectTransform controller) { }
	// Offset : 0x577bcc
	public Void LayoutComplete() { }
	// Offset : 0x577c58
	public Void GraphicUpdateComplete() { }
	// Offset : 0x577c5c
	public override Int32 GetHashCode() { }
	// Offset : 0x577c64
	public override Boolean Equals(Object obj) { }
	// Offset : 0x577cf0
	public override String ToString() { }
	// Offset : 0x577d68
	private static Void <s_Rebuilders>m__0(LayoutRebuilder x) { }
	// Offset : 0x577d94
	private static Boolean <StripDisabledBehavioursFromList>m__1(Component e) { }
	// Offset : 0x577e28
	private static Void <Rebuild>m__2(Component e) { }
	// Offset : 0x577f24
	private static Void <Rebuild>m__3(Component e) { }
	// Offset : 0x578020
	private static Void <Rebuild>m__4(Component e) { }
	// Offset : 0x578120
	private static Void <Rebuild>m__5(Component e) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public static class LayoutUtility
{
	// Fields
	private static Func`2 <>f__am$cache0; // 0x0
	private static Func`2 <>f__am$cache1; // 0x8
	private static Func`2 <>f__am$cache2; // 0x10
	private static Func`2 <>f__am$cache3; // 0x18
	private static Func`2 <>f__am$cache4; // 0x20
	private static Func`2 <>f__am$cache5; // 0x28
	private static Func`2 <>f__am$cache6; // 0x30
	private static Func`2 <>f__am$cache7; // 0x38

	// Properties

	// Methods
	// Offset : 0x578220
	public static Single GetMinSize(RectTransform rect, Int32 axis) { }
	// Offset : 0x5783a8
	public static Single GetPreferredSize(RectTransform rect, Int32 axis) { }
	// Offset : 0x57867c
	public static Single GetFlexibleSize(RectTransform rect, Int32 axis) { }
	// Offset : 0x57822c
	public static Single GetMinWidth(RectTransform rect) { }
	// Offset : 0x5783b4
	public static Single GetPreferredWidth(RectTransform rect) { }
	// Offset : 0x578688
	public static Single GetFlexibleWidth(RectTransform rect) { }
	// Offset : 0x5782ec
	public static Single GetMinHeight(RectTransform rect) { }
	// Offset : 0x578518
	public static Single GetPreferredHeight(RectTransform rect) { }
	// Offset : 0x578744
	public static Single GetFlexibleHeight(RectTransform rect) { }
	// Offset : 0x578800
	public static Single GetLayoutProperty(RectTransform rect, Func`2 property, Single defaultValue) { }
	// Offset : 0x578824
	public static Single GetLayoutProperty(RectTransform rect, Func`2 property, Single defaultValue, out ILayoutElement source) { }
	// Offset : 0x578b70
	private static Single <GetMinWidth>m__0(ILayoutElement e) { }
	// Offset : 0x578c58
	private static Single <GetPreferredWidth>m__1(ILayoutElement e) { }
	// Offset : 0x578d40
	private static Single <GetPreferredWidth>m__2(ILayoutElement e) { }
	// Offset : 0x578e28
	private static Single <GetFlexibleWidth>m__3(ILayoutElement e) { }
	// Offset : 0x578f10
	private static Single <GetMinHeight>m__4(ILayoutElement e) { }
	// Offset : 0x578ff8
	private static Single <GetPreferredHeight>m__5(ILayoutElement e) { }
	// Offset : 0x5790e0
	private static Single <GetPreferredHeight>m__6(ILayoutElement e) { }
	// Offset : 0x5791c8
	private static Single <GetFlexibleHeight>m__7(ILayoutElement e) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x9751c0
	protected Void .ctor() { }
	// Offset : 0x9751c8
	public override Void CalculateLayoutInputHorizontal() { }
	// Offset : 0x9751fc
	public override Void CalculateLayoutInputVertical() { }
	// Offset : 0x97520c
	public override Void SetLayoutHorizontal() { }
	// Offset : 0x97521c
	public override Void SetLayoutVertical() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface IMaterialModifier
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Material GetModifiedMaterial(Material baseMaterial) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI.Collections
internal class IndexedSet`1 : IList`1, ICollection`1, IEnumerable`1, IEnumerable
{
	// Fields
	private readonly List`1 m_List; // 0x0
	private Dictionary`2 m_Dictionary; // 0x0

	// Properties
	public Int32 Count { get; }
	public Boolean IsReadOnly { get; }
	public T Item { get; set; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public Void Add(T item) { }
	// Offset : 0x
	public Boolean AddUnique(T item) { }
	// Offset : 0x
	public Boolean Remove(T item) { }
	// Offset : 0x
	public IEnumerator`1 GetEnumerator() { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	public Void Clear() { }
	// Offset : 0x
	public Boolean Contains(T item) { }
	// Offset : 0x
	public Void CopyTo(T[] array, Int32 arrayIndex) { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	public Boolean get_IsReadOnly() { }
	// Offset : 0x
	public Int32 IndexOf(T item) { }
	// Offset : 0x
	public Void Insert(Int32 index, T item) { }
	// Offset : 0x
	public Void RemoveAt(Int32 index) { }
	// Offset : 0x
	public T get_Item(Int32 index) { }
	// Offset : 0x
	public Void set_Item(Int32 index, T value) { }
	// Offset : 0x
	public Void RemoveAll(Predicate`1 match) { }
	// Offset : 0x
	public Void Sort(Comparison`1 sortLayoutFunction) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
internal static class ListPool`1
{
	// Fields
	private static readonly ObjectPool`1 s_ListPool; // 0x0
	private static UnityAction`1 <>f__mg$cache0; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	private static Void Clear(List`1 l) { }
	// Offset : 0x
	public static List`1 Get() { }
	// Offset : 0x
	public static Void Release(List`1 toRelease) { }
	// Offset : 0x
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
internal class ObjectPool`1
{
	// Fields
	private readonly Stack`1 m_Stack; // 0x0
	private readonly UnityAction`1 m_ActionOnGet; // 0x0
	private readonly UnityAction`1 m_ActionOnRelease; // 0x0
	private Int32 <countAll>k__BackingField; // 0x0

	// Properties
	public Int32 countAll { get; set; }
	public Int32 countActive { get; }
	public Int32 countInactive { get; }

	// Methods
	// Offset : 0x
	public Void .ctor(UnityAction`1 actionOnGet, UnityAction`1 actionOnRelease) { }
	// Offset : 0x
	public Int32 get_countAll() { }
	// Offset : 0x
	private Void set_countAll(Int32 value) { }
	// Offset : 0x
	public Int32 get_countActive() { }
	// Offset : 0x
	public Int32 get_countInactive() { }
	// Offset : 0x
	public T Get() { }
	// Offset : 0x
	public Void Release(T element) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
internal class ReflectionMethodsCache
{
	// Fields
	public Raycast3DCallback raycast3D; // 0x10
	public RaycastAllCallback raycast3DAll; // 0x18
	public Raycast2DCallback raycast2D; // 0x20
	public GetRayIntersectionAllCallback getRayIntersectionAll; // 0x28
	public GetRayIntersectionAllNonAllocCallback getRayIntersectionAllNonAlloc; // 0x30
	public GetRaycastNonAllocCallback getRaycastNonAlloc; // 0x38
	private static ReflectionMethodsCache s_ReflectionMethodsCache; // 0x0

	// Properties
	public static ReflectionMethodsCache Singleton { get; }

	// Methods
	// Offset : 0x57feb4
	public Void .ctor() { }
	// Offset : 0x580e48
	public static ReflectionMethodsCache get_Singleton() { }
	// Offset : 0x580f08
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public sealed class Raycast3DCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x582320
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x582330
	public virtual Boolean Invoke(Ray r, out RaycastHit hit, Single f, Int32 i) { }
	// Offset : 0x582730
	public virtual IAsyncResult BeginInvoke(Ray r, out RaycastHit hit, Single f, Int32 i, AsyncCallback callback, Object object) { }
	// Offset : 0x582824
	public virtual Boolean EndInvoke(out RaycastHit hit, IAsyncResult result) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public sealed class Raycast2DCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x581e68
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x581e78
	public virtual RaycastHit2D Invoke(Vector2 p1, Vector2 p2, Single f, Int32 i) { }
	// Offset : 0x5821e8
	public virtual IAsyncResult BeginInvoke(Vector2 p1, Vector2 p2, Single f, Int32 i, AsyncCallback callback, Object object) { }
	// Offset : 0x5822cc
	public virtual RaycastHit2D EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public sealed class RaycastAllCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x582864
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x582874
	public virtual RaycastHit[] Invoke(Ray r, Single f, Int32 i) { }
	// Offset : 0x582c54
	public virtual IAsyncResult BeginInvoke(Ray r, Single f, Int32 i, AsyncCallback callback, Object object) { }
	// Offset : 0x582d28
	public virtual RaycastHit[] EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public sealed class GetRayIntersectionAllCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x580f58
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x580f68
	public virtual RaycastHit2D[] Invoke(Ray r, Single f, Int32 i) { }
	// Offset : 0x581348
	public virtual IAsyncResult BeginInvoke(Ray r, Single f, Int32 i, AsyncCallback callback, Object object) { }
	// Offset : 0x58141c
	public virtual RaycastHit2D[] EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public sealed class GetRayIntersectionAllNonAllocCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x581428
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x581438
	public virtual Int32 Invoke(Ray r, RaycastHit2D[] results, Single f, Int32 i) { }
	// Offset : 0x581834
	public virtual IAsyncResult BeginInvoke(Ray r, RaycastHit2D[] results, Single f, Int32 i, AsyncCallback callback, Object object) { }
	// Offset : 0x58190c
	public virtual Int32 EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
public sealed class GetRaycastNonAllocCallback : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x581948
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x581958
	public virtual Int32 Invoke(Ray r, RaycastHit[] results, Single f, Int32 i) { }
	// Offset : 0x581d54
	public virtual IAsyncResult BeginInvoke(Ray r, RaycastHit[] results, Single f, Int32 i, AsyncCallback callback, Object object) { }
	// Offset : 0x581e2c
	public virtual Int32 EndInvoke(IAsyncResult result) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class VertexHelper : IDisposable
{
	// Fields
	private List`1 m_Positions; // 0x10
	private List`1 m_Colors; // 0x18
	private List`1 m_Uv0S; // 0x20
	private List`1 m_Uv1S; // 0x28
	private List`1 m_Uv2S; // 0x30
	private List`1 m_Uv3S; // 0x38
	private List`1 m_Normals; // 0x40
	private List`1 m_Tangents; // 0x48
	private List`1 m_Indices; // 0x50
	private static readonly Vector4 s_DefaultTangent; // 0x0
	private static readonly Vector3 s_DefaultNormal; // 0x10
	private Boolean m_ListsInitalized; // 0x58

	// Properties
	public Int32 currentVertCount { get; }
	public Int32 currentIndexCount { get; }

	// Methods
	// Offset : 0x591bfc
	public Void .ctor() { }
	// Offset : 0x591c08
	public Void .ctor(Mesh m) { }
	// Offset : 0x591eb8
	private Void InitializeListIfRequired() { }
	// Offset : 0x592044
	public Void Dispose() { }
	// Offset : 0x57dad8
	public Void Clear() { }
	// Offset : 0x57e140
	public Int32 get_currentVertCount() { }
	// Offset : 0x5921f8
	public Int32 get_currentIndexCount() { }
	// Offset : 0x57dd90
	public Void PopulateUIVertex(ref UIVertex vertex, Int32 i) { }
	// Offset : 0x57df3c
	public Void SetUIVertex(UIVertex vertex, Int32 i) { }
	// Offset : 0x592258
	public Void FillMesh(Mesh mesh) { }
	// Offset : 0x592504
	internal Void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector3 normal, Vector4 tangent) { }
	// Offset : 0x592728
	public Void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector3 normal, Vector4 tangent) { }
	// Offset : 0x57eccc
	public Void AddVert(Vector3 position, Color32 color, Vector2 uv0) { }
	// Offset : 0x592834
	public Void AddVert(UIVertex v) { }
	// Offset : 0x57edfc
	public Void AddTriangle(Int32 idx0, Int32 idx1, Int32 idx2) { }
	// Offset : 0x5907bc
	public Void AddUIVertexQuad(UIVertex[] verts) { }
	// Offset : 0x59288c
	public Void AddUIVertexStream(List`1 verts, List`1 indices) { }
	// Offset : 0x57dc58
	public Void AddUIVertexTriangleStream(List`1 verts) { }
	// Offset : 0x57d79c
	public Void GetUIVertexStream(List`1 stream) { }
	// Offset : 0x592948
	private static Void .cctor() { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.Experimental.UI
public static class VertexHelperExtension
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4a67b8
	public static Void AddVert(VertexHelper obj, Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector3 normal, Vector4 tangent) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public abstract class BaseVertexEffect
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4a7594
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Void ModifyVertices(List`1 vertices) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public abstract class BaseMeshEffect : UIBehaviour, IMeshModifier
{
	// Fields
	private Graphic m_Graphic; // 0x18

	// Properties
	protected Graphic graphic { get; }

	// Methods
	// Offset : 0x4a70dc
	protected Void .ctor() { }
	// Offset : 0x4a70e4
	protected Graphic get_graphic() { }
	// Offset : 0x4a717c
	protected override Void OnEnable() { }
	// Offset : 0x4a7248
	protected override Void OnDisable() { }
	// Offset : 0x4a7314
	protected override Void OnDidApplyAnimationProperties() { }
	// Offset : 0x4a73e0
	public virtual Void ModifyMesh(Mesh mesh) { }
	// Offset : 0x
	public abstract Void ModifyMesh(VertexHelper vh) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface IVertexModifier
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void ModifyVertices(List`1 verts) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public interface IMeshModifier
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void ModifyMesh(Mesh mesh) { }
	// Offset : 0x
	public abstract Void ModifyMesh(VertexHelper verts) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Outline : Shadow
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x57d338
	protected Void .ctor() { }
	// Offset : 0x57d3cc
	public override Void ModifyMesh(VertexHelper vh) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class PositionAsUV1 : BaseMeshEffect
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x57dcb0
	protected Void .ctor() { }
	// Offset : 0x57dcb8
	public override Void ModifyMesh(VertexHelper vh) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: UnityEngine.UI
public class Shadow : BaseMeshEffect
{
	// Fields
	private Color m_EffectColor; // 0x20
	private Vector2 m_EffectDistance; // 0x30
	private Boolean m_UseGraphicAlpha; // 0x38
	private const Single kMaxEffectDistance; // 0x0

	// Properties
	public Color effectColor { get; set; }
	public Vector2 effectDistance { get; set; }
	public Boolean useGraphicAlpha { get; set; }

	// Methods
	// Offset : 0x57d33c
	protected Void .ctor() { }
	// Offset : 0x57d7f4
	public Color get_effectColor() { }
	// Offset : 0x58bc28
	public Void set_effectColor(Color value) { }
	// Offset : 0x57d800
	public Vector2 get_effectDistance() { }
	// Offset : 0x58bd2c
	public Void set_effectDistance(Vector2 value) { }
	// Offset : 0x58be8c
	public Boolean get_useGraphicAlpha() { }
	// Offset : 0x58be94
	public Void set_useGraphicAlpha(Boolean value) { }
	// Offset : 0x57d808
	protected Void ApplyShadowZeroAlloc(List`1 verts, Color32 color, Int32 start, Int32 end, Single x, Single y) { }
	// Offset : 0x58bf80
	protected Void ApplyShadow(List`1 verts, Color32 color, Int32 start, Int32 end, Single x, Single y) { }
	// Offset : 0x58bf88
	public override Void ModifyMesh(VertexHelper vh) { }
}

// Dll : UnityEngine.UI.dll
// Namespace: 
internal static class <PrivateImplementationDetails>
{
	// Fields
	internal static readonly $ArrayType=12 $field-7BBE37982E6C057ED87163CAFC7FD6E5E42EEA46; // 0x0

	// Properties

	// Methods
}

// Dll : UnityEngine.UI.dll
// Namespace: 
private struct $ArrayType=12
{
	// Fields

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
internal class <Module>
{
	// Fields

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GooglePlayInstant
public static class Android
{
	// Fields
	public const String GooglePlayServicesPackageName; // 0x0
	public const String GooglePlayStorePackageName; // 0x0
	public const String ActivityMethodGetIntent; // 0x0
	public const String ActivityMethodStartActivityForResult; // 0x0
	public const String BundleClass; // 0x0
	public const String BundleMethodGetBoolean; // 0x0
	public const String BundleMethodGetByteArray; // 0x0
	public const String BundleMethodGetInt; // 0x0
	public const String BundleMethodPutByteArray; // 0x0
	public const String BundleMethodPutInt; // 0x0
	public const String ContentResolverMethodCall; // 0x0
	public const String ContextMethodGetContentResolver; // 0x0
	public const String ContextMethodGetPackageManager; // 0x0
	public const String IntentActionMain; // 0x0
	public const String IntentActionView; // 0x0
	public const String IntentCategoryBrowsable; // 0x0
	public const String IntentCategoryDefault; // 0x0
	public const String IntentCategoryLauncher; // 0x0
	public const String IntentClass; // 0x0
	public const String IntentMethodAddCategory; // 0x0
	public const String IntentMethodGetStringExtra; // 0x0
	public const String IntentMethodPutExtra; // 0x0
	public const String IntentMethodSetData; // 0x0
	public const String IntentMethodSetPackage; // 0x0
	public const String ObjectMethodGetClass; // 0x0
	public const String PackageInfoFieldSignatures; // 0x0
	public const Int32 PackageManagerFieldGetSignatures; // 0x0
	public const String PackageManagerMethodGetPackageInfo; // 0x0
	public const String PackageManagerMethodResolveActivity; // 0x0
	public const String PackageManagerMethodResolveContentProvider; // 0x0
	public const String ProcessClass; // 0x0
	public const String ProcessMethodMyUid; // 0x0
	public const String ProviderInfoFieldPackageName; // 0x0
	public const String SignatureMethodToByteArray; // 0x0
	public const String UriClass; // 0x0
	public const String UriMethodParse; // 0x0
	public const String UriBuilderClass; // 0x0
	public const String UriBuilderMethodAppendQueryParameter; // 0x0
	public const String UriBuilderMethodAuthority; // 0x0
	public const String UriBuilderMethodBuild; // 0x0
	public const String UriBuilderMethodScheme; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GooglePlayInstant
public static class CookieApi
{
	// Fields
	private const String Authority; // 0x0
	private const String ContentAuthority; // 0x0
	private const String KeyCookie; // 0x0
	private const String KeyResult; // 0x0
	private const String KeyUid; // 0x0
	private const String MethodGetInstantAppCookie; // 0x0
	private const String MethodGetInstantAppCookieMaxSize; // 0x0
	private const String MethodSetInstantAppCookie; // 0x0
	private static Boolean _verifiedContentProvider; // 0x0

	// Properties

	// Methods
	// Offset : 0x43b0c8
	public static Int32 GetInstantAppCookieMaxSizeBytes() { }
	// Offset : 0x43bcdc
	public static String GetInstantAppCookie() { }
	// Offset : 0x43bd90
	public static Byte[] GetInstantAppCookieBytes() { }
	// Offset : 0x43c3b0
	public static Boolean SetInstantAppCookie(String cookie) { }
	// Offset : 0x43c45c
	public static Boolean SetInstantAppCookieBytes(Byte[] cookie) { }
	// Offset : 0x43c9e0
	private static Void VerifyContentProvider() { }
	// Offset : 0x43b400
	private static AndroidJavaObject CallMethod(String methodName, AndroidJavaObject extrasBundle) { }
	// Offset : 0x43c204
	private static Int32 ProcessGetMyUid() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class CookieApiException : Exception
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x43d304
	public Void .ctor(String message, Exception innerException) { }
	// Offset : 0x43d2fc
	public Void .ctor(String message) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GooglePlayInstant
public static class InstallLauncher
{
	// Fields
	private const String IntentActionInstantAppInstall; // 0x0
	private const Int32 IgnoredRequestCode; // 0x0

	// Properties

	// Methods
	// Offset : 0x43d30c
	public static Void ShowInstallPrompt() { }
	// Offset : 0x43d880
	public static Void ShowInstallPrompt(AndroidJavaObject activity, Int32 requestCode, AndroidJavaObject postInstallIntent, String referrer) { }
	// Offset : 0x43fd1c
	public static AndroidJavaObject GetCurrentActivity() { }
	// Offset : 0x43d614
	public static AndroidJavaObject CreatePostInstallIntent(AndroidJavaObject activity) { }
	// Offset : 0x43fd20
	public static Void PutPostInstallIntentStringExtra(AndroidJavaObject postInstallIntent, String extraKey, String extraValue) { }
	// Offset : 0x43fefc
	public static String GetPostInstallIntentStringExtra(String extraKey) { }
	// Offset : 0x43e33c
	private static AndroidJavaObject CreateMarketDetailsUri(String referrer) { }
	// Offset : 0x43ecd8
	private static Boolean IsLegacyPlayStore(AndroidJavaObject context, AndroidJavaObject installIntent) { }
	// Offset : 0x43f014
	private static Void ShowLegacyInstallPrompt(AndroidJavaObject activity, Int32 requestCode, AndroidJavaObject uri) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GooglePlayInstant
public static class PlaySignatureVerifier
{
	// Fields
	private static readonly Byte[] GooglePlayPackageSignature; // 0x0

	// Properties

	// Methods
	// Offset : 0x43d28c
	public static Boolean VerifyGooglePlayServices(AndroidJavaObject packageManager) { }
	// Offset : 0x440254
	private static Boolean VerifyGooglePlayPackage(AndroidJavaObject packageManager, String packageName) { }
	// Offset : 0x440844
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GooglePlayInstant
public static class UnityPlayerHelper
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x43d100
	public static AndroidJavaObject GetCurrentActivity() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class GameVarDef
{
	// Fields
	public static readonly Single RunSpeed; // 0x0
	public static readonly Single CrouchSpeed; // 0x4
	public static readonly Single SimGravityY; // 0x8
	public static readonly Single MaxJumpHeight; // 0xc
	public static readonly Single HighFallingHeight; // 0x10
	public static readonly Single StandingColliderHeight; // 0x14
	public static readonly Single CrouchingColliderHeight; // 0x18
	public static readonly Single MovingCrouchingColliderHeight; // 0x1c
	public static readonly Single FreeMoveAngularSpeed; // 0x20
	public static readonly Single ParachutingMinHSpeed; // 0x24
	public static readonly Single ParachutingMinVSpeed; // 0x28
	public static readonly Single ParachutingMaxHSpeed; // 0x2c
	public static readonly Single ParachutingMaxVSpeed; // 0x30
	public static readonly Single ParachutingMaxAngleTilt; // 0x34
	public static readonly Single ParachutingMinAngleTilt; // 0x38
	public static readonly Single ParachutingTiltSpeed; // 0x3c
	public static readonly Single ParachutingMaxAngleRoll; // 0x40
	public static readonly Single ParachutingMinAngleRoll; // 0x44
	public static readonly Single ParachutingRollSpeed; // 0x48
	public static readonly Single ParachutingTurningRadius; // 0x4c
	public static readonly Single ParachutingOpenDuration; // 0x50
	public static readonly Single LandingCameraShakeDuration; // 0x54
	public static readonly Single LandingCameraShakeFactor; // 0x58
	public static readonly Single ParachutingCameraUpOffset; // 0x5c
	public static readonly Single ParachutingCameraBackOffset; // 0x60
	public static readonly Single ParachutingCameraShakeDuring; // 0x64
	public static readonly Single ParachutingCameraShakeFactor; // 0x68
	public static readonly Single CCTRadiusNormal; // 0x6c
	public static readonly Single AnimSpeedFireWalk; // 0x70
	public static readonly Single AnimSpeedFireCrouchWalk; // 0x74
	public static readonly Single IKBoneRotateSpeed; // 0x78
	public static readonly Single HitDamageRatioHead; // 0x7c
	public static readonly Single HitDamageRatioBody; // 0x80
	public static readonly Single HitDamageRatioLimb; // 0x84
	public static readonly Int32 DefaultBagCapacity; // 0x88
	public static readonly Single GunTrace3PMaxDistance; // 0x8c
	public static readonly Single MinDistToPlayer; // 0x90
	public static readonly Boolean LeavesNotchForAndroid; // 0x94
	public static readonly Single NotchForAndroidThreshold; // 0x98
	public static readonly Boolean EnableClimb; // 0x9c
	public static readonly Boolean EnableMoveDirectionCheckInClimb; // 0x9d
	public static readonly Single CrossOverAnimTime; // 0xa0
	public static readonly Single CrossOverJumpTimeDefault; // 0xa4
	public static readonly Single CrossOverFallTimeDefault; // 0xa8
	public static readonly Single ClimbCameraDuration; // 0xac

	// Properties

	// Methods
	// Offset : 0x3a7ba4
	public Void .ctor() { }
	// Offset : 0x3a7bac
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class ResourceIDDef
{
	// Fields
	public static readonly ResourceID SCENE_GAME; // 0x0
	public static readonly ResourceID SCENE_LOADING; // 0x4
	public static readonly ResourceID SCENE_FRONTEND; // 0x8
	public static readonly ResourceID UILOADING; // 0xc
	public static readonly ResourceID UIHUDCROSSHAIRS; // 0x10
	public static readonly ResourceID UIHUDHP; // 0x14
	public static readonly ResourceID UIHUDMOVINGJOYSTICK; // 0x18
	public static readonly ResourceID UIHUDFIRE; // 0x1c
	public static readonly ResourceID UIHUDJUMP; // 0x20
	public static readonly ResourceID UIHUDCROUCH; // 0x24
	public static readonly ResourceID UIHUDQUICKUSEMEDKIT; // 0x28
	public static readonly ResourceID UIHUDPOPUP; // 0x2c
	public static readonly ResourceID UIHUDPICKUPLISTITEM; // 0x30
	public static readonly ResourceID UIHUDPICKUPLIST; // 0x34
	public static readonly ResourceID UIHUDNAMEENEMY; // 0x38
	public static readonly ResourceID UIHUDPLAYERREMAININGINFO; // 0x3c
	public static readonly ResourceID UIHUDREMAININGTIME; // 0x40
	public static readonly ResourceID UIHUDMATCHRESULT; // 0x44
	public static readonly ResourceID UIHUDWEAPONINFO; // 0x48
	public static readonly ResourceID UIHUDWEAPONINFOSWAP; // 0x4c
	public static readonly ResourceID UIMAIN; // 0x50
	public static readonly ResourceID UIHUDPREPARATIONTIMER; // 0x54
	public static readonly ResourceID UIHUDKILLNOTIFICATION; // 0x58
	public static readonly ResourceID INGAME_PLAYER_MALE; // 0x5c
	public static readonly ResourceID INGAME_PLAYER_MALE_ENEMY; // 0x60
	public static readonly ResourceID INGAME_PARACHUTE; // 0x64
	public static readonly ResourceID EFFECT_GUNTRACER_01; // 0x68
	public static readonly ResourceID INGAME_WEAPON_OVERRIDE_ANIM_KNIFE; // 0x6c
	public static readonly ResourceID INGAME_WEAPON_OVERRIDE_ANIM_GUN; // 0x70
	public static readonly ResourceID INGAME_GENERAL_WEAPON_FIRE_EFFECT; // 0x74
	public static readonly ResourceID INGAME_WEAPON_KNIFE; // 0x78
	public static readonly ResourceID INGAME_WEAPON_M4A1; // 0x7c
	public static readonly ResourceID INGAME_BACKWEAPON_M4A1; // 0x80
	public static readonly ResourceID INGAME_PICKUP_AMMO_AR; // 0x84
	public static readonly ResourceID INGAME_PICKUP_FAK_1; // 0x88
	public static readonly ResourceID INGAME_PICKUP_M4A1; // 0x8c
	public static readonly ResourceID INGAME_CONTAINER; // 0x90
	public static readonly ResourceID INGAME_AICONFIG; // 0x94
	public static readonly ResourceID EFFECT_ELECTRIC_DAMAGE; // 0x98
	public static readonly ResourceID LOCALIZATION_LOC; // 0x9c
	public static readonly ResourceID CONFIG_ANIMCONFIG; // 0xa0
	public static readonly ResourceID INGAME_CONSUMABLE_CONFIG; // 0xa4
	public static readonly ResourceID INGAME_WEAPON_CONFIG; // 0xa8
	public static readonly ResourceID INGAME_ITEM_CONFIG; // 0xac
	public static readonly ResourceID INGAME_AVATAR_CONFIG; // 0xb0
	public static readonly ResourceID SOUND_PARACHUTE_WIND; // 0xb4
	public static readonly ResourceID SOUND_WINNER; // 0xb8
	public static readonly ResourceID SOUND_AUDIOSOURCE_THREED; // 0xbc
	public static readonly ResourceID SOUND_AUDIOSOURCE_THREED_GUNFIRE; // 0xc0
	public static readonly ResourceID SOUND_INJURED_SLIGHT01; // 0xc4
	public static readonly ResourceID SOUND_INJURED_SLIGHT02; // 0xc8
	public static readonly ResourceID SOUND_FOOTSTEP1; // 0xcc
	public static readonly ResourceID SOUND_FOOTSTEP2; // 0xd0
	public static readonly ResourceID SOUND_WEAPON_WHIZBY01; // 0xd4
	public static readonly ResourceID SOUND_WEAPON_WHIZBY02; // 0xd8
	public static readonly ResourceID SOUND_JUMP; // 0xdc
	public static readonly ResourceID SOUND_LAND; // 0xe0
	public static readonly ResourceID SOUND_EQUIP; // 0xe4
	public static readonly ResourceID SOUND_PICKUP; // 0xe8
	public static readonly ResourceID SOUND_WEAPON_AIRSHOOT; // 0xec
	public static readonly ResourceID SOUND_CROUCN_TO_STAND; // 0xf0
	public static readonly ResourceID SOUND_STAND_TO_CROUCN; // 0xf4
	public static readonly ResourceID SOUND_KILL_ENEMY; // 0xf8
	public static readonly ResourceID SOUND_UI_CLICK; // 0xfc
	public static readonly ResourceID SOUND_UI_MATCH; // 0x100
	public static readonly ResourceID SOUND_CLIMB_START_MALE; // 0x104
	public static readonly ResourceID SOUND_CLIMB_RUB; // 0x108

	// Properties

	// Methods
	// Offset : 0x3c73f0
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class EGGameEntry : MonoBehaviour
{
	// Fields
	private GameEngine m_GameEngine; // 0x18
	private Boolean <Paused>k__BackingField; // 0x20

	// Properties
	public Boolean Paused { get; set; }

	// Methods
	// Offset : 0x3a3410
	public Void .ctor() { }
	// Offset : 0x3a3418
	public Boolean get_Paused() { }
	// Offset : 0x3a3420
	public Void set_Paused(Boolean value) { }
	// Offset : 0x3a342c
	private Void Awake() { }
	// Offset : 0x3a389c
	private Void Start() { }
	// Offset : 0x3a3dbc
	private Void Update() { }
	// Offset : 0x3a3df8
	private Void FixedUpdate() { }
	// Offset : 0x3a3e34
	private Void OnApplicationQuit() { }
	// Offset : 0x3a3eb8
	private Void OnApplicationPause(Boolean paused) { }
	// Offset : 0x3a3f50
	private Void OnApplicationFocus(Boolean focus) { }
	// Offset : 0x3a3fc4
	private Void HandleLog(String logString, String stackTrace, LogType type) { }
	// Offset : 0x3a4130
	public String GetVersionString() { }
	// Offset : 0x3a3d2c
	private Void EnterFrontEndGame() { }
	// Offset : 0x3a35dc
	private Void RefreshConfigData() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public abstract class EGGameBase : BaseGame
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3a3300
	protected Void .ctor() { }
	// Offset : 0x3a3368
	protected override Void OnAwake() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum GameType
{
	// Fields
	public Int32 value__; // 0x10
	public const GameType FrontEndGame = 0; // 0x0
	public const GameType SinglePlayerGame = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum GameMode
{
	// Fields
	public Int32 value__; // 0x10

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal enum EventID
{
	// Fields
	public UInt32 value__; // 0x10
	public const EventID ADD_PLAYER = 0; // 0x0
	public const EventID ADD_LOCAL_PLAYER = 1; // 0x0
	public const EventID DEL_PLAYER = 2; // 0x0
	public const EventID LOCALPLAYER_HIT_OTHERS = 3; // 0x0
	public const EventID DO_ACTION = 4; // 0x0
	public const EventID ENTER_PICKUP_AREA = 5; // 0x0
	public const EventID EXIT_PICKUP_AREA = 6; // 0x0
	public const EventID REFRESH_PICKUP_AREA = 7; // 0x0
	public const EventID INVENTORY_MEDKIT_CHANGED = 8; // 0x0
	public const EventID INVENTORY_ITEM_ON_HAND_CHANGED = 9; // 0x0
	public const EventID LOCAL_PLAYER_HP_CHANGED = 10; // 0x0
	public const EventID PREPARATION_START = 11; // 0x0
	public const EventID PREPARATION_CANCEL = 12; // 0x0
	public const EventID HUD_CLIMB_READY_STATE_CHANGE = 13; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class FrontEndGame : EGGameBase
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3a6be0
	public Void .ctor() { }
	// Offset : 0x3a6be4
	public override ResourceID[] GetResourceID() { }
	// Offset : 0x3a6c74
	public override Int32 GetGameType() { }
	// Offset : 0x3a6c7c
	public override Type GetUISceneType() { }
	// Offset : 0x3a6cec
	protected override Void OnSceneLoaded() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class GameFacade
{
	// Fields
	public static BaseGame CurrentGame; // 0x0
	public static UInt64 LocalPlayerUserID; // 0x8

	// Properties

	// Methods
	// Offset : 0x3a6e6c
	public Void .ctor() { }
	// Offset : 0x3a33bc
	public static Void SetCurrentGame(BaseGame game) { }
	// Offset : 0x3a6e74
	public static UIBaseScene CurrentUIScene() { }
	// Offset : 0x3a6ed8
	public static TimeService CurrentGameTimer() { }
	// Offset : 0x3a0a0c
	public static EventDispatcher CurrentGameEventDispatcher() { }
	// Offset : 0x3a6f3c
	public static TimeService CurrentGameSimulationTimer() { }
	// Offset : 0x3a6fa0
	public static Single CurrentGameFixedDeltaTime() { }
	// Offset : 0x3a701c
	public static UInt64 GetLocalPlayerUserID() { }
	// Offset : 0x3a706c
	public static Single GetRevisedValueByFPS(Single v, Single deltaTime) { }
	// Offset : 0x3a6548
	public static Single GetRevisedValueBySystemFPS(Single v) { }
	// Offset : 0x3a7080
	public static CameraControllerManager CurrentCameraControllerManager() { }
	// Offset : 0x398f7c
	public static Match CurrentMatch() { }
	// Offset : 0x399018
	public static Player CurrentLocalPlayer() { }
	// Offset : 0x3a1954
	public static LevelObjectManager CurrentLevelObjectManager() { }
	// Offset : 0x3a7124
	public static AIConfigData CurrentAIConfigData() { }
	// Offset : 0x3a71c0
	public static Void ShowInstallDialog() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class LoadingProcessWaitOneFrame : LoadingProcess
{
	// Fields
	private Boolean m_HasWaited; // 0x14

	// Properties

	// Methods
	// Offset : 0x3b0474
	public Void .ctor() { }
	// Offset : 0x3b047c
	public override Boolean IsMainProcess() { }
	// Offset : 0x3b0484
	protected override Void OnStartProcess() { }
	// Offset : 0x3b048c
	protected override EProcessStatus OnUpdateProcess() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class Match
{
	// Fields
	private MatchState m_State; // 0x10
	private GameObject m_MatchContainer; // 0x18
	private UIModelMatch m_MatchModel; // 0x20
	private Player m_LocalPlayer; // 0x28
	private Dictionary`2 m_Players; // 0x30
	private Dictionary`2 m_DeadPlayers; // 0x38
	private List`1 m_AttackableEntities; // 0x40
	private AIConfigData m_AIConfigData; // 0x48
	private GlobalInfo m_GlobalInfo; // 0x50
	private PlayerUpdater[] m_PlayerUpdaters; // 0x58
	private static PlayerUpdater <>f__am$cache0; // 0x0
	private static PlayerUpdater <>f__am$cache1; // 0x8
	private static PlayerUpdater <>f__am$cache2; // 0x10
	private static PlayerUpdater <>f__am$cache3; // 0x18
	private static PlayerUpdater <>f__am$cache4; // 0x20

	// Properties

	// Methods
	// Offset : 0x3b04ac
	public Void .ctor() { }
	// Offset : 0x39927c
	public GlobalInfo GetGlobalInfo() { }
	// Offset : 0x3b0a40
	public List`1 GetAttackableEntities() { }
	// Offset : 0x39e0f4
	public Void AddAttackableEntities(AttackableEntity e) { }
	// Offset : 0x39e1b8
	public Void RemoveAttackableEntities(AttackableEntity e) { }
	// Offset : 0x3b0a48
	public virtual Void Destroy() { }
	// Offset : 0x3b0b2c
	public Boolean IsRunning() { }
	// Offset : 0x3b0b40
	public Boolean IsInGame() { }
	// Offset : 0x3b0b60
	public Boolean IsWaitingForEnd() { }
	// Offset : 0x3b0b70
	public Boolean IsMatchEnd() { }
	// Offset : 0x3b0654
	protected Void ChangeMatchState(MatchState newState) { }
	// Offset : 0x3a711c
	public Player GetLocalPlayer() { }
	// Offset : 0x3b0668
	private Void InitPlayerUpdater() { }
	// Offset : 0x3b0b90
	private Void IterateDeadPlayerDo(Single gameTime, Single deltaTime, PlayerUpdater updater) { }
	// Offset : 0x3b1214
	private Void IteratePlayerDo(Single gameTime, Single deltaTime, PlayerUpdater updater) { }
	// Offset : 0x39cd88
	public Dictionary`2 GetPlayers() { }
	// Offset : 0x3b1388
	public Player GetPlayer(PlayerID playerID) { }
	// Offset : 0x3b1408
	private Transform GetContainer() { }
	// Offset : 0x3b1438
	public Void SimulationTick(Single gameTime, Single deltaTime) { }
	// Offset : 0x3b1604
	public Void UpdateGlobalInfo(Single gameTime, Single deltaTime) { }
	// Offset : 0x3b1944
	public Void RunOneFrame(Single gameTime, Single deltaTime) { }
	// Offset : 0x3b1c58
	public Boolean AddPlayer(UInt64 userID, PlayerID playerID, Boolean isAI) { }
	// Offset : 0x3b1f9c
	public Boolean DelPlayer(PlayerID playerID, PlayerID damager, Int32 weaponID, Boolean isHeadKill) { }
	// Offset : 0x3b21a0
	public Void AddDeadPlayer(PlayerID playerID, Player player) { }
	// Offset : 0x3b2218
	public Void DelDeadPlayer(PlayerID playerID) { }
	// Offset : 0x3b2288
	private static Void <InitPlayerUpdater>m__0(Player p, Single gameTime, Single deltaTime) { }
	// Offset : 0x3b22cc
	private static Void <InitPlayerUpdater>m__1(Player p, Single gameTime, Single deltaTime) { }
	// Offset : 0x3b2330
	private static Void <InitPlayerUpdater>m__2(Player p, Single gameTime, Single deltaTime) { }
	// Offset : 0x3b2394
	private static Void <InitPlayerUpdater>m__3(Player p, Single gameTime, Single deltaTime) { }
	// Offset : 0x3b23f8
	private static Void <InitPlayerUpdater>m__4(Player p, Single gameTime, Single deltaTime) { }
	// Offset : 0x3b245c
	private Void <RunOneFrame>m__5() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
protected enum MatchState
{
	// Fields
	public Int32 value__; // 0x10
	public const MatchState NotStarted = 0; // 0x0
	public const MatchState Running = 1; // 0x0
	public const MatchState WaitingForEnd = 2; // 0x0
	public const MatchState MatchEnd = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class GlobalInfo
{
	// Fields
	public PlayerID NearestPlayerToLocal; // 0x10

	// Properties

	// Methods
	// Offset : 0x3b062c
	public Void .ctor() { }
	// Offset : 0x3b2674
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class PlayerUpdater : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3b0b80
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x3b0d04
	public virtual Void Invoke(Player p, Single gameTime, Single deltaTime) { }
	// Offset : 0x3b26e4
	public virtual IAsyncResult BeginInvoke(Player p, Single gameTime, Single deltaTime, AsyncCallback callback, Object object) { }
	// Offset : 0x3b2798
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
protected enum EPlayerUpdater
{
	// Fields
	public Int32 value__; // 0x10
	public const EPlayerUpdater Controller = 0; // 0x0
	public const EPlayerUpdater AI = 1; // 0x0
	public const EPlayerUpdater Behavior = 2; // 0x0
	public const EPlayerUpdater Kinematics = 3; // 0x0
	public const EPlayerUpdater Post = 4; // 0x0
	public const EPlayerUpdater NB = 5; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class SinglePlayerGame : EGGameBase
{
	// Fields
	private Match m_Match; // 0x68
	private CameraControllerManager m_CameraControllerManager; // 0x70
	private LevelObjectManager m_LevelObjectManager; // 0x78
	private AIConfigData m_AIConfigData; // 0x80
	protected SingleplayerGameContext m_MatchContextData; // 0x88

	// Properties

	// Methods
	// Offset : 0x3c7c24
	public Void .ctor() { }
	// Offset : 0x3c7cb4
	public override Int32 GetGameType() { }
	// Offset : 0x3c7cbc
	public override LoadingProcess[] GetLoadingProcesses() { }
	// Offset : 0x3c7d8c
	public override ResourceID[] GetResourceID() { }
	// Offset : 0x3c7e1c
	public override Type GetUISceneType() { }
	// Offset : 0x3c7e8c
	public SingleplayerGameContext GetContext() { }
	// Offset : 0x3c7e94
	public LevelObjectManager GetLevelObjectManager() { }
	// Offset : 0x3c7e9c
	public AIConfigData GetAIConfigData() { }
	// Offset : 0x3c7ea4
	public Match GetMatch() { }
	// Offset : 0x3c7eac
	protected override Void OnSceneLoaded() { }
	// Offset : 0x3c83dc
	protected override Void OnDestroy() { }
	// Offset : 0x3c8448
	protected override Void OnFixedUpdate() { }
	// Offset : 0x3c8504
	protected override Void OnUpdate() { }
	// Offset : 0x3c80dc
	private Void OnGameSetup() { }
	// Offset : 0x3c86e8
	public CameraControllerManager GetCameraControllerManager() { }
	// Offset : 0x3c85d4
	public Void AddAI(Int32 count) { }
	// Offset : 0x3c8714
	public BaseLevelObject AddContainer(UInt32 containerID, Vector3 position) { }
	// Offset : 0x3c8ba8
	public Void AddPickup(BaseLevelObject container, UInt32 dataID, Int32 count) { }
	// Offset : 0x3c8a38
	public Vector3 PutOnGround(Vector3 pos) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class SingleplayerGameContext
{
	// Fields
	private UInt32 m_UniqueItemID; // 0x10
	private UInt32 m_NextPlayerID; // 0x14
	private Byte m_NextTeamID; // 0x18
	private UInt32 m_LevelObjectID; // 0x1c

	// Properties

	// Methods
	// Offset : 0x3c7cac
	public Void .ctor() { }
	// Offset : 0x3c8f28
	public UInt32 GenUniqueItemID() { }
	// Offset : 0x3c86f0
	public UInt32 GenNextPlayerID() { }
	// Offset : 0x3c85b0
	public Byte GenNextTeamID() { }
	// Offset : 0x3c8f4c
	public UInt32 GenNextLevelObjectID() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class AnimationLayerDef
{
	// Fields
	public static readonly Int32 BASE_LAYER; // 0x0
	public static readonly Int32 UPPER_BODY_LAYER; // 0x4
	public static readonly Int32 UPPER_BODY_ADDITIVE_LAYER; // 0x8
	public static readonly Int32 LAYER_NB; // 0xc

	// Properties

	// Methods
	// Offset : 0x38a13c
	public Void .ctor() { }
	// Offset : 0x38a144
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class AnimationIDDef
{
	// Fields
	public static readonly AnimationID ANIM_0_WALKING; // 0x0
	public static readonly AnimationID ANIM_0_JUMP; // 0x4
	public static readonly AnimationID ANIM_0_JUMP_LAND; // 0x8
	public static readonly AnimationID ANIM_0_FALLING; // 0xc
	public static readonly AnimationID ANIM_0_FALLING_LAND; // 0x10
	public static readonly AnimationID ANIM_0_CROUCH; // 0x14
	public static readonly AnimationID ANIM_0_LOCKWALKING; // 0x18
	public static readonly AnimationID ANIM_0_PARACHUTING_OPEN; // 0x1c
	public static readonly AnimationID ANIM_0_PARACHUTING; // 0x20
	public static readonly AnimationID ANIM_0_DEAD_NORMAL; // 0x24
	public static readonly AnimationID ANIM_0_DEAD_HEADSHOT; // 0x28
	public static readonly AnimationID ANIM_0_IDLE_TO_CROSSOVER; // 0x2c
	public static readonly AnimationID ANIM_1_NONE; // 0x30
	public static readonly AnimationID ANIM_1_STAND_FIRE; // 0x34
	public static readonly AnimationID ANIM_1_STAND_CHANGECLIP; // 0x38
	public static readonly AnimationID ANIM_1_STAND_CHANGEWEAPON; // 0x3c
	public static readonly AnimationID ANIM_1_CROUCH_FIRE; // 0x40
	public static readonly AnimationID ANIM_1_CROUCH_CHANGECLIP; // 0x44
	public static readonly AnimationID ANIM_1_CROUCH_CHANGEWEAPON; // 0x48
	public static readonly AnimationID ANIM_1_CURE_BEGIN; // 0x4c
	public static readonly AnimationID ANIM_1_CURE_END; // 0x50
	public static readonly AnimationID ANIM_1_STAND_FIRE_1; // 0x54
	public static readonly AnimationID ANIM_1_CROUCH_FIRE_1; // 0x58
	public static readonly AnimationID ANIM_2_NONE; // 0x5c
	public static readonly AnimationID ANIM_2_NORMAL_HIT; // 0x60
	public static readonly AnimationID ANIM_2_CROUCH_HIT; // 0x64

	// Properties

	// Methods
	// Offset : 0x38a134
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class NewPlayerAnimationSystemComponent : AnimationSystemComponent
{
	// Fields
	protected Player m_Owner; // 0x38
	private Boolean m_bAttackRight; // 0x40
	private Single m_LastSpeedZ; // 0x44
	private Single m_LastSpeedX; // 0x48
	private Single m_BlendSpeed; // 0x4c

	// Properties

	// Methods
	// Offset : 0x3b27a4
	public Void .ctor() { }
	// Offset : 0x3b27b8
	public Void Init(Player owner) { }
	// Offset : 0x3b27c0
	public virtual Void PlayFireAnim() { }
	// Offset : 0x3b28e0
	public Void PlayStopFire() { }
	// Offset : 0x3b2a1c
	public virtual Void PlayReloadAnim(Single reloadSpeed) { }
	// Offset : 0x3b2aa4
	public virtual Void PlayChangeWeaponAnim(Weapon w) { }
	// Offset : 0x3b2b2c
	public Void PlayStartParachuting() { }
	// Offset : 0x3b2b8c
	public Void PlayJump() { }
	// Offset : 0x3b2bec
	public Void PlayHitAnimation() { }
	// Offset : 0x3b2cbc
	public Void PlayDead(Boolean isHeadShot) { }
	// Offset : 0x3b2d34
	public Void PlayCureAnimation(Boolean start) { }
	// Offset : 0x3b2e04
	public Void SetParachutingSpeed(Single zSpeed, Single xSpeed) { }
	// Offset : 0x3b2ea8
	public Void SetSpeed(Single zSpeed, Single xSpeed, Boolean reset) { }
	// Offset : 0x3b29a8
	public Void RefreshBaseLayerDefaultState() { }
	// Offset : 0x3b3194
	protected override UInt32 GetMaxLayerUsed() { }
	// Offset : 0x3b31fc
	protected override Void OnTransitionToDefaultState(Int32 layerIndex) { }
	// Offset : 0x3b334c
	private Void PlayDefaultAnimByState() { }
	// Offset : 0x3b345c
	public Void OnEndClimb() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class PlayerAliveState : StateMachineBehaviour
{
	// Fields
	public Single triggerTime1; // 0x18
	public Single triggerTime2; // 0x1c
	private PlayerAudioComponent m_PlayerAudio; // 0x20
	private Single m_PrevTime; // 0x28

	// Properties

	// Methods
	// Offset : 0x3c62b4
	public Void .ctor() { }
	// Offset : 0x3c62bc
	public override Void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex) { }
	// Offset : 0x3c632c
	public override Void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex) { }
	// Offset : 0x3c6530
	public override Void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public interface ICameraTrackableEntity
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Vector3 GetCameraTrackableEntityPosition() { }
	// Offset : 0x
	public abstract Vector3 GetCameraTrackableEntityTopPosition() { }
	// Offset : 0x
	public abstract Quaternion GetCameraTrackableEntityAimRotation() { }
	// Offset : 0x
	public abstract Transform GetCameraTrackableEntityTransfrom() { }
	// Offset : 0x
	public abstract Boolean IsCameraTrackableEntityAlive() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public abstract class CameraControllerBase : MonoBehaviour
{
	// Fields
	protected Camera m_TargetCamera; // 0x18
	protected ICameraTrackableEntity m_TargetEntity; // 0x20
	protected Transform m_CachedCameraTransfrom; // 0x28
	protected CameraShake m_CameraShake; // 0x30

	// Properties
	public Camera TargetCamera { get; set; }
	protected ICameraTrackableEntity TargetEntity { get; set; }
	public Transform CachedCameraTransfrom { get; }

	// Methods
	// Offset : 0x3a1dd0
	protected Void .ctor() { }
	// Offset : 0x39c9e0
	public Camera get_TargetCamera() { }
	// Offset : 0x3a1e60
	public Void set_TargetCamera(Camera value) { }
	// Offset : 0x3a1e68
	public Void set_TargetEntity(ICameraTrackableEntity value) { }
	// Offset : 0x3a1ec4
	protected ICameraTrackableEntity get_TargetEntity() { }
	// Offset : 0x39c8bc
	public Transform get_CachedCameraTransfrom() { }
	// Offset : 0x3a1ecc
	public Void StartCameraShake(Single duration, Single factor) { }
	// Offset : 0x3a1f40
	public Void EndCameraShake() { }
	// Offset : 0x3a1f74
	private Void LateUpdate() { }
	// Offset : 0x3a2208
	protected virtual Void OnUpdate() { }
	// Offset : 0x3a220c
	protected virtual Void OnTargetChanged() { }
	// Offset : 0x3a2210
	public virtual Void OnCameraChanged() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class CameraControllerManager : MonoBehaviour
{
	// Fields
	public static CameraControllerManager instance; // 0x0
	private Camera m_Camera; // 0x18
	private CameraControllerBase[] m_CameraControllers; // 0x20
	private ECameraControllerType m_CurrentCameraType; // 0x28

	// Properties
	public Camera GameCamera { get; }

	// Methods
	// Offset : 0x3a2214
	public Void .ctor() { }
	// Offset : 0x3a2224
	public Camera get_GameCamera() { }
	// Offset : 0x3a222c
	private Void Awake() { }
	// Offset : 0x3a2574
	public Void Shutdown() { }
	// Offset : 0x3a2398
	public Void ChangeCamera(ECameraControllerType targetType, Boolean changeTargetEntity, ICameraTrackableEntity targetEntity, Boolean force) { }
	// Offset : 0x
	public T GetCameraController(ECameraControllerType conType) { }
	// Offset : 0x
	private Void AddCameraController(ECameraControllerType conType) { }
	// Offset : 0x3a25f8
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum ECameraControllerType
{
	// Fields
	public Int32 value__; // 0x10
	public const ECameraControllerType Follow = 0; // 0x0
	public const ECameraControllerType Skydiving = 1; // 0x0
	public const ECameraControllerType NB = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class CameraShake
{
	// Fields
	public Single m_duration; // 0x10
	public Single m_factor; // 0x14
	private Single animTime; // 0x18
	private Single animFactor; // 0x1c
	private Transform m_CameraTransform; // 0x20
	private Boolean isShakeEnabled; // 0x28

	// Properties

	// Methods
	// Offset : 0x3a1e48
	public Void .ctor() { }
	// Offset : 0x3a1f24
	public Void EnableCameraShake(Transform cameraTransform, Single duration, Single factor) { }
	// Offset : 0x3a1f6c
	public Void EndCameraShake() { }
	// Offset : 0x3a2034
	public Void PlayCameraShake() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class CamTransition
{
	// Fields
	private static Single CAM_DEFAULT_TRAN_SPEED; // 0x0
	private Boolean <IsActive>k__BackingField; // 0x10
	public Single m_fCurLerpFOV; // 0x14
	public Single m_fDestFOV; // 0x18
	public Single m_fSpeed; // 0x1c

	// Properties
	public Boolean IsActive { get; set; }

	// Methods
	// Offset : 0x3a1bb4
	public Void .ctor() { }
	// Offset : 0x3a1bbc
	public Boolean get_IsActive() { }
	// Offset : 0x3a1bc4
	public Void set_IsActive(Boolean value) { }
	// Offset : 0x3a1bd0
	public Single GetFOV(FollowCamera c) { }
	// Offset : 0x3a1c5c
	public Void StartFOVLerp(Single InCurFov, Single InDestFov, Single InSpeed) { }
	// Offset : 0x3a1d28
	public Boolean Update(FollowCamera c) { }
	// Offset : 0x3a1d7c
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class FollowCamera : CameraControllerBase
{
	// Fields
	public static readonly Single C_OFFSET_RIGHT; // 0x0
	public static readonly Single C_OFFSET_RIGHT_PASSENGER; // 0x4
	public static readonly Single C_OFFSET_UP; // 0x8
	public static readonly Single C_OFFSET_UP_PASSENGER; // 0xc
	public static readonly Single C_FOV_NORMAL; // 0x10
	public Single RightOffset; // 0x38
	public Single UpOffset; // 0x3c
	public Single BackOffset; // 0x40
	private static readonly Single RightCollisionOffset; // 0x14
	private static readonly Single MAX_UNCUT_ANGLE; // 0x18
	private static readonly Single OFFSET_FOR_NORMAL; // 0x1c
	private static readonly Single OFFSET_FOR_NORMAL_PASSENGER; // 0x20
	private static readonly Single OFFSET_WHEN_LOOK_UP; // 0x24
	private static readonly Single TRANS_STEP_FOR_SNIPER; // 0x28
	private static readonly Single TRANS_STEP_FOR_NORMAL; // 0x2c
	private static readonly Single TRANS_STEP_FOR_ROOM_IN_OUT; // 0x30
	private static readonly Single OFFSET_FOR_DOWN; // 0x34
	private static readonly Single OFFSET_FOR_CREEP; // 0x38
	private static readonly Single BackOffsetInRoom; // 0x3c
	public Single RightOffsetInRoom; // 0x44
	private static readonly Single RightTransStep; // 0x40
	public Single UpOffsetInCreep; // 0x48
	public Single UpOffsetSurf; // 0x4c
	private Single checkWallInterval; // 0x50
	private Single lastCheckWall; // 0x54
	private Boolean checkedWall; // 0x58
	private Single m_RightOffset; // 0x5c
	private Single m_UpOffset; // 0x60
	private Single m_LastDistanceToWall; // 0x64
	private Single m_TargetBackOffset; // 0x68
	public Boolean IsOnHead; // 0x6c
	private Single m_NormalTargetBackOffset; // 0x70
	private HitObjectInfo m_Tmpinfo; // 0x78
	private Single m_BackOffsetTransStep; // 0x80
	private Boolean m_IsDown; // 0x84
	private Boolean m_IsCreep; // 0x85
	private ECameraFollowType m_PrevFollowType; // 0x88
	private ECameraFollowType m_CurrFollowType; // 0x8c
	private Vector3 m_LastRefPosition; // 0x90
	private Single m_LastMinDist; // 0x9c
	private Vector3 m_CurrentRefPosition; // 0xa0
	private Vector3 m_DeltaToRefPosition; // 0xac
	private CamTransition m_CamTrans; // 0xb8

	// Properties
	private Single OffsetForNormal { get; }
	private Player TargetPlayer { get; }
	public Vector3 CurrentRefPosition { get; }
	public Boolean IsZooming { get; }

	// Methods
	// Offset : 0x3a44ec
	public Void .ctor() { }
	// Offset : 0x3a463c
	private Void Start() { }
	// Offset : 0x3a46b4
	public Void SetOffestRightAndBack() { }
	// Offset : 0x3a473c
	private Single get_OffsetForNormal() { }
	// Offset : 0x3a47a4
	private Player get_TargetPlayer() { }
	// Offset : 0x3a4860
	private Boolean CheckFollowType(Player player, Boolean isSpectatorOrbit) { }
	// Offset : 0x3a4964
	private Single CalculateNormalTargetBackOffset(Player player) { }
	// Offset : 0x3a4c04
	private Single CalculateNormalTargetRightOffset(Player player, Vector3 playerPos, Vector3 viewRight) { }
	// Offset : 0x3a4de4
	private Single CalculateNormalTargetUpOffset(Player player) { }
	// Offset : 0x3a4dec
	private Single CalculateCollisionForwardOffset(Vector3 targetPos, Vector3 viewForward, Single current, Single nearClip) { }
	// Offset : 0x3a4f64
	private Single CalculateCollisionBackOffset(Vector3 targetPos, Vector3 viewForward) { }
	// Offset : 0x3a5990
	protected override Void OnUpdate() { }
	// Offset : 0x3a657c
	public Vector3 get_CurrentRefPosition() { }
	// Offset : 0x3a6588
	protected override Void OnTargetChanged() { }
	// Offset : 0x3a67c8
	public override Void OnCameraChanged() { }
	// Offset : 0x3a688c
	public Boolean get_IsZooming() { }
	// Offset : 0x3a68b8
	public Void SetZoomDest(Single duration, Single fov) { }
	// Offset : 0x3a699c
	public Void SetZoomDestDefault(Single speed) { }
	// Offset : 0x3a6498
	private Void UpdateZooming() { }
	// Offset : 0x3a4a80
	private Single GetBackOffset(Single minOffset, Single maxOffset) { }
	// Offset : 0x3a6ab8
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private enum ECameraFollowType
{
	// Fields
	public Int32 value__; // 0x10
	public const ECameraFollowType NORMAL = 0; // 0x0
	public const ECameraFollowType SNIPER = 1; // 0x0
	public const ECameraFollowType INROOM = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class SkydivingCamera : CameraControllerBase
{
	// Fields
	private Single m_CurrentUpOffset; // 0x38
	private Single m_CurrentBackOffset; // 0x3c
	private Single UpOffset; // 0x40
	private Single BackOffset; // 0x44
	public Single TransSpeed; // 0x48

	// Properties

	// Methods
	// Offset : 0x3c8f70
	public Void .ctor() { }
	// Offset : 0x3c8f84
	public override Void OnCameraChanged() { }
	// Offset : 0x3bfa38
	public Void SetOffset(Single up, Single back, Boolean force) { }
	// Offset : 0x3c8fcc
	protected Void UpdateOffset() { }
	// Offset : 0x3c9098
	protected override Void OnUpdate() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_ApproachPlayer : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x398c0c
	public Void .ctor() { }
	// Offset : 0x398c1c
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x399284
	protected override Void onEnter(TBTWorkingData wData) { }
	// Offset : 0x399418
	protected override Int32 onExecute(TBTWorkingData wData) { }
	// Offset : 0x399558
	protected override Void onExit(TBTWorkingData wData, Int32 runningStatus) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class UserContextData : RequestCache
{
	// Fields
	public Boolean hasValidTarget; // 0x48
	public Vector3 nextTarget; // 0x4c

	// Properties

	// Methods
	// Offset : 0x399644
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_Base : TBTActionLeaf
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x398c14
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
internal class RequestCache
{
	// Fields
	public PlayerRequestCrouch CrouchReq; // 0x10
	public PlayerRequestJump JumpReq; // 0x18
	public PlayerRequestWalking WalkingReq; // 0x20
	public PlayerRequestDoAction DoActionReq; // 0x28
	public PlayerRequestSwapWeapon SwapWeaponReq; // 0x30
	public PlayerRequestReloadWeapon ReloadWeaponReq; // 0x38
	public PlayerRequestClimb ClimbReq; // 0x40

	// Properties

	// Methods
	// Offset : 0x399648
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_Dead : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x399770
	public Void .ctor() { }
	// Offset : 0x399778
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x399800
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_FindPath : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x399874
	public Void .ctor() { }
	// Offset : 0x39987c
	protected override Void onEnter(TBTWorkingData wData) { }
	// Offset : 0x39993c
	protected override Int32 onExecute(TBTWorkingData wData) { }
	// Offset : 0x39a1b4
	private PlayerRequest HandleTerrainMove(Player p, RequestCache reqCache, HitObjectInfo hitInfo) { }
	// Offset : 0x39a098
	private Single GetRotationSign(Vector3 f, Vector3 dir) { }
	// Offset : 0x39a238
	private Void CheckAIStuck(PlayerRequest req, UserContextData userContextData, Player p, Single deltaTime) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class UserContextData : RequestCache
{
	// Fields
	public UInt32 lastPosTickCount; // 0x48
	public Vector3 lastMoveDirection; // 0x4c
	public Single rotationSign; // 0x58
	public Vector3 lastPos; // 0x5c
	public Int32 stuckCount; // 0x68

	// Properties

	// Methods
	// Offset : 0x39a468
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_FindTarget : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39a46c
	public Void .ctor() { }
	// Offset : 0x39a474
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x39aab8
	protected override Int32 onExecute(TBTWorkingData wData) { }
	// Offset : 0x39a940
	private AttackableEntity GetAimingAttackableEntity(HitObjectInfo hitObjectInfo) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class UserContextData : RequestCache
{
	// Fields
	public Single nextUpdateAimingTime; // 0x48

	// Properties

	// Methods
	// Offset : 0x39aac8
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_GiveWeapon : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39aacc
	public Void .ctor() { }
	// Offset : 0x39aad4
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x39ab90
	protected override Void onEnter(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_Idle : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39aee0
	public Void .ctor() { }
	// Offset : 0x39aee8
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_Parachuting : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39b018
	public Void .ctor() { }
	// Offset : 0x39b020
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_RandomMove : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39b26c
	public Void .ctor() { }
	// Offset : 0x39b274
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class UserContextData : RequestCache
{
	// Fields
	public Vector3 nextTarget; // 0x48

	// Properties

	// Methods
	// Offset : 0x39b6dc
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_Shoot : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39b6e0
	public Void .ctor() { }
	// Offset : 0x39b6e8
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_UpdateAiming : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39bb88
	public Void .ctor() { }
	// Offset : 0x39bb90
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_UserControl : AI_Base
{
	// Fields
	private Camera m_mainCam; // 0x28

	// Properties
	private Camera MainCam { get; }

	// Methods
	// Offset : 0x39bc7c
	public Void .ctor() { }
	// Offset : 0x39bc84
	private Camera get_MainCam() { }
	// Offset : 0x39bd10
	protected override Int32 onExecute(TBTWorkingData wData) { }
	// Offset : 0x39c1b0
	private Void SetFireState(Player p, UserControlHandler con, PlayerRequest req) { }
	// Offset : 0x39c034
	private Void CheckFiringState(Player p, UserControlHandler con, PlayerRequest req) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AI_UserControlSkydiving : AI_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39c27c
	public Void .ctor() { }
	// Offset : 0x39c284
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x39c308
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AICON_IsLocalPlayer : TBTPreconditionLeaf
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x398240
	public Void .ctor() { }
	// Offset : 0x398248
	public override Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AICON_IsTargetPhysXState : TBTPreconditionLeaf
{
	// Fields
	private EPhysXState m_TargetState; // 0x1c

	// Properties

	// Methods
	// Offset : 0x3982cc
	public Void .ctor(EPhysXState targetState) { }
	// Offset : 0x3982f8
	public override Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class AIConfigData : MonoBehaviour
{
	// Fields
	public List`1 Settings; // 0x18
	private Queue`1 m_AvailableQueue; // 0x20

	// Properties

	// Methods
	// Offset : 0x398398
	public Void .ctor() { }
	// Offset : 0x398408
	private Void Awake() { }
	// Offset : 0x39853c
	public Int32 GetAICount() { }
	// Offset : 0x39859c
	public AISetting PopAISetting() { }
	// Offset : 0x398634
	public AISetting CreateSettingBySystem() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class AISetting
{
	// Fields
	public GameObject BornPos; // 0x10
	public Single PatrolRadius; // 0x18
	public Vector3 BornPosV3; // 0x1c
	private Boolean m_BornPosCached; // 0x28

	// Properties

	// Methods
	// Offset : 0x3987f4
	public Void .ctor() { }
	// Offset : 0x39886c
	public Vector3 GetBornPos() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal static class PlayerAITreeFactory
{
	// Fields
	private static TBTAction m_PlayerTree; // 0x0
	private static TBTAction m_BotBattleTree; // 0x8
	private static TBTAction m_BotWaitingTree; // 0x10

	// Properties

	// Methods
	// Offset : 0x3ba5d0
	public static TBTAction GetPlayerTree() { }
	// Offset : 0x3ba14c
	public static TBTAction GetBotBattleTree() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class PlayerAIWorkingData : TBTWorkingData
{
	// Fields
	public Player Owner; // 0x18
	public TBlackBoard BlackBoard; // 0x20
	public UserControlHandler UserController; // 0x28
	public PlayerRequest OutputRequest; // 0x30
	public AISetting AIParam; // 0x38
	public Single GameTime; // 0x40
	public Single DeltaTime; // 0x44
	public UInt32 TickCount; // 0x48

	// Properties

	// Methods
	// Offset : 0x3ba144
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal abstract class AttackableEntity : Entity
{
	// Fields
	private Boolean m_IsDead; // 0x30
	protected Collider m_LockedAimingCollider; // 0x38
	private Collider <LockedAimingCollider>k__BackingField; // 0x40

	// Properties
	public Boolean IsDead { get; set; }
	public Collider LockedAimingCollider { get; set; }

	// Methods
	// Offset : 0x39dfb4
	protected Void .ctor() { }
	// Offset : 0x3997f8
	public Boolean get_IsDead() { }
	// Offset : 0x39e01c
	public Void set_IsDead(Boolean value) { }
	// Offset : 0x39e02c
	public virtual Vector3 GetAttackableCenterWS() { }
	// Offset : 0x39e060
	public virtual Single GetAttackableRadius() { }
	// Offset : 0x39db50
	public Collider get_LockedAimingCollider() { }
	// Offset : 0x39de8c
	public Void set_LockedAimingCollider(Collider value) { }
	// Offset : 0x39e06c
	public virtual Void TakeDamage(DamageInfo damageInfo) { }
	// Offset : 0x39e070
	public virtual Boolean IsVisible() { }
	// Offset : 0x39e0a4
	protected override Void OnStart() { }
	// Offset : 0x39e168
	protected override Void OnOnDestroy() { }
	// Offset : 0x39e028
	private Void OnDead() { }
	// Offset : 0x39e22c
	public virtual UInt32 GetAttackableID() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEV_Base : TBTActionLeaf
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39f988
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEV_Climb : BEV_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39f990
	public Void .ctor() { }
	// Offset : 0x39f998
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x39fa9c
	protected override Int32 onExecute(TBTWorkingData wData) { }
	// Offset : 0x39fc14
	private Boolean CanClimb(Player owner) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEV_Crouch : BEV_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39fe3c
	public Void .ctor() { }
	// Offset : 0x39fe44
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x39fef0
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEV_DoAction : BEV_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3a01e4
	public Void .ctor() { }
	// Offset : 0x3a01ec
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x3a0298
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEV_FallingHigh : BEV_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3a042c
	public Void .ctor() { }
	// Offset : 0x3a0434
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x3a04b8
	protected override Void onEnter(TBTWorkingData wData) { }
	// Offset : 0x3a0610
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEV_Fire : BEV_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3a0618
	public Void .ctor() { }
	// Offset : 0x3a0620
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x3a0698
	protected override Int32 onExecute(TBTWorkingData wData) { }
	// Offset : 0x3a0a04
	private Boolean CanFire(Player owner) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEV_Jump : BEV_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3a0a70
	public Void .ctor() { }
	// Offset : 0x3a0a78
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x3a0b24
	protected override Int32 onExecute(TBTWorkingData wData) { }
	// Offset : 0x3a0d14
	private Boolean CanJump(PlayerBevWorkingData bevData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEV_ReloadWeapon : BEV_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3a0d8c
	public Void .ctor() { }
	// Offset : 0x3a0d94
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x3a0e40
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEV_SwapWeapon : BEV_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3a0fa0
	public Void .ctor() { }
	// Offset : 0x3a0fa8
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x3a1054
	protected override Int32 onExecute(TBTWorkingData wData) { }
	// Offset : 0x3a11a8
	private Boolean CanSwapWeapon(PlayerBevWorkingData bevData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEV_Walking : BEV_Base
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3a11b0
	public Void .ctor() { }
	// Offset : 0x3a11b8
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x3a1264
	protected override Int32 onExecute(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEVCON_HasValidRequest : TBTPreconditionLeaf
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39f87c
	public Void .ctor() { }
	// Offset : 0x39f884
	public override Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class BEVCON_IsLocalPlayer : TBTPreconditionLeaf
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x39f8fc
	public Void .ctor() { }
	// Offset : 0x39f904
	public override Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal static class PlayerBevTreeFactory
{
	// Fields
	private static TBTAction m_PlayerTree; // 0x0

	// Properties

	// Methods
	// Offset : 0x3ba87c
	public static TBTAction GetTree() { }
	// Offset : 0x3c6f10
	private static TBTAction CreatePrioritizedNode(TBTPrecondition preCondition, TBTAction[] nodes) { }
	// Offset : 0x3c7000
	private static TBTAction CreateParallelNode(TBTPrecondition preCondition, TBTAction[] nodes) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class PlayerBevWorkingData : TBTWorkingData
{
	// Fields
	public Player Owner; // 0x18
	public PlayerRequest TargetRequest; // 0x20
	public PhysXData PhysXdata; // 0x28
	public AnimationSystemComponent NewAnimComponent; // 0x30
	public Single GameTime; // 0x38
	public Single DeltaTime; // 0x3c

	// Properties

	// Methods
	// Offset : 0x3ba874
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class Player : AttackableEntity, ICameraTrackableEntity
{
	// Fields
	protected Quaternion m_AimRotation; // 0x48
	protected CharacterController m_CharacterController; // 0x58
	protected TBlackBoard m_BlackBoard; // 0x60
	protected UserControlHandler m_UserControl; // 0x68
	protected Transform m_WeaponMountTF; // 0x70
	protected Transform m_HeadTF; // 0x78
	protected Transform m_HipTF; // 0x80
	protected PlayerAIWorkingData m_AIWorkingData; // 0x88
	protected TBTAction m_AITree; // 0x90
	protected PlayerBevWorkingData m_BevWorkingData; // 0x98
	protected TBTAction m_BevTree; // 0xa0
	protected NewPlayerAnimationSystemComponent m_NewAnimComponent; // 0xa8
	protected GameObject m_ParachuteGO; // 0xb0
	protected Parachute m_Parachute; // 0xb8
	protected InventoryManager m_InventoryManager; // 0xc0
	protected IAimAssist m_AimAssist; // 0xc8
	protected AvatarManager m_AvatarManager; // 0xd0
	protected AISetting m_AISetting; // 0xd8
	private List`1 m_EnterClimbingTriggers; // 0xe0
	private ClimbingTrigger m_CurrentClimbTrigger; // 0xe8
	private Int32 <CurHP>k__BackingField; // 0xf0
	private Int32 <MaxHP>k__BackingField; // 0xf4
	private Boolean <IsPrepareAttack>k__BackingField; // 0xf8
	private Boolean <IsAI>k__BackingField; // 0xf9
	protected UInt64 m_UserID; // 0x100
	protected PlayerID m_PlayerID; // 0x108
	private FollowCamera m_FollowCamera; // 0x110
	protected PlayerAudioComponent m_PlayerAudio; // 0x118
	private Boolean <IsFemale>k__BackingField; // 0x120
	protected Boolean m_IsCuring; // 0x121
	protected UInt32 m_CuringWeaponID; // 0x124
	private Single m_MaxBoneRotateAngle; // 0x128
	private Single m_IKEnalbeElapsedTime; // 0x12c
	private Single m_IKDisalbeElapsedTime; // 0x130
	private Vector3 m_IKLookAtPosition; // 0x134
	private Vector3 m_IKLookAtPositionPitch; // 0x140
	protected Transform m_SpineBone; // 0x150
	private Single lastCenterYdelta; // 0x158
	private Single m_LastUpdateAnimingTargetTime; // 0x15c
	public HitObjectInfo LastAimingInfoFromWeapon; // 0x160
	public AttackableEntity LastAimingTargetFromWeapon; // 0x168
	private Transform m_MainCameraTrans; // 0x170
	protected String m_TriggerName; // 0x178
	protected String m_TriggerTag; // 0x180
	protected List`1 m_PendingTriggers; // 0x188
	private Single m_ClimbStartTime; // 0x190
	private Single m_ClimbLength; // 0x194
	private Single m_CrossOverJumpTime; // 0x198
	private Single m_CrossOverFallTime; // 0x19c
	private Quaternion m_ClimbCameraLerpToRotation; // 0x1a0
	private Quaternion m_ClimbCameraLerpFromRotation; // 0x1b0
	private Quaternion m_ClimbPlayerFromRotation; // 0x1c0
	private Quaternion m_ClimbPlayerToRotation; // 0x1d0
	private ClimbingTrigger m_CachedCurrentClimbTrigger; // 0x1e0
	protected PhysXData m_PhysXData; // 0x1e8
	private const Single IPHONE_DPI; // 0x0
	private const Single MAX_ROTATION_DELTA; // 0x0
	private const Single ROTATION_EXPONENT; // 0x0
	private Dictionary`2 m_PhysXStates; // 0x1f0

	// Properties
	public NewPlayerAnimationSystemComponent NewAnimComponent { get; }
	public Int32 CurHP { get; set; }
	public Int32 MaxHP { get; set; }
	public Boolean IsPrepareAttack { get; set; }
	public Boolean IsAI { get; set; }
	public UInt64 UserID { get; set; }
	public PlayerID PlayerID { get; set; }
	public FollowCamera MyFollowCamera { get; }
	public PlayerAudioComponent PlayerAudio { get; }
	public Boolean IsFemale { get; set; }
	public Boolean IsCuring { get; }
	protected Transform SpineBoneTransform { get; }
	public Transform WeaponMountTF { get; }
	public Transform HeadTF { get; }
	public Transform MainCameraTransform { get; }
	public String TriggerName { get; }
	public Boolean IsReadyToClimb { get; }

	// Methods
	// Offset : 0x3b9310
	public Void .ctor() { }
	// Offset : 0x
	public static Player CreatePlayer(Transform container, UInt64 userID, PlayerID playerID, Boolean isAI) { }
	// Offset : 0x3b94c4
	public static Boolean IsLocalPlayer(UInt64 userID, PlayerID playerID) { }
	// Offset : 0x3b9578
	public NewPlayerAnimationSystemComponent get_NewAnimComponent() { }
	// Offset : 0x3b9580
	public Int32 get_CurHP() { }
	// Offset : 0x3b9588
	public Void set_CurHP(Int32 value) { }
	// Offset : 0x3b9590
	public Int32 get_MaxHP() { }
	// Offset : 0x3b9598
	public Void set_MaxHP(Int32 value) { }
	// Offset : 0x3b95a0
	public Boolean get_IsPrepareAttack() { }
	// Offset : 0x3b95a8
	public Void set_IsPrepareAttack(Boolean value) { }
	// Offset : 0x3b95b4
	public Boolean get_IsAI() { }
	// Offset : 0x3b95bc
	public Void set_IsAI(Boolean value) { }
	// Offset : 0x3b95c8
	public UInt64 get_UserID() { }
	// Offset : 0x3b95d0
	protected Void set_UserID(UInt64 value) { }
	// Offset : 0x3b95d8
	public PlayerID get_PlayerID() { }
	// Offset : 0x3b95e0
	protected Void set_PlayerID(PlayerID value) { }
	// Offset : 0x3b95e8
	public FollowCamera get_MyFollowCamera() { }
	// Offset : 0x3b96c0
	public PlayerAudioComponent get_PlayerAudio() { }
	// Offset : 0x3b9770
	protected override Void OnAwake() { }
	// Offset : 0x3b96b0
	public Boolean IsLocalPlayer() { }
	// Offset : 0x3b979c
	public UserControlHandler GetUserControlHandler() { }
	// Offset : 0x3b97a4
	public Boolean get_IsFemale() { }
	// Offset : 0x3b97ac
	protected Void set_IsFemale(Boolean value) { }
	// Offset : 0x3b97b8
	public virtual Vector3 GetHeadPosition() { }
	// Offset : 0x3b97e8
	public virtual Vector3 GetHipPosition() { }
	// Offset : 0x3b9818
	public override Vector3 GetAttackableCenterWS() { }
	// Offset : 0x3b9928
	public override Single GetAttackableRadius() { }
	// Offset : 0x3b9958
	public virtual Vector3 GetCharacterControllerTopPosition() { }
	// Offset : 0x3b99c0
	public Single GetCharacterControllerHeight() { }
	// Offset : 0x3b99f0
	public Vector3 GetCameraTrackableEntityPosition() { }
	// Offset : 0x3b9a24
	public Quaternion GetCameraTrackableEntityAimRotation() { }
	// Offset : 0x3b9a30
	public Vector3 GetCameraTrackableEntityTopPosition() { }
	// Offset : 0x3b9a74
	public Transform GetCameraTrackableEntityTransfrom() { }
	// Offset : 0x3b9a7c
	public Boolean IsCameraTrackableEntityAlive() { }
	// Offset : 0x3b9a9c
	protected Void Init() { }
	// Offset : 0x3bae24
	public Void InitProperties() { }
	// Offset : 0x3bb048
	public Void UpdateController(Single gameTime, Single deltaTime) { }
	// Offset : 0x3bb0b4
	public override Void OnUpdate(Single gameTime, Single deltaTime) { }
	// Offset : 0x3bb128
	protected Boolean IsIKEnable() { }
	// Offset : 0x3bb2b8
	public Boolean get_IsCuring() { }
	// Offset : 0x3bb2c0
	public virtual Void PlayCureAnimation(Boolean start) { }
	// Offset : 0x3bb490
	protected Transform get_SpineBoneTransform() { }
	// Offset : 0x3bb52c
	private Void LateUpdate() { }
	// Offset : 0x3bba90
	private Void OnDrawGizmos() { }
	// Offset : 0x3bb6cc
	protected Void UpdateBoneRotation() { }
	// Offset : 0x3bbd18
	protected Void RotateBoneToTarget(Transform bone, Single deltaRotateAngleX, Single deltaRotateAngleZ) { }
	// Offset : 0x3bc11c
	protected Void RotateBoneToTarget_Pitch(Transform bone, Single deltaRotateAngleX, Single deltaRotateAngleZ) { }
	// Offset : 0x3bc520
	public virtual Void UpdateAI(Single gameTime, Single deltaTime) { }
	// Offset : 0x3bc658
	public virtual Void UpdateBehavior(Single gameTime, Single deltaTime) { }
	// Offset : 0x3bc748
	public virtual Void UpdateKinematics(Single gameTime, Single deltaTime) { }
	// Offset : 0x3be9b4
	public virtual Void PostUpdate(Single gameTime, Single deltaTime) { }
	// Offset : 0x3bec84
	public virtual Void ResizeCapsuleCollider(Single height, Single radius, Single centerYdelta) { }
	// Offset : 0x3beecc
	public Boolean CheckCeiling(Single upDist) { }
	// Offset : 0x3bf104
	public Void StopParachuting() { }
	// Offset : 0x3bf430
	public Void StartParachuting() { }
	// Offset : 0x3bfa48
	public Transform get_WeaponMountTF() { }
	// Offset : 0x3bfa50
	public Transform get_HeadTF() { }
	// Offset : 0x3bfa58
	public InventoryManager GetInventoryManager() { }
	// Offset : 0x3bb460
	public Item GetItemOnHand() { }
	// Offset : 0x3bbb88
	public Weapon GetWeaponOnHand() { }
	// Offset : 0x3bfa60
	public Void SwapWeapon(EEquipSlot weaponSlot) { }
	// Offset : 0x3bfae8
	public Void SwapWeapon(Int32 prevOrNext) { }
	// Offset : 0x3bfbd0
	public Void OnStartChangeWeapon(Weapon w) { }
	// Offset : 0x3bfcec
	public Void OnWeaponChanged() { }
	// Offset : 0x3bfd1c
	public Boolean IsFiring() { }
	// Offset : 0x3bfd8c
	public virtual Void OnWeaponLift() { }
	// Offset : 0x3bfde0
	public virtual Void OnWeaponPutDown() { }
	// Offset : 0x3bfe2c
	public virtual Void OnWeaponReloadStarted(Single speedFactor) { }
	// Offset : 0x3bfe88
	public virtual Void OnWeaponReloadFinished() { }
	// Offset : 0x3bfe8c
	public Void OnWeaponReloadDone() { }
	// Offset : 0x3bff78
	public virtual Void StopFire(Weapon weapon) { }
	// Offset : 0x3bffa8
	public Quaternion GetAimRotation() { }
	// Offset : 0x3bffb4
	public Void SetLookAtTarget(Vector3 v) { }
	// Offset : 0x3c01b8
	public Void MountWeaponGameObject(Weapon w) { }
	// Offset : 0x3c0444
	public virtual Void SwitchAnimController() { }
	// Offset : 0x3c049c
	public virtual Void StartFiring(Weapon weapon) { }
	// Offset : 0x3c04a0
	public virtual Void PlayFireEffect(Weapon weapon) { }
	// Offset : 0x3bbc24
	public Transform get_MainCameraTransform() { }
	// Offset : 0x3c04ec
	public Vector3 GetWeaponTraceStartPos() { }
	// Offset : 0x3c064c
	private AttackableEntity GetAimingAttackableEntity() { }
	// Offset : 0x3c07d8
	public virtual Void UpdateAiming(Single gameTime, Single deltaTime, Boolean immediate) { }
	// Offset : 0x3c0ac8
	public GameObject GetGameObject() { }
	// Offset : 0x3c0ad0
	public Void AddHP(Int32 v) { }
	// Offset : 0x3c0c28
	public override Void TakeDamage(DamageInfo damageInfo) { }
	// Offset : 0x3c0d38
	public virtual Void TakeDamage(Int32 baseDamage, PlayerID damager, EColliderType hitColliderType, Int32 weaponDataID, Vector3 firePos, Vector3 hitPos) { }
	// Offset : 0x3c155c
	public Void Dead(Int32 weaponID, PlayerID damager, Boolean isHeadShot) { }
	// Offset : 0x3c18c8
	private Void DelPlayer() { }
	// Offset : 0x3c19a8
	public virtual Void ReloadWeapon() { }
	// Offset : 0x3c1a04
	public AvatarManager GetAvatarManager() { }
	// Offset : 0x3c1a0c
	public String get_TriggerName() { }
	// Offset : 0x3c1a14
	public Boolean IsInTrigger() { }
	// Offset : 0x3c1a8c
	public String GetTriggerName() { }
	// Offset : 0x3c1a94
	public String GetTriggerTag() { }
	// Offset : 0x3c1a9c
	public Void OnTriggerEnter(Collider other) { }
	// Offset : 0x3c285c
	public Void OnTriggerExit(Collider other) { }
	// Offset : 0x3c2f24
	private Void CheckAndCallPendingTrigger() { }
	// Offset : 0x3c2374
	private Void EnterTrigger(String triggerName, String triggerTag) { }
	// Offset : 0x3bec48
	private Void UpdateTrigger() { }
	// Offset : 0x3c3080
	private Void CheckClimbTrigger() { }
	// Offset : 0x3c3bcc
	public Void PauseAnimator() { }
	// Offset : 0x3c3c64
	public Void PlayAshot(ResourceID id, Boolean need3D, Single volume, ResourceID audiosource3d) { }
	// Offset : 0x3c3b5c
	public Boolean get_IsReadyToClimb() { }
	// Offset : 0x3c3de4
	public Void RequestStartClimb() { }
	// Offset : 0x3c4184
	public Void UpdateClimbCamera(Single gameTime, Single deltaTime) { }
	// Offset : 0x3c3ac0
	public Boolean CheckPhysPose_Climb() { }
	// Offset : 0x3c4334
	public Vector2 GetCrossOverSpeed(Single gameTime) { }
	// Offset : 0x3c4578
	private Boolean CheckClimbingStateValid(Single gameTime) { }
	// Offset : 0x3c460c
	public Void RequestEndClimb() { }
	// Offset : 0x3c4880
	public EPhysXState GetPhysXState() { }
	// Offset : 0x3c48ac
	public EPlayerPhysXPose GetPhysXPose() { }
	// Offset : 0x3bbcc8
	public Boolean IsCrouching() { }
	// Offset : 0x3c4900
	public Boolean IsParachuting() { }
	// Offset : 0x3c4938
	public Boolean IsFallingHigh() { }
	// Offset : 0x3bb1a0
	public Boolean IsFreeMove() { }
	// Offset : 0x3c4964
	public Boolean IsWalking() { }
	// Offset : 0x3c49a0
	public Vector3 GetVelocity() { }
	// Offset : 0x3c49d0
	private Vector3 ProcessRotation() { }
	// Offset : 0x3bca2c
	private Void UpdateRotation(Single gameTime, Single deltaTime) { }
	// Offset : 0x3bc934
	private Void SimDead(Single gameTime, Single deltaTime) { }
	// Offset : 0x3bd028
	private Void SimWalking(Single gameTime, Single deltaTime) { }
	// Offset : 0x3bd9cc
	private Void SimFalling(Single gameTime, Single deltaTime) { }
	// Offset : 0x3bdde8
	private Void SimParachuting(Single gameTime, Single deltaTime) { }
	// Offset : 0x3c4e7c
	private Void UpdateFallingPose(Boolean playJumpAnim) { }
	// Offset : 0x3c5194
	public virtual Void OnLandFinsish() { }
	// Offset : 0x3c51e0
	public Boolean HasHeuristicTarget() { }
	// Offset : 0x3c52d4
	private Void CheckAndCreatePhysXStateMachine() { }
	// Offset : 0x3b9fd8
	public Void InitStatus(EPhysXState newState, EPlayerPhysXPose targetPose) { }
	// Offset : 0x3c550c
	public virtual Void SwitchPhysXState(EPhysXState newState, EPlayerPhysXPose targetPose) { }
	// Offset : 0x3c57f4
	public virtual Void SwitchPhysXPose(EPlayerPhysXPose newPose) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
protected class PendingTriggerIAmIn
{
	// Fields
	public String TriggerName; // 0x10
	public String TriggerTag; // 0x18

	// Properties

	// Methods
	// Offset : 0x3c236c
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EPhysXState
{
	// Fields
	public Int32 value__; // 0x10
	public const EPhysXState Walking = 0; // 0x0
	public const EPhysXState Falling = 1; // 0x0
	public const EPhysXState Parachuting = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EPlayerPhysXPose
{
	// Fields
	public Int32 value__; // 0x10
	public const EPlayerPhysXPose EPHYSXPOSE_STANDING = 0; // 0x0
	public const EPlayerPhysXPose EPHYSXPOSE_CROUCHING = 1; // 0x0
	public const EPlayerPhysXPose EPHYSXPOSE_HIGHFALLING = 2; // 0x0
	public const EPlayerPhysXPose EPHYSXPOSE_LOWFALLING = 3; // 0x0
	public const EPlayerPhysXPose EPHYSXPOSE_CROSSOVER = 6; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class PhysXData
{
	// Fields
	private Player m_Owner; // 0x10
	private PhysXState <CurrPhysXStateClass>k__BackingField; // 0x18
	public Vector3 MovingDirection; // 0x20
	public Vector3 FallingDirection; // 0x2c
	public Single VSpeed; // 0x38
	public Single HSpeed; // 0x3c
	public Vector3 Velocity; // 0x40

	// Properties
	public PhysXState CurrPhysXStateClass { get; set; }
	public EPhysXState PhysXState { get; }
	public EPlayerPhysXPose PhysXPose { get; }
	public Boolean IsCrouching { get; }
	public Boolean IsFallHigh { get; }
	public Boolean IsFallLow { get; }
	public Boolean IsInCrossOver { get; }

	// Methods
	// Offset : 0x3b9f28
	public Void .ctor(Player owner) { }
	// Offset : 0x3c5710
	public PhysXState get_CurrPhysXStateClass() { }
	// Offset : 0x3c5be0
	private Void set_CurrPhysXStateClass(PhysXState value) { }
	// Offset : 0x3bcfd4
	public EPhysXState get_PhysXState() { }
	// Offset : 0x3c48e8
	public EPlayerPhysXPose get_PhysXPose() { }
	// Offset : 0x3bec08
	public Boolean get_IsCrouching() { }
	// Offset : 0x3bb204
	public Boolean get_IsFallHigh() { }
	// Offset : 0x3c5bf0
	public Boolean get_IsFallLow() { }
	// Offset : 0x3c232c
	public Boolean get_IsInCrossOver() { }
	// Offset : 0x3c5498
	public Void SetPhysXState(PhysXState newState) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public abstract class PhysXState
{
	// Fields
	protected EPlayerPhysXPose m_PhysXPose; // 0x10
	private Player <Owner>k__BackingField; // 0x18

	// Properties
	protected Player Owner { get; set; }

	// Methods
	// Offset : 0x3c586c
	public Void .ctor(Player owner) { }
	// Offset : 0x3c5b78
	protected Player get_Owner() { }
	// Offset : 0x3c5c34
	private Void set_Owner(Player value) { }
	// Offset : 0x
	public abstract EPhysXState GetPhysXStateType() { }
	// Offset : 0x3c5be8
	public EPlayerPhysXPose GetPhysXPose() { }
	// Offset : 0x3c54a0
	public Void Enter(EPhysXState prevState, EPlayerPhysXPose prevPose, EPlayerPhysXPose newPose) { }
	// Offset : 0x3c5718
	public Void ChangePose(EPlayerPhysXPose newPose) { }
	// Offset : 0x3c57a8
	public Void Exit(EPhysXState newState, EPlayerPhysXPose newPose) { }
	// Offset : 0x3c5c3c
	protected Void StartPose(EPhysXState prevState, EPlayerPhysXPose prevPose, EPlayerPhysXPose newPose) { }
	// Offset : 0x3c5f24
	protected Void StopPose(EPhysXState newState, EPlayerPhysXPose newPose) { }
	// Offset : 0x3c5f7c
	protected virtual Void OnExit(EPhysXState newState) { }
	// Offset : 0x3c5f80
	protected virtual Void OnEnter(EPhysXState prevState) { }
	// Offset : 0x3c5f84
	protected virtual Void OnStopPose(EPhysXState newState, EPlayerPhysXPose newPose) { }
	// Offset : 0x3c5f88
	protected virtual Void OnStartPose(EPhysXState prevState, EPlayerPhysXPose prevPose) { }
	// Offset : 0x3c5f8c
	protected virtual Boolean CheckPoseValid(EPlayerPhysXPose newPose) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class WalkingState : PhysXState
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3c5414
	public Void .ctor(Player owner) { }
	// Offset : 0x3c5f98
	public override EPhysXState GetPhysXStateType() { }
	// Offset : 0x3c5fa0
	protected override Boolean CheckPoseValid(EPlayerPhysXPose newPose) { }
	// Offset : 0x3c5fbc
	protected override Void OnStopPose(EPhysXState newState, EPlayerPhysXPose newPose) { }
	// Offset : 0x3c5fcc
	protected override Void OnStartPose(EPhysXState prevState, EPlayerPhysXPose prevPose) { }
	// Offset : 0x3c5ff4
	private Void OnStartStanding(EPhysXState prevState, EPlayerPhysXPose prevPose) { }
	// Offset : 0x3c61f0
	private Void OnStartCrouching(EPhysXState prevState, EPlayerPhysXPose prevPose) { }
	// Offset : 0x3c6230
	private Void OnStartCrossOver(EPhysXState prevState, EPlayerPhysXPose prevPose) { }
	// Offset : 0x3c5fc4
	private Void OnStopCrouching(EPhysXState newState, EPlayerPhysXPose newPose) { }
	// Offset : 0x3c5fc0
	private Void OnStopStanding(EPhysXState newState, EPlayerPhysXPose newPose) { }
	// Offset : 0x3c5fc8
	private Void OnStopCrossOver(EPhysXState newState, EPlayerPhysXPose newPose) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class FallingState : PhysXState
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3c5440
	public Void .ctor(Player owner) { }
	// Offset : 0x3c5898
	public override EPhysXState GetPhysXStateType() { }
	// Offset : 0x3c58a0
	protected override Void OnExit(EPhysXState newState) { }
	// Offset : 0x3c58a4
	protected override Boolean CheckPoseValid(EPlayerPhysXPose newPose) { }
	// Offset : 0x3c58c4
	protected override Void OnStartPose(EPhysXState prevState, EPlayerPhysXPose prevPose) { }
	// Offset : 0x3c58ec
	private Void OnStartStanding(EPhysXState prevState, EPlayerPhysXPose prevPose) { }
	// Offset : 0x3c5a7c
	private Void OnStartHighFalling(EPhysXState prevState, EPlayerPhysXPose prevPose) { }
	// Offset : 0x3c5b38
	private Void OnStartLowFalling(EPhysXState prevState, EPlayerPhysXPose prevPose) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class ParachutingState : PhysXState
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3c546c
	public Void .ctor(Player owner) { }
	// Offset : 0x3c5b80
	public override EPhysXState GetPhysXStateType() { }
	// Offset : 0x3c5b88
	protected override Void OnEnter(EPhysXState prevState) { }
	// Offset : 0x3c5bb4
	protected override Void OnExit(EPhysXState newState) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal static class PlayerBBKey
{
	// Fields
	public const String BBKEY_TARGET_POS_TICK; // 0x0
	public const String BBKEY_TARGET_POS; // 0x0
	public const String BBKEY_SHOOT_TARGET; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public struct PlayerID : IEquatable`1
{
	// Fields
	private readonly UInt32 m_Value; // 0x10
	public static readonly PlayerID INVALID; // 0x0
	public static readonly UInt32 LOCALPLAYER; // 0x4

	// Properties

	// Methods
	// Offset : 0x299dd8
	private Void .ctor(UInt32 value) { }
	// Offset : 0x3c7130
	public static UInt32 op_Implicit(PlayerID id) { }
	// Offset : 0x3c7134
	public static PlayerID op_Implicit(UInt32 value) { }
	// Offset : 0x3c18bc
	public static Boolean op_Equality(PlayerID a, PlayerID b) { }
	// Offset : 0x3c713c
	public static Boolean op_Inequality(PlayerID a, PlayerID b) { }
	// Offset : 0x299de0
	public override String ToString() { }
	// Offset : 0x299e0c
	public Boolean Equals(PlayerID other) { }
	// Offset : 0x299e1c
	public override Boolean Equals(Object obj) { }
	// Offset : 0x299e24
	public override Int32 GetHashCode() { }
	// Offset : 0x299e50
	public Byte GetTeamID() { }
	// Offset : 0x299e58
	public UInt32 GetID() { }
	// Offset : 0x299e64
	public UInt64 GetIDMask() { }
	// Offset : 0x3c72a4
	public static PlayerID CreateFromTeamAndPlayer(Byte teamID, UInt32 playerID) { }
	// Offset : 0x3c7318
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal enum EPlayerRequestType
{
	// Fields
	public Int32 value__; // 0x10
	public const EPlayerRequestType WALKING = 0; // 0x0
	public const EPlayerRequestType JUMP = 1; // 0x0
	public const EPlayerRequestType CROUCH = 2; // 0x0
	public const EPlayerRequestType DOACTION = 3; // 0x0
	public const EPlayerRequestType SWAPWEAPON = 4; // 0x0
	public const EPlayerRequestType RELOADWEAPON = 5; // 0x0
	public const EPlayerRequestType CLIMB = 6; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal abstract class PlayerRequest
{
	// Fields
	public EFireState FiringState; // 0x10
	public Vector3 MovingDirection; // 0x14

	// Properties

	// Methods
	// Offset : 0x3c7378
	protected Void .ctor() { }
	// Offset : 0x
	public abstract EPlayerRequestType GetRequestType() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EFireState
{
	// Fields
	public Int32 value__; // 0x10
	public const EFireState NONE = 0; // 0x0
	public const EFireState FIRING = 1; // 0x0
	public const EFireState CANCEL = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class PlayerRequestWalking : PlayerRequest
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3c73e0
	public Void .ctor() { }
	// Offset : 0x3c73e8
	public override EPlayerRequestType GetRequestType() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class PlayerRequestJump : PlayerRequest
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3c73b0
	public Void .ctor() { }
	// Offset : 0x3c73b8
	public override EPlayerRequestType GetRequestType() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class PlayerRequestCrouch : PlayerRequest
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3c7390
	public Void .ctor() { }
	// Offset : 0x3c7398
	public override EPlayerRequestType GetRequestType() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class PlayerRequestDoAction : PlayerRequest
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3c73a0
	public Void .ctor() { }
	// Offset : 0x3c73a8
	public override EPlayerRequestType GetRequestType() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class PlayerRequestSwapWeapon : PlayerRequest
{
	// Fields
	public Int32 DeltaWeaponIndex; // 0x20

	// Properties

	// Methods
	// Offset : 0x3c73d0
	public Void .ctor() { }
	// Offset : 0x3c73d8
	public override EPlayerRequestType GetRequestType() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class PlayerRequestReloadWeapon : PlayerRequest
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3c73c0
	public Void .ctor() { }
	// Offset : 0x3c73c8
	public override EPlayerRequestType GetRequestType() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class PlayerRequestClimb : PlayerRequest
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3c7380
	public Void .ctor() { }
	// Offset : 0x3c7388
	public override EPlayerRequestType GetRequestType() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AvatarManager
{
	// Fields
	protected const UInt32 ISVISIBLE_PLAYER; // 0x0
	protected const UInt32 ISVISIBLE_WEAPON; // 0x0
	private Dictionary`2 m_AvatarSlotDic; // 0x10
	private Transform m_LeftWeaponMountTF; // 0x18
	private Transform m_RightWeaponMountTF; // 0x20
	private Transform m_BottomWeaponMountTF; // 0x28
	private Dictionary`2 m_AvatarSubSlotDic; // 0x30
	private Dictionary`2 m_BackWeaponDic; // 0x38
	private Player <OwnerPlayer>k__BackingField; // 0x40

	// Properties
	public Player OwnerPlayer { get; set; }

	// Methods
	// Offset : 0x39e4f0
	public Void .ctor() { }
	// Offset : 0x39e9f8
	public Player get_OwnerPlayer() { }
	// Offset : 0x39ea00
	private Void set_OwnerPlayer(Player value) { }
	// Offset : 0x39ea08
	public Void Init(Player owner) { }
	// Offset : 0x39ead8
	public Void SetVisible(Boolean v, Boolean releaseTexture) { }
	// Offset : 0x39ec78
	public Void OnSyncAvatarEquip(Item item) { }
	// Offset : 0x39eeec
	public Void OnSyncAvatarUnEquip(Item item) { }
	// Offset : 0x39efc8
	public Void OnSyncDropItem(Item item) { }
	// Offset : 0x39f10c
	private Boolean ShouldShowSlotBackMount(InventoryManager invM, EEquipSlot slot) { }
	// Offset : 0x39eddc
	public Void RefreshBackMountWeapon() { }
	// Offset : 0x39f17c
	private Void UpdateWeaponSlot(EAvatarSlots mountSlot, Item item) { }
	// Offset : 0x39f878
	public Void OnSyncSwapWeapon() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EAvatarSlots
{
	// Fields
	public Int32 value__; // 0x10
	public const EAvatarSlots None = 4294967295; // 0x0
	public const EAvatarSlots BackMount = 0; // 0x0
	public const EAvatarSlots Eyes = 1; // 0x0
	public const EAvatarSlots Head = 2; // 0x0
	public const EAvatarSlots Feet = 3; // 0x0
	public const EAvatarSlots Hands = 4; // 0x0
	public const EAvatarSlots InnerMouth = 5; // 0x0
	public const EAvatarSlots Legs = 6; // 0x0
	public const EAvatarSlots Torso = 7; // 0x0
	public const EAvatarSlots BackMountLeft = 8; // 0x0
	public const EAvatarSlots BackMountRight = 9; // 0x0
	public const EAvatarSlots BagPack = 10; // 0x0
	public const EAvatarSlots Vest = 11; // 0x0
	public const EAvatarSlots Helmet = 12; // 0x0
	public const EAvatarSlots Legpack = 13; // 0x0
	public const EAvatarSlots ParachuteBag = 14; // 0x0
	public const EAvatarSlots BackMountBottom = 15; // 0x0
	public const EAvatarSlots Hair = 16; // 0x0
	public const EAvatarSlots MAX = 17; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class BackWeaponData
{
	// Fields
	public GameObject weaponObject; // 0x10
	public BitArrayBoolean isVisible; // 0x18

	// Properties

	// Methods
	// Offset : 0x39f870
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal enum EEquipSlot
{
	// Fields
	public Int32 value__; // 0x10
	public const EEquipSlot PrimaryWeapon1 = 0; // 0x0
	public const EEquipSlot PrimaryWeapon2 = 1; // 0x0
	public const EEquipSlot SecondaryWeapon = 2; // 0x0
	public const EEquipSlot ExplosiveWeapon = 3; // 0x0
	public const EEquipSlot MeleeWeapon = 4; // 0x0
	public const EEquipSlot Helmet = 5; // 0x0
	public const EEquipSlot Bag = 6; // 0x0
	public const EEquipSlot Vest = 7; // 0x0
	public const EEquipSlot Package = 8; // 0x0
	public const EEquipSlot AvatarGeneral = 9; // 0x0
	public const EEquipSlot Loadout = 10; // 0x0
	public const EEquipSlot Camouflage = 11; // 0x0
	public const EEquipSlot Building = 12; // 0x0
	public const EEquipSlot Landmine = 13; // 0x0
	public const EEquipSlot MAX = 14; // 0x0
	public const EEquipSlot FirstEquipment = 5; // 0x0
	public const EEquipSlot LastEquipment = 9; // 0x0
	public const EEquipSlot EquipmentSLotCount = 5; // 0x0
	public const EEquipSlot Unknown = 4294967295; // 0x0
	public const EEquipSlot Empty = 15; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class InventoryManager
{
	// Fields
	private const Int32 CONSUMABLE_AR_AMMO; // 0x0
	public static readonly List`1 SlotList; // 0x0
	private Player <OwnerPlayer>k__BackingField; // 0x10
	private Dictionary`2 m_AllItems; // 0x18
	private Dictionary`2 m_AllItemsByDataID; // 0x20
	private Item[] m_EquippedItems; // 0x28
	private Item <ItemOnHand>k__BackingField; // 0x30
	private EEquipSlot m_LastWeaponSlot; // 0x38
	private Int32 m_MedkitCount; // 0x3c
	private Int32 m_MaxCapacity; // 0x40
	private Int32 m_CurCapacity; // 0x44

	// Properties
	public Player OwnerPlayer { get; set; }
	public Item ItemOnHand { get; set; }
	public Int32 MedkitCount { get; }
	public Int32 MaxCapacity { get; }
	public Int32 CurCapacity { get; }

	// Methods
	// Offset : 0x3a84dc
	public Void .ctor() { }
	// Offset : 0x3a8594
	public Player get_OwnerPlayer() { }
	// Offset : 0x3a859c
	public Void set_OwnerPlayer(Player value) { }
	// Offset : 0x39f174
	public Item get_ItemOnHand() { }
	// Offset : 0x3a85a4
	public Void set_ItemOnHand(Item value) { }
	// Offset : 0x3a85ac
	public Int32 get_MedkitCount() { }
	// Offset : 0x3a85b4
	public Int32 get_MaxCapacity() { }
	// Offset : 0x3a85bc
	public Int32 get_CurCapacity() { }
	// Offset : 0x3a85c4
	public Void Init(Player player) { }
	// Offset : 0x3a8648
	public Boolean SyncChangeEquipment(UInt32 uniqueID, UInt32 dataID, EEquipSlot slotId, Boolean equipOrNot, Object[] InExtraParams) { }
	// Offset : 0x3a8834
	private Item SyncFindItemSafe(UInt32 uniqueID, UInt32 dataID, Object[] InExtraParams) { }
	// Offset : 0x3a8c64
	public Boolean SyncChangeWeapon(UInt32 uniqueID, UInt32 dataID) { }
	// Offset : 0x39ae9c
	public Boolean ChangeItemOnHand(EEquipSlot slot) { }
	// Offset : 0x3a8f0c
	public Boolean SwapItemOnHand(Int32 deltaIndex) { }
	// Offset : 0x3a912c
	private Boolean SwapItemOnHandQuick() { }
	// Offset : 0x39ad8c
	public Boolean DoActionPickupItemOffline(UInt32 uniqueNetId, UInt32 dataId, UInt32 count) { }
	// Offset : 0x3a9184
	public Boolean DoActionPickupItem(PickUp pickup, ResourceID soundID) { }
	// Offset : 0x3aa30c
	public Boolean DoActionQuickUseMedkit() { }
	// Offset : 0x3aa8b8
	public Boolean DoActionUseConsumable(ConsumableData consumableData, Int32 requestCount, out Int32 usedCount, UInt32 weaponUniqueNetID) { }
	// Offset : 0x3aadfc
	public Boolean DoActionCancelUse(UInt32 uniqueID) { }
	// Offset : 0x3aae04
	public Boolean DoActionEndUse(UInt32 uniqueID, Int32 usedCount) { }
	// Offset : 0x3aa52c
	public Boolean DoActionUseConsumable(UInt32 uniqueID, Int32 requestCount, out Int32 usedCount, UInt32 weaponUniqueNetID) { }
	// Offset : 0x39ae68
	public Boolean DoActionEquipItem(UInt32 uniqueID, EEquipSlot slot) { }
	// Offset : 0x3aafec
	public Boolean DoActionUnEquipItem(Item InItem) { }
	// Offset : 0x3a9788
	public Boolean DoActionDropItem(Item dropItem, Int32 count) { }
	// Offset : 0x3ab27c
	public Int32 GetConsumableCount(ConsumableData consumableData) { }
	// Offset : 0x3a9518
	public Item GetItemByID(UInt32 uniqueID) { }
	// Offset : 0x3ab330
	public Item GetItemByDataID(UInt32 dataID) { }
	// Offset : 0x3ab4b4
	public Boolean HasItemByDataID(UInt32 dataID) { }
	// Offset : 0x3a8d18
	private Boolean ChangeItemOnHand(Item newItem) { }
	// Offset : 0x39a8dc
	public Item GetItemInSlot(EEquipSlot slot) { }
	// Offset : 0x3ab4d0
	public static Item CreateItem(ItemData itemData, Boolean isAutonomousProxy) { }
	// Offset : 0x3a88f8
	public Item InstantiateItem(UInt32 uniqueNetId, UInt32 dataId, UInt32 count, ItemData itemData, Object[] extraParams) { }
	// Offset : 0x3a8a5c
	private Boolean AddToInventory(Item item) { }
	// Offset : 0x3aacc4
	private Boolean RemoveFromInventory(Item item) { }
	// Offset : 0x3aa20c
	private Boolean UpdateInventoryCount(Item item, Int32 count) { }
	// Offset : 0x3a9d18
	private Boolean EquipItem(Item item, EEquipSlot targetSlot, Boolean updateAvatar) { }
	// Offset : 0x3aaff8
	private Boolean UnequipItem(Item item, Boolean updateAvatar, Boolean checkItemOnHand) { }
	// Offset : 0x3ab684
	private Void OnInventoryDirty(Item itemChanged) { }
	// Offset : 0x3ab964
	private Void RefreshMedkitCount(Item itemChanged) { }
	// Offset : 0x39914c
	public Int32 GetEquippedWeaponCount() { }
	// Offset : 0x3ab688
	private Boolean IsOwnedItem(Item item) { }
	// Offset : 0x3ab958
	private Boolean IsValidEquipSlot(EEquipSlot targetSlot) { }
	// Offset : 0x3abc28
	private Boolean IsSlotEmpty(EEquipSlot targetSlot) { }
	// Offset : 0x3a9c8c
	private Boolean IsWeaponSlot(EEquipSlot InSlot) { }
	// Offset : 0x3a95a0
	public EEquipSlot FindMatchingItemSlot(ItemData InItemData) { }
	// Offset : 0x3a9708
	private Boolean CanEquip(ItemData itemData, EEquipSlot targetSlot) { }
	// Offset : 0x3abc9c
	private Boolean IsWeaponAmmo(EEquipSlot slot, UInt32 dataID) { }
	// Offset : 0x3abd7c
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class InventoryInfoByDataID
{
	// Fields
	public Dictionary`2 Items; // 0x10
	public Int32 TotalCount; // 0x18

	// Properties

	// Methods
	// Offset : 0x3ab580
	public Void .ctor() { }
	// Offset : 0x3ab5f8
	public Void AddItem(Item item) { }
	// Offset : 0x3ab770
	public Void RemoveItem(Item item) { }
	// Offset : 0x3ab800
	public Void RefreshTotalCount() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class ItemBase
{
	// Fields
	public static readonly UInt32 UNKNOWN_NET_ID; // 0x0
	public UInt32 UniqueNetID; // 0x10
	public ItemData mItemData; // 0x18
	private Int32 <Count>k__BackingField; // 0x20

	// Properties
	public Int32 Count { get; set; }
	public Int32 Capacity { get; }

	// Methods
	// Offset : 0x3abf40
	public Void .ctor() { }
	// Offset : 0x3aacbc
	public Int32 get_Count() { }
	// Offset : 0x3ab7f8
	public Void set_Count(Int32 value) { }
	// Offset : 0x3ac080
	public Int32 get_Capacity() { }
	// Offset : 0x3ac0b4
	public virtual String GetItemName() { }
	// Offset : 0x3aa4e4
	public EItemType GetItemType() { }
	// Offset : 0x3aac74
	public UInt32 GetItemDataID() { }
	// Offset : 0x3ac148
	public Int32 GetItemStackCount() { }
	// Offset : 0x3ac190
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class Item : ItemBase
{
	// Fields
	public EEquipSlot EquipSlot; // 0x24
	private Player <Owner>k__BackingField; // 0x28

	// Properties
	public Player Owner { get; set; }

	// Methods
	// Offset : 0x3a2b00
	public Void .ctor() { }
	// Offset : 0x3abfbc
	public Player get_Owner() { }
	// Offset : 0x3abfc4
	protected Void set_Owner(Player value) { }
	// Offset : 0x3abfcc
	public virtual Boolean InitForPickup(Player owner, UInt32 InUniqueId, UInt32 count, ItemData InItemData, Object[] InExtraParams) { }
	// Offset : 0x3abfe8
	public virtual Boolean HasBoundWithOwner() { }
	// Offset : 0x3abff0
	public virtual Boolean BindWithOwner() { }
	// Offset : 0x3abff8
	public virtual Void UnbindFromOwner() { }
	// Offset : 0x3ab1e4
	public Boolean IsEquippedOnPlayer() { }
	// Offset : 0x3ac000
	public virtual Void Equip(EEquipSlot targetSlot) { }
	// Offset : 0x3ac008
	public virtual Void Unequip() { }
	// Offset : 0x3ac014
	public virtual Void DeActive() { }
	// Offset : 0x3ac060
	public virtual Void Active() { }
	// Offset : 0x3ac064
	public virtual Void StartUsing(Single gameTime) { }
	// Offset : 0x3ac068
	public virtual Void StopUsing(Boolean bCancel, Boolean instant) { }
	// Offset : 0x3ac06c
	public virtual Void StartSighting() { }
	// Offset : 0x3ac070
	public virtual Void StopSighting() { }
	// Offset : 0x3ac074
	public virtual Void PreparNextSniperFiring(Boolean InToSet) { }
	// Offset : 0x3ac078
	public virtual Void Update(Single gameTime, Single deltaTime) { }
	// Offset : 0x3ac07c
	public virtual Void SetVisible(Boolean bVisible) { }
	// Offset : 0x3a9178
	public static Boolean op_Implicit(Item exists) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class Consumable : Item
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3a2afc
	public Void .ctor() { }
	// Offset : 0x3a2b6c
	public EConsumableType GetConsumableType() { }
	// Offset : 0x3a2ba8
	public ConsumableData GetConsumableData() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public enum EItemType
{
	// Fields
	public Int32 value__; // 0x10
	public const EItemType Invalid = 4294967295; // 0x0
	public const EItemType Weapon = 0; // 0x0
	public const EItemType Consumable = 1; // 0x0
	public const EItemType MAX = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class ItemData : CSVBaseData
{
	// Fields
	public static readonly Int32 INVALID_ID; // 0x0
	public Boolean bErrorData; // 0x10
	public UInt32 iID; // 0x14
	public String strName; // 0x18
	public String strDesc; // 0x20
	public EItemType eItemType; // 0x28
	public Boolean bInBagOrNot; // 0x2c
	public Boolean bCanDropOrNot; // 0x2d
	public Int32 iLevel; // 0x30
	public ResourceID resIcon; // 0x34
	public ResourceID resShowImage; // 0x38
	public ResourceID resModel; // 0x3c
	public ResourceID resModelFemale; // 0x40
	public ResourceID pickupModel; // 0x44
	public Int32 iStackLimit; // 0x48
	public Int32 iCapacity; // 0x4c
	public WeaponData mWeaponData; // 0x50
	public ConsumableData mConsumableData; // 0x58
	public UInt32 iAvatarId; // 0x60

	// Properties

	// Methods
	// Offset : 0x3ac194
	public Void .ctor() { }
	// Offset : 0x3aac6c
	public UInt32 GetId() { }
	// Offset : 0x3ac1d4
	public String GetItemName() { }
	// Offset : 0x3abc94
	public EItemType GetItemType() { }
	// Offset : 0x3ac1dc
	public override String GetPrimaryKey() { }
	// Offset : 0x3ac1e8
	public override Void ParseData(Int64 index, Int32 fieldCount, String[] headers, String[] values) { }
	// Offset : 0x3adb88
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public enum EConsumableType
{
	// Fields
	public Int32 value__; // 0x10
	public const EConsumableType Ammo = 0; // 0x0
	public const EConsumableType Bandage = 1; // 0x0
	public const EConsumableType MAX = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class ConsumableData : CSVBaseData
{
	// Fields
	public ItemData mItemData; // 0x10
	public UInt32 iID; // 0x18
	public EConsumableType eConsumableType; // 0x1c
	public ResourceID resAnim; // 0x20
	public Int32 iHealth; // 0x24
	public Int32 iEffectiveTimeIntervalInSec; // 0x28
	public Int32 iDurationTimeInSec; // 0x2c
	public Single fPreTimeInSec; // 0x30
	public Int32 iEnerge; // 0x34

	// Properties

	// Methods
	// Offset : 0x3a2bd4
	public Void .ctor() { }
	// Offset : 0x3a2c4c
	public UInt32 GetId() { }
	// Offset : 0x3a2c54
	public override String GetPrimaryKey() { }
	// Offset : 0x3a2c60
	public override Void ParseData(Int64 index, Int32 fieldCount, String[] headers, String[] values) { }
	// Offset : 0x3a3014
	public Boolean IsMedkit() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AvatarData : CSVBaseData
{
	// Fields
	public ItemData mItemData; // 0x10
	public UInt32 iID; // 0x18
	public Int32 avatarSlotKey; // 0x1c
	public UInt32[] avatarSlots; // 0x20
	public String itemStr; // 0x28
	private String[] recipeArray; // 0x30
	private String[] recipeArray_N; // 0x38
	private String[] recipeArray_F; // 0x40
	private String[] recipeArray_F_N; // 0x48
	public UInt32 level; // 0x50
	public ResourceID weaponModel; // 0x54

	// Properties

	// Methods
	// Offset : 0x39e234
	public Void .ctor() { }
	// Offset : 0x39e23c
	public UInt32 GetId() { }
	// Offset : 0x39e244
	public override String GetPrimaryKey() { }
	// Offset : 0x39e250
	public override Void ParseData(Int64 index, Int32 fieldCount, String[] headers, String[] values) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class ItemManager : SingletonModule`1
{
	// Fields
	private Dictionary`2 m_dictIdToItemData; // 0x18
	private Dictionary`2 m_dictIdToWeaponData; // 0x20
	private Dictionary`2 m_dictIdToConsumableData; // 0x28
	private Dictionary`2 m_dictIdToAvatarData; // 0x30

	// Properties

	// Methods
	// Offset : 0x3adbdc
	public Void .ctor() { }
	// Offset : 0x3adcec
	protected override Void OnCleanup() { }
	// Offset : 0x3addcc
	protected override Void OnInit() { }
	// Offset : 0x3a31c0
	public ItemData FindItemDataById(UInt32 InId) { }
	// Offset : 0x3ada78
	public WeaponData FindWeapoonDataById(UInt32 InId) { }
	// Offset : 0x3ae508
	public Object GetWeaponModelResById(UInt32 InId) { }
	// Offset : 0x3adb00
	public ConsumableData FindConsumableDataById(UInt32 InId) { }
	// Offset : 0x39ed54
	public AvatarData FindAvatarDataById(UInt32 InId) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class Weapon : Item
{
	// Fields
	public static readonly Int32 EDEFAULTITEM_DATAID; // 0x0
	private WeaponFireComponent <FireComponent>k__BackingField; // 0x30
	protected WeaponStateMachine m_StateMachine; // 0x38
	protected WeaponData m_WeaponData; // 0x40
	protected WeaponParams m_WeaponParams; // 0x48
	protected UInt32 m_WeaponSkinId; // 0xb8
	public Boolean UpdateOwnerAnim; // 0xbc
	private Boolean <IsHoldingFireForSingleShot>k__BackingField; // 0xbd
	private Int32 <AmmoLeftInCurrentClip>k__BackingField; // 0xc0
	protected Single m_FireScatterFactor; // 0xc4
	protected Int32 m_FireShoted; // 0xc8
	protected UInt32 m_LastFireTickCount; // 0xcc
	protected UInt32 m_LastFireTickCountNotIncludedCurTime; // 0xd0
	protected UInt32 m_LastFireTickCountNotIncluded; // 0xd4
	protected Single m_FireDuration; // 0xd8
	protected Transform m_WeaponFirePointTF; // 0xe0
	protected GameObject m_WeaponGO; // 0xe8
	protected RuntimeAnimatorController m_WeaponAnimCtrl; // 0xf0
	protected UInt32 INNER_VISIBLE; // 0xf8
	protected UInt32 EXTERNAL_VISIBLE; // 0xfc
	protected UInt32 DYING_VISIBLE; // 0x100
	protected UInt32 INCAR_VISIBLE; // 0x104
	protected UInt32 SWIMMING_VISIBLE; // 0x108
	protected UInt32 ONSTROP_VISIBLE; // 0x10c
	protected UInt32 CURE_VISIBLE; // 0x110
	protected BitArrayBoolean m_WeaponVisibility; // 0x118
	private GameObject m_FireEffectGO; // 0x120
	private Single slope; // 0x128

	// Properties
	public WeaponFireComponent FireComponent { get; set; }
	public virtual Single Range { get; }
	public Single Angle { get; }
	public Boolean IsHoldingFireForSingleShot { get; set; }
	public Single Delay { get; }
	public Int32 AmmoCapacity { get; }
	public Int32 ClipSize { get; }
	public Boolean IsSilenced { get; }
	public Int32 AmmoLeftInCurrentClip { get; set; }
	public virtual Int32 NumAmmoLeft { get; }
	public Int32 TotalAmmoLeft { get; }
	public Single FireInterval { get; }
	public Single RepeatFireInterval { get; }
	public Int32 WeaponSubType { get; }
	public virtual EWeaponType WeaponType { get; }
	public Int32 Damage { get; }
	public Int32 OnceAmmo { get; }
	public virtual Single PlayerSpeedFactor { get; }
	public virtual Single PlayerSpeedFactorFiring { get; }
	public String WeaponName { get; }
	public Boolean FlagNeedLiftOnFire { get; }
	public Boolean CanAutoFire { get; }
	public Boolean FlagNeedWhizBySound { get; }
	public Int32 FireShoted { get; }
	public GameObject WeaponGO { get; }
	public RuntimeAnimatorController WeaponAnimCtrl { get; }

	// Methods
	// Offset : 0x37edf8
	public Void .ctor() { }
	// Offset : 0x37eef4
	public WeaponFireComponent get_FireComponent() { }
	// Offset : 0x37eefc
	protected Void set_FireComponent(WeaponFireComponent value) { }
	// Offset : 0x37ef04
	public WeaponData GetWeaponData() { }
	// Offset : 0x37ef0c
	public virtual Single get_Range() { }
	// Offset : 0x37ef14
	public Single get_Angle() { }
	// Offset : 0x37ef1c
	public Boolean get_IsHoldingFireForSingleShot() { }
	// Offset : 0x37ef24
	public Void set_IsHoldingFireForSingleShot(Boolean value) { }
	// Offset : 0x37ef30
	public Int32 GetRepeatPerShot() { }
	// Offset : 0x37ef54
	public Boolean RepeatFinished() { }
	// Offset : 0x37ef94
	public Single get_Delay() { }
	// Offset : 0x37a460
	public Int32 get_AmmoCapacity() { }
	// Offset : 0x37ef9c
	public Int32 get_ClipSize() { }
	// Offset : 0x37efa4
	public Boolean get_IsSilenced() { }
	// Offset : 0x37a458
	public Int32 get_AmmoLeftInCurrentClip() { }
	// Offset : 0x37efac
	public Void set_AmmoLeftInCurrentClip(Int32 value) { }
	// Offset : 0x37efb4
	public virtual Int32 get_NumAmmoLeft() { }
	// Offset : 0x37a408
	public Int32 get_TotalAmmoLeft() { }
	// Offset : 0x37f0d0
	public Boolean IsCurrentClipEmpty() { }
	// Offset : 0x37f0e0
	public Single GetWeaponFireBoneDeltaAngeX(Boolean isMale) { }
	// Offset : 0x37f184
	public Single GetWeaponFireBoneDeltaAngeX_Crouch(Boolean isMale, Boolean isInvehicle) { }
	// Offset : 0x37f204
	public Single GetWeaponFireBoneDeltaAngeZ_Crouch(Boolean isMale, Boolean isInvehicle) { }
	// Offset : 0x37f264
	public virtual Boolean IsInfinityAmmo() { }
	// Offset : 0x37f298
	public Boolean IsCurrentClipFull() { }
	// Offset : 0x37f2ac
	public Single get_FireInterval() { }
	// Offset : 0x37f2b4
	public Single get_RepeatFireInterval() { }
	// Offset : 0x37f2bc
	public Int32 get_WeaponSubType() { }
	// Offset : 0x37f2e8
	public virtual EWeaponType get_WeaponType() { }
	// Offset : 0x37f314
	public Int32 get_Damage() { }
	// Offset : 0x37f31c
	public Int32 get_OnceAmmo() { }
	// Offset : 0x37f324
	public Single GetReloadSpeed() { }
	// Offset : 0x37f32c
	public virtual Single get_PlayerSpeedFactor() { }
	// Offset : 0x37f334
	public virtual Single get_PlayerSpeedFactorFiring() { }
	// Offset : 0x37f33c
	public String get_WeaponName() { }
	// Offset : 0x37f378
	public Boolean get_FlagNeedLiftOnFire() { }
	// Offset : 0x37f434
	public Boolean get_CanAutoFire() { }
	// Offset : 0x37f484
	public static Boolean NeedWhizBySound(EWeaponType type) { }
	// Offset : 0x37f490
	public Boolean get_FlagNeedWhizBySound() { }
	// Offset : 0x37ef8c
	public Int32 get_FireShoted() { }
	// Offset : 0x37f52c
	public override Boolean InitForPickup(Player owner, UInt32 uniqueId, UInt32 count, ItemData itemData, Object[] extraParams) { }
	// Offset : 0x37f68c
	public override Boolean HasBoundWithOwner() { }
	// Offset : 0x37f6fc
	public override Boolean BindWithOwner() { }
	// Offset : 0x37fa64
	internal virtual Boolean Init(WeaponData weaponData, GameObject weaponGO, RuntimeAnimatorController animCtrl, WeaponStateMachine sm, WeaponFireComponent fc) { }
	// Offset : 0x380014
	public override Void UnbindFromOwner() { }
	// Offset : 0x38014c
	protected Void DeActiveStateMachine() { }
	// Offset : 0x380254
	public override Void SetVisible(Boolean bVisible) { }
	// Offset : 0x38035c
	protected virtual Void InitFireComponent() { }
	// Offset : 0x380478
	public GameObject get_WeaponGO() { }
	// Offset : 0x380480
	public RuntimeAnimatorController get_WeaponAnimCtrl() { }
	// Offset : 0x380488
	public override Void Active() { }
	// Offset : 0x3807a8
	public Void SwapWeaponDone() { }
	// Offset : 0x3807d8
	public override Void DeActive() { }
	// Offset : 0x380914
	public virtual Void ReloadWithSpeed(Single reloadSpeed) { }
	// Offset : 0x380918
	public virtual Void Reload() { }
	// Offset : 0x380af0
	public virtual Void StopReloading(Boolean reloadSuccess) { }
	// Offset : 0x380cf4
	public override Void Update(Single gameTime, Single deltaTime) { }
	// Offset : 0x380f80
	public virtual Boolean CanSight() { }
	// Offset : 0x380fd0
	public virtual Boolean IsSniper() { }
	// Offset : 0x381020
	public override Void StartUsing(Single gameTime) { }
	// Offset : 0x381090
	public override Void StopUsing(Boolean bCancel, Boolean instant) { }
	// Offset : 0x38110c
	public virtual Void OnStartToPutdown() { }
	// Offset : 0x38114c
	public virtual Void OnPutdownInterrupted() { }
	// Offset : 0x3811ac
	protected Void PlayOwerFireEffect() { }
	// Offset : 0x38128c
	public virtual Void StartFiring() { }
	// Offset : 0x381450
	protected virtual Void PlayFireSound() { }
	// Offset : 0x3814f4
	public virtual Quaternion GetAimRotation() { }
	// Offset : 0x381528
	public virtual Vector3 GetOwnerAttackableCenterWS() { }
	// Offset : 0x38144c
	protected Void PlayFireEffect() { }
	// Offset : 0x381578
	public Void PlayGunTrace(Vector3 startPos, Vector3 targetPos) { }
	// Offset : 0x381948
	public UInt32 GetLastFireActualTickCount() { }
	// Offset : 0x381958
	public virtual Void StopFiring() { }
	// Offset : 0x381a88
	public virtual Boolean CanFire() { }
	// Offset : 0x380a5c
	public Boolean IsReloading() { }
	// Offset : 0x381b1c
	public Boolean IsSwappingWeapon() { }
	// Offset : 0x381b60
	public virtual Boolean IsFiring() { }
	// Offset : 0x381ba8
	public virtual Void OnInstantHit(HitObjectInfo hitObjectInfo, MonoBehaviour obj, Single delay) { }
	// Offset : 0x381e58
	public Vector3 GetWeaponFirePosition() { }
	// Offset : 0x381f08
	public Boolean HasWeaponFirePoint() { }
	// Offset : 0x381bac
	public Void OnPlayHitEffect(HitObjectInfo hitObjectInfo, MonoBehaviour obj, Single delay) { }
	// Offset : 0x381bb0
	protected Void OnCalcDamage(HitObjectInfo hitObjectInfo) { }
	// Offset : 0x381f78
	public Boolean IsAimAssistActive(EWeaponType weaponType) { }
	// Offset : 0x381fec
	public Boolean IsWeaponAimAssistActive() { }
	// Offset : 0x38203c
	public Int32 GetDamage(Single inputDistance) { }
	// Offset : 0x382130
	public virtual Single GetScatterFactor(Boolean c) { }
	// Offset : 0x382280
	public Boolean IsBeginFiring() { }
	// Offset : 0x3822fc
	public Single GetFireDuration() { }
	// Offset : 0x380db8
	protected Void UpdateFireTime(Single gameTime, Single deltaTime) { }
	// Offset : 0x37fcb8
	protected Void RefreshWeaponParams() { }
	// Offset : 0x3823c0
	public virtual Void OnCuringStateChange(Boolean isCuring) { }
	// Offset : 0x38245c
	public virtual Boolean NeedPlayAirShootSound() { }
	// Offset : 0x3824c4
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EWeaponType
{
	// Fields
	public Int32 value__; // 0x10
	public const EWeaponType Rifle = 0; // 0x0
	public const EWeaponType Sniper = 1; // 0x0
	public const EWeaponType HandGun = 2; // 0x0
	public const EWeaponType Knife = 3; // 0x0
	public const EWeaponType NB = 4; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EMeleeSubType
{
	// Fields
	public Int32 value__; // 0x10
	public const EMeleeSubType Fist = 0; // 0x0
	public const EMeleeSubType Changuo = 1; // 0x0
	public const EMeleeSubType Machete = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum ERifleSubType
{
	// Fields
	public Int32 value__; // 0x10
	public const ERifleSubType DefaultRifle = 0; // 0x0
	public const ERifleSubType MachineGun = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum ESniperSubType
{
	// Fields
	public Int32 value__; // 0x10
	public const ESniperSubType DefaultSniper = 0; // 0x0
	public const ESniperSubType Kar98k = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EHandGunSubType
{
	// Fields
	public Int32 value__; // 0x10
	public const EHandGunSubType DefaultHandGun = 0; // 0x0
	public const EHandGunSubType M1873 = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EFireType
{
	// Fields
	public Int32 value__; // 0x10
	public const EFireType Auto = 0; // 0x0
	public const EFireType Single = 1; // 0x0
	public const EFireType Three = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponFireComponent
{
	// Fields
	protected Weapon m_Weapon; // 0x10

	// Properties

	// Methods
	// Offset : 0x3845b4
	public Void .ctor(Weapon weapon) { }
	// Offset : 0x380d60
	public Void Update(Single gameTime, Single deltaTime) { }
	// Offset : 0x38140c
	public Void Fire() { }
	// Offset : 0x3845e0
	protected virtual Void OnFire() { }
	// Offset : 0x3845e4
	protected virtual Void OnUpdate(Single gameTime, Single deltaTime) { }
	// Offset : 0x3845e8
	protected virtual Void UpdateAiming() { }
	// Offset : 0x3846b0
	public virtual Void GenerateRandomDirection(ref Vector3 dir, Single distance, Single scatterFactor) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponFireComponentInstant : WeaponFireComponentLongRangeBase
{
	// Fields
	private Single tangentTheta; // 0x1c

	// Properties

	// Methods
	// Offset : 0x380438
	public Void .ctor(Weapon weapon) { }
	// Offset : 0x3846ec
	protected override Void OnFire() { }
	// Offset : 0x384ec8
	protected virtual HitObjectInfo GetAimInfo() { }
	// Offset : 0x384f0c
	protected virtual Vector3 GetStartTracePosOffset(Vector3 rayDir) { }
	// Offset : 0x385074
	protected virtual GameObject GetTraceIgnoreObject() { }
	// Offset : 0x384be0
	public Boolean CalculateWeaponFire(ref HitObjectInfo hitObjectInfo, Single scatterFactor, Vector3 originRayDir) { }
	// Offset : 0x3850bc
	private Void PlaySpecialEffect(List`1 hitObjectInfo) { }
	// Offset : 0x385208
	protected virtual Void PlayGunTrace(HitObjectInfo hitObjectInfo, Vector3 dir) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponFireComponentLongRangeBase : WeaponFireComponent
{
	// Fields
	private Single tangentTheta; // 0x18

	// Properties

	// Methods
	// Offset : 0x3846b4
	public Void .ctor(Weapon weapon) { }
	// Offset : 0x385560
	public override Void GenerateRandomDirection(ref Vector3 dir, Single distance, Single scatterFactor) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponFireComponentMelee : WeaponFireComponent
{
	// Fields
	private Boolean m_DelayFire; // 0x18
	private Single m_ExpectedTime; // 0x1c

	// Properties

	// Methods
	// Offset : 0x38040c
	public Void .ctor(Weapon weapon) { }
	// Offset : 0x385754
	private Void OnRealFire() { }
	// Offset : 0x3863d8
	protected override Void OnFire() { }
	// Offset : 0x386434
	protected override Void OnUpdate(Single gameTime, Single deltaTime) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public enum EWeaponState
{
	// Fields
	public Int32 value__; // 0x10
	public const EWeaponState WeaponNotReady = 1; // 0x0
	public const EWeaponState WeaponReady = 2; // 0x0
	public const EWeaponState WeaponZoomingIn = 3; // 0x0
	public const EWeaponState WeaponZoomingOut = 4; // 0x0
	public const EWeaponState WeaponLift = 5; // 0x0
	public const EWeaponState WeaponPutDown = 6; // 0x0
	public const EWeaponState WeaponFiring = 7; // 0x0
	public const EWeaponState WeaponReloading = 8; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponState
{
	// Fields
	private EWeaponState <StateType>k__BackingField; // 0x10
	protected WeaponStateMachine m_StateMachine; // 0x18

	// Properties
	public EWeaponState StateType { get; set; }
	protected Weapon Weapon { get; }

	// Methods
	// Offset : 0x386478
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x3864a4
	public EWeaponState get_StateType() { }
	// Offset : 0x3864ac
	protected Void set_StateType(EWeaponState value) { }
	// Offset : 0x3864b4
	public virtual Void DeActive() { }
	// Offset : 0x3864e4
	protected Weapon get_Weapon() { }
	// Offset : 0x386510
	public virtual Void Enter() { }
	// Offset : 0x386514
	public virtual Void Exit() { }
	// Offset : 0x386518
	public virtual Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x38651c
	public virtual Void StartFiring() { }
	// Offset : 0x386520
	public virtual Void StopFiring(Boolean instant) { }
	// Offset : 0x386524
	public virtual Void CancelFiring() { }
	// Offset : 0x386528
	public virtual Void FireOnRelease() { }
	// Offset : 0x38652c
	public virtual Void StartReloading() { }
	// Offset : 0x386530
	public virtual Void StopReloading() { }
	// Offset : 0x386534
	public virtual Void PreparNextSniperFiring(Boolean InToSet) { }
	// Offset : 0x386538
	public virtual Boolean IsAimAssistActive() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateNotReady : WeaponState
{
	// Fields
	private const Single CHANGEWEAPON_ANIM_TIME; // 0x0
	private Single m_ChangeWeaponElapsedTime; // 0x20
	private Single m_ChangeWeaponTotalTime; // 0x24

	// Properties

	// Methods
	// Offset : 0x387410
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x38764c
	public override Void Enter() { }
	// Offset : 0x387658
	public override Void DeActive() { }
	// Offset : 0x387660
	public override Void Execute(Single gameTime, Single deltaTime) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateReady : WeaponState
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x387944
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x387978
	public override Void Enter() { }
	// Offset : 0x38797c
	public override Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x387a68
	public override Void StartFiring() { }
	// Offset : 0x387a98
	public override Void StartReloading() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateReady_NoZoom : WeaponStateReady
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3874e8
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x387b78
	public override Void StartFiring() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateZoomingIn_SniperFireOnRelease : WeaponState
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x388030
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x388064
	public override Void Enter() { }
	// Offset : 0x3880dc
	public override Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x3880e0
	public override Void FireOnRelease() { }
	// Offset : 0x388110
	public override Void CancelFiring() { }
	// Offset : 0x388140
	public override Void StopFiring(Boolean instant) { }
	// Offset : 0x388170
	public override Void StartReloading() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateZoomingOut_SniperFireOnRelease : WeaponState
{
	// Fields
	private Single m_ReleaseFireFinishTime; // 0x20

	// Properties

	// Methods
	// Offset : 0x3881a0
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x3881d4
	public override Void Enter() { }
	// Offset : 0x388218
	public override Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x388248
	public override Void StartFiring() { }
	// Offset : 0x38824c
	public override Void StartReloading() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateFiring : WeaponState
{
	// Fields
	protected Boolean m_InFiring; // 0x20
	protected Boolean m_StopRequired; // 0x21
	protected Single m_FireElapsedTime; // 0x24
	protected Int32 m_RepeatPerShot; // 0x28
	protected Boolean m_SingleShotStopFire; // 0x2c
	public Boolean FireOnEnter; // 0x2d
	private Boolean <SingleShotFinished>k__BackingField; // 0x2e

	// Properties
	public Boolean SingleShotFinished { get; set; }

	// Methods
	// Offset : 0x38655c
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x3865dc
	public Boolean get_SingleShotFinished() { }
	// Offset : 0x3865e4
	protected Void set_SingleShotFinished(Boolean value) { }
	// Offset : 0x3865f0
	public override Void Enter() { }
	// Offset : 0x3866d8
	protected Boolean RepeatFinished() { }
	// Offset : 0x386744
	public override Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x386930
	public override Void Exit() { }
	// Offset : 0x386990
	public override Void StartFiring() { }
	// Offset : 0x38699c
	public override Void StopFiring(Boolean instant) { }
	// Offset : 0x3869dc
	public override Void StartReloading() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateFiring_NoZoom : WeaponStateFiring
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x386d98
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x386d9c
	public override Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x386f18
	public override Void Exit() { }
	// Offset : 0x386f78
	public override Void StopFiring(Boolean instant) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateReloading : WeaponState
{
	// Fields
	private const Single RELOADING_ANIM_TIME; // 0x0
	private Single m_ReloadingElapsedTime; // 0x20
	private Single m_ReloadingTotalTime; // 0x24

	// Properties

	// Methods
	// Offset : 0x38751c
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x387ba8
	public override Void Enter() { }
	// Offset : 0x387d40
	public override Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x387f90
	public override Void StopReloading() { }
	// Offset : 0x388028
	public override Void StopFiring(Boolean instant) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateLift : WeaponState
{
	// Fields
	protected Single m_LifeElapsedTime; // 0x20

	// Properties

	// Methods
	// Offset : 0x386fb8
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x386fec
	public override Void Enter() { }
	// Offset : 0x387070
	public override Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x3870c0
	public override Void StopFiring(Boolean instant) { }
	// Offset : 0x3870f8
	public override Void StartReloading() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStatePutDown : WeaponState
{
	// Fields
	protected Single m_PutDownElapsedTime; // 0x20
	protected Boolean m_CallStopFireOnExit; // 0x24

	// Properties

	// Methods
	// Offset : 0x3874ac
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x3876f8
	public override Void Enter() { }
	// Offset : 0x387708
	public override Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x387760
	public override Void StartFiring() { }
	// Offset : 0x3877e4
	public override Void StartReloading() { }
	// Offset : 0x387868
	public override Void Exit() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateReloading_NeedLift : WeaponStateReloading
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x387478
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x38802c
	public override Void StopFiring(Boolean instant) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateReady_NeedLift : WeaponStateReady
{
	// Fields
	private Single m_StartFiringElapsedTime; // 0x20
	private Boolean m_bStartFiringTriggered; // 0x24

	// Properties

	// Methods
	// Offset : 0x387444
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x387ac8
	public override Void Enter() { }
	// Offset : 0x387ad4
	public override Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x387b14
	public override Boolean IsAimAssistActive() { }
	// Offset : 0x387b48
	public override Void StartFiring() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateFiring_NeedLift : WeaponStateFiring
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x386a0c
	public Void .ctor(WeaponStateMachine machine) { }
	// Offset : 0x386a10
	public override Void Execute(Single gameTime, Single deltaTime) { }
	// Offset : 0x386c6c
	public override Void Exit() { }
	// Offset : 0x386c70
	public override Void DeActive() { }
	// Offset : 0x386cd8
	public override Void StartReloading() { }
	// Offset : 0x386d58
	public override Void StopFiring(Boolean instant) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponStateMachine
{
	// Fields
	protected Dictionary`2 m_States; // 0x10
	protected WeaponState m_CurState; // 0x18
	public Weapon m_Weapon; // 0x20

	// Properties

	// Methods
	// Offset : 0x37fbf4
	public Void .ctor() { }
	// Offset : 0x37fc68
	public Void Init(Weapon weapon) { }
	// Offset : 0x387128
	protected Void AddState(WeaponState s) { }
	// Offset : 0x3871ac
	protected virtual Void InitStates() { }
	// Offset : 0x3800e8
	public Void Clear() { }
	// Offset : 0x3806a8
	public Void Goto(EWeaponState stateType) { }
	// Offset : 0x3801d8
	public EWeaponState GetCurrentStateType() { }
	// Offset : 0x381040
	public Void StartFiring() { }
	// Offset : 0x3810b4
	public Void StopFiring(Boolean instant) { }
	// Offset : 0x387550
	public Void FireOnRelease() { }
	// Offset : 0x380aa0
	public Void StartReloading() { }
	// Offset : 0x380ca4
	public Void StopReloading() { }
	// Offset : 0x3875a0
	public Void CancelFiring() { }
	// Offset : 0x382304
	public Boolean IsFiring() { }
	// Offset : 0x380f14
	public Void Update(Single gameTime, Single deltaTime) { }
	// Offset : 0x380204
	public Void DeActive() { }
	// Offset : 0x381f9c
	public Boolean IsAimAssistActive() { }
	// Offset : 0x3875f0
	public Void PreparNextSniperFiring(Boolean InToSet) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal struct WeaponParams
{
	// Fields
	public Int32 Damage; // 0x10
	public Single ExtraDamageRate; // 0x14
	public Int32 AmmoClipSize; // 0x18
	public Single FireInterval; // 0x1c
	public Single RepeatFireInterval; // 0x20
	public Single BiteArmor; // 0x24
	public Single Range; // 0x28
	public Single FullDamageDistance; // 0x2c
	public Single MinDamageDistance; // 0x30
	public Int32 MinDamage; // 0x34
	public Int32 ScatterNum; // 0x38
	public Single ScatterMax; // 0x3c
	public Single ScatterRecoverSpeed; // 0x40
	public Single Angle; // 0x44
	public Int32 OnceAmmo; // 0x48
	public Single ScatterSpeed; // 0x4c
	public Single ScatterSpeedCrouchCreep; // 0x50
	public Single ScatterMove; // 0x54
	public Single ReloadSpeed; // 0x58
	public Single PlayerSpeedFactor; // 0x5c
	public Single PlayerSpeedFactorFiring; // 0x60
	public Single Delay; // 0x64
	public Boolean IsSilencer; // 0x68
	public Boolean IsSingleShot; // 0x69
	public Single DamageRatioBody; // 0x6c
	public Single DamageRatioHead; // 0x70
	public Single DamageRatioLimb; // 0x74
	public UInt32[] default_attachments; // 0x78

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class WeaponData : CSVBaseData
{
	// Fields
	public ItemData sItemData; // 0x10
	public UInt32 ID; // 0x18
	public ResourceID hudIcon; // 0x1c
	public ResourceID soundFire; // 0x20
	public ResourceID soundMuteFire; // 0x24
	public ResourceID soundFire_MiddleRange; // 0x28
	public ResourceID soundFire_LongRange; // 0x2c
	public ResourceID soundMuteFire_Low; // 0x30
	public ResourceID soundFire_MiddleRange_Low; // 0x34
	public ResourceID soundFire_LongRange_Low; // 0x38
	public ResourceID soundClipIn; // 0x3c
	public ResourceID soundClipOut; // 0x40
	public ResourceID soundChangeWeapon; // 0x44
	public EWeaponType WeaponType; // 0x48
	public Int32 WeaponSubType; // 0x4c
	public Int32 InitialClipCount; // 0x50
	public String AttachmentSlot; // 0x58
	public EFireType FireType; // 0x60
	public WeaponParams weaponParams; // 0x68
	public ConsumableData sConsumableData; // 0xd8
	public UInt32 buffID; // 0xe0

	// Properties

	// Methods
	// Offset : 0x382518
	public Void .ctor() { }
	// Offset : 0x382528
	public UInt32 GetId() { }
	// Offset : 0x382530
	public override String GetPrimaryKey() { }
	// Offset : 0x38253c
	public override Void ParseData(Int64 index, Int32 fieldCount, String[] headers, String[] values) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public abstract class BaseLevelObject : Entity
{
	// Fields
	protected Boolean isChanged; // 0x30
	protected Boolean hasRegisted; // 0x31
	protected String objectName; // 0x38
	protected UInt32 objectID; // 0x40

	// Properties

	// Methods
	// Offset : 0x3a13bc
	protected Void .ctor() { }
	// Offset : 0x3a1454
	public virtual Void DoAction(Object[] param) { }
	// Offset : 0x3a1458
	protected override Void OnStart() { }
	// Offset : 0x3a14a0
	protected override Void OnOnDestroy() { }
	// Offset : 0x3a1570
	public String GetObjectName() { }
	// Offset : 0x3a1618
	public UInt32 GetObjectID() { }
	// Offset : 0x3a1698
	public virtual Void RegisterThis() { }
	// Offset : 0x3a14c8
	public Void UnRegisterThis() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public enum EClimbingTriggerTyoe
{
	// Fields
	public Int32 value__; // 0x10
	public const EClimbingTriggerTyoe None = 0; // 0x0
	public const EClimbingTriggerTyoe CrossOver = 1; // 0x0
	public const EClimbingTriggerTyoe ClimbOver = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class ClimbingTrigger : MonoBehaviour
{
	// Fields
	private BoxCollider m_TriggerCollider; // 0x18
	private Single m_TriggerMaxLength; // 0x20
	private Boolean m_CaculatedTargetPosition; // 0x24
	private Vector3 m_TargetPosition; // 0x28
	public Single CrossHeight; // 0x34
	public Single CrossLength; // 0x38
	public EClimbingTriggerTyoe TriggerType; // 0x3c
	public Boolean TriggerEnable; // 0x40
	public Single AngleRange; // 0x44

	// Properties
	public Single TriggerMaxLength { get; }
	public BoxCollider TriggerCollider { get; }
	public Vector3 TriggerDirection { get; }
	public Vector3 TargetPosition { get; }

	// Methods
	// Offset : 0x3a25fc
	public Void .ctor() { }
	// Offset : 0x3a2628
	public Single get_TriggerMaxLength() { }
	// Offset : 0x3a2630
	public BoxCollider get_TriggerCollider() { }
	// Offset : 0x3a26c8
	public Vector3 get_TriggerDirection() { }
	// Offset : 0x3a26fc
	public Vector3 get_TargetPosition() { }
	// Offset : 0x3a28f8
	private Void Start() { }
	// Offset : 0x3a2730
	public Void ReCaculateTargetPosition() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class PickUp
{
	// Fields
	public UInt32 uniqueID; // 0x10
	public UInt32 dataID; // 0x14
	public UInt32 count; // 0x18
	public String containerID; // 0x20
	public GameObject attachModel; // 0x28
	public ResourceID resID; // 0x30

	// Properties

	// Methods
	// Offset : 0x3b8918
	public Void .ctor(UInt32 uID, UInt32 dID, UInt32 ct, String cID) { }
	// Offset : 0x3b89c0
	public static Boolean op_Equality(PickUp a, PickUp b) { }
	// Offset : 0x3b8a20
	public static Boolean op_Inequality(PickUp a, PickUp b) { }
	// Offset : 0x3b8a84
	public override Boolean Equals(Object obj) { }
	// Offset : 0x3b8bc8
	public override Int32 GetHashCode() { }
	// Offset : 0x3b8bd4
	public Void InitModel(Transform parent, ResourceID modeRes) { }
	// Offset : 0x3b8cec
	public Void DestroyModel() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public enum ELevelContainerAction
{
	// Fields
	public Int32 value__; // 0x10
	public const ELevelContainerAction ADD = 0; // 0x0
	public const ELevelContainerAction DEL = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public enum EDropGroup
{
	// Fields
	public Int32 value__; // 0x10
	public const EDropGroup Random = 0; // 0x0
	public const EDropGroup Group1 = 1; // 0x0
	public const EDropGroup Group2 = 2; // 0x0
	public const EDropGroup Group3 = 3; // 0x0
	public const EDropGroup Group4 = 4; // 0x0
	public const EDropGroup Group5 = 5; // 0x0
	public const EDropGroup Group6 = 6; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal static class PickupGroupData
{
	// Fields
	public const UInt32 M4A1_DATAID; // 0x0
	public const UInt32 M4A1_AMMO_DATAID; // 0x0
	public const UInt32 MEDKIT_DATAID; // 0x0
	public static List`1 PickupGroups; // 0x0

	// Properties

	// Methods
	// Offset : 0x3b8dc8
	public static List`1 GetPickup(EDropGroup group) { }
	// Offset : 0x3b930c
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class LevelObjectContainer : BaseLevelObject
{
	// Fields
	public static readonly String Tag; // 0x0
	public Single concentricRadiusMin; // 0x44
	public Single concentricRadiusMax; // 0x48
	public Boolean AutoAddDrop; // 0x4c
	public EDropGroup dropGroup; // 0x50
	protected List`1 m_InventoryList; // 0x58

	// Properties

	// Methods
	// Offset : 0x3af140
	public Void .ctor() { }
	// Offset : 0x3af1c4
	public override Void RegisterThis() { }
	// Offset : 0x3af714
	public Int32 GetCount() { }
	// Offset : 0x3af774
	public List`1 GetPickUpList() { }
	// Offset : 0x3af77c
	public override Void DoAction(Object[] param) { }
	// Offset : 0x3af468
	private Void UpdateInventoryList(Boolean isAdd, PickUp inventory) { }
	// Offset : 0x3afeb4
	private Vector3 GeneratePos(Vector3 direction) { }
	// Offset : 0x3af9c4
	private Void AddInventory(PickUp inventory) { }
	// Offset : 0x3afa94
	private Void DeleteInventory(PickUp inventory) { }
	// Offset : 0x3b0094
	public Void InitAttachModel(ref PickUp inventory) { }
	// Offset : 0x3b0344
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <DeleteInventory>c__AnonStorey0
{
	// Fields
	internal PickUp inventory; // 0x10

	// Properties

	// Methods
	// Offset : 0x3b033c
	public Void .ctor() { }
	// Offset : 0x3b03a0
	internal Boolean <>m__0(PickUp itm) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class LevelObjectManager
{
	// Fields
	private Dictionary`2 m_Name2Object; // 0x10

	// Properties

	// Methods
	// Offset : 0x3b03f4
	public Void .ctor() { }
	// Offset : 0x3a19f0
	public Void Register(String objectName, BaseLevelObject baseObject) { }
	// Offset : 0x3b0464
	public Dictionary`2 GetRegisteredObjects() { }
	// Offset : 0x3a1b08
	public Void UnRegister(String objectName) { }
	// Offset : 0x3ab1f4
	public BaseLevelObject GetLevelObject(String objectName) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class LevelTag
{
	// Fields
	public const String TagClimbingTrigger; // 0x0

	// Properties

	// Methods
	// Offset : 0x3b046c
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal interface IAimAssist
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Boolean HasHeuristicTarget() { }
	// Offset : 0x
	public abstract Void RefreshPotentialTargetsList(Vector3 vAimRay, Weapon w) { }
	// Offset : 0x
	public abstract Void PickTargetHeuristic(Vector3 rayDit, Weapon w) { }
	// Offset : 0x
	public abstract Quaternion RotCorrection(Quaternion oldRot, Quaternion newRot, Weapon w) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class AimAssistAutoLock : IAimAssist
{
	// Fields
	protected static Single m_fAngleMax; // 0x0
	protected static Single m_fDistMin; // 0x4
	protected static Single m_fDistMax; // 0x8
	protected static Vector4 m_fMinScreenRange; // 0xc
	protected static Vector4 m_fMaxScreenRange; // 0x1c
	protected static Single m_fLockKeepTime; // 0x2c
	protected static Single m_fLockDecreaseSpeedTime; // 0x30
	protected TargetInfo m_LastTargetHeuristic; // 0x10
	protected TargetInfo m_TargetHeuristic; // 0x18
	protected List`1 m_PotentialTargets; // 0x20
	protected ObjectPool`1 mPotentialTargetPool; // 0x28
	protected Player m_LocalPlayer; // 0x30
	private RingBuffer`1 m_AimHistory; // 0x38

	// Properties
	protected Vector3 CamPosition { get; }
	public Camera Cam { get; }

	// Methods
	// Offset : 0x39c4bc
	public Void .ctor(Player p) { }
	// Offset : 0x39c598
	public static Single[] GetAimAssistParams() { }
	// Offset : 0x39c860
	protected Vector3 get_CamPosition() { }
	// Offset : 0x39c99c
	public Camera get_Cam() { }
	// Offset : 0x39c9e8
	public virtual Void RefreshPotentialTargetsList(Vector3 vAimRay, Weapon w) { }
	// Offset : 0x39cd90
	private Boolean CheckAndAddPotentialTarget(Single weaponRange, AttackableEntity p) { }
	// Offset : 0x39d0a8
	public Void RecordAimRay(Vector3 ray) { }
	// Offset : 0x39d130
	public Boolean HasHeuristicTarget() { }
	// Offset : 0x39d140
	protected virtual Single GetPickTargetDistanceFactor(Single InDistance, Weapon w) { }
	// Offset : 0x39d148
	protected Boolean CalculatePickTargetScore(TargetInfo info, Vector3 rayDit, Weapon w) { }
	// Offset : 0x39d54c
	public virtual Void PickTargetHeuristic(Vector3 rayDit, Weapon w) { }
	// Offset : 0x39d77c
	public virtual Quaternion RotCorrection(Quaternion oldRot, Quaternion newRot, Weapon w) { }
	// Offset : 0x39db58
	protected virtual Void RefreshLockTarget(Weapon w) { }
	// Offset : 0x39de94
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class TargetInfo : ObjectPoolCallbackBase
{
	// Fields
	public AttackableEntity m_Entity; // 0x18
	public Single _angle; // 0x20
	public Single _dist; // 0x24
	public Single _scoreAngle; // 0x28
	public Single _scoreDist; // 0x2c
	public Single _score; // 0x30

	// Properties

	// Methods
	// Offset : 0x39dfac
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal enum EDamageType
{
	// Fields
	public Int32 value__; // 0x10
	public const EDamageType Self = 4294967295; // 0x0
	public const EDamageType ElectricZone = 4294967295; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class DamageInfo
{
	// Fields
	public Int32 BaseDamage; // 0x10
	public EColliderType HitColliderType; // 0x14
	public PlayerID Damager; // 0x18
	public Int32 WeaponDataID; // 0x1c
	public Vector3 FirePos; // 0x20
	public Vector3 HitPos; // 0x2c

	// Properties

	// Methods
	// Offset : 0x3a3024
	public Void .ctor() { }
	// Offset : 0x3a302c
	private static Single GetDamageRatio(EColliderType colliderType, Int32 weaponDataID) { }
	// Offset : 0x3a3248
	public static Int32 GetRealDamage(Int32 baseDamage, EColliderType hitColliderType, Player Damager, Player beDamagedPlayer, Int32 weaponDataID) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class Parachute : MonoBehaviour
{
	// Fields
	public Transform PlayerAnchor; // 0x18
	public Transform MeshTF; // 0x20
	public Transform MeshHolder; // 0x28
	private SkinnedMeshRenderer m_Renderer; // 0x30
	private Single m_StartTime; // 0x38
	private Animator m_Animator; // 0x40

	// Properties

	// Methods
	// Offset : 0x3b44bc
	public Void .ctor() { }
	// Offset : 0x3b44c4
	private Void Awake() { }
	// Offset : 0x3b4560
	private Void Update() { }
	// Offset : 0x3b4564
	public Void SetAnimationBlendFactor(Single zSpeed, Single xSpeed) { }
	// Offset : 0x3b4650
	public Void SetTexture(Texture2D texture) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class PlayerAudioComponent : MonoBehaviour
{
	// Fields
	private Player m_Player; // 0x18
	private Dictionary`2 m_CoolDownTimerDictionary; // 0x20
	private List`1 WhizBySoundList; // 0x28
	private List`1 FootStepOnLandList; // 0x30
	private List`1 InjureSoundList; // 0x38

	// Properties

	// Methods
	// Offset : 0x3c6538
	public Void .ctor() { }
	// Offset : 0x3b9f20
	public Void Init(Player owner) { }
	// Offset : 0x3c6718
	private ResourceID GetRandomID(List`1 ids) { }
	// Offset : 0x3c6448
	public Void PlayStepSound(AnimationEvent evt) { }
	// Offset : 0x3c67b4
	public Void PlayJumpSound() { }
	// Offset : 0x3c682c
	public Void PlayLandSound() { }
	// Offset : 0x3c68a4
	public Void PlayChangeWeaponSound() { }
	// Offset : 0x3c69a8
	public Boolean CheckIsNeedPlaySound(String soundType, Single coolDownSecounds) { }
	// Offset : 0x3c12fc
	public Void PlayInjuredSound(Int32 damage, Int32 weapon_id) { }
	// Offset : 0x3c6c14
	public Void PlayWhizBySound(Vector3 offset) { }
	// Offset : 0x3c6e3c
	public Void PlayClimbSound() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class SafeZone : Entity
{
	// Fields
	public Single CurrentRadius; // 0x30
	private GameObject m_ZoneEffectGO; // 0x38
	private Single m_InitialScale; // 0x40

	// Properties

	// Methods
	// Offset : 0x3c73f8
	public Void .ctor() { }
	// Offset : 0x3c7468
	protected override Void OnStart() { }
	// Offset : 0x3c751c
	public override Void OnFixedUpdate(Single gameTime, Single deltaTime) { }
	// Offset : 0x3c7598
	private Void CheckDamages() { }
	// Offset : 0x3c7908
	private Void CreateZoneDamageEffect(ResourceID id) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public enum EColliderType
{
	// Fields
	public Int32 value__; // 0x10
	public const EColliderType None = 0; // 0x0
	public const EColliderType Head = 1; // 0x0
	public const EColliderType Body = 2; // 0x0
	public const EColliderType Limb = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class HitDetectColliderHelper : MonoBehaviour
{
	// Fields
	public EColliderType ColliderType; // 0x18
	private AttackableEntity m_AttackObj; // 0x20
	private GameObject owner; // 0x28

	// Properties

	// Methods
	// Offset : 0x3a8068
	public Void .ctor() { }
	// Offset : 0x3a8078
	private Void Start() { }
	// Offset : 0x39aac0
	public GameObject GetOwner() { }
	// Offset : 0x3a8220
	public PlayerID GetOwnerID() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public enum EHitGroup
{
	// Fields
	public Int32 value__; // 0x10
	public const EHitGroup Default = 0; // 0x0
	public const EHitGroup Head = 1; // 0x0
	public const EHitGroup Body = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class HitObjectInfo : ObjectPoolCallbackBase
{
	// Fields
	public const String TAG_TERRAIN; // 0x0
	private static ObjectPool`1 HitObjectInfoPool; // 0x0
	public GameObject HitObject; // 0x18
	public Collider HitCollider; // 0x20
	public Vector3 HitLocation; // 0x28
	public Vector3 HitNormal; // 0x34
	public Vector3 RayDir; // 0x40
	public Vector3 StartPosition; // 0x4c
	public Int32 Damage; // 0x58
	public Single Distance; // 0x5c
	public Int32 ActorLayer; // 0x60
	public EHitGroup HitGroup; // 0x64
	public PhysicMaterial HitPhysicMaterial; // 0x68
	public Boolean IgnoreHappens; // 0x70
	public Vector3 OrigStartPosition; // 0x74

	// Properties

	// Methods
	// Offset : 0x3a8310
	public Void .ctor() { }
	// Offset : 0x398b24
	public static HitObjectInfo Alloc() { }
	// Offset : 0x3a8318
	public static Void Recycle(HitObjectInfo obj) { }
	// Offset : 0x3a83b4
	public override Void OnCollected() { }
	// Offset : 0x39bb78
	public Void Clear() { }
	// Offset : 0x398ba8
	public Void Recycle() { }
	// Offset : 0x3a83e4
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public struct HitResult
{
	// Fields
	public Vector3 HitLocation; // 0x10
	public Vector3 HitNormal; // 0x1c
	public Single Distance; // 0x28

	// Properties

	// Methods
	// Offset : 0x299dd0
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class Layers
{
	// Fields
	private static UInt32 m_LayerMask_Entity; // 0x0
	private static UInt32 m_LayerMask_StaticObject; // 0x4
	private static UInt32 m_LayerMask_StaticObjectWithoutCollision; // 0x8
	private static UInt32 m_LayerMask_LevelObject; // 0xc
	private static UInt32 m_LayerMask_DynamicObject; // 0x10
	private static UInt32 m_LayerMask_Fire; // 0x14
	private static UInt32 m_LayerMask_StaticObjectCanFireThrough; // 0x18
	private static UInt32 m_LayerMask_EntityOthers; // 0x1c
	private static UInt32 m_LayerMask_EntityVehicles; // 0x20
	private static UInt32 m_LayerMask_EntityVehicleWheels; // 0x24
	private static UInt32 m_LayerMask_Trigger; // 0x28
	private static UInt32 m_LayerCamera_Trigger; // 0x2c
	private static UInt32 m_LayerMask_AIBlock; // 0x30

	// Properties
	public static UInt32 LayerMask_Entity { get; }
	public static UInt32 LayerMask_EntityOthers { get; }
	public static UInt32 LayerMask_EntityVehicles { get; }
	public static UInt32 LayerMask_EntityVehicleWheels { get; }
	public static UInt32 LayerMask_AIBlock { get; }
	public static UInt32 LayerMask_StaticObject { get; }
	public static UInt32 LayerMask_StaticObjectWithoutCollision { get; }
	public static UInt32 LayerMask_Fire { get; }
	public static UInt32 LayerMask_LevelObject { get; }
	public static UInt32 LayerMask_DynamicObject { get; }
	public static UInt32 LayerMask_StaticObjectCanFireThrough { get; }
	public static UInt32 LayerMask_Trigger { get; }
	public static UInt32 LayerMask_CameraCollision { get; }

	// Methods
	// Offset : 0x3ae5d4
	public Void .ctor() { }
	// Offset : 0x3ae5dc
	public static UInt32 get_LayerMask_Entity() { }
	// Offset : 0x3ae6ac
	public static UInt32 get_LayerMask_EntityOthers() { }
	// Offset : 0x3ae780
	public static UInt32 get_LayerMask_EntityVehicles() { }
	// Offset : 0x3ae854
	public static UInt32 get_LayerMask_EntityVehicleWheels() { }
	// Offset : 0x3ae928
	public static UInt32 get_LayerMask_AIBlock() { }
	// Offset : 0x3ae9fc
	public static UInt32 get_LayerMask_StaticObject() { }
	// Offset : 0x3aeacc
	public static UInt32 get_LayerMask_StaticObjectWithoutCollision() { }
	// Offset : 0x3aeba0
	public static UInt32 get_LayerMask_Fire() { }
	// Offset : 0x3aec74
	public static Boolean IsStaticObjectHavingCollsion(Int32 layer) { }
	// Offset : 0x3aedec
	public static UInt32 get_LayerMask_LevelObject() { }
	// Offset : 0x3aeec0
	public static UInt32 get_LayerMask_DynamicObject() { }
	// Offset : 0x3aed18
	public static UInt32 get_LayerMask_StaticObjectCanFireThrough() { }
	// Offset : 0x3aef94
	public static UInt32 get_LayerMask_Trigger() { }
	// Offset : 0x3af068
	public static UInt32 get_LayerMask_CameraCollision() { }
	// Offset : 0x3af13c
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class PhysicsUtil
{
	// Fields
	public static readonly Single GRAVITY; // 0x0
	public static readonly UInt32 TraceFlag_TraceEntity; // 0x4
	public static readonly UInt32 TraceFlag_TraceStaticObject; // 0x8
	public static readonly UInt32 TraceFlag_TraceDynamicObject; // 0xc
	public static readonly UInt32 TraceFlag_TraceFire; // 0x10
	public static readonly UInt32 TraceFlag_TraceStaticObjectCanFireThrough; // 0x14
	public static readonly UInt32 TraceFlag_SpecialObject; // 0x18
	public static readonly UInt32 TraceFlag_CameraCollision; // 0x1c
	public static readonly UInt32 TraceFlag_TraceVehicleEntity; // 0x20
	public static readonly UInt32 TraceFlag_AIBLOCK; // 0x24
	public static readonly UInt32 TraceFlag_TraceActorHavingCollision; // 0x28
	public static readonly UInt32 TraceFlag_InstantHit; // 0x2c

	// Properties

	// Methods
	// Offset : 0x3b4718
	public Void .ctor() { }
	// Offset : 0x3b4720
	public static Boolean SphereCheck(Vector3 startTrace, Vector3 endTrace, Single radius, UInt32 traceFlag, ref Vector3 hitPosition) { }
	// Offset : 0x3b48b8
	public static Boolean SphereCheck(Vector3 startTrace, Vector3 endTrace, Single radius, UInt32 traceFlag, ref Vector3 hitPosition, ref Vector3 hitNormal) { }
	// Offset : 0x3b4a08
	public static Boolean SphereCheck(Vector3 startTrace, Vector3 direction, Single radius, Single distance, UInt32 traceFlag, ref Vector3 hitPosition, ref Vector3 hitNormal) { }
	// Offset : 0x3b50ac
	public static Boolean SphereCheck(Vector3 startTrace, Vector3 direction, Single radius, Single distance, UInt32 traceFlag, ref HitObjectInfo hitObjectInfo) { }
	// Offset : 0x3b53f4
	public static Boolean SingleLineCheck(Vector3 startTrace, Vector3 endTrace, UInt32 traceFlag, ref HitObjectInfo hitObjectInfo) { }
	// Offset : 0x3b5568
	public static Boolean SingleLineCheck(Vector3 startTrace, Vector3 direction, Single distance, UInt32 traceFlag, ref HitObjectInfo hitObjectInfo) { }
	// Offset : 0x3b58a4
	public static GameObject GetColliderOwner(Collider c) { }
	// Offset : 0x3b59d8
	public static Boolean SingleLineCheck(Vector3 startTrace, Vector3 endTrace, UInt32 traceFlag, ref HitObjectInfo hitObjectInfo, GameObject objIgnore) { }
	// Offset : 0x3b6074
	private static Boolean IsSpecialCollider(HitObjectInfo hitObjectInfo) { }
	// Offset : 0x3b607c
	public static Boolean SpecialSingleLineCheck(Vector3 startTrace, Vector3 direction, Single distance, UInt32 traceFlag, ref HitObjectInfo hitObjectInfo, GameObject objIgnore, ref List`1 spList) { }
	// Offset : 0x3b5b54
	public static Boolean SingleLineCheck(Vector3 startTrace, Vector3 direction, Single distance, UInt32 traceFlag, ref HitObjectInfo hitObjectInfo, GameObject objIgnore) { }
	// Offset : 0x3b6698
	public static Boolean RaycastSphere(Vector3 Origin, Single Radius, Vector3 Start, Vector3 Dir, Single Length, ref HitResult hitObjectInfo) { }
	// Offset : 0x3b6974
	public static Single Square2D(Vector3 v) { }
	// Offset : 0x3b6984
	public static Boolean RaycastCapsule(Vector3 center, Quaternion rot, Single height, Single Radius, Vector3 Start, Vector3 End, ref HitResult hitObjectInfo) { }
	// Offset : 0x3b70ac
	public static Boolean RaycastCapsule(CapsuleCollider coll, Transform trans, Vector3 Start, Vector3 End, ref HitResult hitObjectInfo) { }
	// Offset : 0x3b7454
	public static Boolean MultiLineCheck(Vector3 startTrace, Vector3 endTrace, UInt32 traceFlag, ref List`1 hitObjectInfoList, Boolean blockByStaticActor) { }
	// Offset : 0x3b759c
	public static Boolean MultiLineCheck(Vector3 startTrace, Vector3 direction, Single distance, UInt32 traceFlag, ref List`1 hitObjectInfoList, Boolean blockByStaticActor) { }
	// Offset : 0x3b79ac
	public static Void RecycleHitObjectInfo(List`1 hitObjectInfoList) { }
	// Offset : 0x3b4b90
	public static Int32 GetLayerMask(UInt32 traceFlag) { }
	// Offset : 0x3b7a84
	public static Vector3 GetGroundPosition(Vector3 startPos) { }
	// Offset : 0x3b7bd8
	public static Boolean RaycastOBB(Collider col, Transform trans, Vector3 start, Vector3 end, ref HitResult result) { }
	// Offset : 0x3b7de8
	public static Boolean RaycastOBB_CapsuleCollider(CapsuleCollider col, Transform trans, Vector3 start, Vector3 end, ref HitResult hit, Boolean useNormalizedDis) { }
	// Offset : 0x3b81d0
	public static Boolean RaycastOBB_BoxCollider(BoxCollider col, Transform trans, Vector3 start, Vector3 end, ref HitResult hit, Boolean recordDis) { }
	// Offset : 0x3b84c8
	public static Boolean RaycastAABB(Vector3 center, Vector3 extent, Vector3 start, Vector3 end, out Single hitDis) { }
	// Offset : 0x3b8814
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class GameControlMapping
{
	// Fields
	public const Int32 MOVE_AXIS; // 0x0
	public const Int32 AIM_AXIS; // 0x0
	public const Int32 FIRE; // 0x0
	public const Int32 ACTION; // 0x0
	public const Int32 CHANGE_WEAPON; // 0x0
	public const Int32 CROUCH; // 0x0
	public const Int32 JUMP; // 0x0
	public const Int32 RELOAD_WEAPON; // 0x0

	// Properties

	// Methods
	// Offset : 0x3a6e64
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class ElectricZoneDamageEffect : Tween`1
{
	// Fields
	public Color DefaultColor; // 0x80
	private Material mMat; // 0x90
	private Single mAlpha; // 0x98

	// Properties
	private Material CachedMat { get; }
	public override Single value { get; set; }

	// Methods
	// Offset : 0x3a41b0
	public Void .ctor() { }
	// Offset : 0x3a4200
	private Material get_CachedMat() { }
	// Offset : 0x3a42c8
	public override Single get_value() { }
	// Offset : 0x3a42d0
	public override Void set_value(Single value) { }
	// Offset : 0x3a43a8
	protected override Void OnUpdate(Single factor, Boolean isFinished) { }
	// Offset : 0x3a430c
	private Void SetAlpha(Material mat, Single alpha) { }
	// Offset : 0x3a4404
	public static ElectricZoneDamageEffect Begin(GameObject go, Single from, Single to, Single duration, Single delay) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class GunTraceEffect : ReusableObject
{
	// Fields
	public Single DelayDestoryTime; // 0x28
	public Single Speed; // 0x2c
	private Single m_StartTime; // 0x30
	private Renderer m_Renderer; // 0x38
	private Single m_BlendFactor; // 0x40
	private Material m_material; // 0x48

	// Properties

	// Methods
	// Offset : 0x3a7e08
	public Void .ctor() { }
	// Offset : 0x3a7e1c
	private Void Start() { }
	// Offset : 0x3a7ef4
	public override Void Prepare() { }
	// Offset : 0x3a7f20
	private Void Update() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudCrosshairsView : UIBaseView
{
	// Fields
	public Image Icon; // 0x10

	// Properties

	// Methods
	// Offset : 0x3ca0d8
	public Void .ctor() { }
	// Offset : 0x3ca0e0
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudCrouchView : UIBaseView
{
	// Fields
	public Button BtnCrouch; // 0x10

	// Properties

	// Methods
	// Offset : 0x3ca294
	public Void .ctor() { }
	// Offset : 0x3ca29c
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudFireView : UIBaseView
{
	// Fields
	public CanvasGroup MainCanvasGroup; // 0x10
	public Transform FireBG; // 0x18
	public Button BtnFire; // 0x20
	public Transform IconTF; // 0x28

	// Properties

	// Methods
	// Offset : 0x3cab5c
	public Void .ctor() { }
	// Offset : 0x3cab64
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudHPView : UIBaseView
{
	// Fields
	public Image HP; // 0x10
	public Text HPText; // 0x18

	// Properties

	// Methods
	// Offset : 0x3cb120
	public Void .ctor() { }
	// Offset : 0x3cb128
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudJumpView : UIBaseView
{
	// Fields
	public Button BtnJump; // 0x10
	public Image Image; // 0x18

	// Properties

	// Methods
	// Offset : 0x3cb698
	public Void .ctor() { }
	// Offset : 0x3cb6a0
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudKillNotificationView : UIBaseView
{
	// Fields
	public GameObject KilledGO; // 0x10

	// Properties

	// Methods
	// Offset : 0x3cbcb8
	public Void .ctor() { }
	// Offset : 0x3cbcc0
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudMatchResultView : UIBaseView
{
	// Fields
	public Button BtnDownload; // 0x10
	public Button BtnRetry; // 0x18
	public GameObject BtnRetryGO; // 0x20

	// Properties

	// Methods
	// Offset : 0x3cc15c
	public Void .ctor() { }
	// Offset : 0x3cc164
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudMovingJoystickView : UIBaseView
{
	// Fields
	public CanvasGroup MainCanvasGroup; // 0x10
	public Transform JoyStickBG; // 0x18
	public Transform JoyStick; // 0x20

	// Properties

	// Methods
	// Offset : 0x3cc870
	public Void .ctor() { }
	// Offset : 0x3cc878
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudNameEnemyView : UIBaseView
{
	// Fields
	public GameObject DamageGO; // 0x10

	// Properties

	// Methods
	// Offset : 0x3cdddc
	public Void .ctor() { }
	// Offset : 0x3cdde4
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudPickupListItemView : UIBaseView
{
	// Fields
	public Button BtnItem; // 0x10
	public Text ItemName; // 0x18
	public Image ItemIcon; // 0x20
	public Text ItemCount; // 0x28

	// Properties

	// Methods
	// Offset : 0x3cefc8
	public Void .ctor() { }
	// Offset : 0x3cefd0
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudPickupListView : UIBaseView
{
	// Fields
	public Transform GridTF; // 0x10

	// Properties

	// Methods
	// Offset : 0x3cf13c
	public Void .ctor() { }
	// Offset : 0x3cf144
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudPlayerRemainingInfoView : UIBaseView
{
	// Fields
	public Text RemainCount; // 0x10
	public Text KillCount; // 0x18

	// Properties

	// Methods
	// Offset : 0x3cf74c
	public Void .ctor() { }
	// Offset : 0x3cf754
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudPopupView : UIBaseView
{
	// Fields
	public Text Message; // 0x10
	public TweenAlpha MessageTween; // 0x18

	// Properties

	// Methods
	// Offset : 0x3cfbe8
	public Void .ctor() { }
	// Offset : 0x3cfbf0
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudPreparationTimerView : UIBaseView
{
	// Fields
	public Image Progress; // 0x10
	public Text RemainingTime; // 0x18

	// Properties

	// Methods
	// Offset : 0x3d07a0
	public Void .ctor() { }
	// Offset : 0x3d07a8
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudQuickUseMedkitView : UIBaseView
{
	// Fields
	public Button BtnQuickUse; // 0x10
	public Text Count; // 0x18

	// Properties

	// Methods
	// Offset : 0x3d0eb4
	public Void .ctor() { }
	// Offset : 0x3d0ebc
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudRemainingTimeView : UIBaseView
{
	// Fields
	public Text Time; // 0x10

	// Properties

	// Methods
	// Offset : 0x3d13e4
	public Void .ctor() { }
	// Offset : 0x3d13ec
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudWeaponInfoSwapView : UIBaseView
{
	// Fields
	public Button BtnSwapWeapon; // 0x10
	public Image PrimaryWeaponIcon; // 0x18
	public GameObject PrimaryWeaponIconGO; // 0x20
	public Image MeleeWeaponIcon; // 0x28
	public GameObject MeleeWeaponIconGO; // 0x30
	public GameObject AmmoInfoGO; // 0x38
	public Text MaxAmmo; // 0x40
	public Image AmmoStatusBar; // 0x48
	public GameObject InfiniteAmmoGO; // 0x50

	// Properties

	// Methods
	// Offset : 0x37a52c
	public Void .ctor() { }
	// Offset : 0x37a534
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudWeaponInfoView : UIBaseView
{
	// Fields
	public Button BtnReload; // 0x10
	public Image WeaponIcon; // 0x18
	public GameObject AmmoInfoGO; // 0x20
	public Text CurAmmo; // 0x28
	public Text MaxAmmo; // 0x30
	public Image AmmoStatusBar; // 0x38
	public GameObject InfiniteGO; // 0x40
	public Transform SwapWeaponGrid; // 0x48

	// Properties

	// Methods
	// Offset : 0x37a7c8
	public Void .ctor() { }
	// Offset : 0x37a7d0
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UILauncherView : UIBaseView
{
	// Fields
	public Image ProgressBar; // 0x10
	public Text ProgressInfo; // 0x18

	// Properties

	// Methods
	// Offset : 0x37dc9c
	public Void .ctor() { }
	// Offset : 0x37dca4
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UILoadingView : UIBaseView
{
	// Fields
	public Image ProgressBar; // 0x10
	public Text ProgressInfo; // 0x18

	// Properties

	// Methods
	// Offset : 0x37e310
	public Void .ctor() { }
	// Offset : 0x37e318
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIMainView : UIBaseView
{
	// Fields
	public Button BtnDownload; // 0x10

	// Properties

	// Methods
	// Offset : 0x37e6f8
	public Void .ctor() { }
	// Offset : 0x37e700
	protected override Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIModelMatch : UIBaseModel
{
	// Fields
	public const UInt32 PropID_MatchTime; // 0x0
	public const UInt32 PropID_LocalPlayerKillCount; // 0x0
	public const UInt32 PropID_RemainingPlayer; // 0x0
	private Single m_MatchTime; // 0x18
	private Int32 m_LocalPlayerKillCount; // 0x1c
	private Int32 m_RemainingPlayerCount; // 0x20
	private Dictionary`2 m_Players; // 0x28

	// Properties
	public Single MatchTime { get; }
	public Int32 LocalPlayerKillCount { get; }
	public Int32 RemainingPlayerCount { get; }

	// Methods
	// Offset : 0x37e79c
	public Void .ctor() { }
	// Offset : 0x37e80c
	public override UInt32 GetModelType() { }
	// Offset : 0x37e814
	public Single get_MatchTime() { }
	// Offset : 0x37e81c
	public Int32 get_LocalPlayerKillCount() { }
	// Offset : 0x37e824
	public Int32 get_RemainingPlayerCount() { }
	// Offset : 0x37e82c
	public Void UpdateMatchTime(Single deltaTime) { }
	// Offset : 0x37e918
	public Void StartMatch(Int32 matchTime) { }
	// Offset : 0x37e990
	public Void OnKill(PlayerID killerID, PlayerID beKilledID, Int32 weaponDataID, UInt32 hitbodyPart, UInt32 skinId) { }
	// Offset : 0x37ec98
	public Void OnAlivePlayerCountChanged(Int32 remainingPlayers) { }
	// Offset : 0x37ed30
	public Void OnAddPlayer(PlayerID playerID) { }
	// Offset : 0x37ebd8
	public Void OnDelPlayer(PlayerID playerID) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal enum EUIModelType
{
	// Fields
	public UInt32 value__; // 0x10
	public const EUIModelType Match = 0; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIFrontEndScene : UIBaseScene
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x3c9640
	public Void .ctor() { }
	// Offset : 0x3c96a8
	protected override Void OnInit() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal abstract class UIHudButtonBaseController : UIBaseController
{
	// Fields
	protected Boolean IsButtonDown; // 0x48

	// Properties

	// Methods
	// Offset : 0x3c96b0
	protected Void .ctor() { }
	// Offset : 0x3c96b8
	protected override Void OnUIDestory() { }
	// Offset : 0x3c9760
	protected virtual Void OnBtnDown() { }
	// Offset : 0x3c9808
	protected virtual Void OnBtnUp() { }
	// Offset : 0x3c98ac
	protected override Void OnVisibilityChanged() { }
	// Offset : 0x3c98f8
	protected Void InitEventTrigger(Button button) { }
	// Offset : 0x
	protected abstract String GetMappingName() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudCrosshairsController : UIBaseController
{
	// Fields
	private static readonly Color AIM_COLOR_NO_TARGET; // 0x0
	private static readonly Color AIM_COLOR_HAS_TARGET; // 0x10
	private UIHudCrosshairsView m_View; // 0x48
	private Vector3 m_DefaultSize; // 0x50

	// Properties

	// Methods
	// Offset : 0x3c9af4
	public Void .ctor() { }
	// Offset : 0x3c9b6c
	public static ResourceID GetResourceID() { }
	// Offset : 0x3c9bbc
	protected override Void OnUIInit() { }
	// Offset : 0x3c9c68
	private Void Update() { }
	// Offset : 0x3ca00c
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudCrouchController : UIHudButtonBaseController
{
	// Fields
	private UIHudCrouchView m_View; // 0x50

	// Properties

	// Methods
	// Offset : 0x3ca17c
	public Void .ctor() { }
	// Offset : 0x3ca184
	public static ResourceID GetResourceID() { }
	// Offset : 0x3ca1d4
	protected override Void OnUIInit() { }
	// Offset : 0x3ca24c
	protected override String GetMappingName() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudFireController : UIHudButtonBaseController
{
	// Fields
	private UIHudFireView m_View; // 0x50
	private Vector3 m_DefaultPos; // 0x58
	private Single m_BGRangeRadius; // 0x64

	// Properties

	// Methods
	// Offset : 0x3ca338
	public Void .ctor() { }
	// Offset : 0x3ca34c
	public static ResourceID GetResourceID() { }
	// Offset : 0x3ca39c
	protected override Void OnUIInit() { }
	// Offset : 0x3ca414
	protected override Void OnUIOpen() { }
	// Offset : 0x3ca69c
	protected override Void OnVisibilityChanged() { }
	// Offset : 0x3ca470
	private Void UpdateAxisTouchingThroughArea() { }
	// Offset : 0x3ca7a0
	private Void Update() { }
	// Offset : 0x3caabc
	private Void ActiveFirePosition(Boolean v) { }
	// Offset : 0x3cab14
	protected override String GetMappingName() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudHPController : UIBaseController
{
	// Fields
	private UIHudHPView m_View; // 0x48

	// Properties

	// Methods
	// Offset : 0x3cacd0
	public Void .ctor() { }
	// Offset : 0x3cacd8
	public static ResourceID GetResourceID() { }
	// Offset : 0x3cad28
	protected override Void OnUIInit() { }
	// Offset : 0x3caf58
	protected override Void OnUIDestory() { }
	// Offset : 0x3cadfc
	private Void UpdateHP(Int32 curHP, Int32 maxHP) { }
	// Offset : 0x3cb004
	private Void OnHPChanged(Object[] param) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudJumpController : UIHudButtonBaseController
{
	// Fields
	private UIHudJumpView m_View; // 0x50

	// Properties

	// Methods
	// Offset : 0x3cb218
	public Void .ctor() { }
	// Offset : 0x3cb220
	public static ResourceID GetResourceID() { }
	// Offset : 0x3cb270
	protected override Void OnUIInit() { }
	// Offset : 0x3cb34c
	protected override Void OnUIDestory() { }
	// Offset : 0x3cb3f4
	protected override String GetMappingName() { }
	// Offset : 0x3cb43c
	private Void OnReadyToClimb(Object[] data) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudKillNotificationController : UIBaseController, IUIModelDataChangeObserver
{
	// Fields
	private UIHudKillNotificationView m_View; // 0x48
	private UIModelMatch m_MatchModel; // 0x50

	// Properties

	// Methods
	// Offset : 0x3cb790
	public Void .ctor() { }
	// Offset : 0x3cb798
	public static ResourceID GetResourceID() { }
	// Offset : 0x3cb7e8
	protected override Void OnUIInit() { }
	// Offset : 0x3cb8e4
	protected override Void OnUIDestory() { }
	// Offset : 0x3cb930
	private IEnumerator RemoveKillHint(Single delayTime, GameObject hint_object) { }
	// Offset : 0x3cb9cc
	public Void OnDataChanged(UIBaseModel model, UInt32 propID, Object[] param) { }
	// Offset : 0x3cbaac
	public UInt32 GetInterestedPropID(UIBaseModel model) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <RemoveKillHint>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal Single delayTime; // 0x10
	internal GameObject hint_object; // 0x18
	internal Object $current; // 0x20
	internal Boolean $disposing; // 0x28
	internal Int32 $PC; // 0x2c

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x3cb9c4
	public Void .ctor() { }
	// Offset : 0x3cbb08
	public Boolean MoveNext() { }
	// Offset : 0x3cbc2c
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x3cbc34
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x3cbc3c
	public Void Dispose() { }
	// Offset : 0x3cbc50
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudMatchResultController : UIBaseController
{
	// Fields
	private UIHudMatchResultView m_View; // 0x48

	// Properties

	// Methods
	// Offset : 0x3cbd5c
	public Void .ctor() { }
	// Offset : 0x3cbd64
	public static ResourceID GetResourceID() { }
	// Offset : 0x3cbdb4
	protected override Void OnUIInit() { }
	// Offset : 0x3cbf38
	protected override Void OnUIOpen() { }
	// Offset : 0x3cbfdc
	private Void OnBtnRetry() { }
	// Offset : 0x3cc0c0
	private Void OnBtnDownloadFullVersion() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudMovingJoystickController : UIBaseController
{
	// Fields
	private UIHudMovingJoystickView m_View; // 0x48
	private Vector3 m_DefaultPos; // 0x50
	private Single m_BGRangeRadius; // 0x5c

	// Properties

	// Methods
	// Offset : 0x3cc284
	public Void .ctor() { }
	// Offset : 0x3cc298
	public static ResourceID GetResourceID() { }
	// Offset : 0x3cc2e8
	protected override Void OnUIInit() { }
	// Offset : 0x3cc3b0
	protected override Void OnUIOpen() { }
	// Offset : 0x3cc408
	private Void Update() { }
	// Offset : 0x3cc354
	private Void ActiveJoyStick(Boolean v) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudNameEnemyController : UIBaseController
{
	// Fields
	private readonly Color CRITICAL_DAMAGE; // 0x48
	private UIHudNameEnemyView m_View; // 0x58
	private PlayerID m_BindPlayer; // 0x60
	private FollowCamera m_FollowCamera; // 0x68
	private Camera m_FollowCameraComponent; // 0x70
	private Queue m_QueueDamageStates; // 0x78
	private Vector2 m_CachedDamageOffset; // 0x80

	// Properties

	// Methods
	// Offset : 0x3cc990
	public Void .ctor() { }
	// Offset : 0x3cca68
	public static ResourceID GetResourceID() { }
	// Offset : 0x3ccab8
	protected override Void OnUIInit() { }
	// Offset : 0x3ccb1c
	protected override Void OnUIOpen() { }
	// Offset : 0x3ccba0
	protected override Void OnUIDestory() { }
	// Offset : 0x3ccc0c
	public Void BindPlayer(PlayerID pID) { }
	// Offset : 0x3ccecc
	public Void UnbindPlayer() { }
	// Offset : 0x3cd094
	private Void LateUpdate() { }
	// Offset : 0x3ccc58
	private Void UpdateNamePosition() { }
	// Offset : 0x3cd174
	private Vector3 GetRefPos(Player p) { }
	// Offset : 0x3cd1c4
	internal Void OnGotHit(Object[] data) { }
	// Offset : 0x3cd838
	private IEnumerator ShowDamageEffect(GameObject effectGO, Single delay) { }
	// Offset : 0x3cd8f4
	private IEnumerator RemoveDamageEffect() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <ShowDamageEffect>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal Single delay; // 0x10
	internal GameObject effectGO; // 0x18
	internal UIHudNameEnemyController $this; // 0x20
	internal Object $current; // 0x28
	internal Boolean $disposing; // 0x30
	internal Int32 $PC; // 0x34

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x3cd8ec
	public Void .ctor() { }
	// Offset : 0x3cdc18
	public Boolean MoveNext() { }
	// Offset : 0x3cdd50
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x3cdd58
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x3cdd60
	public Void Dispose() { }
	// Offset : 0x3cdd74
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <RemoveDamageEffect>c__Iterator1 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal UIHudNameEnemyController $this; // 0x10
	internal Object $current; // 0x18
	internal Boolean $disposing; // 0x20
	internal Int32 $PC; // 0x24

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x3cd964
	public Void .ctor() { }
	// Offset : 0x3cd96c
	public Boolean MoveNext() { }
	// Offset : 0x3cdb8c
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x3cdb94
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x3cdb9c
	public Void Dispose() { }
	// Offset : 0x3cdbb0
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudPickupListController : UIBaseController
{
	// Fields
	private UIHudPickupListView m_View; // 0x48
	private List`1 m_CurrentPickupList; // 0x50
	private List`1 m_ItemControllers; // 0x58

	// Properties

	// Methods
	// Offset : 0x3cde80
	public Void .ctor() { }
	// Offset : 0x3cde88
	public static ResourceID GetResourceID() { }
	// Offset : 0x3cded8
	protected override Void OnUIInit() { }
	// Offset : 0x3ce184
	protected override Void OnUIDestory() { }
	// Offset : 0x3ce2d8
	private Void RefreshAutoPickupList(Object[] data) { }
	// Offset : 0x3ce398
	private Void OnEnterPickupArea(Object[] param) { }
	// Offset : 0x3ceb7c
	private Void OnExitPickupArea(Object[] param) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudPickupListItemController : UIBaseController
{
	// Fields
	private UIHudPickupListItemView m_View; // 0x48
	private PickUp m_CurrentItem; // 0x50

	// Properties

	// Methods
	// Offset : 0x3cebf0
	public Void .ctor() { }
	// Offset : 0x3cebf8
	public static ResourceID GetResourceID() { }
	// Offset : 0x3cec48
	protected override Void OnUIInit() { }
	// Offset : 0x3ce914
	public Void SetUIData(PickUp item) { }
	// Offset : 0x3ced28
	public Void OnBtnItemActionClick() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudPlayerRemainingInfoController : UIBaseController, IUIModelDataChangeObserver
{
	// Fields
	private UIHudPlayerRemainingInfoView m_View; // 0x48
	private UIModelMatch m_MatchModel; // 0x50

	// Properties

	// Methods
	// Offset : 0x3cf1e0
	public Void .ctor() { }
	// Offset : 0x3cf1e8
	public static ResourceID GetResourceID() { }
	// Offset : 0x3cf238
	protected override Void OnUIInit() { }
	// Offset : 0x3cf5c8
	protected override Void OnUIDestory() { }
	// Offset : 0x3cf608
	public Void OnDataChanged(UIBaseModel model, UInt32 propID, Object[] param) { }
	// Offset : 0x3cf6f0
	public UInt32 GetInterestedPropID(UIBaseModel model) { }
	// Offset : 0x3cf320
	private Void UpdateRemainingInfo(Int32 count) { }
	// Offset : 0x3cf474
	private Void UpdateKillInfo(Int32 count) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudPopupController : UIBaseController
{
	// Fields
	private UIHudPopupView m_View; // 0x48
	private UInt32 m_DelayCallID; // 0x50

	// Properties

	// Methods
	// Offset : 0x3cf844
	public Void .ctor() { }
	// Offset : 0x3cf84c
	public static ResourceID GetResourceID() { }
	// Offset : 0x3cf89c
	protected override Void OnUIInit() { }
	// Offset : 0x3cf900
	protected override Void OnUIDestory() { }
	// Offset : 0x3cf9ac
	public Void SetMessage(String message, Single duration) { }
	// Offset : 0x3cfbb4
	private Void AutoHide() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal enum EPreparationTimerType
{
	// Fields
	public Int32 value__; // 0x10
	public const EPreparationTimerType None = 0; // 0x0
	public const EPreparationTimerType UseMedkit = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal enum EAcationState
{
	// Fields
	public Int32 value__; // 0x10
	public const EAcationState Start = 0; // 0x0
	public const EAcationState Canel = 1; // 0x0
	public const EAcationState End = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudPreparationTimerController : UIBaseController
{
	// Fields
	private UIHudPreparationTimerView m_View; // 0x48
	private Single m_StartTime; // 0x50
	private Single m_TotalTime; // 0x54
	private EPreparationTimerType m_ContextType; // 0x58
	private Object m_ContextParam1; // 0x60

	// Properties

	// Methods
	// Offset : 0x3cfce0
	public Void .ctor() { }
	// Offset : 0x3cfce8
	public static ResourceID GetResourceID() { }
	// Offset : 0x3cfd38
	protected override Void OnUIInit() { }
	// Offset : 0x3cfed4
	private Void Update() { }
	// Offset : 0x3d017c
	protected override Void OnUIDestory() { }
	// Offset : 0x3d027c
	private Void OnPreparationStart(Object[] param) { }
	// Offset : 0x3d06e8
	private Void OnPreparationCancel(Object[] param) { }
	// Offset : 0x3d059c
	private Void DoCancelUse() { }
	// Offset : 0x3d0174
	private Void ClearData() { }
	// Offset : 0x3d0164
	private Boolean HasValidData() { }
	// Offset : 0x3d058c
	private Boolean CannotRetry() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudQuickUseMedkitController : UIBaseController
{
	// Fields
	private UIHudQuickUseMedkitView m_View; // 0x48

	// Properties

	// Methods
	// Offset : 0x3d0898
	public Void .ctor() { }
	// Offset : 0x3d08a0
	public static ResourceID GetResourceID() { }
	// Offset : 0x3d08f0
	protected override Void OnUIInit() { }
	// Offset : 0x3d0a88
	protected override Void OnUIDestory() { }
	// Offset : 0x3d0b34
	private Void OnBtnQuickUse() { }
	// Offset : 0x3d0da0
	private Void OnInventoryMedkitChanged(Object[] param) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudRemainingTimeController : UIBaseController, IUIModelDataChangeObserver
{
	// Fields
	private UIHudRemainingTimeView m_View; // 0x48
	private UIModelMatch m_MatchModel; // 0x50

	// Properties

	// Methods
	// Offset : 0x3d0fac
	public Void .ctor() { }
	// Offset : 0x3d0fb4
	public static ResourceID GetResourceID() { }
	// Offset : 0x3d1004
	protected override Void OnUIInit() { }
	// Offset : 0x3d10d4
	protected override Void OnUIDestory() { }
	// Offset : 0x3d1114
	public Void OnDataChanged(UIBaseModel model, UInt32 propID, Object[] param) { }
	// Offset : 0x3d1388
	public UInt32 GetInterestedPropID(UIBaseModel model) { }
	// Offset : 0x3d11c0
	private Void SetTime(Int32 time) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudWeaponInfoController : UIHudButtonBaseController
{
	// Fields
	private UIHudWeaponInfoView m_View; // 0x50
	private UIHudWeaponInfoSwapController m_Primary1WeaponController; // 0x58
	private UIHudWeaponInfoSwapController m_Primary2WeaponController; // 0x60
	private UIHudWeaponInfoSwapController m_SecondaryWeaponController; // 0x68
	private UIHudWeaponInfoSwapController m_MeleeWeaponController; // 0x70

	// Properties

	// Methods
	// Offset : 0x3d1488
	public Void .ctor() { }
	// Offset : 0x3d1490
	public static ResourceID GetResourceID() { }
	// Offset : 0x3d14e0
	protected override Void OnUIInit() { }
	// Offset : 0x3d1820
	protected override Void OnUIDestory() { }
	// Offset : 0x3d18c8
	protected override String GetMappingName() { }
	// Offset : 0x3d1910
	private Void Update() { }
	// Offset : 0x3d2050
	private Void OnInventoryItemChanged(Object[] param) { }
	// Offset : 0x3d1d44
	private Void RefreshUIByWeaponOnHand(Item itemOnHand) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIHudWeaponInfoSwapController : UIBaseController
{
	// Fields
	private UIHudWeaponInfoSwapView m_View; // 0x48
	private EEquipSlot m_EquipSlot; // 0x50

	// Properties
	public EEquipSlot EquipSlot { get; set; }

	// Methods
	// Offset : 0x379b80
	public Void .ctor() { }
	// Offset : 0x379b90
	public EEquipSlot get_EquipSlot() { }
	// Offset : 0x379b98
	public Void set_EquipSlot(EEquipSlot value) { }
	// Offset : 0x379ba0
	public static ResourceID GetResourceID() { }
	// Offset : 0x379bf0
	protected override Void OnUIInit() { }
	// Offset : 0x37a200
	private Void Update() { }
	// Offset : 0x379cd8
	public Void RefreshUI() { }
	// Offset : 0x37a468
	private Void OnBtnSwapWeapon() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIInGameScene : UIBaseScene
{
	// Fields
	private UIHudPopupController m_LastPopupController; // 0x50
	private Dictionary`2 m_EnemyNames; // 0x58
	private Dictionary`2 m_InGameUIPoolDic; // 0x60

	// Properties

	// Methods
	// Offset : 0x37aa34
	public Void .ctor() { }
	// Offset : 0x37aaec
	public Void RegisterGameEventHandler() { }
	// Offset : 0x37ad80
	public Void OpenHud() { }
	// Offset : 0x37b558
	protected override Void OnDestory() { }
	// Offset : 0x37b7f4
	public Void ShowPopupMessage(String message, Single duration) { }
	// Offset : 0x37b93c
	public Void ClosePopup() { }
	// Offset : 0x37b9cc
	private Void OnAddPlayer(Object[] data) { }
	// Offset : 0x37b9d0
	private Void OnRemovePlayer(Object[] data) { }
	// Offset : 0x37ba5c
	private Void RemoveNameHud(PlayerID id) { }
	// Offset : 0x37ba64
	public Void RecycleEnemyHudName(PlayerID id) { }
	// Offset : 0x37bc00
	private Void OnLocalPlayerHitOthers(Object[] data) { }
	// Offset : 0x
	public T GetUIControllerFromPool() { }
	// Offset : 0x
	public Void RecycleUIController(T uicontroller) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EUIGroup
{
	// Fields
	public Int32 value__; // 0x10
	public const EUIGroup Normal = 1; // 0x0
	public const EUIGroup Parachuting = 2; // 0x0
	public const EUIGroup MatchEnd = 4; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UILauncherController : UIBaseController
{
	// Fields
	public Action OnLaunchGame; // 0x48
	private UILauncherView m_View; // 0x50
	private Int32 m_LastSleepTimeout; // 0x58
	private Boolean m_LastRunInBackground; // 0x5c
	private Boolean m_IsHotUpdating; // 0x5d
	private Boolean m_IsUnzipping; // 0x5e
	private Int32 m_RetryCount; // 0x60

	// Properties

	// Methods
	// Offset : 0x37bdcc
	public Void .ctor() { }
	// Offset : 0x37bddc
	protected override Void OnUIInit() { }
	// Offset : 0x37bfdc
	protected override Void OnUIOpen() { }
	// Offset : 0x37c0a0
	protected override Void OnUIDestory() { }
	// Offset : 0x37c13c
	private Void Update() { }
	// Offset : 0x37be4c
	private Void UpdateProgress(Single progress) { }
	// Offset : 0x37c8ec
	private Void CheckVersion() { }
	// Offset : 0x37cb74
	private Void OnHotUpdateFinished(ResErrorCode result) { }
	// Offset : 0x37cce4
	private Void OnHotUpdateError() { }
	// Offset : 0x37d2c4
	private Void OnColdUpdate() { }
	// Offset : 0x37d1ec
	private Void ShowMessageBox(String message) { }
	// Offset : 0x37d3ac
	private IEnumerator StartHotUpdating() { }
	// Offset : 0x37d254
	private IEnumerator StartCheckVersion() { }
	// Offset : 0x37cb50
	private Void OnStartUpdating() { }
	// Offset : 0x37ccb4
	private Void OnFinishUpdating() { }
	// Offset : 0x37c030
	private IEnumerator StartLaunchGame() { }
	// Offset : 0x37d434
	private Void <CheckVersion>m__0(ResHotUpdateResult result) { }
	// Offset : 0x37d5a8
	private Void <CheckVersion>m__1(ResHotUpdateResult result) { }
	// Offset : 0x37d6e0
	private Void <OnHotUpdateFinished>m__2(ResErrorCode ret, ResDownloadType type) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <StartHotUpdating>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal UILauncherController $this; // 0x10
	internal Object $current; // 0x18
	internal Boolean $disposing; // 0x20
	internal Int32 $PC; // 0x24

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x37d41c
	public Void .ctor() { }
	// Offset : 0x37d914
	public Boolean MoveNext() { }
	// Offset : 0x37da7c
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x37da84
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x37da8c
	public Void Dispose() { }
	// Offset : 0x37daa0
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <StartCheckVersion>c__Iterator1 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal UILauncherController $this; // 0x10
	internal Object $current; // 0x18
	internal Boolean $disposing; // 0x20
	internal Int32 $PC; // 0x24

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x37d424
	public Void .ctor() { }
	// Offset : 0x37d7b4
	public Boolean MoveNext() { }
	// Offset : 0x37d888
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x37d890
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x37d898
	public Void Dispose() { }
	// Offset : 0x37d8ac
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <StartLaunchGame>c__Iterator2 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal Action <caller>__0; // 0x10
	internal UILauncherController $this; // 0x18
	internal Object $current; // 0x20
	internal Boolean $disposing; // 0x28
	internal Int32 $PC; // 0x2c

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x37d42c
	public Void .ctor() { }
	// Offset : 0x37db08
	public Boolean MoveNext() { }
	// Offset : 0x37dc10
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x37dc18
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x37dc20
	public Void Dispose() { }
	// Offset : 0x37dc34
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UILoadingController : UIBaseController
{
	// Fields
	private UILoadingView m_View; // 0x48
	private Single m_Progress; // 0x50

	// Properties

	// Methods
	// Offset : 0x37dd94
	public Void .ctor() { }
	// Offset : 0x37dd9c
	public static ResourceID GetResourceID() { }
	// Offset : 0x37ddec
	protected override Void OnUIInit() { }
	// Offset : 0x37e1b8
	protected override Void OnUIOpen() { }
	// Offset : 0x37e204
	private Void Update() { }
	// Offset : 0x37e02c
	private Void UpdateProgress(Single progress) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal class UIMainController : UIBaseController
{
	// Fields
	private UIMainView m_View; // 0x48

	// Properties

	// Methods
	// Offset : 0x37e408
	public Void .ctor() { }
	// Offset : 0x37e410
	public static ResourceID GetResourceID() { }
	// Offset : 0x37e460
	protected override Void OnUIInit() { }
	// Offset : 0x37e540
	private Void OnBtnDownloadGame() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
internal static class UIUtils
{
	// Fields
	public static Boolean IsUltraWideScreen; // 0x0

	// Properties

	// Methods
	// Offset : 0x37b4c0
	public static Single GetHudRatio() { }
	// Offset : 0x37a204
	public static Sprite GetAtlasSpriteByResourceID(ResourceID resID) { }
	// Offset : 0x37edf4
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public static class GameConfig
{
	// Fields
	private static String InternalVer; // 0x0
	public static Boolean UseAssetBundle; // 0x8
	public static LocLang CurrentLang; // 0xc
	public static String CDNAddr; // 0x10
	public static Boolean CanRetry; // 0x18

	// Properties

	// Methods
	// Offset : 0x3a6cf4
	public static Void Reset() { }
	// Offset : 0x3a6e08
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: EG
public class GameStartup : MonoBehaviour
{
	// Fields
	public static GameStartup instance; // 0x0
	public Boolean UseAssetBundle; // 0x18
	public String CDNAddr; // 0x20
	public Boolean CanRetry; // 0x28
	public ShaderVariantCollection ShaderCollection; // 0x30
	private EGGameEntry m_MainEntry; // 0x38
	private UILauncherController m_LaucherController; // 0x40
	private readonly String[] DONT_DESTROY_RESOURCES; // 0x48

	// Properties

	// Methods
	// Offset : 0x3a7330
	public Void .ctor() { }
	// Offset : 0x3a73a8
	private Void Awake() { }
	// Offset : 0x3a7478
	private Void Start() { }
	// Offset : 0x3a747c
	public Void StartGame() { }
	// Offset : 0x3a77c4
	public Void StartLauncher() { }
	// Offset : 0x3a78f4
	private Void LaunchGame() { }
	// Offset : 0x3a77b8
	private Object LoadLocalResource(String path) { }
	// Offset : 0x
	private T CreateUI(Transform root, String path) { }
	// Offset : 0x3a7b9c
	private static Void .cctor() { }
	// Offset : 0x3a7ba0
	private Void <StartLauncher>m__0() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput
public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IPointerUpHandler, IEventSystemHandler
{
	// Fields
	public String axisName; // 0x18
	public Single axisValue; // 0x20
	public Single responseSpeed; // 0x24
	public Single returnToCentreSpeed; // 0x28
	private AxisTouchButton m_PairedWith; // 0x30
	private VirtualAxis m_Axis; // 0x38

	// Properties

	// Methods
	// Offset : 0x8baa24
	public Void .ctor() { }
	// Offset : 0x8baa8c
	private Void OnEnable() { }
	// Offset : 0x8bad34
	private Void FindPairedButton() { }
	// Offset : 0x8baf0c
	private Void OnDisable() { }
	// Offset : 0x8bafa0
	public Void OnPointerDown(PointerEventData data) { }
	// Offset : 0x8bb09c
	public Void OnPointerUp(PointerEventData data) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput
public class ButtonHandler : MonoBehaviour
{
	// Fields
	public String Name; // 0x18

	// Properties

	// Methods
	// Offset : 0x8bb148
	public Void .ctor() { }
	// Offset : 0x8bb150
	private Void OnEnable() { }
	// Offset : 0x8bb154
	public Void SetDownState() { }
	// Offset : 0x8bb25c
	public Void SetUpState() { }
	// Offset : 0x8bb364
	public Void SetAxisPositiveState() { }
	// Offset : 0x8bb46c
	public Void SetAxisNeutralState() { }
	// Offset : 0x8bb574
	public Void SetAxisNegativeState() { }
	// Offset : 0x8bb67c
	public Void Update() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput
public static class CrossPlatformInputManager
{
	// Fields
	private static VirtualInput activeInput; // 0x0
	private static VirtualInput s_TouchInput; // 0x8
	private static VirtualInput s_HardwareInput; // 0x10

	// Properties
	public static Vector3 mousePosition { get; }

	// Methods
	// Offset : 0x8bb680
	private static Void .cctor() { }
	// Offset : 0x8bb720
	public static Void SwitchActiveInputMethod(ActiveInputMethod activeInputMethod) { }
	// Offset : 0x8bab80
	public static Boolean AxisExists(String name) { }
	// Offset : 0x8bb840
	public static Boolean ButtonExists(String name) { }
	// Offset : 0x8bac34
	public static Void RegisterVirtualAxis(VirtualAxis axis) { }
	// Offset : 0x8bbab0
	public static Void RegisterVirtualButton(VirtualButton button) { }
	// Offset : 0x8bbcb0
	public static Void UnRegisterVirtualAxis(String name) { }
	// Offset : 0x8bbe24
	public static Void UnRegisterVirtualButton(String name) { }
	// Offset : 0x8bacb4
	public static VirtualAxis VirtualAxisReference(String name) { }
	// Offset : 0x8bbff8
	public static Single GetAxis(String name) { }
	// Offset : 0x8bc110
	public static Single GetAxisRaw(String name) { }
	// Offset : 0x8bc060
	private static Single GetAxis(String name, Boolean raw) { }
	// Offset : 0x8bc178
	public static Boolean GetButton(String name) { }
	// Offset : 0x8bc218
	public static Boolean GetButtonDown(String name) { }
	// Offset : 0x8bc2b8
	public static Boolean GetButtonUp(String name) { }
	// Offset : 0x8bb1bc
	public static Void SetButtonDown(String name) { }
	// Offset : 0x8bb2c4
	public static Void SetButtonUp(String name) { }
	// Offset : 0x8bb3cc
	public static Void SetAxisPositive(String name) { }
	// Offset : 0x8bb5dc
	public static Void SetAxisNegative(String name) { }
	// Offset : 0x8bb4d4
	public static Void SetAxisZero(String name) { }
	// Offset : 0x8bc358
	public static Void SetAxis(String name, Single value) { }
	// Offset : 0x8bc408
	public static Vector3 get_mousePosition() { }
	// Offset : 0x8bc4a4
	public static Void SetVirtualMousePositionX(Single f) { }
	// Offset : 0x8bc5a4
	public static Void SetVirtualMousePositionY(Single f) { }
	// Offset : 0x8bc6b0
	public static Void SetVirtualMousePositionZ(Single f) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum ActiveInputMethod
{
	// Fields
	public Int32 value__; // 0x10
	public const ActiveInputMethod Hardware = 0; // 0x0
	public const ActiveInputMethod Touch = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class VirtualAxis
{
	// Fields
	private String <name>k__BackingField; // 0x10
	private Single m_Value; // 0x18
	private Boolean <matchWithInputManager>k__BackingField; // 0x1c

	// Properties
	public String name { get; set; }
	public Boolean matchWithInputManager { get; set; }
	public Single GetValue { get; }
	public Single GetValueRaw { get; }

	// Methods
	// Offset : 0x8bac00
	public Void .ctor(String name) { }
	// Offset : 0x8bc7b4
	public Void .ctor(String name, Boolean matchToInputSettings) { }
	// Offset : 0x8bc808
	public String get_name() { }
	// Offset : 0x8bc7f4
	private Void set_name(String value) { }
	// Offset : 0x8bc810
	public Boolean get_matchWithInputManager() { }
	// Offset : 0x8bc7fc
	private Void set_matchWithInputManager(Boolean value) { }
	// Offset : 0x8baf38
	public Void Remove() { }
	// Offset : 0x8bb094
	public Void Update(Single value) { }
	// Offset : 0x8bb08c
	public Single get_GetValue() { }
	// Offset : 0x8bc818
	public Single get_GetValueRaw() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class VirtualButton
{
	// Fields
	private String <name>k__BackingField; // 0x10
	private Boolean <matchWithInputManager>k__BackingField; // 0x18
	private Int32 m_LastPressedFrame; // 0x1c
	private Int32 m_ReleasedFrame; // 0x20
	private Boolean m_Pressed; // 0x24

	// Properties
	public String name { get; set; }
	public Boolean matchWithInputManager { get; set; }
	public Boolean GetButton { get; }
	public Boolean GetButtonDown { get; }
	public Boolean GetButtonUp { get; }

	// Methods
	// Offset : 0x8bc820
	public Void .ctor(String name) { }
	// Offset : 0x8bc85c
	public Void .ctor(String name, Boolean matchToInputSettings) { }
	// Offset : 0x8bc8b8
	public String get_name() { }
	// Offset : 0x8bc8a4
	private Void set_name(String value) { }
	// Offset : 0x8bc8c0
	public Boolean get_matchWithInputManager() { }
	// Offset : 0x8bc8ac
	private Void set_matchWithInputManager(Boolean value) { }
	// Offset : 0x8bc8c8
	public Void Pressed() { }
	// Offset : 0x8bc900
	public Void Released() { }
	// Offset : 0x8bc92c
	public Void Remove() { }
	// Offset : 0x8bc994
	public Boolean get_GetButton() { }
	// Offset : 0x8bc99c
	public Boolean get_GetButtonDown() { }
	// Offset : 0x8bc9cc
	public Boolean get_GetButtonUp() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput
public class InputAxisScrollbar : MonoBehaviour
{
	// Fields
	public String axis; // 0x18

	// Properties

	// Methods
	// Offset : 0x8bc9fc
	public Void .ctor() { }
	// Offset : 0x8bca04
	private Void Update() { }
	// Offset : 0x8bca08
	public Void HandleInput(Single value) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput
public class Joystick : MonoBehaviour, IPointerDownHandler, IPointerUpHandler, IDragHandler, IEventSystemHandler
{
	// Fields
	public Int32 MovementRange; // 0x18
	public AxisOption axesToUse; // 0x1c
	public String horizontalAxisName; // 0x20
	public String verticalAxisName; // 0x28
	private Vector3 m_StartPos; // 0x30
	private Boolean m_UseX; // 0x3c
	private Boolean m_UseY; // 0x3d
	private VirtualAxis m_HorizontalVirtualAxis; // 0x40
	private VirtualAxis m_VerticalVirtualAxis; // 0x48

	// Properties

	// Methods
	// Offset : 0x8bca88
	public Void .ctor() { }
	// Offset : 0x8bcaf8
	private Void OnEnable() { }
	// Offset : 0x8bcc9c
	private Void UpdateVirtualAxes(Vector3 value) { }
	// Offset : 0x8bcb40
	private Void CreateVirtualAxes() { }
	// Offset : 0x8bcda0
	public Void OnDrag(PointerEventData data) { }
	// Offset : 0x8bcf8c
	public Void OnPointerUp(PointerEventData data) { }
	// Offset : 0x8bcff8
	public Void OnPointerDown(PointerEventData data) { }
	// Offset : 0x8bcffc
	private Void OnDisable() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum AxisOption
{
	// Fields
	public Int32 value__; // 0x10
	public const AxisOption Both = 0; // 0x0
	public const AxisOption OnlyHorizontal = 1; // 0x0
	public const AxisOption OnlyVertical = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput
public class MobileControlRig : MonoBehaviour
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8bd060
	public Void .ctor() { }
	// Offset : 0x8bd068
	private Void OnEnable() { }
	// Offset : 0x8bd070
	private Void CheckEnableControlRig() { }
	// Offset : 0x8bd078
	private Void EnableControlRig(Boolean enabled) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput.PlatformSpecific
public class MobileInput : VirtualInput
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8bb718
	public Void .ctor() { }
	// Offset : 0x8bd4bc
	private Void AddButton(String name) { }
	// Offset : 0x8bd550
	private Void AddAxes(String name) { }
	// Offset : 0x8bd5dc
	public override Single GetAxis(String name, Boolean raw) { }
	// Offset : 0x8bd694
	public override Void SetButtonDown(String name) { }
	// Offset : 0x8bd764
	public override Void SetButtonUp(String name) { }
	// Offset : 0x8bd828
	public override Void SetAxisPositive(String name) { }
	// Offset : 0x8bd8e4
	public override Void SetAxisNegative(String name) { }
	// Offset : 0x8bd9a0
	public override Void SetAxisZero(String name) { }
	// Offset : 0x8bda58
	public override Void SetAxis(String name, Single value) { }
	// Offset : 0x8bdb1c
	public override Boolean GetButtonDown(String name) { }
	// Offset : 0x8bdbe8
	public override Boolean GetButtonUp(String name) { }
	// Offset : 0x8bdcb4
	public override Boolean GetButton(String name) { }
	// Offset : 0x8bdd6c
	public override Vector3 MousePosition() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput.PlatformSpecific
public class StandaloneInput : VirtualInput
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8bb71c
	public Void .ctor() { }
	// Offset : 0x8bdd84
	public override Single GetAxis(String name, Boolean raw) { }
	// Offset : 0x8bdd98
	public override Boolean GetButton(String name) { }
	// Offset : 0x8bdda4
	public override Boolean GetButtonDown(String name) { }
	// Offset : 0x8bddb0
	public override Boolean GetButtonUp(String name) { }
	// Offset : 0x8bddbc
	public override Void SetButtonDown(String name) { }
	// Offset : 0x8bde30
	public override Void SetButtonUp(String name) { }
	// Offset : 0x8bdea4
	public override Void SetAxisPositive(String name) { }
	// Offset : 0x8bdf18
	public override Void SetAxisNegative(String name) { }
	// Offset : 0x8bdf8c
	public override Void SetAxisZero(String name) { }
	// Offset : 0x8be000
	public override Void SetAxis(String name, Single value) { }
	// Offset : 0x8be074
	public override Vector3 MousePosition() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput
public class TiltInput : MonoBehaviour
{
	// Fields
	public AxisMapping mapping; // 0x18
	public AxisOptions tiltAroundAxis; // 0x20
	public Single fullTiltAngle; // 0x24
	public Single centreAngleOffset; // 0x28
	private VirtualAxis m_SteerAxis; // 0x30

	// Properties

	// Methods
	// Offset : 0x8be07c
	public Void .ctor() { }
	// Offset : 0x8be08c
	private Void OnEnable() { }
	// Offset : 0x8be160
	private Void Update() { }
	// Offset : 0x8be3fc
	private Void OnDisable() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum AxisOptions
{
	// Fields
	public Int32 value__; // 0x10
	public const AxisOptions ForwardAxis = 0; // 0x0
	public const AxisOptions SidewaysAxis = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class AxisMapping
{
	// Fields
	public MappingType type; // 0x10
	public String axisName; // 0x18

	// Properties

	// Methods
	// Offset : 0x8be428
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum MappingType
{
	// Fields
	public Int32 value__; // 0x10
	public const MappingType NamedAxis = 0; // 0x0
	public const MappingType MousePositionX = 1; // 0x0
	public const MappingType MousePositionY = 2; // 0x0
	public const MappingType MousePositionZ = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput
public class TouchPad : MonoBehaviour, IPointerDownHandler, IPointerUpHandler, IEventSystemHandler
{
	// Fields
	public AxisOption axesToUse; // 0x18
	public ControlStyle controlStyle; // 0x1c
	public String horizontalAxisName; // 0x20
	public String verticalAxisName; // 0x28
	public Single Xsensitivity; // 0x30
	public Single Ysensitivity; // 0x34
	private Vector3 m_StartPos; // 0x38
	private Vector2 m_PreviousDelta; // 0x44
	private Vector3 m_JoytickOutput; // 0x4c
	private Boolean m_UseX; // 0x58
	private Boolean m_UseY; // 0x59
	private VirtualAxis m_HorizontalVirtualAxis; // 0x60
	private VirtualAxis m_VerticalVirtualAxis; // 0x68
	private Boolean m_Dragging; // 0x70
	private Int32 m_Id; // 0x74
	private Vector2 m_PreviousTouchPos; // 0x78
	private Vector3 m_Center; // 0x80
	private Image m_Image; // 0x90

	// Properties

	// Methods
	// Offset : 0x8be430
	public Void .ctor() { }
	// Offset : 0x8be4a4
	private Void OnEnable() { }
	// Offset : 0x8be53c
	private Void CreateVirtualAxes() { }
	// Offset : 0x8be698
	private Void UpdateVirtualAxes(Vector3 value) { }
	// Offset : 0x8be720
	public Void OnPointerDown(PointerEventData data) { }
	// Offset : 0x8be7f8
	private Void Update() { }
	// Offset : 0x8bea00
	public Void OnPointerUp(PointerEventData data) { }
	// Offset : 0x8bea78
	private Void OnDisable() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum AxisOption
{
	// Fields
	public Int32 value__; // 0x10
	public const AxisOption Both = 0; // 0x0
	public const AxisOption OnlyHorizontal = 1; // 0x0
	public const AxisOption OnlyVertical = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum ControlStyle
{
	// Fields
	public Int32 value__; // 0x10
	public const ControlStyle Absolute = 0; // 0x0
	public const ControlStyle Relative = 1; // 0x0
	public const ControlStyle Swipe = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: UnityStandardAssets.CrossPlatformInput
public abstract class VirtualInput
{
	// Fields
	private Vector3 <virtualMousePosition>k__BackingField; // 0x10
	protected Dictionary`2 m_VirtualAxes; // 0x20
	protected Dictionary`2 m_VirtualButtons; // 0x28
	protected List`1 m_AlwaysUseVirtual; // 0x30

	// Properties
	public Vector3 virtualMousePosition { get; set; }

	// Methods
	// Offset : 0x8bd3fc
	protected Void .ctor() { }
	// Offset : 0x8bdd78
	public Vector3 get_virtualMousePosition() { }
	// Offset : 0x8beb6c
	private Void set_virtualMousePosition(Vector3 value) { }
	// Offset : 0x8bb7d0
	public Boolean AxisExists(String name) { }
	// Offset : 0x8bb8c0
	public Boolean ButtonExists(String name) { }
	// Offset : 0x8bb930
	public Void RegisterVirtualAxis(VirtualAxis axis) { }
	// Offset : 0x8bbb30
	public Void RegisterVirtualButton(VirtualButton button) { }
	// Offset : 0x8bbd78
	public Void UnRegisterVirtualAxis(String name) { }
	// Offset : 0x8bbea4
	public Void UnRegisterVirtualButton(String name) { }
	// Offset : 0x8bbf50
	public VirtualAxis VirtualAxisReference(String name) { }
	// Offset : 0x8bc558
	public Void SetVirtualMousePositionX(Single f) { }
	// Offset : 0x8bc65c
	public Void SetVirtualMousePositionY(Single f) { }
	// Offset : 0x8bc764
	public Void SetVirtualMousePositionZ(Single f) { }
	// Offset : 0x
	public abstract Single GetAxis(String name, Boolean raw) { }
	// Offset : 0x
	public abstract Boolean GetButton(String name) { }
	// Offset : 0x
	public abstract Boolean GetButtonDown(String name) { }
	// Offset : 0x
	public abstract Boolean GetButtonUp(String name) { }
	// Offset : 0x
	public abstract Void SetButtonDown(String name) { }
	// Offset : 0x
	public abstract Void SetButtonUp(String name) { }
	// Offset : 0x
	public abstract Void SetAxisPositive(String name) { }
	// Offset : 0x
	public abstract Void SetAxisNegative(String name) { }
	// Offset : 0x
	public abstract Void SetAxisZero(String name) { }
	// Offset : 0x
	public abstract Void SetAxis(String name, Single value) { }
	// Offset : 0x
	public abstract Vector3 MousePosition() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum LogColor
{
	// Fields
	public Int32 value__; // 0x10
	public const LogColor None = 0; // 0x0
	public const LogColor Green = 1; // 0x0
	public const LogColor Yellow = 2; // 0x0
	public const LogColor Red = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class Debugger
{
	// Fields
	public static Boolean EnableLog; // 0x0
	public static Boolean LogToFile; // 0x1

	// Properties

	// Methods
	// Offset : 0x396ce0
	public Void .ctor() { }
	// Offset : 0x396ce8
	public static Void Log(Object message) { }
	// Offset : 0x396e2c
	public static Void Flush() { }
	// Offset : 0x396f94
	public static Void OnApplicationQuit() { }
	// Offset : 0x397114
	public static Void Log(Object message, LogColor type) { }
	// Offset : 0x396d50
	public static Void Log(Object message, Object context) { }
	// Offset : 0x39724c
	private static String FormatMessage(Object message) { }
	// Offset : 0x397448
	public static Void LogError(Object message) { }
	// Offset : 0x3974b0
	public static Void LogError(Object message, Object context) { }
	// Offset : 0x39758c
	public static Void LogWarning(Object message) { }
	// Offset : 0x3975f4
	public static Void LogWarning(Object message, Object context) { }
	// Offset : 0x3976d0
	public static Void DrawLine(Vector3 start, Vector3 end, Color color) { }
	// Offset : 0x39783c
	public static Void DrawLine(Vector3 start, Vector3 end, Color color, Single duration) { }
	// Offset : 0x3979d4
	public static Void DrawLine(Vector3 start, Vector3 end) { }
	// Offset : 0x397ac4
	public static Void DrawLine(Vector3 start, Vector3 end, Color color, Single duration, Boolean depthTest) { }
	// Offset : 0x397324
	public static Void WriteToFile(String message) { }
	// Offset : 0x397d44
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class DebuggerFileOutput : MonoBehaviour
{
	// Fields
	public static DebuggerFileOutput instance; // 0x0
	private List`1 m_OutputText; // 0x18
	private String m_OutputFilePath; // 0x20
	private StreamWriter m_Writer; // 0x28

	// Properties

	// Methods
	// Offset : 0x397da4
	public Void .ctor() { }
	// Offset : 0x397e14
	private Void Start() { }
	// Offset : 0x397f70
	private Void Update() { }
	// Offset : 0x3981e0
	private Void OnDestroy() { }
	// Offset : 0x397c64
	public Void Log(String msg) { }
	// Offset : 0x397f80
	public Void Flush() { }
	// Offset : 0x396f3c
	public Void FlushToFile() { }
	// Offset : 0x3970c4
	public Void Close() { }
	// Offset : 0x39823c
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public enum JsonType
{
	// Fields
	public Int32 value__; // 0x10
	public const JsonType None = 0; // 0x0
	public const JsonType Object = 1; // 0x0
	public const JsonType Array = 2; // 0x0
	public const JsonType String = 3; // 0x0
	public const JsonType Int = 4; // 0x0
	public const JsonType Long = 5; // 0x0
	public const JsonType Double = 6; // 0x0
	public const JsonType Boolean = 7; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public interface IJsonWrapper : IList, IOrderedDictionary, IEnumerable, ICollection, IDictionary
{
	// Fields

	// Properties
	public abstract Boolean IsArray { get; }
	public abstract Boolean IsBoolean { get; }
	public abstract Boolean IsDouble { get; }
	public abstract Boolean IsInt { get; }
	public abstract Boolean IsLong { get; }
	public abstract Boolean IsObject { get; }
	public abstract Boolean IsString { get; }

	// Methods
	// Offset : 0x
	public abstract Boolean get_IsArray() { }
	// Offset : 0x
	public abstract Boolean get_IsBoolean() { }
	// Offset : 0x
	public abstract Boolean get_IsDouble() { }
	// Offset : 0x
	public abstract Boolean get_IsInt() { }
	// Offset : 0x
	public abstract Boolean get_IsLong() { }
	// Offset : 0x
	public abstract Boolean get_IsObject() { }
	// Offset : 0x
	public abstract Boolean get_IsString() { }
	// Offset : 0x
	public abstract Boolean GetBoolean() { }
	// Offset : 0x
	public abstract Double GetDouble() { }
	// Offset : 0x
	public abstract Int32 GetInt() { }
	// Offset : 0x
	public abstract JsonType GetJsonType() { }
	// Offset : 0x
	public abstract Int64 GetLong() { }
	// Offset : 0x
	public abstract String GetString() { }
	// Offset : 0x
	public abstract Void SetBoolean(Boolean val) { }
	// Offset : 0x
	public abstract Void SetDouble(Double val) { }
	// Offset : 0x
	public abstract Void SetInt(Int32 val) { }
	// Offset : 0x
	public abstract Void SetJsonType(JsonType type) { }
	// Offset : 0x
	public abstract Void SetLong(Int64 val) { }
	// Offset : 0x
	public abstract Void SetString(String val) { }
	// Offset : 0x
	public abstract String ToJson() { }
	// Offset : 0x
	public abstract Void ToJson(JsonWriter writer) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public class JsonData : IJsonWrapper, IEquatable`1, IList, IOrderedDictionary, IEnumerable, ICollection, IDictionary
{
	// Fields
	private IList`1 inst_array; // 0x10
	private Boolean inst_boolean; // 0x18
	private Double inst_double; // 0x20
	private Int32 inst_int; // 0x28
	private Int64 inst_long; // 0x30
	private IDictionary`2 inst_object; // 0x38
	private String inst_string; // 0x40
	private String json; // 0x48
	private JsonType type; // 0x50
	private IList`1 object_list; // 0x58

	// Properties
	private Int32 System.Collections.ICollection.Count { get; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	private Boolean System.Collections.IDictionary.IsFixedSize { get; }
	private Boolean System.Collections.IDictionary.IsReadOnly { get; }
	private ICollection System.Collections.IDictionary.Keys { get; }
	private ICollection System.Collections.IDictionary.Values { get; }
	private Boolean LitJson.IJsonWrapper.IsArray { get; }
	private Boolean LitJson.IJsonWrapper.IsBoolean { get; }
	private Boolean LitJson.IJsonWrapper.IsDouble { get; }
	private Boolean LitJson.IJsonWrapper.IsInt { get; }
	private Boolean LitJson.IJsonWrapper.IsLong { get; }
	private Boolean LitJson.IJsonWrapper.IsObject { get; }
	private Boolean LitJson.IJsonWrapper.IsString { get; }
	private Boolean System.Collections.IList.IsFixedSize { get; }
	private Boolean System.Collections.IList.IsReadOnly { get; }
	private Object System.Collections.IDictionary.Item { get; set; }
	private Object System.Collections.Specialized.IOrderedDictionary.Item { get; set; }
	private Object System.Collections.IList.Item { get; set; }
	public Int32 Count { get; }
	public Boolean IsArray { get; }
	public Boolean IsBoolean { get; }
	public Boolean IsDouble { get; }
	public Boolean IsInt { get; }
	public Boolean IsLong { get; }
	public Boolean IsObject { get; }
	public Boolean IsString { get; }
	public JsonData Item { get; set; }
	public JsonData Item { get; set; }

	// Methods
	// Offset : 0x441d00
	public Void .ctor() { }
	// Offset : 0x441d08
	public Void .ctor(Boolean boolean) { }
	// Offset : 0x441d40
	public Void .ctor(Double number) { }
	// Offset : 0x441d7c
	public Void .ctor(Int32 number) { }
	// Offset : 0x441db0
	public Void .ctor(Int64 number) { }
	// Offset : 0x441de4
	public Void .ctor(Object obj) { }
	// Offset : 0x441fc0
	public Void .ctor(String str) { }
	// Offset : 0x441ff4
	public Int32 get_Count() { }
	// Offset : 0x442200
	public Boolean get_IsArray() { }
	// Offset : 0x442210
	public Boolean get_IsBoolean() { }
	// Offset : 0x442220
	public Boolean get_IsDouble() { }
	// Offset : 0x442230
	public Boolean get_IsInt() { }
	// Offset : 0x442240
	public Boolean get_IsLong() { }
	// Offset : 0x442250
	public Boolean get_IsObject() { }
	// Offset : 0x442260
	public Boolean get_IsString() { }
	// Offset : 0x442270
	private Int32 System.Collections.ICollection.get_Count() { }
	// Offset : 0x442274
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x442364
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x442454
	private Boolean System.Collections.IDictionary.get_IsFixedSize() { }
	// Offset : 0x4426b4
	private Boolean System.Collections.IDictionary.get_IsReadOnly() { }
	// Offset : 0x4427a4
	private ICollection System.Collections.IDictionary.get_Keys() { }
	// Offset : 0x442c58
	private ICollection System.Collections.IDictionary.get_Values() { }
	// Offset : 0x44310c
	private Boolean LitJson.IJsonWrapper.get_IsArray() { }
	// Offset : 0x44311c
	private Boolean LitJson.IJsonWrapper.get_IsBoolean() { }
	// Offset : 0x44312c
	private Boolean LitJson.IJsonWrapper.get_IsDouble() { }
	// Offset : 0x44313c
	private Boolean LitJson.IJsonWrapper.get_IsInt() { }
	// Offset : 0x44314c
	private Boolean LitJson.IJsonWrapper.get_IsLong() { }
	// Offset : 0x44315c
	private Boolean LitJson.IJsonWrapper.get_IsObject() { }
	// Offset : 0x44316c
	private Boolean LitJson.IJsonWrapper.get_IsString() { }
	// Offset : 0x44317c
	private Boolean System.Collections.IList.get_IsFixedSize() { }
	// Offset : 0x4433b0
	private Boolean System.Collections.IList.get_IsReadOnly() { }
	// Offset : 0x4434a0
	private Object System.Collections.IDictionary.get_Item(Object key) { }
	// Offset : 0x443598
	private Void System.Collections.IDictionary.set_Item(Object key, Object value) { }
	// Offset : 0x443c8c
	private Object System.Collections.Specialized.IOrderedDictionary.get_Item(Int32 idx) { }
	// Offset : 0x443db4
	private Void System.Collections.Specialized.IOrderedDictionary.set_Item(Int32 idx, Object value) { }
	// Offset : 0x444090
	private Object System.Collections.IList.get_Item(Int32 index) { }
	// Offset : 0x444188
	private Void System.Collections.IList.set_Item(Int32 index, Object value) { }
	// Offset : 0x444564
	public Boolean ContainsKey(String key) { }
	// Offset : 0x444660
	public Boolean TryGetValue(String key, out JsonData value) { }
	// Offset : 0x44476c
	public JsonData get_Item(String prop_name) { }
	// Offset : 0x443760
	public Void set_Item(String prop_name, JsonData value) { }
	// Offset : 0x444868
	public JsonData get_Item(Int32 index) { }
	// Offset : 0x4441cc
	public Void set_Item(Int32 index, JsonData value) { }
	// Offset : 0x444a4c
	public static JsonData op_Implicit(Boolean data) { }
	// Offset : 0x444abc
	public static JsonData op_Implicit(Double data) { }
	// Offset : 0x444b30
	public static JsonData op_Implicit(Int32 data) { }
	// Offset : 0x444b9c
	public static JsonData op_Implicit(Int64 data) { }
	// Offset : 0x444c08
	public static JsonData op_Implicit(String data) { }
	// Offset : 0x444c74
	public static Boolean op_Explicit(JsonData data) { }
	// Offset : 0x444d14
	public static Double op_Explicit(JsonData data) { }
	// Offset : 0x444db4
	public static Int32 op_Explicit(JsonData data) { }
	// Offset : 0x444e54
	public static Int64 op_Explicit(JsonData data) { }
	// Offset : 0x444ef4
	public static String op_Explicit(JsonData data) { }
	// Offset : 0x444f94
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x44509c
	private Void System.Collections.IDictionary.Add(Object key, Object value) { }
	// Offset : 0x4452f8
	private Void System.Collections.IDictionary.Clear() { }
	// Offset : 0x445498
	private Boolean System.Collections.IDictionary.Contains(Object key) { }
	// Offset : 0x445590
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { }
	// Offset : 0x445668
	private Void System.Collections.IDictionary.Remove(Object key) { }
	// Offset : 0x445a5c
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x445b48
	private Boolean LitJson.IJsonWrapper.GetBoolean() { }
	// Offset : 0x445bdc
	private Double LitJson.IJsonWrapper.GetDouble() { }
	// Offset : 0x445c70
	private Int32 LitJson.IJsonWrapper.GetInt() { }
	// Offset : 0x445d04
	private Int64 LitJson.IJsonWrapper.GetLong() { }
	// Offset : 0x445d98
	private String LitJson.IJsonWrapper.GetString() { }
	// Offset : 0x445e2c
	private Void LitJson.IJsonWrapper.SetBoolean(Boolean val) { }
	// Offset : 0x445e44
	private Void LitJson.IJsonWrapper.SetDouble(Double val) { }
	// Offset : 0x445e58
	private Void LitJson.IJsonWrapper.SetInt(Int32 val) { }
	// Offset : 0x445e6c
	private Void LitJson.IJsonWrapper.SetLong(Int64 val) { }
	// Offset : 0x445e80
	private Void LitJson.IJsonWrapper.SetString(String val) { }
	// Offset : 0x445e90
	private String LitJson.IJsonWrapper.ToJson() { }
	// Offset : 0x445f70
	private Void LitJson.IJsonWrapper.ToJson(JsonWriter writer) { }
	// Offset : 0x445fe8
	private Int32 System.Collections.IList.Add(Object value) { }
	// Offset : 0x4460f4
	private Void System.Collections.IList.Clear() { }
	// Offset : 0x4461ec
	private Boolean System.Collections.IList.Contains(Object value) { }
	// Offset : 0x4462e4
	private Int32 System.Collections.IList.IndexOf(Object value) { }
	// Offset : 0x4463dc
	private Void System.Collections.IList.Insert(Int32 index, Object value) { }
	// Offset : 0x4464ec
	private Void System.Collections.IList.Remove(Object value) { }
	// Offset : 0x4465f4
	private Void System.Collections.IList.RemoveAt(Int32 index) { }
	// Offset : 0x4466fc
	private IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator() { }
	// Offset : 0x446848
	private Void System.Collections.Specialized.IOrderedDictionary.Insert(Int32 idx, Object key, Object value) { }
	// Offset : 0x446a04
	private Void System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32 idx) { }
	// Offset : 0x4420e0
	private ICollection EnsureCollection() { }
	// Offset : 0x442540
	private IDictionary EnsureDictionary() { }
	// Offset : 0x443268
	private IList EnsureList() { }
	// Offset : 0x4436c4
	private JsonData ToJsonData(Object obj) { }
	// Offset : 0x446c90
	private static Void WriteJson(IJsonWrapper obj, JsonWriter writer) { }
	// Offset : 0x445fec
	public Int32 Add(Object value) { }
	// Offset : 0x4486fc
	public Void Clear() { }
	// Offset : 0x448878
	public Boolean Equals(JsonData x) { }
	// Offset : 0x4489b4
	public JsonType GetJsonType() { }
	// Offset : 0x4489bc
	public Void SetJsonType(JsonType type) { }
	// Offset : 0x445e94
	public String ToJson() { }
	// Offset : 0x445f74
	public Void ToJson(JsonWriter writer) { }
	// Offset : 0x448b98
	public override String ToString() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal class OrderedDictionaryEnumerator : IDictionaryEnumerator, IEnumerator
{
	// Fields
	private IEnumerator`1 list_enumerator; // 0x10

	// Properties
	public Object Current { get; }
	public DictionaryEntry Entry { get; }
	public Object Key { get; }
	public Object Value { get; }

	// Methods
	// Offset : 0x44681c
	public Void .ctor(IEnumerator`1 enumerator) { }
	// Offset : 0x459628
	public Object get_Current() { }
	// Offset : 0x459694
	public DictionaryEntry get_Entry() { }
	// Offset : 0x4597dc
	public Object get_Key() { }
	// Offset : 0x4598f0
	public Object get_Value() { }
	// Offset : 0x459a04
	public Boolean MoveNext() { }
	// Offset : 0x459af0
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public class JsonException : ApplicationException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x448c78
	public Void .ctor() { }
	// Offset : 0x448c80
	internal Void .ctor(ParserToken token) { }
	// Offset : 0x448d34
	internal Void .ctor(ParserToken token, Exception inner_exception) { }
	// Offset : 0x448df8
	internal Void .ctor(Int32 c) { }
	// Offset : 0x448eac
	internal Void .ctor(Int32 c, Exception inner_exception) { }
	// Offset : 0x448f70
	public Void .ctor(String message) { }
	// Offset : 0x448f78
	public Void .ctor(String message, Exception inner_exception) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal struct PropertyMetadata
{
	// Fields
	public MemberInfo Info; // 0x10
	public Boolean IsField; // 0x18
	public Type Type; // 0x20

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal struct ArrayMetadata
{
	// Fields
	private Type element_type; // 0x10
	private Boolean is_array; // 0x18
	private Boolean is_list; // 0x19

	// Properties
	public Type ElementType { get; set; }
	public Boolean IsArray { get; set; }
	public Boolean IsList { get; set; }

	// Methods
	// Offset : 0x2c83d8
	public Type get_ElementType() { }
	// Offset : 0x2c83e0
	public Void set_ElementType(Type value) { }
	// Offset : 0x2c83e8
	public Boolean get_IsArray() { }
	// Offset : 0x2c83f0
	public Void set_IsArray(Boolean value) { }
	// Offset : 0x2c83fc
	public Boolean get_IsList() { }
	// Offset : 0x2c8404
	public Void set_IsList(Boolean value) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal struct ObjectMetadata
{
	// Fields
	private Type element_type; // 0x10
	private Boolean is_dictionary; // 0x18
	private IDictionary`2 properties; // 0x20

	// Properties
	public Type ElementType { get; set; }
	public Boolean IsDictionary { get; set; }
	public IDictionary`2 Properties { get; set; }

	// Methods
	// Offset : 0x2c845c
	public Type get_ElementType() { }
	// Offset : 0x2c8464
	public Void set_ElementType(Type value) { }
	// Offset : 0x2c846c
	public Boolean get_IsDictionary() { }
	// Offset : 0x2c8474
	public Void set_IsDictionary(Boolean value) { }
	// Offset : 0x2c8480
	public IDictionary`2 get_Properties() { }
	// Offset : 0x2c8488
	public Void set_Properties(IDictionary`2 value) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal sealed class ExporterFunc : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4412c8
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x4412d8
	public virtual Void Invoke(Object obj, JsonWriter writer) { }
	// Offset : 0x4417b8
	public virtual IAsyncResult BeginInvoke(Object obj, JsonWriter writer, AsyncCallback callback, Object object) { }
	// Offset : 0x4417e8
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public sealed class ExporterFunc`1 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual Void Invoke(T obj, JsonWriter writer) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(T obj, JsonWriter writer, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal sealed class ImporterFunc : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4417fc
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x44180c
	public virtual Object Invoke(Object input) { }
	// Offset : 0x441cd0
	public virtual IAsyncResult BeginInvoke(Object input, AsyncCallback callback, Object object) { }
	// Offset : 0x441cf4
	public virtual Object EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public sealed class ImporterFunc`2 : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x
	public virtual TValue Invoke(TJson input) { }
	// Offset : 0x
	public virtual IAsyncResult BeginInvoke(TJson input, AsyncCallback callback, Object object) { }
	// Offset : 0x
	public virtual TValue EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public sealed class WrapperFactory : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x44f840
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x44f5a4
	public virtual IJsonWrapper Invoke() { }
	// Offset : 0x459bdc
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x459c10
	public virtual IJsonWrapper EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public class JsonMapper
{
	// Fields
	private static Int32 max_nesting_depth; // 0x0
	private static IFormatProvider datetime_format; // 0x8
	private static IDictionary`2 base_exporters_table; // 0x10
	private static IDictionary`2 custom_exporters_table; // 0x18
	private static IDictionary`2 base_importers_table; // 0x20
	private static IDictionary`2 custom_importers_table; // 0x28
	private static IDictionary`2 array_metadata; // 0x30
	private static readonly Object array_metadata_lock; // 0x38
	private static IDictionary`2 conv_ops; // 0x40
	private static readonly Object conv_ops_lock; // 0x48
	private static IDictionary`2 object_metadata; // 0x50
	private static readonly Object object_metadata_lock; // 0x58
	private static IDictionary`2 type_properties; // 0x60
	private static readonly Object type_properties_lock; // 0x68
	private static JsonWriter static_writer; // 0x70
	private static readonly Object static_writer_lock; // 0x78
	private static WrapperFactory <>f__am$cache0; // 0x80
	private static ExporterFunc <>f__am$cache1; // 0x88
	private static ExporterFunc <>f__am$cache2; // 0x90
	private static ExporterFunc <>f__am$cache3; // 0x98
	private static ExporterFunc <>f__am$cache4; // 0xa0
	private static ExporterFunc <>f__am$cache5; // 0xa8
	private static ExporterFunc <>f__am$cache6; // 0xb0
	private static ExporterFunc <>f__am$cache7; // 0xb8
	private static ExporterFunc <>f__am$cache8; // 0xc0
	private static ExporterFunc <>f__am$cache9; // 0xc8
	private static ExporterFunc <>f__am$cacheA; // 0xd0
	private static ImporterFunc <>f__am$cacheB; // 0xd8
	private static ImporterFunc <>f__am$cacheC; // 0xe0
	private static ImporterFunc <>f__am$cacheD; // 0xe8
	private static ImporterFunc <>f__am$cacheE; // 0xf0
	private static ImporterFunc <>f__am$cacheF; // 0xf8
	private static ImporterFunc <>f__am$cache10; // 0x100
	private static ImporterFunc <>f__am$cache11; // 0x108
	private static ImporterFunc <>f__am$cache12; // 0x110
	private static ImporterFunc <>f__am$cache13; // 0x118
	private static ImporterFunc <>f__am$cache14; // 0x120
	private static ImporterFunc <>f__am$cache15; // 0x128
	private static ImporterFunc <>f__am$cache16; // 0x130
	private static ImporterFunc <>f__am$cache17; // 0x138
	private static ImporterFunc <>f__am$cache18; // 0x140
	private static WrapperFactory <>f__am$cache19; // 0x148
	private static WrapperFactory <>f__am$cache1A; // 0x150
	private static WrapperFactory <>f__am$cache1B; // 0x158

	// Properties

	// Methods
	// Offset : 0x448f80
	private static Void .cctor() { }
	// Offset : 0x44ae18
	public Void .ctor() { }
	// Offset : 0x44ae20
	private static Void AddArrayMetadata(Type type) { }
	// Offset : 0x44b3ac
	private static Void AddObjectMetadata(Type type) { }
	// Offset : 0x44bca8
	private static Void AddTypeProperties(Type type) { }
	// Offset : 0x44c2ec
	private static MethodInfo GetConvOp(Type t1, Type t2) { }
	// Offset : 0x44cd0c
	private static Object ReadValue(Type inst_type, JsonReader reader) { }
	// Offset : 0x44ecb8
	private static IJsonWrapper ReadValue(WrapperFactory factory, JsonReader reader) { }
	// Offset : 0x44eb44
	private static Void ReadSkip(JsonReader reader) { }
	// Offset : 0x4492d8
	private static Void RegisterBaseExporters() { }
	// Offset : 0x44a190
	private static Void RegisterBaseImporters() { }
	// Offset : 0x44f8c4
	private static Void RegisterImporter(IDictionary`2 table, Type json_type, Type value_type, ImporterFunc importer) { }
	// Offset : 0x44fbe0
	private static Void WriteValue(Object obj, JsonWriter writer, Boolean writer_is_private, Int32 depth) { }
	// Offset : 0x451b48
	public static String ToJson(Object obj) { }
	// Offset : 0x451da8
	public static Void ToJson(Object obj, JsonWriter writer) { }
	// Offset : 0x451e24
	public static JsonData ToObject(JsonReader reader) { }
	// Offset : 0x451f94
	public static JsonData ToObject(TextReader reader) { }
	// Offset : 0x45212c
	public static JsonData ToObject(String json) { }
	// Offset : 0x44eaa4
	public static Object ToObject(String json, Type inst_type) { }
	// Offset : 0x
	public static T ToObject(JsonReader reader) { }
	// Offset : 0x
	public static T ToObject(TextReader reader) { }
	// Offset : 0x
	public static T ToObject(String json) { }
	// Offset : 0x44f850
	public static IJsonWrapper ToWrapper(WrapperFactory factory, JsonReader reader) { }
	// Offset : 0x45229c
	public static IJsonWrapper ToWrapper(WrapperFactory factory, String json) { }
	// Offset : 0x
	public static Void RegisterExporter(ExporterFunc`1 exporter) { }
	// Offset : 0x
	public static Void RegisterImporter(ImporterFunc`2 importer) { }
	// Offset : 0x4523a4
	public static Void UnregisterExporters() { }
	// Offset : 0x4524b4
	public static Void UnregisterImporters() { }
	// Offset : 0x4525c4
	private static IJsonWrapper <ReadSkip>m__0() { }
	// Offset : 0x452628
	private static Void <RegisterBaseExporters>m__1(Object obj, JsonWriter writer) { }
	// Offset : 0x4526cc
	private static Void <RegisterBaseExporters>m__2(Object obj, JsonWriter writer) { }
	// Offset : 0x452770
	private static Void <RegisterBaseExporters>m__3(Object obj, JsonWriter writer) { }
	// Offset : 0x45284c
	private static Void <RegisterBaseExporters>m__4(Object obj, JsonWriter writer) { }
	// Offset : 0x4529ac
	private static Void <RegisterBaseExporters>m__5(Object obj, JsonWriter writer) { }
	// Offset : 0x452a50
	private static Void <RegisterBaseExporters>m__6(Object obj, JsonWriter writer) { }
	// Offset : 0x452af4
	private static Void <RegisterBaseExporters>m__7(Object obj, JsonWriter writer) { }
	// Offset : 0x452b98
	private static Void <RegisterBaseExporters>m__8(Object obj, JsonWriter writer) { }
	// Offset : 0x452c3c
	private static Void <RegisterBaseExporters>m__9(Object obj, JsonWriter writer) { }
	// Offset : 0x452cb0
	private static Void <RegisterBaseExporters>m__A(Object obj, JsonWriter writer) { }
	// Offset : 0x452d5c
	private static Object <RegisterBaseImporters>m__B(Object input) { }
	// Offset : 0x452e00
	private static Object <RegisterBaseImporters>m__C(Object input) { }
	// Offset : 0x452ea4
	private static Object <RegisterBaseImporters>m__D(Object input) { }
	// Offset : 0x452f48
	private static Object <RegisterBaseImporters>m__E(Object input) { }
	// Offset : 0x452fec
	private static Object <RegisterBaseImporters>m__F(Object input) { }
	// Offset : 0x453090
	private static Object <RegisterBaseImporters>m__10(Object input) { }
	// Offset : 0x453134
	private static Object <RegisterBaseImporters>m__11(Object input) { }
	// Offset : 0x4531d4
	private static Object <RegisterBaseImporters>m__12(Object input) { }
	// Offset : 0x453274
	private static Object <RegisterBaseImporters>m__13(Object input) { }
	// Offset : 0x453318
	private static Object <RegisterBaseImporters>m__14(Object input) { }
	// Offset : 0x4533bc
	private static Object <RegisterBaseImporters>m__15(Object input) { }
	// Offset : 0x453460
	private static Object <RegisterBaseImporters>m__16(Object input) { }
	// Offset : 0x453504
	private static Object <RegisterBaseImporters>m__17(Object input) { }
	// Offset : 0x453600
	private static Object <RegisterBaseImporters>m__18(Object input) { }
	// Offset : 0x453730
	private static IJsonWrapper <ToObject>m__19() { }
	// Offset : 0x45378c
	private static IJsonWrapper <ToObject>m__1A() { }
	// Offset : 0x4537e8
	private static IJsonWrapper <ToObject>m__1B() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <RegisterExporter>c__AnonStorey0`1
{
	// Fields
	internal ExporterFunc`1 exporter; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	internal Void <>m__0(Object obj, JsonWriter writer) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <RegisterImporter>c__AnonStorey1`2
{
	// Fields
	internal ImporterFunc`2 importer; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	internal Object <>m__0(Object input) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public class JsonMockWrapper : IJsonWrapper, IList, IOrderedDictionary, IEnumerable, ICollection, IDictionary
{
	// Fields

	// Properties
	private Boolean System.Collections.IList.IsFixedSize { get; }
	private Boolean System.Collections.IList.IsReadOnly { get; }
	private Object System.Collections.IList.Item { get; set; }
	private Int32 System.Collections.ICollection.Count { get; }
	private Boolean System.Collections.ICollection.IsSynchronized { get; }
	private Object System.Collections.ICollection.SyncRoot { get; }
	private Boolean System.Collections.IDictionary.IsFixedSize { get; }
	private Boolean System.Collections.IDictionary.IsReadOnly { get; }
	private ICollection System.Collections.IDictionary.Keys { get; }
	private ICollection System.Collections.IDictionary.Values { get; }
	private Object System.Collections.IDictionary.Item { get; set; }
	private Object System.Collections.Specialized.IOrderedDictionary.Item { get; set; }
	public Boolean IsArray { get; }
	public Boolean IsBoolean { get; }
	public Boolean IsDouble { get; }
	public Boolean IsInt { get; }
	public Boolean IsLong { get; }
	public Boolean IsObject { get; }
	public Boolean IsString { get; }

	// Methods
	// Offset : 0x452620
	public Void .ctor() { }
	// Offset : 0x453844
	public Boolean get_IsArray() { }
	// Offset : 0x45384c
	public Boolean get_IsBoolean() { }
	// Offset : 0x453854
	public Boolean get_IsDouble() { }
	// Offset : 0x45385c
	public Boolean get_IsInt() { }
	// Offset : 0x453864
	public Boolean get_IsLong() { }
	// Offset : 0x45386c
	public Boolean get_IsObject() { }
	// Offset : 0x453874
	public Boolean get_IsString() { }
	// Offset : 0x45387c
	public Boolean GetBoolean() { }
	// Offset : 0x453884
	public Double GetDouble() { }
	// Offset : 0x45388c
	public Int32 GetInt() { }
	// Offset : 0x453894
	public JsonType GetJsonType() { }
	// Offset : 0x45389c
	public Int64 GetLong() { }
	// Offset : 0x4538a4
	public String GetString() { }
	// Offset : 0x45390c
	public Void SetBoolean(Boolean val) { }
	// Offset : 0x453910
	public Void SetDouble(Double val) { }
	// Offset : 0x453914
	public Void SetInt(Int32 val) { }
	// Offset : 0x453918
	public Void SetJsonType(JsonType type) { }
	// Offset : 0x45391c
	public Void SetLong(Int64 val) { }
	// Offset : 0x453920
	public Void SetString(String val) { }
	// Offset : 0x453924
	public String ToJson() { }
	// Offset : 0x45398c
	public Void ToJson(JsonWriter writer) { }
	// Offset : 0x453990
	private Boolean System.Collections.IList.get_IsFixedSize() { }
	// Offset : 0x453998
	private Boolean System.Collections.IList.get_IsReadOnly() { }
	// Offset : 0x4539a0
	private Object System.Collections.IList.get_Item(Int32 index) { }
	// Offset : 0x4539a8
	private Void System.Collections.IList.set_Item(Int32 index, Object value) { }
	// Offset : 0x4539ac
	private Int32 System.Collections.IList.Add(Object value) { }
	// Offset : 0x4539b4
	private Void System.Collections.IList.Clear() { }
	// Offset : 0x4539b8
	private Boolean System.Collections.IList.Contains(Object value) { }
	// Offset : 0x4539c0
	private Int32 System.Collections.IList.IndexOf(Object value) { }
	// Offset : 0x4539c8
	private Void System.Collections.IList.Insert(Int32 i, Object v) { }
	// Offset : 0x4539cc
	private Void System.Collections.IList.Remove(Object value) { }
	// Offset : 0x4539d0
	private Void System.Collections.IList.RemoveAt(Int32 index) { }
	// Offset : 0x4539d4
	private Int32 System.Collections.ICollection.get_Count() { }
	// Offset : 0x4539dc
	private Boolean System.Collections.ICollection.get_IsSynchronized() { }
	// Offset : 0x4539e4
	private Object System.Collections.ICollection.get_SyncRoot() { }
	// Offset : 0x4539ec
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
	// Offset : 0x4539f0
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x4539f8
	private Boolean System.Collections.IDictionary.get_IsFixedSize() { }
	// Offset : 0x453a00
	private Boolean System.Collections.IDictionary.get_IsReadOnly() { }
	// Offset : 0x453a08
	private ICollection System.Collections.IDictionary.get_Keys() { }
	// Offset : 0x453a10
	private ICollection System.Collections.IDictionary.get_Values() { }
	// Offset : 0x453a18
	private Object System.Collections.IDictionary.get_Item(Object key) { }
	// Offset : 0x453a20
	private Void System.Collections.IDictionary.set_Item(Object key, Object value) { }
	// Offset : 0x453a24
	private Void System.Collections.IDictionary.Add(Object k, Object v) { }
	// Offset : 0x453a28
	private Void System.Collections.IDictionary.Clear() { }
	// Offset : 0x453a2c
	private Boolean System.Collections.IDictionary.Contains(Object key) { }
	// Offset : 0x453a34
	private Void System.Collections.IDictionary.Remove(Object key) { }
	// Offset : 0x453a38
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { }
	// Offset : 0x453a40
	private Object System.Collections.Specialized.IOrderedDictionary.get_Item(Int32 idx) { }
	// Offset : 0x453a48
	private Void System.Collections.Specialized.IOrderedDictionary.set_Item(Int32 idx, Object value) { }
	// Offset : 0x453a4c
	private IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator() { }
	// Offset : 0x453a54
	private Void System.Collections.Specialized.IOrderedDictionary.Insert(Int32 i, Object k, Object v) { }
	// Offset : 0x453a58
	private Void System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32 i) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public enum JsonToken
{
	// Fields
	public Int32 value__; // 0x10
	public const JsonToken None = 0; // 0x0
	public const JsonToken ObjectStart = 1; // 0x0
	public const JsonToken PropertyName = 2; // 0x0
	public const JsonToken ObjectEnd = 3; // 0x0
	public const JsonToken ArrayStart = 4; // 0x0
	public const JsonToken ArrayEnd = 5; // 0x0
	public const JsonToken Int = 6; // 0x0
	public const JsonToken Long = 7; // 0x0
	public const JsonToken Double = 8; // 0x0
	public const JsonToken String = 9; // 0x0
	public const JsonToken Boolean = 10; // 0x0
	public const JsonToken Null = 11; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public class JsonReader
{
	// Fields
	private static IDictionary`2 parse_table; // 0x0
	private Stack`1 automaton_stack; // 0x10
	private Int32 current_input; // 0x18
	private Int32 current_symbol; // 0x1c
	private Boolean end_of_json; // 0x20
	private Boolean end_of_input; // 0x21
	private Lexer lexer; // 0x28
	private Boolean parser_in_string; // 0x30
	private Boolean parser_return; // 0x31
	private Boolean read_started; // 0x32
	private TextReader reader; // 0x38
	private Boolean reader_is_owned; // 0x40
	private Boolean skip_non_members; // 0x41
	private Object token_value; // 0x48
	private JsonToken token; // 0x50

	// Properties
	public Boolean AllowComments { get; set; }
	public Boolean AllowSingleQuotedStrings { get; set; }
	public Boolean SkipNonMembers { get; set; }
	public Boolean EndOfInput { get; }
	public Boolean EndOfJson { get; }
	public JsonToken Token { get; }
	public Object Value { get; }

	// Methods
	// Offset : 0x453a5c
	private static Void .cctor() { }
	// Offset : 0x45232c
	public Void .ctor(String json_text) { }
	// Offset : 0x452124
	public Void .ctor(TextReader reader) { }
	// Offset : 0x454254
	private Void .ctor(TextReader reader, Boolean owned) { }
	// Offset : 0x454480
	public Boolean get_AllowComments() { }
	// Offset : 0x4544b4
	public Void set_AllowComments(Boolean value) { }
	// Offset : 0x4544f4
	public Boolean get_AllowSingleQuotedStrings() { }
	// Offset : 0x454528
	public Void set_AllowSingleQuotedStrings(Boolean value) { }
	// Offset : 0x44eb3c
	public Boolean get_SkipNonMembers() { }
	// Offset : 0x454568
	public Void set_SkipNonMembers(Boolean value) { }
	// Offset : 0x454574
	public Boolean get_EndOfInput() { }
	// Offset : 0x45457c
	public Boolean get_EndOfJson() { }
	// Offset : 0x44ea94
	public JsonToken get_Token() { }
	// Offset : 0x44ea9c
	public Object get_Value() { }
	// Offset : 0x453a60
	private static Void PopulateParseTable() { }
	// Offset : 0x4546c8
	private static Void TableAddCol(ParserToken row, Int32 col, Int32[] symbols) { }
	// Offset : 0x454584
	private static Void TableAddRow(ParserToken rule) { }
	// Offset : 0x454898
	private Void ProcessNumber(String number) { }
	// Offset : 0x454a1c
	private Void ProcessSymbol() { }
	// Offset : 0x454bd4
	private Boolean ReadToken() { }
	// Offset : 0x454ee8
	public Void Close() { }
	// Offset : 0x44e588
	public Boolean Read() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal enum Condition
{
	// Fields
	public Int32 value__; // 0x10
	public const Condition InArray = 0; // 0x0
	public const Condition InObject = 1; // 0x0
	public const Condition NotAProperty = 2; // 0x0
	public const Condition Property = 3; // 0x0
	public const Condition Value = 4; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal class WriterContext
{
	// Fields
	public Int32 Count; // 0x10
	public Boolean InArray; // 0x14
	public Boolean InObject; // 0x15
	public Boolean ExpectingValue; // 0x16
	public Int32 Padding; // 0x18

	// Properties

	// Methods
	// Offset : 0x4553dc
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
public class JsonWriter
{
	// Fields
	private static NumberFormatInfo number_format; // 0x0
	private WriterContext context; // 0x10
	private Stack`1 ctx_stack; // 0x18
	private Boolean has_reached_end; // 0x20
	private Char[] hex_seq; // 0x28
	private Int32 indentation; // 0x30
	private Int32 indent_value; // 0x34
	private StringBuilder inst_string_builder; // 0x38
	private Boolean pretty_print; // 0x40
	private Boolean validate; // 0x41
	private TextWriter writer; // 0x48

	// Properties
	public Int32 IndentValue { get; set; }
	public Boolean PrettyPrint { get; set; }
	public TextWriter TextWriter { get; }
	public Boolean Validate { get; set; }

	// Methods
	// Offset : 0x454f60
	private static Void .cctor() { }
	// Offset : 0x44923c
	public Void .ctor() { }
	// Offset : 0x4550b4
	public Void .ctor(StringBuilder sb) { }
	// Offset : 0x448adc
	public Void .ctor(TextWriter writer) { }
	// Offset : 0x455128
	public Int32 get_IndentValue() { }
	// Offset : 0x455130
	public Void set_IndentValue(Int32 value) { }
	// Offset : 0x455144
	public Boolean get_PrettyPrint() { }
	// Offset : 0x45514c
	public Void set_PrettyPrint(Boolean value) { }
	// Offset : 0x451a5c
	public TextWriter get_TextWriter() { }
	// Offset : 0x448b90
	public Boolean get_Validate() { }
	// Offset : 0x448b84
	public Void set_Validate(Boolean value) { }
	// Offset : 0x455158
	private Void DoValidation(Condition cond) { }
	// Offset : 0x454fd8
	private Void Init() { }
	// Offset : 0x4553e4
	private static Void IntToHex(Int32 n, Char[] hex) { }
	// Offset : 0x455494
	private Void Indent() { }
	// Offset : 0x4554ac
	private Void Put(String str) { }
	// Offset : 0x455588
	private Void PutNewline() { }
	// Offset : 0x455590
	private Void PutNewline(Boolean add_comma) { }
	// Offset : 0x455684
	private Void PutString(String str) { }
	// Offset : 0x455ac4
	private Void Unindent() { }
	// Offset : 0x455adc
	public override String ToString() { }
	// Offset : 0x451cbc
	public Void Reset() { }
	// Offset : 0x447d28
	public Void Write(Boolean boolean) { }
	// Offset : 0x4528c0
	public Void Write(Decimal number) { }
	// Offset : 0x447dd4
	public Void Write(Double number) { }
	// Offset : 0x447f54
	public Void Write(Int32 number) { }
	// Offset : 0x448038
	public Void Write(Int64 number) { }
	// Offset : 0x447c88
	public Void Write(String str) { }
	// Offset : 0x451a64
	public Void Write(UInt64 number) { }
	// Offset : 0x448200
	public Void WriteArrayEnd() { }
	// Offset : 0x44811c
	public Void WriteArrayStart() { }
	// Offset : 0x4485ec
	public Void WriteObjectEnd() { }
	// Offset : 0x448310
	public Void WriteObjectStart() { }
	// Offset : 0x4483f4
	public Void WritePropertyName(String property_name) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal class FsmContext
{
	// Fields
	public Boolean Return; // 0x10
	public Int32 NextState; // 0x14
	public Lexer L; // 0x18
	public Int32 StateStack; // 0x20

	// Properties

	// Methods
	// Offset : 0x4417f4
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal class Lexer
{
	// Fields
	private static Int32[] fsm_return_table; // 0x0
	private static StateHandler[] fsm_handler_table; // 0x8
	private Boolean allow_comments; // 0x10
	private Boolean allow_single_quoted_strings; // 0x11
	private Boolean end_of_input; // 0x12
	private FsmContext fsm_context; // 0x18
	private Int32 input_buffer; // 0x20
	private Int32 input_char; // 0x24
	private TextReader reader; // 0x28
	private Int32 state; // 0x30
	private StringBuilder string_buffer; // 0x38
	private String string_value; // 0x40
	private Int32 token; // 0x48
	private Int32 unichar; // 0x4c
	private static StateHandler <>f__mg$cache0; // 0x10
	private static StateHandler <>f__mg$cache1; // 0x18
	private static StateHandler <>f__mg$cache2; // 0x20
	private static StateHandler <>f__mg$cache3; // 0x28
	private static StateHandler <>f__mg$cache4; // 0x30
	private static StateHandler <>f__mg$cache5; // 0x38
	private static StateHandler <>f__mg$cache6; // 0x40
	private static StateHandler <>f__mg$cache7; // 0x48
	private static StateHandler <>f__mg$cache8; // 0x50
	private static StateHandler <>f__mg$cache9; // 0x58
	private static StateHandler <>f__mg$cacheA; // 0x60
	private static StateHandler <>f__mg$cacheB; // 0x68
	private static StateHandler <>f__mg$cacheC; // 0x70
	private static StateHandler <>f__mg$cacheD; // 0x78
	private static StateHandler <>f__mg$cacheE; // 0x80
	private static StateHandler <>f__mg$cacheF; // 0x88
	private static StateHandler <>f__mg$cache10; // 0x90
	private static StateHandler <>f__mg$cache11; // 0x98
	private static StateHandler <>f__mg$cache12; // 0xa0
	private static StateHandler <>f__mg$cache13; // 0xa8
	private static StateHandler <>f__mg$cache14; // 0xb0
	private static StateHandler <>f__mg$cache15; // 0xb8
	private static StateHandler <>f__mg$cache16; // 0xc0
	private static StateHandler <>f__mg$cache17; // 0xc8
	private static StateHandler <>f__mg$cache18; // 0xd0
	private static StateHandler <>f__mg$cache19; // 0xd8
	private static StateHandler <>f__mg$cache1A; // 0xe0
	private static StateHandler <>f__mg$cache1B; // 0xe8

	// Properties
	public Boolean AllowComments { get; set; }
	public Boolean AllowSingleQuotedStrings { get; set; }
	public Boolean EndOfInput { get; }
	public Int32 Token { get; }
	public String StringValue { get; }

	// Methods
	// Offset : 0x455b80
	private static Void .cctor() { }
	// Offset : 0x4543b8
	public Void .ctor(TextReader reader) { }
	// Offset : 0x4544ac
	public Boolean get_AllowComments() { }
	// Offset : 0x4544e8
	public Void set_AllowComments(Boolean value) { }
	// Offset : 0x454520
	public Boolean get_AllowSingleQuotedStrings() { }
	// Offset : 0x45455c
	public Void set_AllowSingleQuotedStrings(Boolean value) { }
	// Offset : 0x454ee0
	public Boolean get_EndOfInput() { }
	// Offset : 0x454f58
	public Int32 get_Token() { }
	// Offset : 0x454bcc
	public String get_StringValue() { }
	// Offset : 0x457238
	private static Int32 HexValue(Int32 digit) { }
	// Offset : 0x455b84
	private static Void PopulateFsmTables() { }
	// Offset : 0x4572c4
	private static Char ProcessEscChar(Int32 esc_char) { }
	// Offset : 0x4573c4
	private static Boolean State1(FsmContext ctx) { }
	// Offset : 0x457700
	private static Boolean State2(FsmContext ctx) { }
	// Offset : 0x457850
	private static Boolean State3(FsmContext ctx) { }
	// Offset : 0x457aac
	private static Boolean State4(FsmContext ctx) { }
	// Offset : 0x457c78
	private static Boolean State5(FsmContext ctx) { }
	// Offset : 0x457d64
	private static Boolean State6(FsmContext ctx) { }
	// Offset : 0x457f64
	private static Boolean State7(FsmContext ctx) { }
	// Offset : 0x458074
	private static Boolean State8(FsmContext ctx) { }
	// Offset : 0x45820c
	private static Boolean State9(FsmContext ctx) { }
	// Offset : 0x45828c
	private static Boolean State10(FsmContext ctx) { }
	// Offset : 0x45830c
	private static Boolean State11(FsmContext ctx) { }
	// Offset : 0x45838c
	private static Boolean State12(FsmContext ctx) { }
	// Offset : 0x45840c
	private static Boolean State13(FsmContext ctx) { }
	// Offset : 0x45848c
	private static Boolean State14(FsmContext ctx) { }
	// Offset : 0x45850c
	private static Boolean State15(FsmContext ctx) { }
	// Offset : 0x45858c
	private static Boolean State16(FsmContext ctx) { }
	// Offset : 0x45860c
	private static Boolean State17(FsmContext ctx) { }
	// Offset : 0x45868c
	private static Boolean State18(FsmContext ctx) { }
	// Offset : 0x45870c
	private static Boolean State19(FsmContext ctx) { }
	// Offset : 0x45881c
	private static Boolean State20(FsmContext ctx) { }
	// Offset : 0x45889c
	private static Boolean State21(FsmContext ctx) { }
	// Offset : 0x458a08
	private static Boolean State22(FsmContext ctx) { }
	// Offset : 0x458cc8
	private static Boolean State23(FsmContext ctx) { }
	// Offset : 0x458dd8
	private static Boolean State24(FsmContext ctx) { }
	// Offset : 0x458e70
	private static Boolean State25(FsmContext ctx) { }
	// Offset : 0x458f00
	private static Boolean State26(FsmContext ctx) { }
	// Offset : 0x458f80
	private static Boolean State27(FsmContext ctx) { }
	// Offset : 0x459000
	private static Boolean State28(FsmContext ctx) { }
	// Offset : 0x4576c8
	private Boolean GetChar() { }
	// Offset : 0x4590a4
	private Int32 NextChar() { }
	// Offset : 0x454c54
	public Boolean NextToken() { }
	// Offset : 0x457aa0
	private Void UngetChar() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class StateHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x4572b4
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x459104
	public virtual Boolean Invoke(FsmContext ctx) { }
	// Offset : 0x4595c8
	public virtual IAsyncResult BeginInvoke(FsmContext ctx, AsyncCallback callback, Object object) { }
	// Offset : 0x4595ec
	public virtual Boolean EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LitJson
internal enum ParserToken
{
	// Fields
	public Int32 value__; // 0x10
	public const ParserToken None = 65536; // 0x0
	public const ParserToken Number = 65537; // 0x0
	public const ParserToken True = 65538; // 0x0
	public const ParserToken False = 65539; // 0x0
	public const ParserToken Null = 65540; // 0x0
	public const ParserToken CharSeq = 65541; // 0x0
	public const ParserToken Char = 65542; // 0x0
	public const ParserToken Text = 65543; // 0x0
	public const ParserToken Object = 65544; // 0x0
	public const ParserToken ObjectPrime = 65545; // 0x0
	public const ParserToken Pair = 65546; // 0x0
	public const ParserToken PairRest = 65547; // 0x0
	public const ParserToken Array = 65548; // 0x0
	public const ParserToken ArrayPrime = 65549; // 0x0
	public const ParserToken Value = 65550; // 0x0
	public const ParserToken ValueRest = 65551; // 0x0
	public const ParserToken String = 65552; // 0x0
	public const ParserToken End = 65553; // 0x0
	public const ParserToken Epsilon = 65554; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: LumenWorks.Framework.IO.Csv
public class CsvReader : IEnumerable`1, IDisposable, IEnumerable
{
	// Fields
	public static readonly Int32 DefaultBufferSize; // 0x0
	public const Char DefaultDelimiter; // 0x0
	public const Char DefaultQuote; // 0x0
	public const Char DefaultEscape; // 0x0
	public const Char DefaultComment; // 0x0
	private static readonly StringComparer _fieldHeaderComparer; // 0x8
	private TextReader _reader; // 0x10
	private Int32 _bufferSize; // 0x18
	private Char _comment; // 0x1c
	private Char _escape; // 0x1e
	private Char _delimiter; // 0x20
	private Char _quote; // 0x22
	private ValueTrimmingOptions _trimmingOptions; // 0x24
	private Boolean _hasHeaders; // 0x28
	private ParseErrorAction _defaultParseErrorAction; // 0x2c
	private MissingFieldAction _missingFieldAction; // 0x30
	private Boolean _supportsMultiline; // 0x34
	private Boolean _skipEmptyLines; // 0x35
	private Boolean _initialized; // 0x36
	private String[] _fieldHeaders; // 0x38
	private Dictionary`2 _fieldHeaderIndexes; // 0x40
	private Int64 _currentRecordIndex; // 0x48
	private Int32 _nextFieldStart; // 0x50
	private Int32 _nextFieldIndex; // 0x54
	private String[] _fields; // 0x58
	private Int32 _fieldCount; // 0x60
	private Char[] _buffer; // 0x68
	private Int32 _bufferLength; // 0x70
	private Boolean _eof; // 0x74
	private Boolean _eol; // 0x75
	private Boolean _firstRecordInCache; // 0x76
	private Boolean _missingFieldFlag; // 0x77
	private Boolean _parseErrorFlag; // 0x78
	private EventHandler`1 ParseError; // 0x80
	private String <DefaultHeaderName>k__BackingField; // 0x88
	private Boolean _isDisposed; // 0x90
	private readonly Object _lock; // 0x98
	private EventHandler Disposed; // 0xa0

	// Properties
	public Char Comment { get; }
	public Char Escape { get; }
	public Char Delimiter { get; }
	public Char Quote { get; }
	public Boolean HasHeaders { get; }
	public ValueTrimmingOptions TrimmingOption { get; }
	public Int32 BufferSize { get; }
	public ParseErrorAction DefaultParseErrorAction { get; set; }
	public MissingFieldAction MissingFieldAction { get; set; }
	public Boolean SupportsMultiline { get; set; }
	public Boolean SkipEmptyLines { get; set; }
	public String DefaultHeaderName { get; set; }
	public Int32 FieldCount { get; }
	public virtual Boolean EndOfStream { get; }
	public virtual Int64 CurrentRecordIndex { get; }
	public Boolean MissingFieldFlag { get; }
	public Boolean ParseErrorFlag { get; }
	public String Item { get; }
	public String Item { get; }
	public String Item { get; }
	public virtual String Item { get; }
	public Boolean IsDisposed { get; }

	// Methods
	// Offset : 0x459c1c
	public Void .ctor(TextReader reader, Boolean hasHeaders) { }
	// Offset : 0x459f7c
	public Void .ctor(TextReader reader, Boolean hasHeaders, Int32 bufferSize) { }
	// Offset : 0x459fb8
	public Void .ctor(TextReader reader, Boolean hasHeaders, Char delimiter) { }
	// Offset : 0x45a070
	public Void .ctor(TextReader reader, Boolean hasHeaders, Char delimiter, Int32 bufferSize) { }
	// Offset : 0x45a0a8
	public Void .ctor(TextReader reader, Boolean hasHeaders, Char delimiter, Char quote, Char escape, Char comment, ValueTrimmingOptions trimmingOptions) { }
	// Offset : 0x459cc8
	public Void .ctor(TextReader reader, Boolean hasHeaders, Char delimiter, Char quote, Char escape, Char comment, ValueTrimmingOptions trimmingOptions, Int32 bufferSize) { }
	// Offset : 0x45a188
	public Void add_ParseError(EventHandler`1 value) { }
	// Offset : 0x45a274
	public Void remove_ParseError(EventHandler`1 value) { }
	// Offset : 0x45a360
	protected virtual Void OnParseError(ParseErrorEventArgs e) { }
	// Offset : 0x45a3d8
	public Char get_Comment() { }
	// Offset : 0x45a3e0
	public Char get_Escape() { }
	// Offset : 0x45a3e8
	public Char get_Delimiter() { }
	// Offset : 0x45a3f0
	public Char get_Quote() { }
	// Offset : 0x45a3f8
	public Boolean get_HasHeaders() { }
	// Offset : 0x45a400
	public ValueTrimmingOptions get_TrimmingOption() { }
	// Offset : 0x45a408
	public Int32 get_BufferSize() { }
	// Offset : 0x45a410
	public ParseErrorAction get_DefaultParseErrorAction() { }
	// Offset : 0x45a418
	public Void set_DefaultParseErrorAction(ParseErrorAction value) { }
	// Offset : 0x45a420
	public MissingFieldAction get_MissingFieldAction() { }
	// Offset : 0x45a428
	public Void set_MissingFieldAction(MissingFieldAction value) { }
	// Offset : 0x45a430
	public Boolean get_SupportsMultiline() { }
	// Offset : 0x45a438
	public Void set_SupportsMultiline(Boolean value) { }
	// Offset : 0x45a444
	public Boolean get_SkipEmptyLines() { }
	// Offset : 0x45a44c
	public Void set_SkipEmptyLines(Boolean value) { }
	// Offset : 0x45a458
	public String get_DefaultHeaderName() { }
	// Offset : 0x45a180
	public Void set_DefaultHeaderName(String value) { }
	// Offset : 0x45a460
	public Int32 get_FieldCount() { }
	// Offset : 0x45a4e0
	public virtual Boolean get_EndOfStream() { }
	// Offset : 0x45a4e8
	public String[] GetFieldHeaders() { }
	// Offset : 0x45a614
	public virtual Int64 get_CurrentRecordIndex() { }
	// Offset : 0x45a61c
	public Boolean get_MissingFieldFlag() { }
	// Offset : 0x45a624
	public Boolean get_ParseErrorFlag() { }
	// Offset : 0x45a62c
	public String get_Item(Int32 record, String field) { }
	// Offset : 0x45aa4c
	public String get_Item(Int32 record, Int32 field) { }
	// Offset : 0x45a7fc
	public String get_Item(String field) { }
	// Offset : 0x45acc8
	public virtual String get_Item(Int32 field) { }
	// Offset : 0x45a484
	private Void EnsureInitialize() { }
	// Offset : 0x45ac3c
	public Int32 GetFieldIndex(String header) { }
	// Offset : 0x45bd48
	public Void CopyCurrentRecordTo(String[] array) { }
	// Offset : 0x45bd50
	public Void CopyCurrentRecordTo(String[] array, Int32 index) { }
	// Offset : 0x45c004
	public String GetCurrentRawData() { }
	// Offset : 0x45c09c
	private Boolean IsWhiteSpace(Char c) { }
	// Offset : 0x45c0f8
	public virtual Boolean MoveTo(Int64 record) { }
	// Offset : 0x45c1a0
	private Boolean ParseNewLine(ref Int32 pos) { }
	// Offset : 0x45c3dc
	private Boolean IsNewLine(Int32 pos) { }
	// Offset : 0x45c338
	private Boolean ReadBuffer() { }
	// Offset : 0x45acd4
	private String ReadField(Int32 field, Boolean initializing, Boolean discardValue) { }
	// Offset : 0x45c158
	public Boolean ReadNextRecord() { }
	// Offset : 0x45cfac
	protected virtual Boolean ReadNextRecord(Boolean onlyReadHeaders, Boolean skipToNextLine) { }
	// Offset : 0x45d518
	private Boolean SkipEmptyAndCommentedLines(ref Int32 pos) { }
	// Offset : 0x45d600
	private Void DoSkipEmptyAndCommentedLines(ref Int32 pos) { }
	// Offset : 0x45c934
	private Boolean SkipWhiteSpaces(ref Int32 pos) { }
	// Offset : 0x45d594
	private Boolean SkipToNextLine(ref Int32 pos) { }
	// Offset : 0x45ca20
	private Void HandleParseError(MalformedCsvException error, ref Int32 pos) { }
	// Offset : 0x45c514
	private String HandleMissingField(String value, Int32 fieldIndex, ref Int32 currentPosition) { }
	// Offset : 0x45d6b0
	public RecordEnumerator GetEnumerator() { }
	// Offset : 0x45d6cc
	private IEnumerator`1 System.Collections.Generic.IEnumerable<string[]>.GetEnumerator() { }
	// Offset : 0x45d750
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x45d7d4
	public Void add_Disposed(EventHandler value) { }
	// Offset : 0x45d8c0
	public Void remove_Disposed(EventHandler value) { }
	// Offset : 0x45d9ac
	public Boolean get_IsDisposed() { }
	// Offset : 0x45d9b4
	protected virtual Void OnDisposed(EventArgs e) { }
	// Offset : 0x45c464
	protected Void CheckDisposed() { }
	// Offset : 0x45d9d8
	public Void Dispose() { }
	// Offset : 0x45da40
	protected virtual Void Dispose(Boolean disposing) { }
	// Offset : 0x45dcc0
	protected override Void Finalize() { }
	// Offset : 0x45dd60
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private enum DataReaderValidations
{
	// Fields
	public Int32 value__; // 0x10
	public const DataReaderValidations None = 0; // 0x0
	public const DataReaderValidations IsInitialized = 1; // 0x0
	public const DataReaderValidations IsNotClosed = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public struct RecordEnumerator : IEnumerator`1, IEnumerator, IDisposable
{
	// Fields
	private CsvReader _reader; // 0x10
	private String[] _current; // 0x18
	private Int64 _currentRecordIndex; // 0x20

	// Properties
	private Object System.Collections.IEnumerator.Current { get; }
	public String[] Current { get; }

	// Methods
	// Offset : 0x2d0cdc
	public Void .ctor(CsvReader reader) { }
	// Offset : 0x2d0ce4
	public String[] get_Current() { }
	// Offset : 0x2d0cec
	public Boolean MoveNext() { }
	// Offset : 0x2d0cf4
	public Void Reset() { }
	// Offset : 0x2d0cfc
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x2d0d04
	public Void Dispose() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LumenWorks.Framework.IO.Csv
public class ParseErrorEventArgs : EventArgs
{
	// Fields
	private MalformedCsvException _error; // 0x10
	private ParseErrorAction _action; // 0x18

	// Properties
	public MalformedCsvException Error { get; }
	public ParseErrorAction Action { get; set; }

	// Methods
	// Offset : 0x8b4a2c
	public Void .ctor(MalformedCsvException error, ParseErrorAction defaultAction) { }
	// Offset : 0x8b4ab0
	public MalformedCsvException get_Error() { }
	// Offset : 0x8b4ab8
	public ParseErrorAction get_Action() { }
	// Offset : 0x8b4ac0
	public Void set_Action(ParseErrorAction value) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LumenWorks.Framework.IO.Csv
[Serializable]
public class MalformedCsvException : Exception
{
	// Fields
	private String _message; // 0x60
	private String _rawData; // 0x68
	private Int32 _currentFieldIndex; // 0x70
	private Int64 _currentRecordIndex; // 0x78
	private Int32 _currentPosition; // 0x80

	// Properties
	public String RawData { get; }
	public Int32 CurrentPosition { get; }
	public Int64 CurrentRecordIndex { get; }
	public Int32 CurrentFieldIndex { get; }
	public override String Message { get; }

	// Methods
	// Offset : 0x8b4258
	public Void .ctor() { }
	// Offset : 0x8b436c
	public Void .ctor(String message) { }
	// Offset : 0x8b4264
	public Void .ctor(String message, Exception innerException) { }
	// Offset : 0x8b4374
	public Void .ctor(String rawData, Int32 currentPosition, Int64 currentRecordIndex, Int32 currentFieldIndex) { }
	// Offset : 0x8b437c
	public Void .ctor(String rawData, Int32 currentPosition, Int64 currentRecordIndex, Int32 currentFieldIndex, Exception innerException) { }
	// Offset : 0x8b471c
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
	// Offset : 0x8b4890
	public String get_RawData() { }
	// Offset : 0x8b4898
	public Int32 get_CurrentPosition() { }
	// Offset : 0x8b48a0
	public Int64 get_CurrentRecordIndex() { }
	// Offset : 0x8b48a8
	public Int32 get_CurrentFieldIndex() { }
	// Offset : 0x8b48b0
	public override String get_Message() { }
	// Offset : 0x8b48b8
	public override Void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LumenWorks.Framework.IO.Csv
[Serializable]
public class MissingFieldCsvException : MalformedCsvException
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b4a04
	public Void .ctor() { }
	// Offset : 0x8b4a10
	public Void .ctor(String message) { }
	// Offset : 0x8b4a18
	public Void .ctor(String message, Exception innerException) { }
	// Offset : 0x8b4a1c
	public Void .ctor(String rawData, Int32 currentPosition, Int64 currentRecordIndex, Int32 currentFieldIndex) { }
	// Offset : 0x8b4a24
	public Void .ctor(String rawData, Int32 currentPosition, Int64 currentRecordIndex, Int32 currentFieldIndex, Exception innerException) { }
	// Offset : 0x8b4a28
	protected Void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LumenWorks.Framework.IO.Csv
public enum MissingFieldAction
{
	// Fields
	public Int32 value__; // 0x10
	public const MissingFieldAction ParseError = 0; // 0x0
	public const MissingFieldAction ReplaceByEmpty = 1; // 0x0
	public const MissingFieldAction ReplaceByNull = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: LumenWorks.Framework.IO.Csv
public enum ParseErrorAction
{
	// Fields
	public Int32 value__; // 0x10
	public const ParseErrorAction RaiseEvent = 0; // 0x0
	public const ParseErrorAction AdvanceToNextLine = 1; // 0x0
	public const ParseErrorAction ThrowException = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: LumenWorks.Framework.IO.Csv.Resources
internal class ExceptionMessage
{
	// Fields
	private static ResourceManager resourceMan; // 0x0
	private static CultureInfo resourceCulture; // 0x8

	// Properties
	internal static ResourceManager ResourceManager { get; }
	internal static CultureInfo Culture { get; set; }
	internal static String BufferSizeTooSmall { get; }
	internal static String CannotMovePreviousRecordInForwardOnly { get; }
	internal static String CannotReadRecordAtIndex { get; }
	internal static String EnumerationFinishedOrNotStarted { get; }
	internal static String EnumerationVersionCheckFailed { get; }
	internal static String FieldHeaderNotFound { get; }
	internal static String FieldIndexOutOfRange { get; }
	internal static String MalformedCsvException { get; }
	internal static String MissingFieldActionNotSupported { get; }
	internal static String NoCurrentRecord { get; }
	internal static String NoHeaders { get; }
	internal static String NotEnoughSpaceInArray { get; }
	internal static String ParseErrorActionInvalidInsideParseErrorEvent { get; }
	internal static String ParseErrorActionNotSupported { get; }
	internal static String ReaderClosed { get; }
	internal static String RecordIndexLessThanZero { get; }

	// Methods
	// Offset : 0x8b4ac8
	internal Void .ctor() { }
	// Offset : 0x8b4ad0
	internal static ResourceManager get_ResourceManager() { }
	// Offset : 0x8b4be8
	internal static CultureInfo get_Culture() { }
	// Offset : 0x8b4c38
	internal static Void set_Culture(CultureInfo value) { }
	// Offset : 0x8b4c8c
	internal static String get_BufferSizeTooSmall() { }
	// Offset : 0x8b4d2c
	internal static String get_CannotMovePreviousRecordInForwardOnly() { }
	// Offset : 0x8b4dcc
	internal static String get_CannotReadRecordAtIndex() { }
	// Offset : 0x8b4e6c
	internal static String get_EnumerationFinishedOrNotStarted() { }
	// Offset : 0x8b4004
	internal static String get_EnumerationVersionCheckFailed() { }
	// Offset : 0x8b4f0c
	internal static String get_FieldHeaderNotFound() { }
	// Offset : 0x8b4fac
	internal static String get_FieldIndexOutOfRange() { }
	// Offset : 0x8b467c
	internal static String get_MalformedCsvException() { }
	// Offset : 0x8b504c
	internal static String get_MissingFieldActionNotSupported() { }
	// Offset : 0x8b50ec
	internal static String get_NoCurrentRecord() { }
	// Offset : 0x8b518c
	internal static String get_NoHeaders() { }
	// Offset : 0x8b522c
	internal static String get_NotEnoughSpaceInArray() { }
	// Offset : 0x8b52cc
	internal static String get_ParseErrorActionInvalidInsideParseErrorEvent() { }
	// Offset : 0x8b536c
	internal static String get_ParseErrorActionNotSupported() { }
	// Offset : 0x8b540c
	internal static String get_ReaderClosed() { }
	// Offset : 0x8b54ac
	internal static String get_RecordIndexLessThanZero() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: LumenWorks.Framework.IO.Csv
public enum ValueTrimmingOptions
{
	// Fields
	public Int32 value__; // 0x10
	public const ValueTrimmingOptions None = 0; // 0x0
	public const ValueTrimmingOptions UnquotedOnly = 1; // 0x0
	public const ValueTrimmingOptions QuotedOnly = 2; // 0x0
	public const ValueTrimmingOptions All = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class SABoneColliderCommon
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b641c
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum BoneWeightType
{
	// Fields
	public Int32 value__; // 0x10
	public const BoneWeightType Bone2 = 0; // 0x0
	public const BoneWeightType Bone4 = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum BoneTriangleExtent
{
	// Fields
	public Int32 value__; // 0x10
	public const BoneTriangleExtent Disable = 0; // 0x0
	public const BoneTriangleExtent Vertex2 = 1; // 0x0
	public const BoneTriangleExtent Vertex1 = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class BoneProperty
{
	// Fields
	public Boolean recursivery; // 0x10

	// Properties

	// Methods
	// Offset : 0x8b6424
	public Void .ctor() { }
	// Offset : 0x8b642c
	public BoneProperty ShallowCopy() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class SplitProperty
{
	// Fields
	public BoneWeightType boneWeightType; // 0x10
	public Int32 boneWeight2; // 0x14
	public Int32 boneWeight3; // 0x18
	public Int32 boneWeight4; // 0x1c
	public Boolean greaterBoneWeight; // 0x20
	public BoneTriangleExtent boneTriangleExtent; // 0x24

	// Properties

	// Methods
	// Offset : 0x8b6500
	public Void .ctor() { }
	// Offset : 0x8b676c
	public SplitProperty ShallowCopy() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class SABoneColliderProperty
{
	// Fields
	public BoneProperty boneProperty; // 0x10
	public SplitProperty splitProperty; // 0x18
	public ReducerProperty reducerProperty; // 0x20
	public ColliderProperty colliderProperty; // 0x28
	public RigidbodyProperty rigidbodyProperty; // 0x30
	public Boolean modifyNameEnabled; // 0x38

	// Properties

	// Methods
	// Offset : 0x8b5aac
	public Void .ctor() { }
	// Offset : 0x8b6bbc
	public SABoneColliderProperty Copy() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class SABoneColliderBuilderProperty
{
	// Fields
	public SplitProperty splitProperty; // 0x10
	public ReducerProperty reducerProperty; // 0x18
	public ColliderProperty colliderProperty; // 0x20
	public RigidbodyProperty rigidbodyProperty; // 0x28
	public Boolean modifyNameEnabled; // 0x30

	// Properties

	// Methods
	// Offset : 0x8b62a8
	public Void .ctor() { }
	// Offset : 0x8b666c
	public SABoneColliderBuilderProperty Copy() { }
	// Offset : 0x8b6abc
	public SABoneColliderProperty ToSABoneColliderProperty() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class SAColliderBuilderCommon
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b6cdc
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum ShapeType
{
	// Fields
	public Int32 value__; // 0x10
	public const ShapeType None = 0; // 0x0
	public const ShapeType Mesh = 1; // 0x0
	public const ShapeType Box = 2; // 0x0
	public const ShapeType Capsule = 3; // 0x0
	public const ShapeType Sphere = 4; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum FitType
{
	// Fields
	public Int32 value__; // 0x10
	public const FitType Outer = 0; // 0x0
	public const FitType Inner = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum MeshType
{
	// Fields
	public Int32 value__; // 0x10
	public const MeshType Raw = 0; // 0x0
	public const MeshType ConvexBoxes = 1; // 0x0
	public const MeshType ConvexHull = 2; // 0x0
	public const MeshType Box = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum SliceMode
{
	// Fields
	public Int32 value__; // 0x10
	public const SliceMode Auto = 0; // 0x0
	public const SliceMode X = 1; // 0x0
	public const SliceMode Y = 2; // 0x0
	public const SliceMode Z = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum ElementType
{
	// Fields
	public Int32 value__; // 0x10
	public const ElementType X = 0; // 0x0
	public const ElementType XYZ = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public struct Bool3
{
	// Fields
	public Boolean x; // 0x10
	public Boolean y; // 0x11
	public Boolean z; // 0x12

	// Properties

	// Methods
	// Offset : 0x2d0d60
	public Void .ctor(Boolean x, Boolean y, Boolean z) { }
	// Offset : 0x2d0d7c
	public Void SetValue(Boolean x, Boolean y, Boolean z) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum ColliderToChild
{
	// Fields
	public Int32 value__; // 0x10
	public const ColliderToChild Auto = 0; // 0x0
	public const ColliderToChild On = 1; // 0x0
	public const ColliderToChild Off = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class ReducerProperty
{
	// Fields
	public ShapeType shapeType; // 0x10
	public FitType fitType; // 0x14
	public MeshType meshType; // 0x18
	public Int32 maxTriangles; // 0x1c
	public SliceMode sliceMode; // 0x20
	public Vector3 scale; // 0x24
	public ElementType scaleElementType; // 0x30
	public Vector3 minThickness; // 0x34
	public ElementType minThicknessElementType; // 0x40
	public Bool3 optimizeRotation; // 0x44
	public ElementType optimizeRotationElementType; // 0x48
	public ColliderToChild colliderToChild; // 0x4c
	public Vector3 offset; // 0x50
	public Vector3 thicknessA; // 0x5c
	public Vector3 thicknessB; // 0x68
	public Boolean viewAdvanced; // 0x74

	// Properties

	// Methods
	// Offset : 0x8b6528
	public Void .ctor() { }
	// Offset : 0x8b6840
	public ReducerProperty ShallowCopy() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class ColliderProperty
{
	// Fields
	public Boolean convex; // 0x10
	public Boolean isTrigger; // 0x11
	public PhysicMaterial material; // 0x18
	public Boolean isCreateAsset; // 0x20

	// Properties

	// Methods
	// Offset : 0x8b6634
	public Void .ctor() { }
	// Offset : 0x8b6914
	public ColliderProperty ShallowCopy() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class RigidbodyProperty
{
	// Fields
	public Single mass; // 0x10
	public Single drag; // 0x14
	public Single angularDrag; // 0x18
	public Boolean isKinematic; // 0x1c
	public Boolean useGravity; // 0x1d
	public RigidbodyInterpolation interpolation; // 0x20
	public CollisionDetectionMode collisionDetectionMode; // 0x24
	public Boolean isCreate; // 0x28
	public Boolean viewAdvanced; // 0x29

	// Properties

	// Methods
	// Offset : 0x8b6644
	public Void .ctor() { }
	// Offset : 0x8b69e8
	public RigidbodyProperty ShallowCopy() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class SABoneCollider : MonoBehaviour
{
	// Fields
	public SABoneColliderProperty boneColliderProperty; // 0x18
	public String defaultName; // 0x20
	public SABoneColliderProperty defaultBoneColliderProperty; // 0x28
	public SABoneColliderProperty edittingBoneColliderProperty; // 0x30
	public Boolean modified; // 0x38
	public Boolean modifiedChildren; // 0x39
	public Boolean cleanupModified; // 0x3a
	public Boolean isDebug; // 0x3b

	// Properties
	public BoneProperty boneProperty { get; }
	public SplitProperty splitProperty { get; }
	public ReducerProperty reducerProperty { get; }
	public ColliderProperty colliderProperty { get; }
	public RigidbodyProperty rigidbodyProperty { get; }
	public Boolean recursivery { get; }
	public Boolean modifyNameEnalbed { get; }

	// Methods
	// Offset : 0x8b59fc
	public Void .ctor() { }
	// Offset : 0x8b5bd8
	public BoneProperty get_boneProperty() { }
	// Offset : 0x8b5bf0
	public SplitProperty get_splitProperty() { }
	// Offset : 0x8b5c08
	public ReducerProperty get_reducerProperty() { }
	// Offset : 0x8b5c20
	public ColliderProperty get_colliderProperty() { }
	// Offset : 0x8b5c38
	public RigidbodyProperty get_rigidbodyProperty() { }
	// Offset : 0x8b5c50
	public Boolean get_recursivery() { }
	// Offset : 0x8b5c78
	public Boolean get_modifyNameEnalbed() { }
	// Offset : 0x8b5c98
	public Void ChangeDefaultName(String defaultName) { }
	// Offset : 0x8b603c
	public Void ChangeModified(Boolean modified) { }
	// Offset : 0x8b60c8
	public Void ChangeModifiedChildren(Boolean modifiedChildren) { }
	// Offset : 0x8b6154
	public Void ResetModified() { }
	// Offset : 0x8b61d8
	public Void ResetModifyName() { }
	// Offset : 0x8b5e84
	public String _ComputeModifyName() { }
	// Offset : 0x8b5d20
	public Boolean _IsModifyName() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class SABoneColliderBuilder : MonoBehaviour
{
	// Fields
	public SABoneColliderBuilderProperty boneColliderBuilderProperty; // 0x18
	public SABoneColliderBuilderProperty edittingBoneColliderBuilderProperty; // 0x20
	public Boolean cleanupModified; // 0x28
	public Boolean isDebug; // 0x29

	// Properties
	public SplitProperty splitProperty { get; }
	public ReducerProperty reducerProperty { get; }
	public ColliderProperty colliderProperty { get; }
	public RigidbodyProperty rigidbodyProperty { get; }

	// Methods
	// Offset : 0x8b6244
	public Void .ctor() { }
	// Offset : 0x8b63b4
	public SplitProperty get_splitProperty() { }
	// Offset : 0x8b63cc
	public ReducerProperty get_reducerProperty() { }
	// Offset : 0x8b63e4
	public ColliderProperty get_colliderProperty() { }
	// Offset : 0x8b63fc
	public RigidbodyProperty get_rigidbodyProperty() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class SABoneColliderChild : MonoBehaviour
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b6414
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTActionContext
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b71b8
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public abstract class TBTAction : TBTTreeNode
{
	// Fields
	private static Int32 sUNIQUEKEY; // 0x0
	protected Int32 _uniqueKey; // 0x1c
	protected TBTPrecondition _precondition; // 0x20

	// Properties

	// Methods
	// Offset : 0x8b6e3c
	public Void .ctor(Int32 maxChildCount) { }
	// Offset : 0x8b6f68
	private static Int32 genUniqueKey() { }
	// Offset : 0x8b7048
	protected override Void Finalize() { }
	// Offset : 0x8b7064
	public Boolean Evaluate(TBTWorkingData wData) { }
	// Offset : 0x8b7100
	public Int32 Update(TBTWorkingData wData) { }
	// Offset : 0x8b7148
	public Void Transition(TBTWorkingData wData) { }
	// Offset : 0x8b7190
	public TBTAction SetPrecondition(TBTPrecondition precondition) { }
	// Offset : 0x8b7198
	public override Int32 GetHashCode() { }
	// Offset : 0x
	protected T getContext(TBTWorkingData wData) { }
	// Offset : 0x8b71a0
	protected virtual Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x8b71a8
	protected virtual Int32 onUpdate(TBTWorkingData wData) { }
	// Offset : 0x8b71b0
	protected virtual Void onTransition(TBTWorkingData wData) { }
	// Offset : 0x8b71b4
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public abstract class TBTActionLeaf : TBTAction
{
	// Fields
	private const Int32 ACTION_READY; // 0x0
	private const Int32 ACTION_RUNNING; // 0x0
	private const Int32 ACTION_FINISHED; // 0x0

	// Properties

	// Methods
	// Offset : 0x8b71c0
	public Void .ctor() { }
	// Offset : 0x8b7228
	protected sealed override Int32 onUpdate(TBTWorkingData wData) { }
	// Offset : 0x8b739c
	protected sealed override Void onTransition(TBTWorkingData wData) { }
	// Offset : 0x
	protected T getUserContexData(TBTWorkingData wData) { }
	// Offset : 0x8b744c
	protected virtual Void onEnter(TBTWorkingData wData) { }
	// Offset : 0x8b7450
	protected virtual Int32 onExecute(TBTWorkingData wData) { }
	// Offset : 0x8b7458
	protected virtual Void onExit(TBTWorkingData wData, Int32 runningStatus) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class TBTActionLeafContext : TBTActionContext
{
	// Fields
	internal Int32 status; // 0x10
	internal Boolean needExit; // 0x14
	private Object _userData; // 0x18

	// Properties

	// Methods
	// Offset : 0x8b745c
	public Void .ctor() { }
	// Offset : 0x
	public T getUserData() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTActionLoop : TBTAction
{
	// Fields
	public const Int32 INFINITY; // 0x0
	private Int32 _loopCount; // 0x28

	// Properties

	// Methods
	// Offset : 0x8b748c
	public Void .ctor() { }
	// Offset : 0x8b7500
	public TBTActionLoop SetLoopCount(Int32 count) { }
	// Offset : 0x8b7508
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x8b766c
	protected override Int32 onUpdate(TBTWorkingData wData) { }
	// Offset : 0x8b7784
	protected override Void onTransition(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
protected class TBTActionLoopContext : TBTActionContext
{
	// Fields
	internal Int32 currentCount; // 0x10

	// Properties

	// Methods
	// Offset : 0x8b783c
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTActionNonPrioritizedSelector : TBTActionPrioritizedSelector
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b7864
	public Void .ctor() { }
	// Offset : 0x8b78d0
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTActionParallel : TBTAction
{
	// Fields
	private ECHILDREN_RELATIONSHIP _evaluationRelationship; // 0x28
	private ECHILDREN_RELATIONSHIP _runningStatusRelationship; // 0x2c

	// Properties

	// Methods
	// Offset : 0x8b7a9c
	public Void .ctor() { }
	// Offset : 0x8b7b10
	public TBTActionParallel SetEvaluationRelationship(ECHILDREN_RELATIONSHIP v) { }
	// Offset : 0x8b7b18
	public TBTActionParallel SetRunningStatusRelationship(ECHILDREN_RELATIONSHIP v) { }
	// Offset : 0x8b7b20
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x8b7ccc
	protected override Int32 onUpdate(TBTWorkingData wData) { }
	// Offset : 0x8b7f14
	protected override Void onTransition(TBTWorkingData wData) { }
	// Offset : 0x
	private Void initListTo(List`1 list, T value) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum ECHILDREN_RELATIONSHIP
{
	// Fields
	public Int32 value__; // 0x10
	public const ECHILDREN_RELATIONSHIP AND = 0; // 0x0
	public const ECHILDREN_RELATIONSHIP OR = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
protected class TBTActionParallelContext : TBTActionContext
{
	// Fields
	internal List`1 evaluationStatus; // 0x10
	internal List`1 runningStatus; // 0x18

	// Properties

	// Methods
	// Offset : 0x8b8000
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTActionPrioritizedSelector : TBTAction
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b7868
	public Void .ctor() { }
	// Offset : 0x8b79a0
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x8b809c
	protected override Int32 onUpdate(TBTWorkingData wData) { }
	// Offset : 0x8b81e0
	protected override Void onTransition(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
protected class TBTActionPrioritizedSelectorContext : TBTActionContext
{
	// Fields
	internal Int32 currentSelectedIndex; // 0x10
	internal Int32 lastSelectedIndex; // 0x14

	// Properties

	// Methods
	// Offset : 0x8b827c
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTActionSequence : TBTAction
{
	// Fields
	private Boolean _continueIfErrorOccors; // 0x28

	// Properties

	// Methods
	// Offset : 0x8b82a8
	public Void .ctor() { }
	// Offset : 0x8b8318
	public TBTActionSequence SetContinueIfErrorOccors(Boolean v) { }
	// Offset : 0x8b8324
	protected override Boolean onEvaluate(TBTWorkingData wData) { }
	// Offset : 0x8b8404
	protected override Int32 onUpdate(TBTWorkingData wData) { }
	// Offset : 0x8b84f8
	protected override Void onTransition(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
protected class TBTActionSequenceContext : TBTActionContext
{
	// Fields
	internal Int32 currentSelectedIndex; // 0x10

	// Properties

	// Methods
	// Offset : 0x8b8594
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTRunningStatus
{
	// Fields
	public const Int32 EXECUTING; // 0x0
	public const Int32 FINISHED; // 0x0
	public const Int32 TRANSITION; // 0x0
	public const Int32 USER_EXECUTING; // 0x0
	public const Int32 USER_FINISHED; // 0x0

	// Properties

	// Methods
	// Offset : 0x8b8af0
	public Void .ctor() { }
	// Offset : 0x8b8af8
	public static Boolean IsOK(Int32 runningStatus) { }
	// Offset : 0x8b84f0
	public static Boolean IsError(Int32 runningStatus) { }
	// Offset : 0x8b7384
	public static Boolean IsFinished(Int32 runningStatus) { }
	// Offset : 0x8b8b10
	public static Boolean IsExecuting(Int32 runningStatus) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public abstract class TBTPrecondition : TBTTreeNode
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b85c0
	public Void .ctor(Int32 maxChildCount) { }
	// Offset : 0x
	public abstract Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public abstract class TBTPreconditionLeaf : TBTPrecondition
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b87dc
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public abstract class TBTPreconditionUnary : TBTPrecondition
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b881c
	public Void .ctor(TBTPrecondition lhs) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public abstract class TBTPreconditionBinary : TBTPrecondition
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b85c8
	public Void .ctor(TBTPrecondition lhs, TBTPrecondition rhs) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTPreconditionTRUE : TBTPreconditionLeaf
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b89ec
	public Void .ctor() { }
	// Offset : 0x8b89f4
	public override Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTPreconditionFALSE : TBTPreconditionLeaf
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b87d4
	public Void .ctor() { }
	// Offset : 0x8b87e4
	public override Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTPreconditionNOT : TBTPreconditionUnary
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b87ec
	public Void .ctor(TBTPrecondition lhs) { }
	// Offset : 0x8b884c
	public override Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTPreconditionAND : TBTPreconditionBinary
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b85c4
	public Void .ctor(TBTPrecondition lhs, TBTPrecondition rhs) { }
	// Offset : 0x8b8618
	public override Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTPreconditionOR : TBTPreconditionBinary
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b88f0
	public Void .ctor(TBTPrecondition lhs, TBTPrecondition rhs) { }
	// Offset : 0x8b88f4
	public override Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTPreconditionXOR : TBTPreconditionBinary
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b89fc
	public Void .ctor(TBTPrecondition lhs, TBTPrecondition rhs) { }
	// Offset : 0x8b8a00
	public override Boolean IsTrue(TBTWorkingData wData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTTreeNode
{
	// Fields
	private const Int32 defaultChildCount; // 0x0
	private List`1 _children; // 0x10
	private Int32 _maxChildCount; // 0x18

	// Properties

	// Methods
	// Offset : 0x8b6ebc
	public Void .ctor(Int32 maxChildCount) { }
	// Offset : 0x8b8b28
	public Void .ctor() { }
	// Offset : 0x8b7058
	protected override Void Finalize() { }
	// Offset : 0x8b8710
	public TBTTreeNode AddChild(TBTTreeNode node) { }
	// Offset : 0x8b7c6c
	public Int32 GetChildCount() { }
	// Offset : 0x8b75e8
	public Boolean IsIndexValid(Int32 index) { }
	// Offset : 0x
	public T GetChild(Int32 index) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBTWorkingData : TAny
{
	// Fields
	internal Dictionary`2 _context; // 0x10

	// Properties
	internal Dictionary`2 context { get; }

	// Methods
	// Offset : 0x8b8bbc
	public Void .ctor() { }
	// Offset : 0x8b8c30
	internal Dictionary`2 get_context() { }
	// Offset : 0x8b8c38
	protected override Void Finalize() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TBlackBoard
{
	// Fields
	private Dictionary`2 _items; // 0x10
	private Single _curGameTime; // 0x18

	// Properties

	// Methods
	// Offset : 0x8b8c44
	public Void .ctor() { }
	// Offset : 0x8b8cb8
	public Void Update(Single gameTime) { }
	// Offset : 0x8b8cc0
	public TBlackboardItem SetValue(String key, Object v) { }
	// Offset : 0x
	public T GetValue(String key, T defaultValue) { }
	// Offset : 0x8b8de8
	public Single GetLifeTime(String key) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class TBlackboardItem
{
	// Fields
	private Object _value; // 0x10
	private Single _life; // 0x18

	// Properties

	// Methods
	// Offset : 0x8b8dcc
	public Void .ctor() { }
	// Offset : 0x8b8de0
	public Void SetValue(Object v) { }
	// Offset : 0x
	public T GetValue() { }
	// Offset : 0x8b8e84
	public Single GetLife() { }
	// Offset : 0x8b8dd4
	public Void SetInfinity() { }
	// Offset : 0x8b8e8c
	public Void SetExpiredTime(Single gameTime) { }
	// Offset : 0x8b8e9c
	public Boolean IsExpired(Single gameTime) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TAny
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b6e34
	public Void .ctor() { }
	// Offset : 0x
	public T As() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public interface TILoggerListener
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void log(String msg) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TLogger : TStaticHelperBase`1
{
	// Fields
	private Boolean[] _enabledChannel; // 0x18
	private List`1 _listeners; // 0x20

	// Properties

	// Methods
	// Offset : 0x8b9384
	public Void .ctor() { }
	// Offset : 0x8b93d4
	public static Void DEBUG(String msg) { }
	// Offset : 0x8b8b30
	public static Void WARNING(String msg) { }
	// Offset : 0x8b9974
	public static Void INFO(String msg) { }
	// Offset : 0x8b9a00
	public static Void TODO(String msg) { }
	// Offset : 0x8b9a8c
	public static Void ERROR(String msg) { }
	// Offset : 0x8b9b18
	public static Void PROFILE(String msg) { }
	// Offset : 0x8b9ba4
	protected override Void onInit() { }
	// Offset : 0x8b9c9c
	public Void EnableChannel(LOGGER_CHANNEL channel, Boolean isEnabled) { }
	// Offset : 0x8b9d48
	public Void AddLogListener(TILoggerListener listener) { }
	// Offset : 0x8b9460
	public Void Log(String msg, LOGGER_CHANNEL channel, Boolean simpleMode) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum LOGGER_CHANNEL
{
	// Fields
	public Int32 value__; // 0x10
	public const LOGGER_CHANNEL DEFAULT = 0; // 0x0
	public const LOGGER_CHANNEL WARNING = 1; // 0x0
	public const LOGGER_CHANNEL INFO = 2; // 0x0
	public const LOGGER_CHANNEL TODO = 3; // 0x0
	public const LOGGER_CHANNEL ERROR = 4; // 0x0
	public const LOGGER_CHANNEL DEBUG = 5; // 0x0
	public const LOGGER_CHANNEL PROFILE = 6; // 0x0
	public const LOGGER_CHANNEL NUM = 7; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum LOGGER_REDIRECTION
{
	// Fields
	public Int32 value__; // 0x10
	public const LOGGER_REDIRECTION CONSOLE = 0; // 0x0
	public const LOGGER_REDIRECTION STRING = 1; // 0x0
	public const LOGGER_REDIRECTION FILE = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TSingleton`1
{
	// Fields
	private static T _instance; // 0x0

	// Properties
	public static T instance { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public static T get_instance() { }
	// Offset : 0x
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TStaticHelperBase`1 : TSingleton`1
{
	// Fields
	private Boolean <hasInited>k__BackingField; // 0x0

	// Properties
	protected Boolean hasInited { get; set; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public Void Init() { }
	// Offset : 0x
	public Void Uninit() { }
	// Offset : 0x
	protected virtual Void onInit() { }
	// Offset : 0x
	protected virtual Void onUninit() { }
	// Offset : 0x
	private Void set_hasInited(Boolean value) { }
	// Offset : 0x
	protected Boolean get_hasInited() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public struct TTimeAbs
{
	// Fields
	private const UInt64 S_TO_MS; // 0x0
	private const Single MS_TO_S; // 0x0
	private UInt64 _time; // 0x10

	// Properties

	// Methods
	// Offset : 0x2d0d98
	public Void .ctor(Single t) { }
	// Offset : 0x2d0db8
	public Void .ctor(UInt64 t) { }
	// Offset : 0x2d0dc0
	public Void .ctor(TTimeAbs t) { }
	// Offset : 0x2d0dc8
	public UInt64 ToMilliseconds() { }
	// Offset : 0x2d0dd0
	public Single ToSeconds() { }
	// Offset : 0x8ba098
	public static Boolean op_Equality(TTimeAbs a, TTimeAbs b) { }
	// Offset : 0x8ba0a4
	public static Boolean op_Inequality(TTimeAbs a, TTimeAbs b) { }
	// Offset : 0x8ba0b0
	public static Boolean op_GreaterThan(TTimeAbs a, TTimeAbs b) { }
	// Offset : 0x8ba0bc
	public static Boolean op_LessThan(TTimeAbs a, TTimeAbs b) { }
	// Offset : 0x8ba0c8
	public static Boolean op_GreaterThanOrEqual(TTimeAbs a, TTimeAbs b) { }
	// Offset : 0x8ba0d4
	public static Boolean op_LessThanOrEqual(TTimeAbs a, TTimeAbs b) { }
	// Offset : 0x8ba0e0
	public static Boolean op_Equality(TTimeAbs a, UInt64 b) { }
	// Offset : 0x8ba0ec
	public static Boolean op_Inequality(TTimeAbs a, UInt64 b) { }
	// Offset : 0x8ba0f8
	public static Boolean op_GreaterThan(TTimeAbs a, UInt64 b) { }
	// Offset : 0x8ba104
	public static Boolean op_LessThan(TTimeAbs a, UInt64 b) { }
	// Offset : 0x8ba110
	public static Boolean op_GreaterThanOrEqual(TTimeAbs a, UInt64 b) { }
	// Offset : 0x8ba11c
	public static Boolean op_LessThanOrEqual(TTimeAbs a, UInt64 b) { }
	// Offset : 0x8ba128
	public static Boolean op_Equality(UInt64 b, TTimeAbs a) { }
	// Offset : 0x8ba134
	public static Boolean op_Inequality(UInt64 b, TTimeAbs a) { }
	// Offset : 0x8ba140
	public static Boolean op_GreaterThan(UInt64 b, TTimeAbs a) { }
	// Offset : 0x8ba14c
	public static Boolean op_LessThan(UInt64 b, TTimeAbs a) { }
	// Offset : 0x8ba158
	public static Boolean op_GreaterThanOrEqual(UInt64 b, TTimeAbs a) { }
	// Offset : 0x8ba164
	public static Boolean op_LessThanOrEqual(UInt64 b, TTimeAbs a) { }
	// Offset : 0x8ba170
	public static Boolean op_Equality(TTimeAbs a, Single b) { }
	// Offset : 0x8ba190
	public static Boolean op_Inequality(TTimeAbs a, Single b) { }
	// Offset : 0x8ba1b0
	public static Boolean op_GreaterThan(TTimeAbs a, Single b) { }
	// Offset : 0x8ba1d0
	public static Boolean op_LessThan(TTimeAbs a, Single b) { }
	// Offset : 0x8ba1f0
	public static Boolean op_GreaterThanOrEqual(TTimeAbs a, Single b) { }
	// Offset : 0x8ba210
	public static Boolean op_LessThanOrEqual(TTimeAbs a, Single b) { }
	// Offset : 0x8ba230
	public static Boolean op_Equality(Single b, TTimeAbs a) { }
	// Offset : 0x8ba250
	public static Boolean op_Inequality(Single b, TTimeAbs a) { }
	// Offset : 0x8ba270
	public static Boolean op_GreaterThan(Single b, TTimeAbs a) { }
	// Offset : 0x8ba290
	public static Boolean op_LessThan(Single b, TTimeAbs a) { }
	// Offset : 0x8ba2b0
	public static Boolean op_GreaterThanOrEqual(Single b, TTimeAbs a) { }
	// Offset : 0x8ba2d0
	public static Boolean op_LessThanOrEqual(Single b, TTimeAbs a) { }
	// Offset : 0x8ba2f0
	public static TTimeAbs op_Addition(TTimeAbs a, TTimeRel b) { }
	// Offset : 0x8ba300
	public static TTimeRel op_Subtraction(TTimeAbs a, TTimeAbs b) { }
	// Offset : 0x2d0dec
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2d0df4
	public override Int32 GetHashCode() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public struct TTimeRel
{
	// Fields
	private const UInt64 S_TO_MS; // 0x0
	private const Single MS_TO_S; // 0x0
	private UInt64 _time; // 0x10

	// Properties

	// Methods
	// Offset : 0x2d0dfc
	public Void .ctor(Single t) { }
	// Offset : 0x2d0e1c
	public Void .ctor(UInt64 t) { }
	// Offset : 0x2d0e24
	public Void .ctor(TTimeRel t) { }
	// Offset : 0x2d0e2c
	public UInt64 ToMilliseconds() { }
	// Offset : 0x2d0e34
	public Single ToSeconds() { }
	// Offset : 0x8ba4f0
	public static Boolean op_Equality(TTimeRel a, TTimeRel b) { }
	// Offset : 0x8ba4fc
	public static Boolean op_Inequality(TTimeRel a, TTimeRel b) { }
	// Offset : 0x8ba508
	public static Boolean op_GreaterThan(TTimeRel a, TTimeRel b) { }
	// Offset : 0x8ba514
	public static Boolean op_LessThan(TTimeRel a, TTimeRel b) { }
	// Offset : 0x8ba520
	public static Boolean op_GreaterThanOrEqual(TTimeRel a, TTimeRel b) { }
	// Offset : 0x8ba52c
	public static Boolean op_LessThanOrEqual(TTimeRel a, TTimeRel b) { }
	// Offset : 0x8ba538
	public static Boolean op_Equality(TTimeRel a, UInt64 b) { }
	// Offset : 0x8ba544
	public static Boolean op_Inequality(TTimeRel a, UInt64 b) { }
	// Offset : 0x8ba550
	public static Boolean op_GreaterThan(TTimeRel a, UInt64 b) { }
	// Offset : 0x8ba55c
	public static Boolean op_LessThan(TTimeRel a, UInt64 b) { }
	// Offset : 0x8ba568
	public static Boolean op_GreaterThanOrEqual(TTimeRel a, UInt64 b) { }
	// Offset : 0x8ba574
	public static Boolean op_LessThanOrEqual(TTimeRel a, UInt64 b) { }
	// Offset : 0x8ba580
	public static Boolean op_Equality(UInt64 b, TTimeRel a) { }
	// Offset : 0x8ba58c
	public static Boolean op_Inequality(UInt64 b, TTimeRel a) { }
	// Offset : 0x8ba598
	public static Boolean op_GreaterThan(UInt64 b, TTimeRel a) { }
	// Offset : 0x8ba5a4
	public static Boolean op_LessThan(UInt64 b, TTimeRel a) { }
	// Offset : 0x8ba5b0
	public static Boolean op_GreaterThanOrEqual(UInt64 b, TTimeRel a) { }
	// Offset : 0x8ba5bc
	public static Boolean op_LessThanOrEqual(UInt64 b, TTimeRel a) { }
	// Offset : 0x8ba5c8
	public static Boolean op_Equality(TTimeRel a, Single b) { }
	// Offset : 0x8ba5e8
	public static Boolean op_Inequality(TTimeRel a, Single b) { }
	// Offset : 0x8ba608
	public static Boolean op_GreaterThan(TTimeRel a, Single b) { }
	// Offset : 0x8ba628
	public static Boolean op_LessThan(TTimeRel a, Single b) { }
	// Offset : 0x8ba648
	public static Boolean op_GreaterThanOrEqual(TTimeRel a, Single b) { }
	// Offset : 0x8ba668
	public static Boolean op_LessThanOrEqual(TTimeRel a, Single b) { }
	// Offset : 0x8ba688
	public static Boolean op_Equality(Single b, TTimeRel a) { }
	// Offset : 0x8ba6a8
	public static Boolean op_Inequality(Single b, TTimeRel a) { }
	// Offset : 0x8ba6c8
	public static Boolean op_GreaterThan(Single b, TTimeRel a) { }
	// Offset : 0x8ba6e8
	public static Boolean op_LessThan(Single b, TTimeRel a) { }
	// Offset : 0x8ba708
	public static Boolean op_GreaterThanOrEqual(Single b, TTimeRel a) { }
	// Offset : 0x8ba728
	public static Boolean op_LessThanOrEqual(Single b, TTimeRel a) { }
	// Offset : 0x8ba748
	public static TTimeAbs op_Addition(TTimeRel a, TTimeAbs b) { }
	// Offset : 0x8ba750
	public static TTimeRel op_Addition(TTimeRel a, TTimeRel b) { }
	// Offset : 0x8ba758
	public static TTimeRel op_Subtraction(TTimeRel a, TTimeRel b) { }
	// Offset : 0x2d0e50
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2d0e58
	public override Int32 GetHashCode() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TMathUtils
{
	// Fields
	public const Single EPSILON; // 0x0

	// Properties

	// Methods
	// Offset : 0x8b9de0
	public Void .ctor() { }
	// Offset : 0x8b9de8
	public static Boolean IsZero(Single v, Single e) { }
	// Offset : 0x8b9e64
	public static Vector3 Vector3ZeroY(Vector3 v) { }
	// Offset : 0x8b9e9c
	public static Vector3 GetDirection2D(Vector3 to, Vector3 from) { }
	// Offset : 0x8b9f70
	public static Single GetDistance2D(Vector3 to, Vector3 from) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TColorUtil
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b8eb8
	public Void .ctor() { }
	// Offset : 0x8b8ec0
	public static Color UIntToColor(UInt32 col) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class THoverCameraController : MonoBehaviour
{
	// Fields
	private readonly String MouseHorizontalAxisName; // 0x18
	private readonly String MouseVerticalAxisName; // 0x20
	private readonly String MouseScrollAxisName; // 0x28
	public Transform TargetObject; // 0x30
	public Single CurrentPanAngle; // 0x38
	public Single CurrentTiltAngle; // 0x3c
	public Single CurrentDistance; // 0x40
	public Single MinPanAngle; // 0x44
	public Single MaxPanAngle; // 0x48
	public Single MinTiltAngle; // 0x4c
	public Single MaxTiltAngle; // 0x50
	public Single PanMovementSensitivity; // 0x54
	public Single TiltMovementSensitivity; // 0x58
	public Single DistanceMovementSensitivity; // 0x5c
	public Single UpOffset; // 0x60
	private Vector3 _lookAtPosition; // 0x64

	// Properties

	// Methods
	// Offset : 0x8b8efc
	public Void .ctor() { }
	// Offset : 0x8b8f9c
	private Void Start() { }
	// Offset : 0x8b9064
	private Void Update() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private enum MouseButton
{
	// Fields
	public Int32 value__; // 0x10
	public const MouseButton Left = 0; // 0x0
	public const MouseButton Right = 1; // 0x0
	public const MouseButton Middle = 2; // 0x0
	public const MouseButton None = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TTimeUtil
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8ba8fc
	public Void .ctor() { }
	// Offset : 0x8ba904
	public static Double GetNowTimeS() { }
	// Offset : 0x8ba994
	public static Double GetNowTimeMS() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: TsiU
public class TAIToolkit
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b6d1c
	public Void .ctor() { }
	// Offset : 0x8b6d24
	public static Void Init() { }
	// Offset : 0x8b6dac
	public static Void Uninit() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public class Bezier : Tweener
{
	// Fields
	public Transform target; // 0x78
	public Vector3[] path; // 0x80
	public Boolean isWorld; // 0x88
	private Single from; // 0x8c
	private Single to; // 0x90
	private Single mValue; // 0x94

	// Properties
	public Single value { get; set; }

	// Methods
	// Offset : 0x8beb78
	public Void .ctor() { }
	// Offset : 0x8bece8
	public Single get_value() { }
	// Offset : 0x8becf0
	public Void set_value(Single value) { }
	// Offset : 0x8bef60
	protected override Void Start() { }
	// Offset : 0x8befe8
	protected override Void OnUpdate(Single factor, Boolean isFinished) { }
	// Offset : 0x8bf074
	public Void OnDrawGizmos() { }
	// Offset : 0x8bee14
	public Vector3 GetBezierPoint(Single t) { }
	// Offset : 0x8bf128
	public Vector3 GetBezierPoint(Single t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public interface IPointHandler : IPointerEnterHandler, IPointerDownHandler, IPointerClickHandler, IPointerUpHandler, IPointerExitHandler, IEventSystemHandler
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnPointerEnter(PointerEventData eventData) { }
	// Offset : 0x
	public abstract Void OnPointerDown(PointerEventData eventData) { }
	// Offset : 0x
	public abstract Void OnPointerClick(PointerEventData eventData) { }
	// Offset : 0x
	public abstract Void OnPointerUp(PointerEventData eventData) { }
	// Offset : 0x
	public abstract Void OnPointerExit(PointerEventData eventData) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public class SliderColors : MonoBehaviour
{
	// Fields
	public Image target; // 0x18
	public Color[] colors; // 0x20
	private Slider mSlider; // 0x28

	// Properties

	// Methods
	// Offset : 0x8c0c9c
	public Void .ctor() { }
	// Offset : 0x8c0dc8
	private Void Start() { }
	// Offset : 0x8c0fac
	public Void OnValueChanged(Single value) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public enum EaseType
{
	// Fields
	public Int32 value__; // 0x10
	public const EaseType none = 0; // 0x0
	public const EaseType easeInQuad = 1; // 0x0
	public const EaseType easeOutQuad = 2; // 0x0
	public const EaseType easeInOutQuad = 3; // 0x0
	public const EaseType easeInCubic = 4; // 0x0
	public const EaseType easeOutCubic = 5; // 0x0
	public const EaseType easeInOutCubic = 6; // 0x0
	public const EaseType easeInQuart = 7; // 0x0
	public const EaseType easeOutQuart = 8; // 0x0
	public const EaseType easeInOutQuart = 9; // 0x0
	public const EaseType easeInQuint = 10; // 0x0
	public const EaseType easeOutQuint = 11; // 0x0
	public const EaseType easeInOutQuint = 12; // 0x0
	public const EaseType easeInSine = 13; // 0x0
	public const EaseType easeOutSine = 14; // 0x0
	public const EaseType easeInOutSine = 15; // 0x0
	public const EaseType easeInExpo = 16; // 0x0
	public const EaseType easeOutExpo = 17; // 0x0
	public const EaseType easeInOutExpo = 18; // 0x0
	public const EaseType easeInCirc = 19; // 0x0
	public const EaseType easeOutCirc = 20; // 0x0
	public const EaseType easeInOutCirc = 21; // 0x0
	public const EaseType linear = 22; // 0x0
	public const EaseType spring = 23; // 0x0
	public const EaseType easeInBounce = 24; // 0x0
	public const EaseType easeOutBounce = 25; // 0x0
	public const EaseType easeInOutBounce = 26; // 0x0
	public const EaseType easeInBack = 27; // 0x0
	public const EaseType easeOutBack = 28; // 0x0
	public const EaseType easeInOutBack = 29; // 0x0
	public const EaseType easeInElastic = 30; // 0x0
	public const EaseType easeOutElastic = 31; // 0x0
	public const EaseType easeInOutElastic = 32; // 0x0
	public const EaseType punch = 33; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public enum LoopStyle
{
	// Fields
	public Int32 value__; // 0x10
	public const LoopStyle Once = 0; // 0x0
	public const LoopStyle Loop = 1; // 0x0
	public const LoopStyle PingPong = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public class EaseManager
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8bf2f8
	public Void .ctor() { }
	// Offset : 0x8bf300
	private static Single linear(Single start, Single end, Single value) { }
	// Offset : 0x8bf388
	private static Single clerp(Single start, Single end, Single value) { }
	// Offset : 0x8bf454
	private static Single spring(Single start, Single end, Single value) { }
	// Offset : 0x8bf558
	private static Single easeInQuad(Single start, Single end, Single value) { }
	// Offset : 0x8bf56c
	private static Single easeOutQuad(Single start, Single end, Single value) { }
	// Offset : 0x8bf588
	private static Single easeInOutQuad(Single start, Single end, Single value) { }
	// Offset : 0x8bf5dc
	private static Single easeInCubic(Single start, Single end, Single value) { }
	// Offset : 0x8bf5f4
	private static Single easeOutCubic(Single start, Single end, Single value) { }
	// Offset : 0x8bf61c
	private static Single easeInOutCubic(Single start, Single end, Single value) { }
	// Offset : 0x8bf674
	private static Single easeInQuart(Single start, Single end, Single value) { }
	// Offset : 0x8bf690
	private static Single easeOutQuart(Single start, Single end, Single value) { }
	// Offset : 0x8bf6b8
	private static Single easeInOutQuart(Single start, Single end, Single value) { }
	// Offset : 0x8bf714
	private static Single easeInQuint(Single start, Single end, Single value) { }
	// Offset : 0x8bf734
	private static Single easeOutQuint(Single start, Single end, Single value) { }
	// Offset : 0x8bf764
	private static Single easeInOutQuint(Single start, Single end, Single value) { }
	// Offset : 0x8bf7cc
	private static Single easeInSine(Single start, Single end, Single value) { }
	// Offset : 0x8bf864
	private static Single easeOutSine(Single start, Single end, Single value) { }
	// Offset : 0x8bf8f8
	private static Single easeInOutSine(Single start, Single end, Single value) { }
	// Offset : 0x8bf99c
	private static Single easeInExpo(Single start, Single end, Single value) { }
	// Offset : 0x8bfa34
	private static Single easeOutExpo(Single start, Single end, Single value) { }
	// Offset : 0x8bfacc
	private static Single easeInOutExpo(Single start, Single end, Single value) { }
	// Offset : 0x8bfbbc
	private static Single easeInCirc(Single start, Single end, Single value) { }
	// Offset : 0x8bfc68
	private static Single easeOutCirc(Single start, Single end, Single value) { }
	// Offset : 0x8bfd14
	private static Single easeInOutCirc(Single start, Single end, Single value) { }
	// Offset : 0x8bfe0c
	private static Single easeInBounce(Single start, Single end, Single value) { }
	// Offset : 0x8bfe48
	private static Single easeOutBounce(Single start, Single end, Single value) { }
	// Offset : 0x8bff18
	private static Single easeInOutBounce(Single start, Single end, Single value) { }
	// Offset : 0x8bff9c
	private static Single easeInBack(Single start, Single end, Single value) { }
	// Offset : 0x8bffcc
	private static Single easeOutBack(Single start, Single end, Single value) { }
	// Offset : 0x8c000c
	private static Single easeInOutBack(Single start, Single end, Single value) { }
	// Offset : 0x8c0090
	private static Single punch(Single amplitude, Single value) { }
	// Offset : 0x8c0150
	private static Single easeInElastic(Single start, Single end, Single value) { }
	// Offset : 0x8c0238
	private static Single easeOutElastic(Single start, Single end, Single value) { }
	// Offset : 0x8c031c
	private static Single easeInOutElastic(Single start, Single end, Single value) { }
	// Offset : 0x8c0480
	public static Single EasingFromType(Single start, Single end, Single t, EaseType type) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public sealed class EaseDelegate : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8c0880
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x8c0890
	public virtual Single Invoke(Single start, Single end, Single t) { }
	// Offset : 0x8c0ba8
	public virtual IAsyncResult BeginInvoke(Single start, Single end, Single t, AsyncCallback callback, Object object) { }
	// Offset : 0x8c0c60
	public virtual Single EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public abstract class Tween`1 : Tweener
{
	// Fields
	public T from; // 0x0
	public T to; // 0x0
	private T <value>k__BackingField; // 0x0

	// Properties
	public virtual T value { get; set; }

	// Methods
	// Offset : 0x
	protected Void .ctor() { }
	// Offset : 0x
	public virtual T get_value() { }
	// Offset : 0x
	public virtual Void set_value(T value) { }
	// Offset : 0x
	public override Void SetStartToCurrentValue() { }
	// Offset : 0x
	public override Void SetEndToCurrentValue() { }
	// Offset : 0x
	public override Void SetCurrentValueToStart() { }
	// Offset : 0x
	public override Void SetCurrentValueToEnd() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public class TweenAlpha : Tween`1
{
	// Fields
	public Boolean includeChildren; // 0x80
	private Boolean isCanvasGroup; // 0x81
	private Single mAlpha; // 0x84
	private Transform mTransform; // 0x88
	private Graphic[] mGraphics; // 0x90
	private CanvasGroup mCanvasGroup; // 0x98

	// Properties
	private Transform CachedTranform { get; }
	private Graphic[] CachedGraphics { get; }
	private CanvasGroup CacheCanvasGroup { get; }
	public override Single value { get; set; }

	// Methods
	// Offset : 0x8c1214
	public Void .ctor() { }
	// Offset : 0x8c1264
	private Transform get_CachedTranform() { }
	// Offset : 0x8c12fc
	private Graphic[] get_CachedGraphics() { }
	// Offset : 0x8c13a0
	private CanvasGroup get_CacheCanvasGroup() { }
	// Offset : 0x8c1450
	protected override Void Start() { }
	// Offset : 0x8c14e8
	public override Single get_value() { }
	// Offset : 0x8c14f0
	public override Void set_value(Single value) { }
	// Offset : 0x8c1668
	protected override Void OnUpdate(Single factor, Boolean isFinished) { }
	// Offset : 0x8c1528
	private Void SetAlpha(Transform _transform, Single _alpha) { }
	// Offset : 0x8c16c4
	public static TweenAlpha Begin(GameObject go, Single from, Single to, Single duration, Single delay) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public abstract class Tweener : MonoBehaviour
{
	// Fields
	public static Tweener current; // 0x0
	public EaseType method; // 0x18
	public Style style; // 0x1c
	public AnimationCurve animationCurve; // 0x20
	public Boolean ignoreTimeScale; // 0x28
	public Single delay; // 0x2c
	public Single duration; // 0x30
	public Boolean steeperCurves; // 0x34
	public Int32 tweenGroup; // 0x38
	public UnityEvent onFinished; // 0x40
	public UnityAction onUpdate; // 0x48
	public GameObject eventReceiver; // 0x50
	public String callWhenFinished; // 0x58
	private Boolean mStarted; // 0x60
	private Single mStartTime; // 0x64
	private Single mDuration; // 0x68
	private Single mAmountPerDelta; // 0x6c
	private Single mFactor; // 0x70

	// Properties
	public Single amountPerDelta { get; }
	public Single tweenFactor { get; set; }
	public Direction direction { get; }

	// Methods
	// Offset : 0x8beb84
	protected Void .ctor() { }
	// Offset : 0x8c1c7c
	public Single get_amountPerDelta() { }
	// Offset : 0x8c1d30
	public Single get_tweenFactor() { }
	// Offset : 0x8c1d38
	public Void set_tweenFactor(Single value) { }
	// Offset : 0x8c1db4
	public Direction get_direction() { }
	// Offset : 0x8c1dd4
	private Void Reset() { }
	// Offset : 0x8c14e4
	protected virtual Void Start() { }
	// Offset : 0x8c21b0
	private Void OnEnable() { }
	// Offset : 0x8c1e50
	private Void Update() { }
	// Offset : 0x8c221c
	public Void SetOnFinished(UnityEvent finishedCallBack) { }
	// Offset : 0x8c2224
	public Void AddOnFinished(UnityEvent finishedCallBack) { }
	// Offset : 0x8c2228
	public Void RemoveOnFinished(UnityEvent finishedCallBack) { }
	// Offset : 0x8c222c
	private Void OnDisable() { }
	// Offset : 0x8c17a8
	public Void Sample(Single factor, Boolean isFinished) { }
	// Offset : 0x8c2234
	public Void PlayForward() { }
	// Offset : 0x8c22e4
	public Void PlayReverse() { }
	// Offset : 0x8c223c
	public Void Play(Boolean forward) { }
	// Offset : 0x8c21c4
	public Void ResetToBeginning() { }
	// Offset : 0x8c22ec
	public Void Toggle() { }
	// Offset : 0x
	protected abstract Void OnUpdate(Single factor, Boolean isFinished) { }
	// Offset : 0x
	public static T Begin(GameObject go, Single duration) { }
	// Offset : 0x8c2388
	public virtual Void SetStartToCurrentValue() { }
	// Offset : 0x8c238c
	public virtual Void SetEndToCurrentValue() { }
	// Offset : 0x8c2390
	public virtual Void SetCurrentValueToStart() { }
	// Offset : 0x8c2394
	public virtual Void SetCurrentValueToEnd() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum Style
{
	// Fields
	public Int32 value__; // 0x10
	public const Style Once = 0; // 0x0
	public const Style Loop = 1; // 0x0
	public const Style PingPong = 2; // 0x0
	public const Style OnceEverytimeOnEnable = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public class TweenScale : Tween`1
{
	// Fields
	private Vector3 mValue; // 0x98
	private Transform mTransform; // 0xa8

	// Properties
	private Transform cachedTransform { get; }
	public override Vector3 value { get; set; }

	// Methods
	// Offset : 0x8c18ec
	public Void .ctor() { }
	// Offset : 0x8c193c
	private Transform get_cachedTransform() { }
	// Offset : 0x8c19cc
	public override Vector3 get_value() { }
	// Offset : 0x8c19d8
	public override Void set_value(Vector3 value) { }
	// Offset : 0x8c1a38
	protected override Void OnUpdate(Single factor, Boolean isFinished) { }
	// Offset : 0x8c1b68
	public static TweenScale Begin(GameObject go, Vector3 from, Vector3 to, Single duration, Single delay) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public enum Direction
{
	// Fields
	public Int32 value__; // 0x10
	public const Direction Reverse = 4294967295; // 0x0
	public const Direction Toggle = 0; // 0x0
	public const Direction Forward = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public enum Trigger
{
	// Fields
	public Int32 value__; // 0x10
	public const Trigger OnPointerEnter = 0; // 0x0
	public const Trigger OnPointerDown = 1; // 0x0
	public const Trigger OnPointerClick = 2; // 0x0
	public const Trigger OnPointerUp = 3; // 0x0
	public const Trigger OnPointerExit = 4; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: uTools
public enum ShakeType
{
	// Fields
	public Int32 value__; // 0x10
	public const ShakeType ePosition = 0; // 0x0
	public const ShakeType eScale = 1; // 0x0
	public const ShakeType eRotation = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class AudioManager : MonoBehaviour
{
	// Fields
	private static AudioManager m_Instance; // 0x0
	private Boolean <MusicOn>k__BackingField; // 0x18
	private Boolean <SoundEffectOn>k__BackingField; // 0x19
	private Single <MusicVolume>k__BackingField; // 0x1c
	private Single <SoundEffectVolume>k__BackingField; // 0x20
	private AudioSource m_SoundEffectAudioSource; // 0x28
	private AudioResource m_CurrectMusic; // 0x30
	private ObjectPool`1 m_AudioResourcePool; // 0x38
	private Dictionary`2 m_AudioFadeEffects; // 0x40
	private List`1 m_FinishFadeEffect; // 0x48

	// Properties
	public static AudioManager instance { get; }
	public Boolean MusicOn { get; set; }
	public Boolean SoundEffectOn { get; set; }
	public Single MusicVolume { get; set; }
	public Single SoundEffectVolume { get; set; }

	// Methods
	// Offset : 0x38adcc
	public Void .ctor() { }
	// Offset : 0x37c304
	public static AudioManager get_instance() { }
	// Offset : 0x38ae8c
	public Boolean get_MusicOn() { }
	// Offset : 0x38ae94
	private Void set_MusicOn(Boolean value) { }
	// Offset : 0x38aea0
	public Boolean get_SoundEffectOn() { }
	// Offset : 0x38aea8
	private Void set_SoundEffectOn(Boolean value) { }
	// Offset : 0x38aeb4
	public Single get_MusicVolume() { }
	// Offset : 0x38aebc
	private Void set_MusicVolume(Single value) { }
	// Offset : 0x38aec4
	public Single get_SoundEffectVolume() { }
	// Offset : 0x38aecc
	private Void set_SoundEffectVolume(Single value) { }
	// Offset : 0x38aed4
	private Void Awake() { }
	// Offset : 0x37c36c
	public Void RunOneFrame(Single gameTime, Single deltaTime) { }
	// Offset : 0x38afe8
	public Void SetMusicOn(Boolean v) { }
	// Offset : 0x38b2f8
	public Void SetMusicVolume(Single v) { }
	// Offset : 0x38b354
	public Void SetSoundEffectVolume(Single v) { }
	// Offset : 0x38b35c
	public Void SetSoundEffectOn(Boolean v) { }
	// Offset : 0x38b37c
	public Void Play3DShot(ResourceID sound, Vector3 worldPos, ResourceID audioSourceID, Single volume) { }
	// Offset : 0x38b7e8
	public GameObject Play2DLoopStart(ResourceID sound, Transform parent, ResourceID audioSourceID, Single volume) { }
	// Offset : 0x38bb04
	public GameObject Play3DLoopStart(ResourceID sound, Transform parent, ResourceID audioSourceID, Single volume) { }
	// Offset : 0x38be20
	public Void Play3DLoopStop(GameObject audioSourceObj) { }
	// Offset : 0x37e5d4
	public Void PlayOneShot(ResourceID sound, Single volume) { }
	// Offset : 0x38bf0c
	public Void PlayMusic(AudioClip c, ResourceID sound, Boolean fadeIn, Boolean fadeOutCurrent, Boolean loop) { }
	// Offset : 0x38c4a0
	public Void PlayMusic(ResourceID sound, Boolean fadeIn, Boolean fadeOutCurrent, Boolean loop) { }
	// Offset : 0x38c2e0
	public Void StopMusic(Boolean fadeOutCurrent) { }
	// Offset : 0x38b6e8
	private AudioClip LoadAudioClip(ResourceID sound) { }
	// Offset : 0x38b0f4
	private Void StopAndClearFadeEffect() { }
	// Offset : 0x38c594
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class AudioResource : ObjectPoolCallbackBase
{
	// Fields
	public ResourceID AudioID; // 0x14
	public AudioSource Audio; // 0x18

	// Properties

	// Methods
	// Offset : 0x38c598
	public Void .ctor() { }
	// Offset : 0x38c5a0
	public override Void OnCollected() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class AudioFadeEffect
{
	// Fields
	public AudioResource AudioRes; // 0x10
	public Single TargetVolume; // 0x18

	// Properties

	// Methods
	// Offset : 0x38c498
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class EventDispatcher
{
	// Fields
	public Dictionary`2 m_EventDict; // 0x10

	// Properties

	// Methods
	// Offset : 0x38cba8
	public Void .ctor() { }
	// Offset : 0x390100
	public Void DispatchEvent(UInt32 eventID, Object[] data) { }
	// Offset : 0x37ac38
	public Void RegisterEvent(UInt32 eventID, EventHandler eventHandler) { }
	// Offset : 0x37b6a0
	public Void UnRegisterEvent(UInt32 eventID, EventHandler eventHandler) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public sealed class EventHandler : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x37ac28
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x3901ac
	public virtual Void Invoke(Object[] data) { }
	// Offset : 0x39066c
	public virtual IAsyncResult BeginInvoke(Object[] data, AsyncCallback callback, Object object) { }
	// Offset : 0x390690
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public interface IObjectPoolCallback
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnAllocated() { }
	// Offset : 0x
	public abstract Void OnCollected() { }
	// Offset : 0x
	public abstract Boolean IsInPool() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ObjectPoolCallbackBase : IObjectPoolCallback
{
	// Fields
	private Boolean m_IsInPool; // 0x10

	// Properties

	// Methods
	// Offset : 0x4602b0
	public Void .ctor() { }
	// Offset : 0x4602c0
	public virtual Void OnAllocated() { }
	// Offset : 0x4602c8
	public virtual Void OnCollected() { }
	// Offset : 0x4602d4
	public virtual Boolean IsInPool() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ObjectPool`1
{
	// Fields
	protected Queue`1 m_FreeObjects; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public T AllocObject() { }
	// Offset : 0x
	public Void CollectObject(T obj) { }
	// Offset : 0x
	public virtual Void Clear() { }
	// Offset : 0x
	protected virtual IObjectPoolCallback AllocObjectInternal() { }
	// Offset : 0x
	protected virtual Void CollectObjectInternal(T obj) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class SyncedObjectPool`1 : ObjectPool`1
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	protected override IObjectPoolCallback AllocObjectInternal() { }
	// Offset : 0x
	protected override Void CollectObjectInternal(T obj) { }
	// Offset : 0x
	public override Void Clear() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class RingBuffer`1 : IEnumerable`1, IEnumerable, ICollection`1, ICollection
{
	// Fields
	protected Int32 head; // 0x0
	protected Int32 tail; // 0x0
	protected Int32 size; // 0x0
	protected T[] buffer; // 0x0
	private Boolean allowOverflow; // 0x0

	// Properties
	public Boolean AllowOverflow { get; }
	public Int32 Capacity { get; }
	public Int32 Size { get; }
	public Int32 Count { get; }
	public Boolean IsReadOnly { get; }
	public Object SyncRoot { get; }
	public Boolean IsSynchronized { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public Void .ctor(Int32 capacity) { }
	// Offset : 0x
	public Void .ctor(Int32 capacity, Boolean overflow) { }
	// Offset : 0x
	public Boolean get_AllowOverflow() { }
	// Offset : 0x
	public Int32 get_Capacity() { }
	// Offset : 0x
	public Int32 get_Size() { }
	// Offset : 0x
	public T Get() { }
	// Offset : 0x
	public Void Put(T item) { }
	// Offset : 0x
	protected Void addToBuffer(T toAdd, Boolean overflow) { }
	// Offset : 0x
	public IEnumerator`1 GetEnumerator() { }
	// Offset : 0x
	private IEnumerator`1 System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// Offset : 0x
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// Offset : 0x
	public Int32 get_Count() { }
	// Offset : 0x
	public Boolean get_IsReadOnly() { }
	// Offset : 0x
	public Void Add(T item) { }
	// Offset : 0x
	public Boolean Contains(T item) { }
	// Offset : 0x
	public Void Clear() { }
	// Offset : 0x
	public Void CopyTo(T[] array, Int32 arrayIndex) { }
	// Offset : 0x
	public Boolean Remove(T item) { }
	// Offset : 0x
	public Object get_SyncRoot() { }
	// Offset : 0x
	public Boolean get_IsSynchronized() { }
	// Offset : 0x
	private Void System.Collections.ICollection.CopyTo(Array array, Int32 index) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <GetEnumerator>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal Int32 <_index>__0; // 0x0
	internal Int32 <i>__1; // 0x0
	internal RingBuffer`1 $this; // 0x0
	internal T $current; // 0x0
	internal Boolean $disposing; // 0x0
	internal Int32 $PC; // 0x0

	// Properties
	private T System.Collections.Generic.IEnumerator<T>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public Boolean MoveNext() { }
	// Offset : 0x
	private T System.Collections.Generic.IEnumerator<T>.get_Current() { }
	// Offset : 0x
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x
	public Void Dispose() { }
	// Offset : 0x
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public interface ISingletonModule
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void Init() { }
	// Offset : 0x
	public abstract Void Cleanup() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public abstract class SingletonModule`1 : ISingletonModule
{
	// Fields
	private static T _instance; // 0x0
	private Boolean m_HasInited; // 0x0

	// Properties
	public static T instance { get; }

	// Methods
	// Offset : 0x
	public Void .ctor() { }
	// Offset : 0x
	public static T get_instance() { }
	// Offset : 0x
	public Void Init() { }
	// Offset : 0x
	public Void Cleanup() { }
	// Offset : 0x
	protected abstract Void OnInit() { }
	// Offset : 0x
	protected abstract Void OnCleanup() { }
	// Offset : 0x
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public static class SingletonModuleAppContext
{
	// Fields
	private static List`1 Modules; // 0x0

	// Properties

	// Methods
	// Offset : 0x479a78
	internal static Void RegisterModule(ISingletonModule module) { }
	// Offset : 0x479b04
	public static Void InitModules() { }
	// Offset : 0x479ce0
	public static Void CleanupModules() { }
	// Offset : 0x479ec0
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class TimeService
{
	// Fields
	private Single m_GameTime; // 0x10
	private Single m_LastGameTime; // 0x14
	private Single m_DeltaTime; // 0x18
	private UInt32 m_TickCount; // 0x1c
	private Boolean m_UsingFixedDeltaTime; // 0x20
	private Single m_FixedDeltaTime; // 0x24

	// Properties
	public Single GameTime { get; }
	public Single LastGameTime { get; }
	public Single FixedDeltaTime { get; }
	public Single DeltaTime { get; }
	public UInt32 TickCount { get; }

	// Methods
	// Offset : 0x47a1d8
	public Void .ctor() { }
	// Offset : 0x47a1e0
	public Single get_GameTime() { }
	// Offset : 0x47a1e8
	public Single get_LastGameTime() { }
	// Offset : 0x47a1f0
	public Single get_FixedDeltaTime() { }
	// Offset : 0x47a1f8
	public Single get_DeltaTime() { }
	// Offset : 0x47a200
	public UInt32 get_TickCount() { }
	// Offset : 0x47a208
	public Void Reset() { }
	// Offset : 0x47a210
	public Void UseFixedDeltaTime(Single fixedDeltaTime) { }
	// Offset : 0x47a220
	public Void UpdateTime() { }
	// Offset : 0x47a298
	public Void ClearDeltaTime() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public abstract class BaseGame
{
	// Fields
	internal static Dictionary`2 sTickedEntities; // 0x0
	internal static Dictionary`2 sAllEntities; // 0x8
	protected UIBaseScene m_UIScene; // 0x10
	protected TimeService m_GameTimer; // 0x18
	protected TimeService m_SimulationTimer; // 0x20
	protected EventDispatcher m_GameEventDispatcher; // 0x28
	protected BaseGameContext m_GameContext; // 0x30
	protected LoadingProcessManager m_LoadingProcessManager; // 0x38
	protected UniqueIDGenerator m_UniqueIDGen; // 0x40
	protected Dictionary`2 m_TimerActions; // 0x48
	protected List`1 m_ExpiredTimerActions; // 0x50
	protected Dictionary`2 m_TimerActionsToBeCalled; // 0x58
	private Boolean m_HasInited; // 0x60
	private Boolean m_HasLoadingFailed; // 0x61
	private Boolean m_HasFixedUpdated; // 0x62

	// Properties
	public UIBaseScene UIScene { get; }
	public TimeService GameTimer { get; }
	public TimeService SimulationTimer { get; }
	public EventDispatcher GameEventDispatcher { get; }
	public BaseGameContext GameContext { get; }

	// Methods
	// Offset : 0x38c61c
	protected Void .ctor() { }
	// Offset : 0x38c624
	internal static Void RegisterEntity(Entity entity) { }
	// Offset : 0x38c734
	internal static Void UnregisterEntity(Entity entity) { }
	// Offset : 0x38c834
	public UIBaseScene get_UIScene() { }
	// Offset : 0x38c83c
	public TimeService get_GameTimer() { }
	// Offset : 0x38c844
	public TimeService get_SimulationTimer() { }
	// Offset : 0x38c84c
	public EventDispatcher get_GameEventDispatcher() { }
	// Offset : 0x38c854
	public BaseGameContext get_GameContext() { }
	// Offset : 0x38c85c
	public Void Init(BaseGameContext gameContext) { }
	// Offset : 0x38cd5c
	public Void SceneLoaded() { }
	// Offset : 0x38cdc0
	public Void RunOneFrame() { }
	// Offset : 0x38d758
	public Void FixedRunOneFrame() { }
	// Offset : 0x38da48
	public Void UnInit() { }
	// Offset : 0x38db88
	public UInt32 DelayCall(Single delayTime, Action action, Boolean isRepeated) { }
	// Offset : 0x38dd34
	public Void CancelDelayCall(UInt32 id) { }
	// Offset : 0x38de38
	public Boolean HasInited() { }
	// Offset : 0x38de40
	public Boolean HasLoadingFailed() { }
	// Offset : 0x38de48
	protected virtual Void OnAwake() { }
	// Offset : 0x38de4c
	protected virtual Void OnSceneLoaded() { }
	// Offset : 0x38de50
	protected virtual Void OnDestroy() { }
	// Offset : 0x38de54
	protected virtual Void OnUpdate() { }
	// Offset : 0x38de58
	protected virtual Void OnFixedUpdate() { }
	// Offset : 0x
	public abstract ResourceID[] GetResourceID() { }
	// Offset : 0x
	public abstract Type GetUISceneType() { }
	// Offset : 0x38de5c
	public virtual ResourceID[] GetPreloadResourceID() { }
	// Offset : 0x38de64
	public virtual LoadingProcess[] GetLoadingProcesses() { }
	// Offset : 0x38de6c
	public virtual Void OnLoadingFailed(Int32 expectionProcessIndex) { }
	// Offset : 0x38de70
	public virtual Int32 GetGameType() { }
	// Offset : 0x38de78
	public virtual Int32 GetSubGameType() { }
	// Offset : 0x38de80
	public virtual Boolean NotUsingAB() { }
	// Offset : 0x38de88
	public virtual Void SetSceneABInfo(Boolean useAB, String abPath, String streamPath) { }
	// Offset : 0x38de8c
	public virtual String GetSceneStreamABPath() { }
	// Offset : 0x38def4
	public virtual String GetSceneName() { }
	// Offset : 0x38df5c
	public virtual Boolean ShouldClearPreloadAssets(Type nextGameType) { }
	// Offset : 0x38df64
	private static Void .cctor() { }
	// Offset : 0x38e008
	private Void <Init>m__0(Boolean result, Int32 exceptionProcessIndex) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public abstract class BaseGameContext
{
	// Fields
	private Boolean m_HasInit; // 0x10
	private BaseGame <CurrentGame>k__BackingField; // 0x18

	// Properties
	public BaseGame CurrentGame { get; set; }

	// Methods
	// Offset : 0x38e070
	protected Void .ctor() { }
	// Offset : 0x38e078
	public BaseGame get_CurrentGame() { }
	// Offset : 0x38cc2c
	internal Void set_CurrentGame(BaseGame value) { }
	// Offset : 0x38cc34
	public Void Init() { }
	// Offset : 0x38e080
	public Void Destory() { }
	// Offset : 0x38e0d0
	protected virtual Void OnInit() { }
	// Offset : 0x38e0d4
	protected virtual Void OnDestroy() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
internal class GameEngine : MonoBehaviour
{
	// Fields
	public static GameEngine instance; // 0x0
	public static ObjectPool`1 GlobalTimerActionPool; // 0x8
	private BaseGame m_CurrentGame; // 0x18
	private TimeService m_EngineTimer; // 0x20
	private ResourceID m_LoadingSceneResourceID; // 0x28
	private Type m_PendingGameType; // 0x30
	private BaseGameContext m_PendingGameContext; // 0x38
	private Single m_LoadingPreloadedResourceProgress; // 0x40
	private Boolean m_LoadingInProcess; // 0x44
	private UniqueIDGenerator m_UniqueIDGen; // 0x48
	private Dictionary`2 m_TimerActions; // 0x50
	private List`1 m_ExpiredTimerActions; // 0x58
	private Dictionary`2 m_TimerActionsToBeCalled; // 0x60
	private Single m_LoadingPendingGameProgress; // 0x68

	// Properties
	public Single LoadingPreloadedResourceProgress { get; }
	public Single LoadingPendingGameProgress { get; }
	public TimeService EngineTimer { get; }

	// Methods
	// Offset : 0x390cb8
	public Void .ctor() { }
	// Offset : 0x37e308
	public Single get_LoadingPreloadedResourceProgress() { }
	// Offset : 0x37e300
	public Single get_LoadingPendingGameProgress() { }
	// Offset : 0x390dc8
	public TimeService get_EngineTimer() { }
	// Offset : 0x390dd0
	private Void Awake() { }
	// Offset : 0x390e70
	public Void SetLoadingSceneResourceID(ResourceID id) { }
	// Offset : 0x390e78
	public UInt32 DelayCall(Single delayTime, Action action, Boolean isRepeated) { }
	// Offset : 0x390fec
	public Void CancelDelayCall(UInt32 id) { }
	// Offset : 0x3910f0
	public Void RunOneFrame() { }
	// Offset : 0x391720
	public Void FixedRunOneFrame() { }
	// Offset : 0x391730
	public Single GetEngineTime() { }
	// Offset : 0x391760
	public Boolean LoadAndRun(Type gameType, BaseGameContext sharedData) { }
	// Offset : 0x391a30
	private Void AfterCleanAssets() { }
	// Offset : 0x37deb8
	public Void LoadPendingGame() { }
	// Offset : 0x
	public Void LoadAndRun(BaseGameContext sharedData) { }
	// Offset : 0x391994
	private IEnumerator CleanAssets(Boolean shouldCleanPreloadResources) { }
	// Offset : 0x391ae0
	private IEnumerator LoadLoadingScene() { }
	// Offset : 0x391b50
	private IEnumerator LoadGameProcess(BaseGame game) { }
	// Offset : 0x391bfc
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <CleanAssets>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal Boolean shouldCleanPreloadResources; // 0x10
	internal AsyncOperation <cleanupState>__0; // 0x18
	internal GameEngine $this; // 0x20
	internal Object $current; // 0x28
	internal Boolean $disposing; // 0x30
	internal Int32 $PC; // 0x34

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x391be4
	public Void .ctor() { }
	// Offset : 0x391c70
	public Boolean MoveNext() { }
	// Offset : 0x391df4
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x391dfc
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x391e04
	public Void Dispose() { }
	// Offset : 0x391e18
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <LoadLoadingScene>c__Iterator1 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal AsyncOperation <sceneLoadState>__0; // 0x10
	internal GameEngine $this; // 0x18
	internal Object $current; // 0x20
	internal Boolean $disposing; // 0x28
	internal Int32 $PC; // 0x2c

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x391bec
	public Void .ctor() { }
	// Offset : 0x3929ac
	public Boolean MoveNext() { }
	// Offset : 0x392c04
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x392c0c
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x392c14
	public Void Dispose() { }
	// Offset : 0x392c28
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <LoadGameProcess>c__Iterator2 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal BaseGame game; // 0x10
	internal ResourceID[] <preloadedResource>__0; // 0x18
	internal Int32 <loadedCount>__1; // 0x20
	internal ResourceID[] $locvar0; // 0x28
	internal Int32 $locvar1; // 0x30
	internal ResourceID <resID>__2; // 0x34
	internal Boolean <loaded>__3; // 0x38
	internal ResourceID[] <sceneList>__0; // 0x40
	internal String <sceneAbPath>__0; // 0x48
	internal String <sceneStreamAbPath>__0; // 0x50
	internal Boolean <useAb>__0; // 0x58
	internal Int32 <i>__4; // 0x5c
	internal LoadSceneMode <mode>__5; // 0x60
	internal AsyncOperation <sceneLoadState>__5; // 0x68
	internal GameEngine $this; // 0x70
	internal Object $current; // 0x78
	internal Boolean $disposing; // 0x80
	internal Int32 $PC; // 0x84

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x391bf4
	public Void .ctor() { }
	// Offset : 0x391e80
	public Boolean MoveNext() { }
	// Offset : 0x392920
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x392928
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x392930
	public Void Dispose() { }
	// Offset : 0x392944
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class LoadingProcess
{
	// Fields
	private EProcessStatus m_Status; // 0x10

	// Properties

	// Methods
	// Offset : 0x3937ec
	public Void .ctor() { }
	// Offset : 0x3937f4
	public Void StartProcess() { }
	// Offset : 0x393850
	public Void UpdateProcess() { }
	// Offset : 0x3938a4
	public Void CleanProcess() { }
	// Offset : 0x3938f8
	public virtual Boolean IsMainProcess() { }
	// Offset : 0x393900
	public Boolean IsFinished() { }
	// Offset : 0x393910
	public Boolean HasException() { }
	// Offset : 0x393920
	protected virtual Void OnStartProcess() { }
	// Offset : 0x393924
	protected virtual EProcessStatus OnUpdateProcess() { }
	// Offset : 0x39392c
	protected virtual Void OnCleanProcess() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EProcessStatus
{
	// Fields
	public Int32 value__; // 0x10
	public const EProcessStatus NotStarted = 0; // 0x0
	public const EProcessStatus Running = 1; // 0x0
	public const EProcessStatus Finished = 2; // 0x0
	public const EProcessStatus Exception = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class LoadingProcessManager
{
	// Fields
	private LoadingProcess[] m_Processes; // 0x10
	private Int32 m_LastMainProcessIndex; // 0x18
	private Action`2 m_FinshedHandler; // 0x20

	// Properties

	// Methods
	// Offset : 0x38cc1c
	public Void .ctor() { }
	// Offset : 0x38cc88
	public Void Start(LoadingProcess[] processes, Action`2 finishedHandler) { }
	// Offset : 0x38d5f4
	public Void Update() { }
	// Offset : 0x393a4c
	private Void StartNextProcess() { }
	// Offset : 0x393940
	private Void DispachFinishedEvent(Boolean result, Int32 exceptionProcessIndex) { }
	// Offset : 0x393930
	private Boolean HasProcesses() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class AnimationConfigData : CSVBaseData
{
	// Fields
	private static Dictionary`2 sGenID; // 0x0
	public AnimationID AnimID; // 0x10
	public String AnimIDName; // 0x18
	public String TargetStateName; // 0x20
	public Single TransitionDuration; // 0x28
	public Boolean NeedWaitForFinished; // 0x2c

	// Properties

	// Methods
	// Offset : 0x3893c8
	public Void .ctor() { }
	// Offset : 0x389488
	private static Int32 GetNextID(Int32 layerIndex) { }
	// Offset : 0x389584
	public override String GetPrimaryKey() { }
	// Offset : 0x38958c
	public override Void ParseData(Int64 index, Int32 fieldCount, String[] headers, String[] values) { }
	// Offset : 0x389920
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class AnimationBlendConfigData : CSVBaseData
{
	// Fields
	public Int64 TransitionID; // 0x10
	public Boolean UseFixedDuration; // 0x18
	public Single TransitionDuration; // 0x1c

	// Properties

	// Methods
	// Offset : 0x388f2c
	public Void .ctor() { }
	// Offset : 0x388f48
	public override String GetPrimaryKey() { }
	// Offset : 0x388f54
	public override Void ParseData(Int64 index, Int32 fieldCount, String[] headers, String[] values) { }
	// Offset : 0x389304
	public static Int64 MakeTransitionID(AnimationID fadeOutAnim, AnimationID fadeInAnim) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
internal class AnimationConfigDataManager : SingletonModule`1
{
	// Fields
	private Dictionary`2 m_AnimConfigDatas; // 0x18
	private Dictionary`2 m_AnimBlendConfigDatas; // 0x20

	// Properties

	// Methods
	// Offset : 0x389994
	public Void .ctor() { }
	// Offset : 0x389a54
	protected override Void OnCleanup() { }
	// Offset : 0x389ab4
	protected override Void OnInit() { }
	// Offset : 0x389e0c
	public AnimationBlendConfigData GetAnimBlendConfigData(AnimationID fadeOut, AnimationID fadeIn) { }
	// Offset : 0x389ebc
	public AnimationConfigData GetAnimConfigData(Int32 id) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public struct AnimationID
{
	// Fields
	private readonly Int32 m_Value; // 0x10
	public static readonly AnimationID INVALID; // 0x0

	// Properties

	// Methods
	// Offset : 0x299d28
	private Void .ctor(Int32 value) { }
	// Offset : 0x3893c4
	public static Int32 op_Implicit(AnimationID id) { }
	// Offset : 0x389918
	public static AnimationID op_Implicit(Int32 value) { }
	// Offset : 0x389f70
	public static Boolean op_Equality(AnimationID a, AnimationID b) { }
	// Offset : 0x389f7c
	public static Boolean op_Inequality(AnimationID a, AnimationID b) { }
	// Offset : 0x299d30
	public override String ToString() { }
	// Offset : 0x299d5c
	public override Boolean Equals(Object obj) { }
	// Offset : 0x299d64
	public override Int32 GetHashCode() { }
	// Offset : 0x299d90
	public Int32 GetLayerIndex() { }
	// Offset : 0x299da4
	public Int32 GetID() { }
	// Offset : 0x38988c
	public static Int32 MakeAnimationID(Int32 id, Int32 layerIndex) { }
	// Offset : 0x38a0e0
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class AnimationRuntimeHandle
{
	// Fields
	protected Animator m_Animator; // 0x10
	protected AnimationConfigData m_ConfigData; // 0x18
	protected Boolean m_HasFinished; // 0x20

	// Properties

	// Methods
	// Offset : 0x38a1b4
	public Void .ctor() { }
	// Offset : 0x38a1bc
	public Void Reset(Animator animator, AnimationConfigData data) { }
	// Offset : 0x38a204
	public Int32 GetAnimID() { }
	// Offset : 0x38a2a4
	protected virtual Void OnReset() { }
	// Offset : 0x38a2a8
	internal Void SetAnimationFinished() { }
	// Offset : 0x38a2b4
	public virtual Boolean CanInterrupted() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class AnimationStateMonitor : StateMachineBehaviour
{
	// Fields
	public String AnimIDString; // 0x18
	public Single EndCutTime; // 0x20
	public Boolean AutoTransitionToDefaultState; // 0x24
	private AnimationID m_AnimID; // 0x28
	private AnimationSystemComponent m_AnimSystem; // 0x30
	private Single m_LastTime; // 0x38

	// Properties

	// Methods
	// Offset : 0x38a2dc
	public Void .ctor() { }
	// Offset : 0x38a2f8
	public override Void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex) { }
	// Offset : 0x38a474
	public override Void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, Int32 layerIndex) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class AnimationSystemComponent : MonoBehaviour
{
	// Fields
	private const UInt32 MAX_ANIM_LAYER_NB; // 0x0
	protected Animator m_Animator; // 0x18
	protected AnimationRuntimeHandle[] m_CurrentHandles; // 0x20
	protected AnimationID[] m_DefaultAnims; // 0x28
	private Int32 m_SwitchAnimationControllTickCount; // 0x30

	// Properties

	// Methods
	// Offset : 0x38a5d0
	public Void .ctor() { }
	// Offset : 0x38a5d8
	protected virtual UInt32 GetMaxLayerUsed() { }
	// Offset : 0x38a5e0
	public AnimationRuntimeHandle PlayAnim(AnimationID animID, Boolean canTransitionToSelf) { }
	// Offset : 0x
	public AnimationRuntimeHandle PlayAnim(AnimationID animID, Boolean canTransitionToSelf) { }
	// Offset : 0x38a648
	public Void AddDefaultState(AnimationID animID) { }
	// Offset : 0x387ef8
	public Boolean IsPlaying(AnimationID animID) { }
	// Offset : 0x38a794
	public AnimationID GetCurrentAnimID(Int32 layerIndex) { }
	// Offset : 0x38a850
	public Boolean CanInterrupted() { }
	// Offset : 0x38a8c0
	public Boolean CanInterrupted(Int32 layerIndex) { }
	// Offset : 0x38a918
	public Void TransitionAllLayerToDefaultState() { }
	// Offset : 0x38a980
	public Void TransitionToDefaultState(Int32 layerIndex) { }
	// Offset : 0x38a9c8
	public Void PauseAnimation() { }
	// Offset : 0x38aa84
	public Void SwitchAnimController(RuntimeAnimatorController runCtrl) { }
	// Offset : 0x38a558
	internal Void SetAnimationFinished(AnimationID animID, Boolean autoTransitionToDefaultState) { }
	// Offset : 0x38ab58
	protected virtual Void OnTransitionToDefaultState(Int32 layerIndex) { }
	// Offset : 0x38a6d4
	private AnimationRuntimeHandle GetCurrentRunningHandler(Int32 layerIndex) { }
	// Offset : 0x38aa14
	public Boolean HasAnimator() { }
	// Offset : 0x
	private T PlayAnimInternal(AnimationConfigData data, Boolean useInstantSwitch) { }
	// Offset : 0x38abf0
	private Void Awake() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum EEntityProxyType
{
	// Fields
	public Int32 value__; // 0x10
	public const EEntityProxyType Autonomous = 0; // 0x0
	public const EEntityProxyType Simulated = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
internal interface IEntityTicker
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnFixedUpdate(Single gameTime, Single deltaTime) { }
	// Offset : 0x
	public abstract Void OnUpdate(Single gameTime, Single deltaTime) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class Entity : MonoBehaviour, IEntityTicker
{
	// Fields
	public static UInt32 sUniqueEntityID; // 0x0
	public Boolean NeedUpdate; // 0x18
	public Boolean NeedStreamerUpdate; // 0x19
	private Transform m_CachedTransform; // 0x20
	private UInt32 m_UniqueID; // 0x28
	protected EEntityProxyType m_ProxyType; // 0x2c

	// Properties
	public Transform CachedTransform { get; }
	public Vector3 Position { get; set; }
	public Vector3 Forward { get; set; }
	public Vector3 Right { get; set; }
	public Quaternion Rotation { get; set; }
	public UInt32 UniqueID { get; }

	// Methods
	// Offset : 0x38f794
	public Void .ctor() { }
	// Offset : 0x38f79c
	private static UInt32 GetUniqueID() { }
	// Offset : 0x38f80c
	public Transform get_CachedTransform() { }
	// Offset : 0x3863a8
	public Vector3 get_Position() { }
	// Offset : 0x38f89c
	public Void set_Position(Vector3 value) { }
	// Offset : 0x38f8f4
	public Vector3 get_Forward() { }
	// Offset : 0x38f924
	public Void set_Forward(Vector3 value) { }
	// Offset : 0x38f97c
	public Vector3 get_Right() { }
	// Offset : 0x38f9ac
	public Void set_Right(Vector3 value) { }
	// Offset : 0x38fa04
	public Quaternion get_Rotation() { }
	// Offset : 0x38fa34
	public Void set_Rotation(Quaternion value) { }
	// Offset : 0x38c72c
	public UInt32 get_UniqueID() { }
	// Offset : 0x38fa94
	private Void Awake() { }
	// Offset : 0x38fb24
	private Void Start() { }
	// Offset : 0x38fbb0
	private Void OnDestroy() { }
	// Offset : 0x38fc3c
	protected virtual Void OnAwake() { }
	// Offset : 0x38fc40
	protected virtual Void OnStart() { }
	// Offset : 0x38fc44
	protected virtual Void OnOnDestroy() { }
	// Offset : 0x38fc48
	public virtual Void OnFixedUpdate(Single gameTime, Single deltaTime) { }
	// Offset : 0x38fc4c
	public virtual Void OnUpdate(Single gameTime, Single deltaTime) { }
	// Offset : 0x385550
	public Boolean IsAutonomousProxy() { }
	// Offset : 0x38fc50
	public Boolean IsSimulatedProxy() { }
	// Offset : 0x38fc60
	public Void SetAutonomousProxy() { }
	// Offset : 0x38fc68
	public Void SetSimulatedProxy() { }
	// Offset : 0x38fc74
	public Single GetMaxBoundsExtent() { }
	// Offset : 0x38ff08
	public Transform FindTransformByName(String name) { }
	// Offset : 0x38ff30
	public Transform FindTransformByName(Transform root, String name) { }
	// Offset : 0x37fdd4
	public static Transform FindTransformByName(GameObject go, String name) { }
	// Offset : 0x38fce8
	public static Single GetMaxBoundsExtent(Transform obj) { }
	// Offset : 0x3900fc
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class GridValueBase
{
	// Fields
	protected Vector3 m_GridCoordinate; // 0x10

	// Properties
	public Vector3 GridCoordinate { get; }

	// Methods
	// Offset : 0x392c90
	public Void .ctor() { }
	// Offset : 0x392d08
	public Vector3 get_GridCoordinate() { }
	// Offset : 0x392d14
	public virtual Void InitGridValue(Vector3 coordinate) { }
	// Offset : 0x392d20
	public override Boolean Equals(Object obj) { }
	// Offset : 0x392e50
	public override Int32 GetHashCode() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class Grid2D`1
{
	// Fields
	private Rectangle2D m_Shape; // 0x0
	private Single m_HalfLength; // 0x0
	private Single m_HalfWidth; // 0x0
	private Int32 m_ColumnCount; // 0x0
	private Int32 m_RowCount; // 0x0
	private Dictionary`2 m_Values; // 0x0
	private Int32 m_GridCount; // 0x0
	private Vector2 m_GridSize; // 0x0

	// Properties

	// Methods
	// Offset : 0x
	public Void .ctor(Vector3 pos, Single length, Single width, Single grid_length_size, Single grid_width_size) { }
	// Offset : 0x
	public Void .ctor(Vector3 leftBottom, Vector3 rightTop, Single grid_length_size, Single grid_width_size) { }
	// Offset : 0x
	public T GetValue(Vector3 pos) { }
	// Offset : 0x
	public List`1 GetValusArroundPosition(Vector3 pos, Int32 radius, List`1 resultList) { }
	// Offset : 0x
	public List`1 GetValuesArroundIndex(Int32 index, Int32 radius, List`1 resultList) { }
	// Offset : 0x
	public Vector3 GetGridCoordinateByIndex(Int32 index) { }
	// Offset : 0x
	public Void SetValue(Vector3 pos, T value) { }
	// Offset : 0x
	public T GetValue(Int32 index) { }
	// Offset : 0x
	public Void SetValue(Int32 index, T value) { }
	// Offset : 0x
	public Vector3 GetGridPos(Vector3 pos) { }
	// Offset : 0x
	public Vector3 GetGridPosByCoordinate(Vector3 coordinate) { }
	// Offset : 0x
	private Int32 GetIndexByXZ(Vector3 pos) { }
	// Offset : 0x
	public Void Destroy() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UserControlKey
{
	// Fields
	public const Int32 HORIZONTAL; // 0x0
	public const Int32 VERTICAL; // 0x0
	public const Int32 HORIZONTAL2; // 0x0
	public const Int32 VERTICAL2; // 0x0
	public const Int32 ACTION1; // 0x0
	public const Int32 ACTION2; // 0x0
	public const Int32 ACTION3; // 0x0
	public const Int32 ACTION4; // 0x0
	public const Int32 ACTION5; // 0x0
	public const Int32 ACTION6; // 0x0
	public const Int32 TOTAL_NUM; // 0x0
	public const Int32 AXIS_START; // 0x0
	public const Int32 AXIS_END; // 0x0
	public const Int32 BUTTON_START; // 0x0
	public const Int32 BUTTON_END; // 0x0
	public const Int32 AXIS_LEFT; // 0x0
	public const Int32 AXIS_RIGHT; // 0x0
	public const Int32 AXIS_COUNT; // 0x0

	// Properties

	// Methods
	// Offset : 0x43b0c0
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UserControlMapping
{
	// Fields
	private String[] m_KeyMapping; // 0x10

	// Properties

	// Methods
	// Offset : 0x438f34
	public Void .ctor() { }
	// Offset : 0x43960c
	public String GetKeyDesc(Int32 key) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UserControlTouchInfo
{
	// Fields
	public Int32 TouchFinger; // 0x10
	public Vector3 TouchPosition; // 0x14
	public TouchPhase TouchPhase; // 0x20
	public Vector3 DeltaPosition; // 0x24

	// Properties

	// Methods
	// Offset : 0x438474
	public Void .ctor() { }
	// Offset : 0x43af38
	public Void Copy(UserControlTouchInfo t) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UserControlAxisData
{
	// Fields
	public Vector3 Direction; // 0x10
	public Vector3 DeltaPos; // 0x1c
	public Vector3 LastDirection; // 0x28
	public UserControlTouchInfo TouchInfo; // 0x38
	public UserControlTouchInfo LastTouchInfo; // 0x40
	private Boolean m_IsTouched; // 0x48
	private Boolean m_IsActuallyMoved; // 0x49
	private Vector3 m_CurrentDeltaValue; // 0x4c
	private Vector3 m_StartScreenPos; // 0x58
	private Vector3 m_CurrentScreenPos; // 0x64
	private Single m_ActuallyMovedDistance; // 0x70
	private EAxisDataType m_AxisDataType; // 0x74
	private Dictionary`2 m_TouchingThroughArea; // 0x78
	private VirtualAxis m_HVirtualAxis; // 0x80
	private VirtualAxis m_VVirtualAxis; // 0x88

	// Properties

	// Methods
	// Offset : 0x4382a4
	public Void .ctor(String hName, String vName, Single acturallyMovedDist, EAxisDataType t) { }
	// Offset : 0x438510
	public EAxisDataType GetAxisDataType() { }
	// Offset : 0x438518
	public Int32 GetTouchFinger() { }
	// Offset : 0x438544
	public Boolean IsInRange(Vector3 v) { }
	// Offset : 0x4385c4
	private Boolean IsButtonArea(Vector3 v) { }
	// Offset : 0x438758
	public Boolean IsStationary() { }
	// Offset : 0x43879c
	public Boolean CanTouchingThrough(Vector2 pos) { }
	// Offset : 0x43895c
	public Void UpdateValue(Vector3 pos, Vector3 deltaValue) { }
	// Offset : 0x438970
	public Void OnBegin(Vector3 startPos, Vector3 deltaPos) { }
	// Offset : 0x438990
	public Void OnEnd() { }
	// Offset : 0x438a24
	public Void OnMove(Vector3 lastPos, Vector3 curPos) { }
	// Offset : 0x438bf0
	public Void OnStationary(Vector3 curPos) { }
	// Offset : 0x438c84
	public Void UpdateDirection() { }
	// Offset : 0x438ca0
	public Vector3 GetDelta() { }
	// Offset : 0x438cac
	public Boolean IsTouched() { }
	// Offset : 0x438cb4
	public Vector3 GetStartScreenPos() { }
	// Offset : 0x438cc0
	public Void SetVirtualAxes() { }
	// Offset : 0x438d24
	public Void AddTouchingThroughArea(Dictionary`2 map) { }
	// Offset : 0x438d2c
	public Void AddTouchingThroughArea(Int32 key, UserButtonArea area) { }
	// Offset : 0x438de4
	public Void EnableTouchingThroughArea(Int32 key, Boolean v) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EAxisDataType
{
	// Fields
	public Int32 value__; // 0x10
	public const EAxisDataType Left = 0; // 0x0
	public const EAxisDataType Right = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum EInputButtonType
{
	// Fields
	public Int32 value__; // 0x10
	public const EInputButtonType Circle = 0; // 0x0
	public const EInputButtonType Box = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UserButtonArea
{
	// Fields
	private Vector2 m_Position; // 0x10
	private Vector2 m_Size; // 0x18
	private EInputButtonType m_ButtonType; // 0x20
	private Boolean m_Enable; // 0x24
	private Int32 m_Key; // 0x28

	// Properties

	// Methods
	// Offset : 0x4380cc
	public Void .ctor(Int32 key, Vector2 pos, Vector2 size, EInputButtonType buttonType) { }
	// Offset : 0x43813c
	public Void Update(Vector2 pos, Vector2 size, EInputButtonType buttonType) { }
	// Offset : 0x43814c
	public Boolean InButtonRange(Vector2 point) { }
	// Offset : 0x438290
	public Void Enable(Boolean v) { }
	// Offset : 0x43829c
	public Boolean IsEnable() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
internal class UserControlHandler
{
	// Fields
	private UserControlMapping m_UserControlMapping; // 0x10
	private Single[] m_RawDataCache; // 0x18
	private Boolean m_IsButtonEnable; // 0x20
	private UserControlAxisData[] m_AxisData; // 0x28
	private Single[] m_LastRawDataCache; // 0x30
	private Boolean m_IsUserControlChanged; // 0x38
	private Int32 m_FingerInDashArea; // 0x3c
	private Boolean m_LockFingerInDashArea; // 0x40
	public const Int32 SPEEDUP_LOCK_THRESHOLD; // 0x0
	public static Single m_resolutionResetScale; // 0x0
	private static Dictionary`2 m_AxisTouchingThroughArea; // 0x8
	private Boolean m_HasAxisHandled; // 0x41

	// Properties
	public Single[] RawDataCache { get; set; }

	// Methods
	// Offset : 0x438e88
	public Void .ctor() { }
	// Offset : 0x439384
	public Single[] get_RawDataCache() { }
	// Offset : 0x43938c
	private Void set_RawDataCache(Single[] value) { }
	// Offset : 0x439390
	public Void SetButtonEnable(Boolean enable) { }
	// Offset : 0x43939c
	public Void ResetButton(Int32 key) { }
	// Offset : 0x439430
	public Void AddAxisData(Int32 hKey, Int32 vKey, Single acturallyMovedDist, EAxisDataType t) { }
	// Offset : 0x4396c8
	public Void UpdateAxis(Single gameTime, Single deltaTime) { }
	// Offset : 0x439b5c
	public Void Update(Single gameTime, Single deltaTime) { }
	// Offset : 0x43a2e0
	public Boolean IsButtonDown(Int32 key) { }
	// Offset : 0x43a34c
	public Boolean IsButtonUp(Int32 key) { }
	// Offset : 0x43a3b8
	public Boolean IsButtonReleased(Int32 key) { }
	// Offset : 0x43a470
	public Boolean IsButtonPressed(Int32 key) { }
	// Offset : 0x43a528
	public Boolean IsUserControlChanged() { }
	// Offset : 0x43a530
	public Vector3 GetDirectionLeft() { }
	// Offset : 0x43a588
	public Vector3 GetAxisDeltaLeft() { }
	// Offset : 0x43a5e0
	public Vector3 GetDirectionRight() { }
	// Offset : 0x43a63c
	public Vector3 GetAxisDeltaRight() { }
	// Offset : 0x43a698
	public UserControlAxisData GetAxisData(Int32 axisIndex) { }
	// Offset : 0x43a6ec
	public static Void AddAxisTouchingThroughArea(EAxisDataType axisType, Int32 key, Vector2 pos, Vector2 size, EInputButtonType buttonType) { }
	// Offset : 0x43a9b0
	public Vector3 GetShiftedDirectionWithCamera(Camera camera, Int32 axisIndex) { }
	// Offset : 0x43a198
	private Boolean IsAxisChanged(Vector3 curVec, Vector3 lastVec) { }
	// Offset : 0x439814
	private Void UpdateAxis(Int32 axisIndex) { }
	// Offset : 0x43aba4
	private Boolean OnTouchBegin(UserControlAxisData axisData) { }
	// Offset : 0x43ac80
	private Boolean OnTouchMove(UserControlAxisData axisData) { }
	// Offset : 0x43ae1c
	private Boolean OnTouchStationary(UserControlAxisData axisData) { }
	// Offset : 0x43ad80
	private Boolean OnTouchEnd(UserControlAxisData axisData) { }
	// Offset : 0x43afd0
	private Void UpdateSpeedUpStates(UserControlAxisData axisData, TouchPhase tp) { }
	// Offset : 0x43aee8
	private Void CleanupTouchData(UserControlAxisData axisData) { }
	// Offset : 0x43b008
	public Boolean IsFingerInDashArea() { }
	// Offset : 0x43b028
	public Void SetLockFingerInDashArea(Boolean isLock) { }
	// Offset : 0x43b034
	public Boolean GetLockFingerInDashArea() { }
	// Offset : 0x43b03c
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class LocComponent : MonoBehaviour
{
	// Fields
	public String StringID; // 0x18
	public String FontSetName; // 0x20
	public String LocType; // 0x28
	public String SpriteName; // 0x30
	public String AtlasName; // 0x38
	private Text m_UILabel; // 0x40

	// Properties

	// Methods
	// Offset : 0x393b6c
	public Void .ctor() { }
	// Offset : 0x393b74
	private Void Awake() { }
	// Offset : 0x393c48
	private Void FindTarget() { }
	// Offset : 0x393c4c
	private Void Process() { }
	// Offset : 0x393c50
	private Void FindTargetUILabel() { }
	// Offset : 0x393cc0
	private Void ProcessUILabel() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class LocGlobalComponent : MonoBehaviour
{
	// Fields
	public List`1 SupportedLanguages; // 0x18
	public List`1 FontSetting; // 0x20

	// Properties

	// Methods
	// Offset : 0x393ef0
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class LocFontSet
{
	// Fields
	public String Name; // 0x10
	public List`1 Fonts; // 0x18

	// Properties

	// Methods
	// Offset : 0x393ef8
	public Void .ctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
[Serializable]
public class LocFont
{
	// Fields
	public LocLang Lang; // 0x10
	private Font m_Font; // 0x18
	public String FontDirectory; // 0x20

	// Properties
	public Font Font { get; }

	// Methods
	// Offset : 0x393f00
	public Void .ctor() { }
	// Offset : 0x393f08
	public Font get_Font() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum LocLang
{
	// Fields
	public Int32 value__; // 0x10
	public const LocLang None = 0; // 0x0
	public const LocLang English = 1; // 0x0
	public const LocLang SimplifiedChinese = 2; // 0x0
	public const LocLang TraditionalChinese = 3; // 0x0
	public const LocLang Thai = 4; // 0x0
	public const LocLang Vietnamese = 5; // 0x0
	public const LocLang Indonesia = 6; // 0x0
	public const LocLang BrazilianPortuguese = 7; // 0x0
	public const LocLang Spanish = 8; // 0x0
	public const LocLang Russian = 9; // 0x0
	public const LocLang Korean = 10; // 0x0
	public const LocLang French = 11; // 0x0
	public const LocLang German = 12; // 0x0
	public const LocLang Turkish = 13; // 0x0
	public const LocLang HINDI = 14; // 0x0
	public const LocLang Japanese = 15; // 0x0
	public const LocLang Romanian = 16; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public static class LocLangConvert
{
	// Fields
	private static Dictionary`2 <>f__switch$map0; // 0x0

	// Properties

	// Methods
	// Offset : 0x394004
	public static String GetAbbr(LocLang lang) { }
	// Offset : 0x39406c
	public static LocLang GetLocLang(String abbr) { }
	// Offset : 0x3944dc
	public static LocLang GetLocLang(SystemLanguage systemLan) { }
	// Offset : 0x394518
	public static String GetLocLangName(LocLang loc) { }
	// Offset : 0x394bd0
	public static String GetLocLangNamePic(LocLang loc) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class LocManager : TSingleton`1
{
	// Fields
	private LocGlobalComponent m_LocGlobal; // 0x10
	private LocLang m_CurrentLang; // 0x18
	private String m_CurrentLangAbbr; // 0x20
	private Dictionary`2 m_Fonts; // 0x28
	private Dictionary`2 m_LocText; // 0x30
	private Dictionary`2 m_LocAtlasSprite; // 0x38
	private String[] m_TypeList; // 0x40

	// Properties
	public LocLang CurrentLanguage { get; }

	// Methods
	// Offset : 0x394c68
	public Void .ctor() { }
	// Offset : 0x394e40
	public Void Init(LocGlobalComponent global, LocLang currentLang) { }
	// Offset : 0x395348
	public Void AddTranslation(String translation) { }
	// Offset : 0x395674
	public LocLang get_CurrentLanguage() { }
	// Offset : 0x39567c
	public String[] GetTypeList() { }
	// Offset : 0x37c888
	public Void DoLoc(Text label, String stringID, Object[] param) { }
	// Offset : 0x395684
	public String DoLoc(String stringID, Dictionary`2 dic, Object[] param) { }
	// Offset : 0x37d0b4
	public String DoLoc(String stringID, Object[] param) { }
	// Offset : 0x3957b8
	public Void DoLocSpecifiedLanguage(Text label, LocLang lan, String stringID, Object[] param) { }
	// Offset : 0x395ad0
	public Void SetFont(Text label, LocLang lan) { }
	// Offset : 0x395998
	public Font GetFont(String fontSetName, LocLang lan) { }
	// Offset : 0x393ee8
	public Font GetFont(String fontSetName) { }
	// Offset : 0x39534c
	private Void ParseTranslation(String translation) { }
	// Offset : 0x395c4c
	private String GetJsonString(JsonData node, String key, String defalutString) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum ImageLocalizeType
{
	// Fields
	public Int32 value__; // 0x10
	public const ImageLocalizeType Sprite = 0; // 0x0
	public const ImageLocalizeType Atlas = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class Circle2D : IShape2D
{
	// Fields
	private Vector3 m_Position; // 0x10
	private Single m_Radius; // 0x1c

	// Properties

	// Methods
	// Offset : 0x38ee5c
	public Void .ctor(Vector3 pos, Single radius) { }
	// Offset : 0x38eea8
	public Vector3 GetPosition() { }
	// Offset : 0x38eeb4
	public Vector3 GetSize() { }
	// Offset : 0x38eef8
	public Vector3 GetCenter() { }
	// Offset : 0x38ef04
	public Void SetPosition(Vector3 pos) { }
	// Offset : 0x38ef10
	public Single GetRadius() { }
	// Offset : 0x38ef18
	public Void SetRadius(Single radius) { }
	// Offset : 0x38ef20
	public Boolean IsPointInside(Vector3 v, Single margin) { }
	// Offset : 0x38efd4
	public Vector3 GetRandomPoint(Single margin) { }
	// Offset : 0x38f0d4
	public Vector3 ClampPoint(Vector3 v, Single margin) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public interface IShape2D
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Vector3 GetPosition() { }
	// Offset : 0x
	public abstract Vector3 GetCenter() { }
	// Offset : 0x
	public abstract Vector3 GetSize() { }
	// Offset : 0x
	public abstract Boolean IsPointInside(Vector3 v, Single margin) { }
	// Offset : 0x
	public abstract Vector3 GetRandomPoint(Single margin) { }
	// Offset : 0x
	public abstract Vector3 ClampPoint(Vector3 v, Single margin) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class MathUnity
{
	// Fields
	public const Single EPSILON; // 0x0
	public const Single RAD0; // 0x0
	public const Single RADHALF; // 0x0
	public const Single RAD1; // 0x0
	public const Single RAD5; // 0x0
	public const Single RAD10; // 0x0
	public const Single RAD15; // 0x0
	public const Single RAD22HALF; // 0x0
	public const Single RAD30; // 0x0
	public const Single RAD45; // 0x0
	public const Single RAD60; // 0x0
	public const Single RAD90; // 0x0
	public const Single RAD120; // 0x0
	public const Single RAD135; // 0x0
	public const Single RAD180; // 0x0
	public static Matrix4x4 matrixCaculation; // 0x0
	public static Vector3 Vector3_0; // 0x40
	public static Vector3 Vector3_X; // 0x4c
	public static Vector3 Vector3_Y; // 0x58
	public static Vector3 Vector3_Z; // 0x64
	public static Vector3 Vector3_NX; // 0x70
	public static Vector3 Vector3_NY; // 0x7c
	public static Vector3 Vector3_NZ; // 0x88

	// Properties

	// Methods
	// Offset : 0x45ede8
	public Void .ctor() { }
	// Offset : 0x45edf0
	public static Vector3 Vector3ZeroY(Vector3 v) { }
	// Offset : 0x45edf8
	public static Vector3 VectorWithY(Vector3 v, Single y) { }
	// Offset : 0x45ee30
	public static Vector3 GetDirection2D(Vector3 to, Vector3 from) { }
	// Offset : 0x45eef0
	public static Single GetDistance2D(Vector3 to, Vector3 from) { }
	// Offset : 0x45efb0
	public static Single AngleBetween2DWithSign(Vector3 from, Vector3 to) { }
	// Offset : 0x45f100
	public static Boolean IsZero(Single v, Single e) { }
	// Offset : 0x45f17c
	public static Boolean IsZero(Vector3 v, Single e) { }
	// Offset : 0x45f214
	public static Boolean IsEqual(Single v1, Single v2, Single e) { }
	// Offset : 0x45f298
	public static Vector3 GetReflectedVector(Vector3 v, Vector3 n) { }
	// Offset : 0x45f3a0
	public static Single GetFraction(Single v) { }
	// Offset : 0x45f3b0
	public static Vector3 RotateVectorAroundY(Vector3 v, Single angle) { }
	// Offset : 0x45f498
	public static Vector3 AngleToVector2D(Single angle) { }
	// Offset : 0x45f544
	public static Single Vector2DToAngle(Vector3 v) { }
	// Offset : 0x45f63c
	public static Single NormalizeAngleZeroToTowPI(Single angle) { }
	// Offset : 0x45f680
	public static Single NormalizeAngleNegPIToPI(Single angle) { }
	// Offset : 0x45f6cc
	public static Vector3 TransformDirection(Vector3 f, Vector3 d) { }
	// Offset : 0x45f8f4
	public static Vector3 TransformPoint(Vector3 f, Vector3 basep, Vector3 p) { }
	// Offset : 0x45fb20
	public static Single GetSign(Single v) { }
	// Offset : 0x45fb34
	public static Boolean CheckVector3Equals(Vector3 vec1, Vector3 vec2) { }
	// Offset : 0x45fc28
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class Rectangle2D : IShape2D
{
	// Fields
	private Vector3 m_Position; // 0x10
	private Single m_HalfLength; // 0x1c
	private Single m_HalfWidth; // 0x20

	// Properties

	// Methods
	// Offset : 0x461ee4
	public Void .ctor(Vector3 pos, Single length, Single width) { }
	// Offset : 0x461f44
	public Void .ctor(Vector3 leftBottom, Vector3 rightTop) { }
	// Offset : 0x462074
	public Vector3 GetPosition() { }
	// Offset : 0x462080
	public Void SetPosition(Vector3 v) { }
	// Offset : 0x46208c
	public Void UpdateSize(Single length, Single width) { }
	// Offset : 0x4620a0
	public Vector3 GetSize() { }
	// Offset : 0x4620e4
	public Vector3 GetCenter() { }
	// Offset : 0x4620f0
	public Boolean IsPointInside(Vector3 v, Single margin) { }
	// Offset : 0x46214c
	public Vector3 GetRandomPoint(Single margin) { }
	// Offset : 0x4621e8
	public Vector3 ClampPoint(Vector3 v, Single margin) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class AndroidDisplayMetricsUtil
{
	// Fields
	private static Int32 <DensityDPI>k__BackingField; // 0x0
	private static Single <XDPI>k__BackingField; // 0x4
	private static Single <YDPI>k__BackingField; // 0x8

	// Properties
	public static Int32 DensityDPI { get; set; }
	public static Single XDPI { get; set; }
	public static Single YDPI { get; set; }

	// Methods
	// Offset : 0x38827c
	private static Void .cctor() { }
	// Offset : 0x388dec
	public Void .ctor() { }
	// Offset : 0x388df4
	public static Int32 get_DensityDPI() { }
	// Offset : 0x388c98
	protected static Void set_DensityDPI(Int32 value) { }
	// Offset : 0x388e5c
	public static Single get_XDPI() { }
	// Offset : 0x388d04
	protected static Void set_XDPI(Single value) { }
	// Offset : 0x388ec4
	public static Single get_YDPI() { }
	// Offset : 0x388d78
	protected static Void set_YDPI(Single value) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class BitArray
{
	// Fields
	public const UInt32 NONE; // 0x0
	public const UInt32 FULL; // 0x0
	protected UInt32 m_Value; // 0x10

	// Properties

	// Methods
	// Offset : 0x38e0d8
	public Void .ctor() { }
	// Offset : 0x38e100
	public static Boolean HasFlag(UInt32 value, UInt32 flags) { }
	// Offset : 0x38e10c
	public static Boolean HasFlagByPos(UInt32 value, UInt32 pos) { }
	// Offset : 0x38e134
	public static UInt32 AddFlag(UInt32 value, UInt32 flags) { }
	// Offset : 0x38e13c
	public static UInt32 AddFlagByPos(UInt32 value, UInt32 pos) { }
	// Offset : 0x38e158
	public static UInt32 RemoveFlag(UInt32 value, UInt32 flags) { }
	// Offset : 0x38e160
	public static UInt32 RemoveFlagByPos(UInt32 value, UInt32 pos) { }
	// Offset : 0x38e17c
	public Boolean HasFlag(UInt32 flags) { }
	// Offset : 0x38e18c
	public Boolean HasFlagByPos(UInt32 pos) { }
	// Offset : 0x38e1b8
	public Void AddFlag(UInt32 flags) { }
	// Offset : 0x38e1c8
	public Void AddFlagByPos(UInt32 pos) { }
	// Offset : 0x38e1ec
	public Void RemoveFlag(UInt32 flags) { }
	// Offset : 0x38e1fc
	public Void RemoveFlagByPos(UInt32 pos) { }
	// Offset : 0x38e220
	public UInt32 GetValue() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class BitArrayBoolean : BitArray
{
	// Fields
	protected EBitArrayBooleanMode m_Mode; // 0x14

	// Properties

	// Methods
	// Offset : 0x37ee9c
	public Void .ctor(Boolean v, EBitArrayBooleanMode mode) { }
	// Offset : 0x38e228
	public Void SetBooleanValue(Boolean v) { }
	// Offset : 0x37ffb8
	public Void SetBooleanValue(UInt32 flag, Boolean v) { }
	// Offset : 0x38e24c
	public Boolean GetBooleanValue() { }
	// Offset : 0x37ffd4
	public static Boolean op_Implicit(BitArrayBoolean ba) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EBitArrayBooleanMode
{
	// Fields
	public Int32 value__; // 0x10
	public const EBitArrayBooleanMode AND_TURE = 0; // 0x0
	public const EBitArrayBooleanMode OR_TRUE = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class BitArrayRich
{
	// Fields
	private Byte[] data_array; // 0x10
	private UInt32 m_FlagCount; // 0x18

	// Properties

	// Methods
	// Offset : 0x38e26c
	public Void .ctor(UInt32 length) { }
	// Offset : 0x38e2f8
	public Void .ctor(Byte[] data) { }
	// Offset : 0x38e328
	public Boolean HasFlagByPos(UInt32 pos) { }
	// Offset : 0x38e400
	public Void AddFlagByPos(UInt32 pos) { }
	// Offset : 0x38e514
	public Void RemoveFlagByPos(UInt32 pos) { }
	// Offset : 0x38e5f8
	public override Boolean Equals(Object obj) { }
	// Offset : 0x38e6d4
	public override Int32 GetHashCode() { }
	// Offset : 0x38e3c8
	private Int32 GetValueIndexByPos(UInt32 pos) { }
	// Offset : 0x38e720
	public Byte[] GetValue() { }
	// Offset : 0x38e7b8
	public Int32 GetValueLength() { }
	// Offset : 0x38e7e4
	public Void SetValue(Byte[] value) { }
	// Offset : 0x38e930
	public static Byte BitCount(Byte n) { }
	// Offset : 0x38e95c
	public UInt32 GetFlagCount() { }
	// Offset : 0x38e864
	private Void UpdateFlagCount() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ConfigDataManager : SingletonModule`1
{
	// Fields
	private Dictionary`2 m_ConfigDataLists; // 0x18
	private Dictionary`2 m_ConfigDataItemss; // 0x20

	// Properties

	// Methods
	// Offset : 0x38f25c
	public Void .ctor() { }
	// Offset : 0x38f31c
	protected override Void OnInit() { }
	// Offset : 0x38f320
	protected override Void OnCleanup() { }
	// Offset : 0x
	public List`1 LoadCSVNoCache(ResourceID resID) { }
	// Offset : 0x
	public Void LoadCSV(ResourceID resID) { }
	// Offset : 0x
	public List`1 GetDataList() { }
	// Offset : 0x
	public T GetData(String key) { }
	// Offset : 0x
	private String GetDataListsKey() { }
	// Offset : 0x
	private String GetDataItemKey(String pKey) { }
	// Offset : 0x
	public static List`1 ParseCSV(String csvText) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public abstract class CSVBaseData
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x382520
	protected Void .ctor() { }
	// Offset : 0x
	public abstract Void ParseData(Int64 index, Int32 fieldCount, String[] headers, String[] values) { }
	// Offset : 0x
	public abstract String GetPrimaryKey() { }
	// Offset : 0x
	public T As() { }
	// Offset : 0x384564
	protected static Single ReadFloat(String fieldName, String[] headers, String[] values, Single defaultValue) { }
	// Offset : 0x38453c
	protected static Int32 ReadInt(String fieldName, String[] headers, String[] values, Int32 defaultValue) { }
	// Offset : 0x384510
	protected static UInt32 ReadUInt(String fieldName, String[] headers, String[] values, UInt32 defaultValue) { }
	// Offset : 0x384538
	protected static String ReadString(String fieldName, String[] headers, String[] values, String defaultValue) { }
	// Offset : 0x38eae0
	protected static String[] ReadStringArray(String fieldName, String[] headers, String[] values, String defaultValue) { }
	// Offset : 0x38eba0
	protected static UInt32[] ReadUIntArray(String fieldName, String[] headers, String[] values, UInt32 defaultValue, Char InSplitChar) { }
	// Offset : 0x38458c
	protected static Boolean ReadBoolean(String fieldName, String[] headers, String[] values, Boolean defaultValue) { }
	// Offset : 0x38ed18
	protected static ResourceID ReadResourceID(String fieldName, String[] headers, String[] values, Type resVarType) { }
	// Offset : 0x38e964
	private static String GetFieldValueWithFieldName(String fieldName, String[] headers, String[] values) { }
	// Offset : 0x38ee50
	public static Boolean op_Implicit(CSVBaseData exists) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class FPSCounter : MonoBehaviour
{
	// Fields
	public static FPSCounter instance; // 0x0
	private const Single fpsMeasurePeriod; // 0x0
	private Int32 m_FpsAccumulator; // 0x18
	private Single m_FpsNextPeriod; // 0x1c
	private Int32 m_CurrentFps; // 0x20

	// Properties

	// Methods
	// Offset : 0x390ba8
	public Void .ctor() { }
	// Offset : 0x390bb0
	private Void Awake() { }
	// Offset : 0x390c1c
	private Void Start() { }
	// Offset : 0x390c4c
	private Void Update() { }
	// Offset : 0x390cac
	public Int32 GetCurrentFPS() { }
	// Offset : 0x390cb4
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public static class PlayerPrefsUtil
{
	// Fields
	public static String UserKey; // 0x0
	private static StringBuilder m_KeyStringBuilder; // 0x8

	// Properties

	// Methods
	// Offset : 0x4602dc
	public static Void DeleteKey(String key, Boolean global) { }
	// Offset : 0x460674
	public static Single GetFloat(String key, Single defaultValue, Boolean global) { }
	// Offset : 0x460700
	public static Int32 GetInt(String key, Int32 defaultValue, Boolean global) { }
	// Offset : 0x460784
	public static String GetString(String key, String defaultValue, Boolean global) { }
	// Offset : 0x460808
	public static Boolean HasKey(String key, Boolean global) { }
	// Offset : 0x460884
	public static Void Save() { }
	// Offset : 0x460a18
	public static Void SetFloat(String key, Single value, Boolean global) { }
	// Offset : 0x460c04
	public static Void SetInt(String key, Int32 value, Boolean global) { }
	// Offset : 0x460de4
	public static Void SetString(String key, String value, Boolean global) { }
	// Offset : 0x4604b4
	private static String GenKeyWithUserPrefix(String key, Boolean global) { }
	// Offset : 0x460fc4
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public static class StringConverter
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x479f34
	public static Single ToFloat(String str, Single defaultValue) { }
	// Offset : 0x479fd4
	public static Int32 ToInt(String str, Int32 defaultValue) { }
	// Offset : 0x47a074
	public static UInt32 ToUInt(String str, UInt32 defaultValue) { }
	// Offset : 0x47a114
	public static Boolean ToBool(String str, Boolean defaultValue) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class Timer
{
	// Fields
	protected Single m_ExpiredTime; // 0x10

	// Properties

	// Methods
	// Offset : 0x47a2a0
	public Void .ctor() { }
	// Offset : 0x47a2a8
	public Void Reset() { }
	// Offset : 0x47a2b4
	public Void SetExpiredTime(Single expiredTime) { }
	// Offset : 0x47a2bc
	public Boolean IsExpired(Single gameTime) { }
	// Offset : 0x47a2d8
	public Void Copy(Timer t) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class TimerAction : Timer, IObjectPoolCallback
{
	// Fields
	private Action m_Action; // 0x18
	private Boolean m_IsRepeated; // 0x20
	private Single m_Duration; // 0x24
	private Boolean m_IsInPool; // 0x28

	// Properties

	// Methods
	// Offset : 0x47a30c
	public Void .ctor() { }
	// Offset : 0x47a31c
	public Void SetActionAt(Single gameTime, Single expiredTime, Action action, Boolean isRepeated) { }
	// Offset : 0x47a338
	public Boolean Update(Single gameTime, UInt32 actionId, Dictionary`2 timerActionsToBeCalled) { }
	// Offset : 0x47a414
	public Void OnAllocated() { }
	// Offset : 0x47a41c
	public Void OnCollected() { }
	// Offset : 0x47a43c
	public Boolean IsInPool() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UniqueIDGenerator
{
	// Fields
	public static UInt32 INVALID_ID; // 0x0
	private UInt32 m_NextID; // 0x10

	// Properties

	// Methods
	// Offset : 0x43809c
	public Void .ctor() { }
	// Offset : 0x4380a4
	public UInt32 GetUniqueID() { }
	// Offset : 0x4380c8
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum HttpErrorCode
{
	// Fields
	public Int32 value__; // 0x10
	public const HttpErrorCode OK = 0; // 0x0
	public const HttpErrorCode InvalidArgs = 1; // 0x0
	public const HttpErrorCode Exception = 2; // 0x0
	public const HttpErrorCode Timeout = 3; // 0x0
	public const HttpErrorCode DataTypeError = 4; // 0x0
	public const HttpErrorCode SSLAuthError = 5; // 0x0
	public const HttpErrorCode DefaultHttpOK = 200; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public static class HttpErrorUtil
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x392e58
	public static Boolean IsSSLException(String error) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class Key
{
	// Fields
	private static Byte[] m_InitVectorKeys; // 0x0
	private static String m_Keys; // 0x8

	// Properties
	public static Byte[] InitVectorKeys { get; }
	public static Byte[] Keys { get; }

	// Methods
	// Offset : 0x392ef8
	public Void .ctor() { }
	// Offset : 0x392f00
	public static Byte[] get_InitVectorKeys() { }
	// Offset : 0x392f68
	public static Byte[] get_Keys() { }
	// Offset : 0x393718
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResDecryption
{
	// Fields
	private static SHA1CryptoServiceProvider m_SHA1; // 0x0

	// Properties

	// Methods
	// Offset : 0x462350
	public Void .ctor() { }
	// Offset : 0x462358
	public static String GetFileHash(String filePath) { }
	// Offset : 0x462704
	public static Void HashBlock(SHA1CryptoServiceProvider worker, Byte[] data, Int32 offset, Int32 size) { }
	// Offset : 0x4628a8
	public static String HashFinalBlock(SHA1CryptoServiceProvider worker, Byte[] data, Int32 offset) { }
	// Offset : 0x462ad4
	public static Void Decryption(Byte[] fileBytes, out Byte[] decryptionBytes) { }
	// Offset : 0x4630dc
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResEncryption
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x464b7c
	public Void .ctor() { }
	// Offset : 0x464b84
	public static Void Encryption(Byte[] originalBytes, out Byte[] encryptionBytes) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum ResErrorCode
{
	// Fields
	public Int32 value__; // 0x10
	public const ResErrorCode OK = 0; // 0x0
	public const ResErrorCode CorruptFile = 1; // 0x0
	public const ResErrorCode SaveFailed = 2; // 0x0
	public const ResErrorCode DownloadFailed = 3; // 0x0
	public const ResErrorCode SSLAuthFailed = 4; // 0x0
	public const ResErrorCode InsufficientStorage = 5; // 0x0
	public const ResErrorCode UnZipped = 6; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResFileLoader
{
	// Fields
	protected const Int64 HTTP_OK; // 0x0
	protected const Int64 HTTP_PartialOK; // 0x0
	public static readonly String ERR_OK; // 0x0
	public static readonly String ERR_SAVE_TEMP_FAILED; // 0x8
	public static readonly String ERR_TIME_OUT; // 0x10
	public static readonly String ERR_READ_FAILED; // 0x18
	public static readonly String ERR_UNZIP_FAILED; // 0x20
	public static readonly String ERR_INSUFFICIENT_STORAGE; // 0x28
	public static readonly String ERR_MULTIDOWNLOAD_NOTEMPFILECONFIG; // 0x30
	private static readonly Dictionary`2 ErrorMapping; // 0x38
	public String FullPath; // 0x10
	public String RelativePath; // 0x18
	public Int32 RetryCount; // 0x20
	public Int64 TotalSize; // 0x28
	public String RequestError; // 0x30
	public FileInfo FileInfo; // 0x38
	protected Single m_LastProgress; // 0x40

	// Properties

	// Methods
	// Offset : 0x465180
	public Void .ctor() { }
	// Offset : 0x4651a8
	public static ResErrorCode MapToErrorCode(String error) { }
	// Offset : 0x463ab4
	public static Boolean CheckHttpResposeCode(Int64 response_code) { }
	// Offset : 0x464530
	public static Boolean IsDiskFull(ResFileLoader loader) { }
	// Offset : 0x465270
	public Void Start(Single time) { }
	// Offset : 0x46535c
	public Void Notify() { }
	// Offset : 0x464b34
	public Void Dispose() { }
	// Offset : 0x46539c
	public Single UpdateProgress(Single time) { }
	// Offset : 0x46544c
	public virtual Int64 GetDownloadingSize() { }
	// Offset : 0x463aac
	protected Void SetRequestError(String error) { }
	// Offset : 0x464a5c
	public Boolean HaveError() { }
	// Offset : 0x465464
	public virtual Boolean IsTimeout(Single time) { }
	// Offset : 0x46546c
	public virtual Boolean IsFinished() { }
	// Offset : 0x465474
	protected virtual Void OnStart(Single time) { }
	// Offset : 0x463808
	protected virtual Void OnDispose() { }
	// Offset : 0x465478
	protected virtual Void OnNotify() { }
	// Offset : 0x46547c
	public virtual Boolean HasStarted() { }
	// Offset : 0x465484
	protected virtual Void OnUpdate(Single time) { }
	// Offset : 0x464b30
	public virtual Void OnPause() { }
	// Offset : 0x465488
	public virtual Int64 NeedDownloadSize() { }
	// Offset : 0x465490
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResWithTimeoutFileLoader : ResFileLoader
{
	// Fields
	private const Single DEFAULT_TIMEOUT; // 0x0
	private TimeoutTimer m_Timeout; // 0x48

	// Properties

	// Methods
	// Offset : 0x474468
	public Void .ctor() { }
	// Offset : 0x4635c4
	protected override Void OnStart(Single time) { }
	// Offset : 0x4747dc
	public override Boolean IsTimeout(Single time) { }
	// Offset : 0x4644ec
	protected Void ResetTimer(Single time) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private class TimeoutTimer
{
	// Fields
	private Single m_EndTime; // 0x10

	// Properties

	// Methods
	// Offset : 0x4747d4
	public Void .ctor() { }
	// Offset : 0x474888
	public Void Start(Single gameTime, Single timeout) { }
	// Offset : 0x474878
	public Boolean IsExpired(Single gameTime) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResWWWFileLoader : ResWithTimeoutFileLoader
{
	// Fields
	public WWW HttpWWW; // 0x50
	public Action`2 OnLoaded; // 0x58
	public ResDownloadType DownloadType; // 0x60

	// Properties

	// Methods
	// Offset : 0x468b74
	public Void .ctor() { }
	// Offset : 0x4744d8
	protected override Void OnStart(Single time) { }
	// Offset : 0x474560
	public override Boolean HasStarted() { }
	// Offset : 0x474570
	public override Boolean IsFinished() { }
	// Offset : 0x474584
	protected override Void OnUpdate(Single time) { }
	// Offset : 0x47461c
	protected override Void OnDispose() { }
	// Offset : 0x47464c
	protected override Void OnNotify() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResWithTempFileLoader : ResWithTimeoutFileLoader
{
	// Fields
	public String TempPath; // 0x50
	public String TempFileHash; // 0x58
	public String FlagPath; // 0x60

	// Properties
	public virtual Int64 CELL_SIZE { get; }
	public String ResFileHash { get; }
	public ResFileType FileType { get; }

	// Methods
	// Offset : 0x46314c
	public Void .ctor() { }
	// Offset : 0x4747cc
	public virtual Int64 get_CELL_SIZE() { }
	// Offset : 0x46f0fc
	public String get_ResFileHash() { }
	// Offset : 0x46f0d0
	public ResFileType get_FileType() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResDownloadFileLoader : ResWithTempFileLoader
{
	// Fields
	public UnityWebRequest HttpReq; // 0x68
	public ResDownloadType DownloadType; // 0x70
	public Action`2 OnLoaded; // 0x78
	private Int64 m_DataIndex; // 0x80
	protected FileStream m_TempFileStream; // 0x88
	protected Int64 m_TempFileLength; // 0x90
	protected SHA1CryptoServiceProvider m_HashWorker; // 0x98
	protected Byte[] m_HashBuffer; // 0xa0
	protected Boolean m_NeedHashTemp; // 0xa8

	// Properties
	public override Int64 CELL_SIZE { get; }

	// Methods
	// Offset : 0x463148
	public Void .ctor() { }
	// Offset : 0x463150
	public override Int64 get_CELL_SIZE() { }
	// Offset : 0x463158
	protected override Void OnStart(Single time) { }
	// Offset : 0x463758
	public override Boolean HasStarted() { }
	// Offset : 0x463778
	public override Boolean IsFinished() { }
	// Offset : 0x46378c
	public override Int64 GetDownloadingSize() { }
	// Offset : 0x463794
	protected override Void OnDispose() { }
	// Offset : 0x463840
	protected override Void OnNotify() { }
	// Offset : 0x463ad0
	protected override Void OnUpdate(Single time) { }
	// Offset : 0x46364c
	private Void GetFileByReq() { }
	// Offset : 0x464538
	protected virtual Void ClearFileStream() { }
	// Offset : 0x46380c
	protected Void ClearHashWorker() { }
	// Offset : 0x464698
	protected virtual Void CollectDataAndClearFileStream() { }
	// Offset : 0x464ad4
	public override Void OnPause() { }
	// Offset : 0x464b74
	public override Int64 NeedDownloadSize() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResUnzipFileLoader : ResFileLoader
{
	// Fields
	public String OutputPath; // 0x48
	public Action`2 OnLoaded; // 0x50
	private GZipInputStream m_GZipStream; // 0x58
	private FileStream m_OutputStream; // 0x60
	private Int64 m_SizeUnzipped; // 0x68
	private Byte[] m_Buffer; // 0x70
	private Boolean m_IsFinished; // 0x78
	private SHA1CryptoServiceProvider m_HashWorker; // 0x80

	// Properties

	// Methods
	// Offset : 0x4699d4
	public Void .ctor() { }
	// Offset : 0x47204c
	protected override Void OnStart(Single time) { }
	// Offset : 0x47229c
	public override Boolean HasStarted() { }
	// Offset : 0x4722ac
	public override Boolean IsFinished() { }
	// Offset : 0x4722b4
	protected override Void OnUpdate(Single time) { }
	// Offset : 0x4727ac
	protected override Void OnNotify() { }
	// Offset : 0x472930
	protected override Void OnDispose() { }
	// Offset : 0x47299c
	public override Boolean IsTimeout(Single time) { }
	// Offset : 0x46d6c0
	public Void CloseInput() { }
	// Offset : 0x4728e0
	private Void CloseOutput() { }
	// Offset : 0x47296c
	private Void ClearHashWorker() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class MultiThreadDownloadHanlder : DownloadHandlerScript
{
	// Fields
	private Action`3 m_OnComplete; // 0x18
	public UInt32 DataIndex; // 0x20
	private MemoryStream download_data; // 0x28
	private Int32 download_size; // 0x30

	// Properties

	// Methods
	// Offset : 0x45fe20
	public Void .ctor(Action`3 complete_callback, UInt32 index) { }
	// Offset : 0x45fea4
	protected override Byte[] GetData() { }
	// Offset : 0x45fef4
	protected override Boolean ReceiveData(Byte[] remote_data, Int32 dataLength) { }
	// Offset : 0x45ffe8
	protected override Void CompleteContent() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResMultiDownloadLoader : ResWithTempFileLoader
{
	// Fields
	public ResDownloadType DownloadType; // 0x68
	public Action`2 OnLoaded; // 0x70
	public static readonly String ERR_CELL_DOWNLOAD_FAILED; // 0x0
	protected FileStream m_TempFileStream; // 0x78
	protected Int64 m_TempFileLength; // 0x80
	protected Int64 m_DownloadingSize; // 0x88
	protected SHA1CryptoServiceProvider m_HashWorker; // 0x90
	protected Byte[] m_HashBuffer; // 0x98
	protected Boolean m_NeedHashTemp; // 0xa0
	private FileStream m_FlagStream; // 0xa8
	private BitArrayRich m_TempFlag; // 0xb0
	private BitArrayRich m_RunningFlag; // 0xb8
	private Int32 m_MaxReqCount; // 0xc0
	private UInt32 m_CellCount; // 0xc4
	private Int32 m_CellDownloadRetryCount; // 0xc8
	private List`1 m_RunningReq; // 0xd0
	private List`1 m_FinishedReq; // 0xd8
	private UInt32 m_NextDownloadIndex; // 0xe0
	private Boolean m_Started; // 0xe4

	// Properties
	public override Int64 CELL_SIZE { get; }

	// Methods
	// Offset : 0x4696f8
	public Void .ctor(Int32 mex_req_count) { }
	// Offset : 0x46f1fc
	public override Int64 get_CELL_SIZE() { }
	// Offset : 0x46f204
	protected override Void OnStart(Single time) { }
	// Offset : 0x46fc44
	private Void GetFileWithIndex(Single time, UInt32 cell_index) { }
	// Offset : 0x47011c
	private Void PrepareHashAndTempIndex() { }
	// Offset : 0x470364
	public override Boolean HasStarted() { }
	// Offset : 0x47036c
	public override Boolean IsFinished() { }
	// Offset : 0x470394
	public override Int64 GetDownloadingSize() { }
	// Offset : 0x4703a0
	protected override Void OnDispose() { }
	// Offset : 0x4707f0
	protected override Void OnUpdate(Single time) { }
	// Offset : 0x4713c8
	private Void OnRequestComplete(Byte[] buffer, UInt32 index, Int32 download_size) { }
	// Offset : 0x471ae8
	protected Void CollectDataAndClearFileStream() { }
	// Offset : 0x47060c
	protected Void ClearFileStream() { }
	// Offset : 0x4707bc
	protected Void ClearHashWorker() { }
	// Offset : 0x471d68
	protected Void ClearFlagFile() { }
	// Offset : 0x471ed0
	protected override Void OnNotify() { }
	// Offset : 0x471fb4
	public override Int64 NeedDownloadSize() { }
	// Offset : 0x471fbc
	public override Void OnPause() { }
	// Offset : 0x471ff0
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResFileLoaderController
{
	// Fields
	private Int32 m_MaxLoaderCountSimultaneously; // 0x10
	private Boolean m_IsPause; // 0x14
	private Int64 m_SizeLoaded; // 0x18
	private LinkedList`1 m_Loaders; // 0x20
	private LinkedList`1 m_RunningLoaders; // 0x28
	private List`1 m_FinishedLoader; // 0x30

	// Properties

	// Methods
	// Offset : 0x4656d0
	public Void .ctor(Int32 maxLoaderCountSimultaneously) { }
	// Offset : 0x46579c
	public Void AddLoader(ResFileLoader loader, Boolean addToFirst) { }
	// Offset : 0x46583c
	public Void Clear() { }
	// Offset : 0x465944
	public Single GetSizeLoaded() { }
	// Offset : 0x465950
	public Void PauseDownload(Boolean isPause) { }
	// Offset : 0x465a40
	public Int64 Update(Single time) { }
	// Offset : 0x465f6c
	public Boolean IsFinished() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum ResHotUpdateResult
{
	// Fields
	public Int32 value__; // 0x10
	public const ResHotUpdateResult ERROR = 0; // 0x0
	public const ResHotUpdateResult COLDUPDATE = 1; // 0x0
	public const ResHotUpdateResult HOTUPDATE = 2; // 0x0
	public const ResHotUpdateResult PASS = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum ResDownloadType
{
	// Fields
	public UInt32 value__; // 0x10
	public const ResDownloadType None = 0; // 0x0
	public const ResDownloadType CompulsoryRes = 1; // 0x0
	public const ResDownloadType OptionalClothRes = 2; // 0x0
	public const ResDownloadType MAX = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResHotUpdaterContext
{
	// Fields
	public ResDownloadType[] DownloadTypes; // 0x10
	public String RemoteAddr; // 0x18
	public String VersionInfoPath; // 0x20
	public String FileInfoPath; // 0x28
	public String AssetBundlePrefix; // 0x30
	public Int32 MaxLoaderCountSimultaneously; // 0x38
	public Int32 MaxOptionalDownloadThreadCount; // 0x3c
	public Int32 MaxRetryCount; // 0x40
	public MonoBehaviour CoroutineHolder; // 0x48
	public Action`1 OnGetLocalVerionFinished; // 0x50
	public Action`1 OnStarted; // 0x58
	public List`1 PendingDownloadTypes; // 0x60
	public String LocalAddr; // 0x68
	public String CacheAddr; // 0x70
	public String OptionalCacheAddr; // 0x78
	public String TempCacheAddr; // 0x80
	public Action`1 OnHotUpdateFinished; // 0x88
	public Boolean NoResourceDownload; // 0x90

	// Properties

	// Methods
	// Offset : 0x46f170
	public Void .ctor() { }
	// Offset : 0x4685fc
	public Void ClearContextActionReference() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum EDownloadContextState
{
	// Fields
	public Int32 value__; // 0x10
	public const EDownloadContextState None = 0; // 0x0
	public const EDownloadContextState ReadyForStart = 1; // 0x0
	public const EDownloadContextState Download = 2; // 0x0
	public const EDownloadContextState Paused = 3; // 0x0
	public const EDownloadContextState DownloadFinished = 4; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class DownloadContext
{
	// Fields
	public ResDownloadType DownloadType; // 0x10
	public Action`2 FinishedCallBack; // 0x18
	public ResUpdaterProgressMonitor UpdateProgressMonitor; // 0x20
	public ResFileLoaderController LoaderController; // 0x28
	public ResErrorCode LastError; // 0x30
	private EDownloadContextState <State>k__BackingField; // 0x34
	public Int64 TotalNeedDownloadSize; // 0x38
	public Int64 TotalRequireSize; // 0x40

	// Properties
	public EDownloadContextState State { get; set; }
	public Boolean IsPaused { get; }
	public Boolean IsFinished { get; }
	public Boolean IsStarted { get; }

	// Methods
	// Offset : 0x38f3b0
	public Void .ctor(ResDownloadType type, Int32 maxLoaderCountSimultaneously) { }
	// Offset : 0x38f464
	public EDownloadContextState get_State() { }
	// Offset : 0x38f45c
	private Void set_State(EDownloadContextState value) { }
	// Offset : 0x38f46c
	public Boolean get_IsPaused() { }
	// Offset : 0x38f47c
	public Boolean get_IsFinished() { }
	// Offset : 0x38f48c
	public Boolean get_IsStarted() { }
	// Offset : 0x38f49c
	public Void Clear() { }
	// Offset : 0x38f4e4
	public Void InitContext() { }
	// Offset : 0x38f4e8
	public Void AddLoader(ResFileLoader load, Boolean is_Retry, Int64 progress_size) { }
	// Offset : 0x38f590
	public Void PauseDownload(Boolean isPause) { }
	// Offset : 0x38f5e8
	public Void StartDownload(Action`2 callback) { }
	// Offset : 0x38f6a8
	public Void InvokeFinishCallBack() { }
	// Offset : 0x38f714
	public Void Update(Single time) { }
	// Offset : 0x38f78c
	public Boolean HaveEnoughStorage() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResHotUpdater : TSingleton`1
{
	// Fields
	private ResHotUpdaterContext m_Context; // 0x10
	private ResVersionInfo m_LocalVersionInfo; // 0x18
	private ResVersionInfo m_RemoteVersionInfo; // 0x20
	private Dictionary`2 m_DownloadContextMap; // 0x28
	private LinkedList`1 m_PendingDownloadContext; // 0x30
	private ResErrorCode m_LastError; // 0x38

	// Properties
	public ResHotUpdaterContext Context { get; }
	public ResErrorCode LastError { get; }
	public String Version { get; }
	public String OptionalVersion { get; }
	public String PlatformIdentifier { get; }
	public String AssetBundleManifestPath { get; }

	// Methods
	// Offset : 0x466008
	public Void .ctor() { }
	// Offset : 0x466078
	public ResHotUpdaterContext get_Context() { }
	// Offset : 0x466080
	public ResErrorCode get_LastError() { }
	// Offset : 0x466088
	public Void SetLastError(DownloadContext context, ResErrorCode error) { }
	// Offset : 0x466190
	public String get_Version() { }
	// Offset : 0x4662d4
	public String get_OptionalVersion() { }
	// Offset : 0x466348
	public String get_PlatformIdentifier() { }
	// Offset : 0x466390
	public String get_AssetBundleManifestPath() { }
	// Offset : 0x4663bc
	public Void Init(ResHotUpdaterContext context) { }
	// Offset : 0x4666bc
	public DownloadContext GetDownloadContextByType(ResDownloadType type) { }
	// Offset : 0x4667cc
	public Boolean AddToPendingDownload(DownloadContext context, Boolean isAddFirst) { }
	// Offset : 0x466894
	public Void PauseDownloadByType(ResDownloadType type, Boolean isPause) { }
	// Offset : 0x4668cc
	public Void PauseRunningDownloadWithAllType(Boolean isPause) { }
	// Offset : 0x466998
	public Void CleanTempCache(ResDownloadType type) { }
	// Offset : 0x466bd8
	public Void CleanCache() { }
	// Offset : 0x466dd4
	public Void StartGetLocalVersion() { }
	// Offset : 0x467230
	public Void StartGetLocalFileInfo() { }
	// Offset : 0x46760c
	public Void StartVersionCheck(String remoteAddr, String remoteVersion) { }
	// Offset : 0x468154
	public ResErrorCode GetDetailedDownloadError(String error) { }
	// Offset : 0x4681b8
	public Void StartHotUpdateDownload(Action`1 onHotUpdateFinished) { }
	// Offset : 0x4684b4
	public Void Update(Single time) { }
	// Offset : 0x4685e8
	public Void ClearContextActionReference() { }
	// Offset : 0x468608
	public Void Clear() { }
	// Offset : 0x46874c
	public Void WWWLoad(DownloadContext context, String path, Action`2 onLoaded, Boolean isFromRemote, Int64 totalSize, Boolean includeVersionDir, FileInfo file_info) { }
	// Offset : 0x468b78
	public Void Download(DownloadContext context, FileInfo file_info, String path, Action`2 onLoaded, Boolean isFromRemote) { }
	// Offset : 0x4691a8
	public Void BigFileDownload(DownloadContext context, FileInfo file_info, String path, Action`2 onLoaded) { }
	// Offset : 0x4697a8
	public Void Unzip(DownloadContext context, FileInfo file_info, Action`2 onLoaded, Boolean addProgressSize) { }
	// Offset : 0x46a0e0
	public AssetBundle LoadAssetBundle(String path) { }
	// Offset : 0x46a2d4
	public Int64 GetTotalSizeInByte(ResDownloadType type) { }
	// Offset : 0x46a308
	public Int64 GetTotalLoadedSizeInByte(ResDownloadType type) { }
	// Offset : 0x46a344
	public Int64 GetTotalDownloadSizeInByte(ResDownloadType type) { }
	// Offset : 0x46a360
	public FileInfo GetLocalFileInfo(String path) { }
	// Offset : 0x46a550
	public Boolean ABFileExist(String ab_path) { }
	// Offset : 0x46a19c
	private String GetLocalPathByPlatfrom(String path) { }
	// Offset : 0x469a60
	private String GetLocalPathByPlatfromByFileInfo(FileInfo fileInfo, OpState targetState) { }
	// Offset : 0x46aa60
	private Void ClearTempFile(String tempPath, String flagPath) { }
	// Offset : 0x46ac64
	private Boolean MoveTempFile(String relativePath, ResFileType type, String tempPath) { }
	// Offset : 0x46af54
	private Boolean SaveFile(String path, ResFileType type, Byte[] content) { }
	// Offset : 0x46b398
	private Void onLocalVersionInfoLoaded(Boolean result) { }
	// Offset : 0x4678c4
	private Void onRemoveVersionInfoLoaded(Boolean result) { }
	// Offset : 0x46b4c4
	private Void onLocalFileInfoLoaded_Pass(Boolean result) { }
	// Offset : 0x46b5f0
	private Void onLocalFileInfoLoaded_Hotupdate(Boolean result) { }
	// Offset : 0x46b780
	private Void onRemoteFileInfoLoaded(Boolean result) { }
	// Offset : 0x46c374
	private ResFileType[] GetResFileTypeList(ResDownloadType type) { }
	// Offset : 0x46b988
	public Boolean CheckNeedDownloadByType(ResDownloadType type, Boolean useMultiThreadDownload) { }
	// Offset : 0x46c768
	private Void NotifyFileUnZiped(DownloadContext context, String hash_code, ResUnzipFileLoader unzip_loader) { }
	// Offset : 0x46d710
	private Void NotifyFileDownloaded(ResErrorCode result, DownloadContext context, ResFileLoader loader) { }
	// Offset : 0x46d878
	public ResErrorCode SaveVersionInfo(ResDownloadType type) { }
	// Offset : 0x4683dc
	public Void StartDownloadContextByType(ResDownloadType[] type_list, Action`2 onDownloadFinished) { }
	// Offset : 0x46dab8
	public Void StartDownloadContextByType(ResDownloadType type, Action`2 onDownloadFinished) { }
	// Offset : 0x46dbc0
	public Boolean CheckCopyAndUnzipFile(ResDownloadType type) { }
	// Offset : 0x46e200
	private Void <StartHotUpdateDownload>m__0(ResErrorCode result, ResDownloadType type) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <CheckNeedDownloadByType>c__AnonStorey0
{
	// Fields
	internal DownloadContext context; // 0x10
	internal ResHotUpdater $this; // 0x18

	// Properties

	// Methods
	// Offset : 0x46c42c
	public Void .ctor() { }
	// Offset : 0x46e938
	internal Void <>m__0(UnityWebRequest www, ResWithTempFileLoader loader) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <NotifyFileDownloaded>c__AnonStorey1
{
	// Fields
	internal DownloadContext context; // 0x10
	internal ResHotUpdater $this; // 0x18

	// Properties

	// Methods
	// Offset : 0x46d870
	public Void .ctor() { }
	// Offset : 0x46f128
	internal Void <>m__0(String hashCode, ResUnzipFileLoader unzip_loader) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <CheckCopyAndUnzipFile>c__AnonStorey2
{
	// Fields
	internal DownloadContext context; // 0x10
	internal Action`2 onUnzipped; // 0x18
	internal ResHotUpdater $this; // 0x20

	// Properties

	// Methods
	// Offset : 0x46e1f0
	public Void .ctor() { }
	// Offset : 0x46e3e4
	internal Void <>m__0(String hashCode, ResUnzipFileLoader unzip_loader) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <CheckCopyAndUnzipFile>c__AnonStorey3
{
	// Fields
	internal FileInfo fi; // 0x10
	internal <CheckCopyAndUnzipFile>c__AnonStorey2 <>f__ref$2; // 0x18

	// Properties

	// Methods
	// Offset : 0x46e1f8
	public Void .ctor() { }
	// Offset : 0x46e430
	internal Void <>m__0(WWW www, ResWWWFileLoader loader) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResUpdaterProgressMonitor
{
	// Fields
	private Int64 m_TotalSizeInByte; // 0x10
	private Int64 m_TotalLoadedSizeInByte; // 0x18
	private Int64 m_TotalLoadingSizeInByte; // 0x20

	// Properties
	public Int64 TotalSizeInByte { get; }
	public Int64 TotalLoadedSizeInByte { get; }

	// Methods
	// Offset : 0x4729a4
	public Void .ctor() { }
	// Offset : 0x46a300
	public Int64 get_TotalSizeInByte() { }
	// Offset : 0x46a338
	public Int64 get_TotalLoadedSizeInByte() { }
	// Offset : 0x4729ac
	public Void Clear() { }
	// Offset : 0x4729b8
	public Void AddLoaderInfo(Int64 fileSize) { }
	// Offset : 0x4729c8
	public Void OnLoadInProgress(Int64 loadedSize) { }
	// Offset : 0x46cc4c
	public Void OnLoadFinished(Int64 loadedSize) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum ResFileType
{
	// Fields
	public Int32 value__; // 0x10
	public const ResFileType None = 4294967295; // 0x0
	public const ResFileType Compulsory = 0; // 0x0
	public const ResFileType OptionalCloth = 1; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResVersionInfo
{
	// Fields
	public UInt32 MajorVersion; // 0x10
	public UInt32 MinorVersion; // 0x14
	public UInt32 OptionalVersion; // 0x18
	private Boolean m_IsRemote; // 0x1c
	private Boolean m_IsUsingEmbed; // 0x1d
	private ResFileType m_MaxSkipType; // 0x20
	private Dictionary`2 m_FileInfos; // 0x28
	private Dictionary`2 m_FileInfoListMapWithType; // 0x30

	// Properties

	// Methods
	// Offset : 0x466ea0
	public Void .ctor(Boolean isRemote) { }
	// Offset : 0x467bd8
	public Void LoadFromString(DownloadContext downloadContext, ResHotUpdater updaterInst, String removeVersion) { }
	// Offset : 0x466f5c
	public Void Load(ResHotUpdater updaterInst, String versionInfoPath, Action`1 onVersionInfoLoaded) { }
	// Offset : 0x4672dc
	public Void LoadFileInfo(ResHotUpdater updaterInst, String fileInfoPath, Action`1 onFileInfoLoaded) { }
	// Offset : 0x472c84
	private Boolean LoadLocalFileInfo(ResHotUpdater updaterInst, ResFileType[] targetFileType) { }
	// Offset : 0x4661f0
	public String GetVersionString() { }
	// Offset : 0x46633c
	public String GetOptionVersionString() { }
	// Offset : 0x46c434
	public Dictionary`2 GetFileInfoListWithType(ResFileType fileType) { }
	// Offset : 0x46c688
	public Void AddFileInfo(FileInfo fileInfo) { }
	// Offset : 0x46a3b4
	public Boolean FindFileInfo(String fullName, out FileInfo result) { }
	// Offset : 0x4737b0
	private Boolean HaveEnoughStorage() { }
	// Offset : 0x46cc5c
	public ResErrorCode SaveFileInfo(ResHotUpdaterContext context) { }
	// Offset : 0x4737b8
	public ResErrorCode SaveVersionInfo(ResHotUpdaterContext context, ResDownloadType type) { }
	// Offset : 0x46d9b8
	public ResErrorCode Save(ResHotUpdater updaterInst, ResDownloadType type) { }
	// Offset : 0x4729d0
	private Boolean ParseVersion(String content, ref UInt32 majorVersion, ref UInt32 minorVersion, ref UInt32 optionalVersion) { }
	// Offset : 0x473c08
	public Dictionary`2 GetFileInfos() { }
	// Offset : 0x4730c0
	private Boolean ParseFile(String content, ResFileType[] targetFileTypes, Boolean from_local) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class FileInfo
{
	// Fields
	public String FullName; // 0x10
	public String Hash; // 0x18
	public String ZipHash; // 0x20
	public Int64 Size; // 0x28
	public Int64 ZipSize; // 0x30
	public OpState State; // 0x38
	public Boolean IsCompressed; // 0x3c
	public ResFileType FileType; // 0x40
	private String m_CDNExt; // 0x48
	private String m_UnzipExt; // 0x50

	// Properties

	// Methods
	// Offset : 0x473c18
	public Void .ctor() { }
	// Offset : 0x46a594
	public String Print() { }
	// Offset : 0x46c544
	public FileInfo Clone() { }
	// Offset : 0x469fa4
	public String GetFullNameWithCDNExt() { }
	// Offset : 0x46a924
	public String GetFullNameWithUnzipExt() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum OpState
{
	// Fields
	public Int32 value__; // 0x10
	public const OpState Local = 0; // 0x0
	public const OpState Download = 1; // 0x0
	public const OpState Cache = 2; // 0x0
	public const OpState CacheUnzipped = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <Load>c__AnonStorey0
{
	// Fields
	internal ResHotUpdater updaterInst; // 0x10
	internal DownloadContext download_context; // 0x18
	internal Action`1 onVersionInfoLoaded; // 0x20
	internal ResVersionInfo $this; // 0x28

	// Properties

	// Methods
	// Offset : 0x472c74
	public Void .ctor() { }
	// Offset : 0x473c20
	internal Void <>m__0(WWW www, ResWWWFileLoader loader) { }
	// Offset : 0x473fc4
	internal Void <>m__1(ResErrorCode error, ResDownloadType type) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <LoadFileInfo>c__AnonStorey1
{
	// Fields
	internal ResHotUpdater updaterInst; // 0x10
	internal DownloadContext download_context; // 0x18
	internal Action`1 onFileInfoLoaded; // 0x20
	internal ResVersionInfo $this; // 0x28

	// Properties

	// Methods
	// Offset : 0x472c7c
	public Void .ctor() { }
	// Offset : 0x474038
	internal Void <>m__0(WWW www, ResWWWFileLoader loader) { }
	// Offset : 0x4743e4
	internal Void <>m__1(ResErrorCode error, ResDownloadType type) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <ParseFile>c__AnonStorey2
{
	// Fields
	internal ResFileType fileType; // 0x10

	// Properties

	// Methods
	// Offset : 0x473c10
	public Void .ctor() { }
	// Offset : 0x474458
	internal Boolean <>m__0(ResFileType element) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public interface IReusableObjectOwner
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnReusableObjectRecycled(ResourceID rID, GameObject obj) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class SpawnPool
{
	// Fields
	private Queue`1 m_FreeList; // 0x10
	private GameObject m_Parent; // 0x18
	private ResourceID m_resID; // 0x20
	private Vector3 m_ResourceOrgScale; // 0x24

	// Properties

	// Methods
	// Offset : 0x461280
	public Void .ctor(GameObject parent, ResourceID id) { }
	// Offset : 0x46133c
	public Object GetRes(Transform parentTrans) { }
	// Offset : 0x4617d4
	public Void RecycleRes(Object obj) { }
	// Offset : 0x461a78
	public Void Clear() { }
	// Offset : 0x461e60
	public Void Destroy() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public static class PoolManager
{
	// Fields
	private static Dictionary`2 m_ResPool; // 0x0
	private static GameObject m_Parent; // 0x8

	// Properties

	// Methods
	// Offset : 0x461068
	public static Object GetRes(ResourceID resID, Transform parentTrans) { }
	// Offset : 0x461670
	public static Boolean RecyleRes(ResourceID resID, Object obj) { }
	// Offset : 0x4619b0
	public static Boolean CleanPool(ResourceID resID) { }
	// Offset : 0x461c0c
	public static Void ClearAll() { }
	// Offset : 0x461e64
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public struct ResourceID : IEquatable`1
{
	// Fields
	private readonly UInt32 m_Value; // 0x10
	public static readonly ResourceID INVALID; // 0x0

	// Properties

	// Methods
	// Offset : 0x2c84dc
	private Void .ctor(UInt32 value) { }
	// Offset : 0x47489c
	public static UInt32 op_Implicit(ResourceID id) { }
	// Offset : 0x4748a0
	public static ResourceID op_Implicit(UInt32 value) { }
	// Offset : 0x4748a8
	public static Boolean op_Equality(ResourceID a, ResourceID b) { }
	// Offset : 0x4748b4
	public static Boolean op_Inequality(ResourceID a, ResourceID b) { }
	// Offset : 0x2c84e4
	public override String ToString() { }
	// Offset : 0x2c8510
	public Boolean Equals(ResourceID other) { }
	// Offset : 0x2c8520
	public override Boolean Equals(Object obj) { }
	// Offset : 0x2c8528
	public override Int32 GetHashCode() { }
	// Offset : 0x474a00
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public interface IResourceInterface
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Type GetResourceIDDefType() { }
	// Offset : 0x
	public abstract EQuality GetQuality() { }
	// Offset : 0x
	public abstract EGraphQuality GetGraphicQuality() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class ResourceImplNone : IResourceInterface
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x8b55d8
	public Void .ctor() { }
	// Offset : 0x8b5978
	public Type GetResourceIDDefType() { }
	// Offset : 0x8b59ec
	public EQuality GetQuality() { }
	// Offset : 0x8b59f4
	public EGraphQuality GetGraphicQuality() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public static class ResourceFacade
{
	// Fields
	private static IResourceInterface m_Impl; // 0x0

	// Properties

	// Methods
	// Offset : 0x8b554c
	public static Void SetImpl(IResourceInterface impl) { }
	// Offset : 0x8b55e0
	public static Type GetResourceIDDefType() { }
	// Offset : 0x8b56ec
	public static EQuality GetQuality() { }
	// Offset : 0x8b57fc
	public static EGraphQuality GetGraphicQuality() { }
	// Offset : 0x8b590c
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum EQuality
{
	// Fields
	public Int32 value__; // 0x10
	public const EQuality High = 0; // 0x0
	public const EQuality Low = 1; // 0x0
	public const EQuality Lowest = 2; // 0x0
	public const EQuality Ultra = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum EGraphQuality
{
	// Fields
	public Int32 value__; // 0x10
	public const EGraphQuality Low = 1; // 0x0
	public const EGraphQuality Medium = 2; // 0x0
	public const EGraphQuality High = 3; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ResourceManager : TSingleton`1
{
	// Fields
	private Dictionary`2 m_ResourceMapping; // 0x10
	private Dictionary`2 m_ResourceAnoymousMapping; // 0x18
	private Dictionary`2 m_NameMapping; // 0x20
	private Dictionary`2 m_PreloadResource; // 0x28
	private ResourceID m_ResourceStartID; // 0x30
	private Boolean m_HasInited; // 0x34
	private Boolean m_HasParsed; // 0x35
	private AssetBundleManifest m_ABManifest; // 0x38
	private Boolean m_UseAssetBundle; // 0x40
	private Dictionary`2 m_LoadedResources; // 0x48
	private Dictionary`2 m_ResourceBundle; // 0x50
	private Dictionary`2 m_DontDestroyLoadedResources; // 0x58
	private Dictionary`2 m_DontDestroyResourceBundle; // 0x60
	private Dictionary`2 m_PreLoadedResources; // 0x68
	private Dictionary`2 m_PreLoadedResourceBundles; // 0x70
	private String[] mPersisitResources; // 0x78
	private EQuality ResQualityLevel; // 0x80

	// Properties
	public Boolean Inited { get; }

	// Methods
	// Offset : 0x474a54
	public Void .ctor() { }
	// Offset : 0x474c50
	public Void SetResQualityLevel(EQuality q) { }
	// Offset : 0x474c58
	public Boolean Init(Boolean useAssetBundle, String[] dontDestoryResources) { }
	// Offset : 0x474f60
	public Boolean get_Inited() { }
	// Offset : 0x474f68
	public Void Cleanup() { }
	// Offset : 0x474ee0
	public Void LoadPersisitResource() { }
	// Offset : 0x475744
	public Boolean AddResourceMapping(String resPath, String abPath, String strName, Boolean isAB, EResourceConfigLevelSetting levelLow, EResourceConfigLevelSetting levelHigh, MethodInfo modifier, Boolean needNameHash) { }
	// Offset : 0x475998
	public Boolean AddResourceAnoymousMapping(String resName) { }
	// Offset : 0x475624
	private Void LoadDontDestoryResource(String resPath) { }
	// Offset : 0x475df4
	public Object PoolGetRes(ResourceID id, Transform tranformParent) { }
	// Offset : 0x475e68
	public Boolean PoolReturnRes(ResourceID id, Object obj) { }
	// Offset : 0x475edc
	public Object GetResource(ResourceID id, Boolean notUsingABForcefully, Type type) { }
	// Offset : 0x476270
	public Object GetResource(String resPath, Boolean notUsingABForcefully, String ab, Type type) { }
	// Offset : 0x476474
	private Object GetResourceInternalFull(String resPath, Boolean notUsingABForcefully, Boolean dontDestroy, Boolean isDependency) { }
	// Offset : 0x475a44
	private Object GetResourceInternal(String resPath, Boolean notUsingABForcefully, String abPath, Boolean dontDestroy, Type type) { }
	// Offset : 0x476774
	public AssetBundle LoadABWithoutLoadingAssets(String resPath, Boolean dontDestroy) { }
	// Offset : 0x47698c
	private AssetBundle LoadAssetBundleFromCache(String abPath, Boolean dontDestroy) { }
	// Offset : 0x476a60
	public Void RemoveSceneAB(String abPath) { }
	// Offset : 0x476bd8
	public AsyncOperation StartLoadingSceneAsync(String scenePath, String abPath, LoadSceneMode mode, Boolean notUsingABForcefully) { }
	// Offset : 0x476f5c
	public String GetSceneStreamABPath(ResourceID id) { }
	// Offset : 0x4770f4
	public Boolean IsResourceUseAB(ResourceID id, ref String abPath) { }
	// Offset : 0x477228
	public Void FinishLoadingScene(ResourceID id) { }
	// Offset : 0x477368
	public AsyncOperation StartLoadingSceneAsync(ResourceID id, LoadSceneMode mode, Boolean notUsingABForcefully) { }
	// Offset : 0x477478
	public ResourceID[] GetPreloadResource(Enum gametypeormode) { }
	// Offset : 0x477500
	public Dictionary`2 GetResourceMapping() { }
	// Offset : 0x477508
	public String GetResourceIDName(ResourceID ResID, Boolean InLogErr) { }
	// Offset : 0x47764c
	public ResourceID GetResourceIDByName(Type ResID, String strResid, Boolean InLogErr) { }
	// Offset : 0x4778bc
	private Void parseResourceTag(Type ResID, JsonData dataWithTag, out String url, out String ab, out Boolean isAB, out EResourceConfigLevelSetting lowSetting, out EResourceConfigLevelSetting highSetting, out MethodInfo modifier) { }
	// Offset : 0x477ff0
	private Void parseAndAddResourceMapping(Type ResID, String strName, String url, String ab, Boolean isAB, EResourceConfigLevelSetting lowSetting, EResourceConfigLevelSetting highSetting, MethodInfo modifier, Boolean needNameToResID) { }
	// Offset : 0x478218
	public Boolean ParseResourceConf(Type ResID, Type EnumGame, Type EnumMode, String jsonPath) { }
	// Offset : 0x478ffc
	public AsyncOperation ClearAllLoadedResource(Boolean includingPreloadResource) { }
	// Offset : 0x47908c
	public Void ClearResource(ResourceID id) { }
	// Offset : 0x479144
	private Void ClearResource(ResourceConfig config) { }
	// Offset : 0x4791f0
	private Void ClearResource(String path) { }
	// Offset : 0x475120
	private Void ClearAllLoadedResourceInternal(Boolean includingPreloadResource) { }
	// Offset : 0x479514
	public Boolean PreloadResouce(ResourceID id) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public enum EResourceConfigLevelSetting
{
	// Fields
	public Int32 value__; // 0x10
	public const EResourceConfigLevelSetting None = 0; // 0x0
	public const EResourceConfigLevelSetting Replace = 1; // 0x0
	public const EResourceConfigLevelSetting Hide = 2; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class ResourceConfig
{
	// Fields
	public String m_path; // 0x10
	public EResourceConfigLevelSetting m_LevelLow; // 0x18
	public EResourceConfigLevelSetting m_LevelHigh; // 0x1c
	public Boolean m_isAB; // 0x20
	public String m_abPath; // 0x28
	public String m_name; // 0x30
	public MethodInfo m_Modifier; // 0x38

	// Properties

	// Methods
	// Offset : 0x475990
	public Void .ctor() { }
	// Offset : 0x476080
	public String GetPath(EQuality s) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class ReusableObject : MonoBehaviour
{
	// Fields
	private ResourceID <ResID>k__BackingField; // 0x18
	private IReusableObjectOwner <OwnerEntity>k__BackingField; // 0x20

	// Properties
	public ResourceID ResID { get; set; }
	public IReusableObjectOwner OwnerEntity { get; set; }

	// Methods
	// Offset : 0x479788
	public Void .ctor() { }
	// Offset : 0x479790
	public ResourceID get_ResID() { }
	// Offset : 0x479798
	public Void set_ResID(ResourceID value) { }
	// Offset : 0x4797a0
	public IReusableObjectOwner get_OwnerEntity() { }
	// Offset : 0x4797a8
	public Void set_OwnerEntity(IReusableObjectOwner value) { }
	// Offset : 0x4797b0
	public virtual Void Prepare() { }
	// Offset : 0x4797b4
	public Void Recycle(Single delayTime) { }
	// Offset : 0x479878
	protected virtual Void DoRecycle() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
internal class UIAtlas : MonoBehaviour
{
	// Fields
	public Sprite[] Sprites; // 0x18
	private Boolean m_HasInited; // 0x20
	private Dictionary`2 m_SpritesDict; // 0x28

	// Properties

	// Methods
	// Offset : 0x47a444
	public Void .ctor() { }
	// Offset : 0x47a44c
	public Sprite GetSprite(String name) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UIBaseController : MonoBehaviour
{
	// Fields
	private UIBaseController <ParentController>k__BackingField; // 0x18
	private Boolean <IsInQueue>k__BackingField; // 0x20
	private Boolean <IsOpened>k__BackingField; // 0x21
	public ENavigationUILevel CurNavigationLevel; // 0x24
	protected List`1 m_ChildControllers; // 0x28
	protected BitArray m_UIGroup; // 0x30
	private UInt32 VISIBILITY_STATE_GROUP; // 0x38
	private UInt32 VISIBILITY_STATE_SHOWHIDE; // 0x3c
	private BitArrayBoolean m_StoredActiveState; // 0x40

	// Properties
	public UIBaseController ParentController { get; set; }
	public Boolean IsInQueue { get; set; }
	public Boolean IsOpened { get; set; }

	// Methods
	// Offset : 0x47a5d0
	public Void .ctor() { }
	// Offset : 0x47a5ec
	public UIBaseController get_ParentController() { }
	// Offset : 0x47a5f4
	private Void set_ParentController(UIBaseController value) { }
	// Offset : 0x47a5fc
	public Boolean get_IsInQueue() { }
	// Offset : 0x47a604
	internal Void set_IsInQueue(Boolean value) { }
	// Offset : 0x47a610
	public Boolean get_IsOpened() { }
	// Offset : 0x47a618
	internal Void set_IsOpened(Boolean value) { }
	// Offset : 0x47a624
	protected virtual Void Awake() { }
	// Offset : 0x47a6d8
	public virtual Void Close() { }
	// Offset : 0x47af00
	internal Void UIOpen() { }
	// Offset : 0x47a8a8
	internal Void UIClose() { }
	// Offset : 0x47aa68
	internal Void UIDestory() { }
	// Offset : 0x47af48
	internal Void UIActiveGroupSwitch(UInt32 activeGroup) { }
	// Offset : 0x47b1fc
	public GameObject GetViewRootObject() { }
	// Offset : 0x47b204
	public Transform GetViewRootTransform() { }
	// Offset : 0x
	protected virtual T OpenChildControllerWith3DUI(Transform parent, Vector3 localPosition, EUIAnchor anchor) { }
	// Offset : 0x
	protected virtual T OpenChildController(Transform parent, Vector3 localPosition, EUIAnchor anchor) { }
	// Offset : 0x47a7f0
	internal Void RemoveChild(UIBaseController controller) { }
	// Offset : 0x
	protected T CreateView() { }
	// Offset : 0x47b238
	protected virtual Void OnUIInit() { }
	// Offset : 0x47b23c
	protected virtual Void OnUIOpen() { }
	// Offset : 0x47b240
	protected virtual Void OnUIClose() { }
	// Offset : 0x47b244
	protected virtual Void OnUIDestory() { }
	// Offset : 0x47b248
	protected virtual Void OnUIActiveGroupSwitch(UInt32 activeGroup) { }
	// Offset : 0x47b24c
	protected virtual Void OnVisibilityChanged() { }
	// Offset : 0x47b250
	public virtual Void Show() { }
	// Offset : 0x47b2a0
	public Void Hide() { }
	// Offset : 0x47b2f0
	public Void SetVisibility(Boolean v) { }
	// Offset : 0x47b344
	public Void SwitchGroup(UInt32 activeGroup) { }
	// Offset : 0x47b348
	public Boolean IsVisible() { }
	// Offset : 0x47b37c
	public UIBaseController SetUIGroup(UInt32 groupFlags) { }
	// Offset : 0x47b14c
	private Void RefreshVisibility() { }
	// Offset : 0x47b3c8
	public static Void SetGameObjectActive(GameObject go, Boolean flag) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public interface IUIModelDataChangeObserver
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x
	public abstract Void OnDataChanged(UIBaseModel model, UInt32 propID, Object[] param) { }
	// Offset : 0x
	public abstract UInt32 GetInterestedPropID(UIBaseModel model) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public abstract class UIBaseModel
{
	// Fields
	private List`1 m_Observers; // 0x10

	// Properties

	// Methods
	// Offset : 0x47b428
	protected Void .ctor() { }
	// Offset : 0x47b430
	public virtual Void Init() { }
	// Offset : 0x47b434
	public Void RegisterDataChangedNotification(IUIModelDataChangeObserver observer) { }
	// Offset : 0x47b50c
	public Void UnRegisterDataChangedNotification(IUIModelDataChangeObserver observer) { }
	// Offset : 0x47b580
	public virtual Void NotifyDataChanged(UInt32 propID, Object[] param) { }
	// Offset : 0x
	public abstract UInt32 GetModelType() { }
	// Offset : 0x47b7a0
	public virtual Void Login(Object[] data) { }
	// Offset : 0x47b7a4
	public virtual Void Logout(Object[] data) { }
	// Offset : 0x47b7a8
	public virtual Void SceneChange(Object[] data) { }
	// Offset : 0x47b7e8
	public Void Cleanup() { }
	// Offset : 0x47b82c
	protected virtual Void OnCleanup() { }
	// Offset : 0x47b830
	protected virtual Void OnSceneChange() { }
	// Offset : 0x47b834
	public virtual Void ClearCache() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UIBaseNavigationController : UIBaseController
{
	// Fields
	protected UINavigationData m_NavigationData; // 0x48
	protected Boolean m_IsRoot; // 0x50

	// Properties
	public Boolean IsRoot { get; }

	// Methods
	// Offset : 0x47b838
	public Void .ctor() { }
	// Offset : 0x47b854
	protected override Void OnUIOpen() { }
	// Offset : 0x47b858
	public Boolean get_IsRoot() { }
	// Offset : 0x47b860
	public virtual Void OnNavigationShowed(UINavigationData navigationData, Boolean isRoot) { }
	// Offset : 0x47b95c
	public virtual Void OnNavigationClosed() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum EUIAnchor
{
	// Fields
	public Int32 value__; // 0x10
	public const EUIAnchor None = 0; // 0x0
	public const EUIAnchor BottomLeft = 1; // 0x0
	public const EUIAnchor Left = 2; // 0x0
	public const EUIAnchor TopLeft = 3; // 0x0
	public const EUIAnchor Top = 4; // 0x0
	public const EUIAnchor TopRight = 5; // 0x0
	public const EUIAnchor Right = 6; // 0x0
	public const EUIAnchor BottomRight = 7; // 0x0
	public const EUIAnchor Bottom = 8; // 0x0
	public const EUIAnchor Center = 9; // 0x0
	public const EUIAnchor TotalCount = 10; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum ENavigationUILevel
{
	// Fields
	public Int32 value__; // 0x10
	public const ENavigationUILevel RootRanel = 0; // 0x0
	public const ENavigationUILevel FullWindowPanel = 1; // 0x0
	public const ENavigationUILevel OverLyingPanel = 2; // 0x0
	public const ENavigationUILevel StayPanel = 3; // 0x0
	public const ENavigationUILevel MaxLevel = 4; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UIBaseScene
{
	// Fields
	public const Int32 DefaultUIWidth; // 0x0
	public const Int32 DefaultUIHeight; // 0x0
	public static Transform UIRoot; // 0x0
	public static UIBaseScene Instance; // 0x8
	public static Canvas UIRootCanvas; // 0x10
	public static GraphicRaycaster UIRootGraphicRaycaster; // 0x18
	public static EventSystem UIEventSystem; // 0x20
	private static PointerEventData m_PointerEventData; // 0x28
	public static List`1 RaycastResultList; // 0x30
	protected List`1 m_Controllers; // 0x10
	protected Queue`1 m_QueuedController; // 0x18
	protected UInt32 m_CurActiveGroup; // 0x20
	private UInt32 m_PreviousActiveGroup; // 0x24
	protected Dictionary`2 m_NavigationControllersMap; // 0x28
	protected List`1 m_NavigationDataStack; // 0x30
	protected Dictionary`2 m_NavControllerDic; // 0x38
	private static Int32 curNavIndex; // 0x38
	private Boolean mIsInitialzied; // 0x40
	private List`1 m_EscapeHandles; // 0x48

	// Properties
	public Boolean Initialized { get; }
	public Type CurrentNavigationType { get; }

	// Methods
	// Offset : 0x47ba20
	public Void .ctor() { }
	// Offset : 0x47bbb0
	public static Boolean RayCast(Vector2 pos) { }
	// Offset : 0x47be28
	public static Void ClearCachedValue() { }
	// Offset : 0x47bee0
	public Boolean get_Initialized() { }
	// Offset : 0x47bee8
	public Void Init() { }
	// Offset : 0x47c1a8
	public Void Destory() { }
	// Offset : 0x
	public virtual T PushNavigation(UINavigationData navigationData, Boolean isRoot) { }
	// Offset : 0x47c3e0
	public UINavigationData PopNavigation() { }
	// Offset : 0x
	public Void CloseNavigation() { }
	// Offset : 0x
	public Void PopToNavigation() { }
	// Offset : 0x47c6b0
	public Type get_CurrentNavigationType() { }
	// Offset : 0x
	public T OpenUIController(Transform parent, ENavigationUILevel navigationLevel, Boolean isChildCon, Boolean isQueued, Type forceType) { }
	// Offset : 0x47c768
	public Boolean CloseUIController(ENavigationUILevel belowLevel) { }
	// Offset : 0x
	public T Open3DUI(Transform parent, Boolean isChildCon, Boolean isQueued, Type forceType) { }
	// Offset : 0x
	public T Open3DUI(Transform parent, Vector3 localPosition, EUIAnchor anchor, Boolean isChildCon, Boolean isQueued) { }
	// Offset : 0x
	public T OpenUI(Transform parent, Boolean isChildCon, Boolean isQueued, Type forceType) { }
	// Offset : 0x
	public T OpenUI(Transform parent, Vector3 offsetPosition, EUIAnchor anchor, Boolean isChildCon, Boolean isQueued) { }
	// Offset : 0x47ac10
	public Void CloseUI(UIBaseController controller, Boolean shouldRemove) { }
	// Offset : 0x
	private T CreateUI(Type forceType) { }
	// Offset : 0x47c960
	public GameObject InstantiateUIPrefab(ResourceID InPrefabResID) { }
	// Offset : 0x47cbbc
	protected virtual Transform FindUIRoot() { }
	// Offset : 0x47cc20
	protected virtual EventSystem FindEventSystem(Transform uiRoot) { }
	// Offset : 0x47cd34
	public Void SetPreviousActiveGroup() { }
	// Offset : 0x47cd3c
	public Void SetActiveGroup(UInt32 InActiveGroup) { }
	// Offset : 0x47ce84
	public Boolean IsGroupActive(UInt32 flag) { }
	// Offset : 0x47ce90
	protected virtual Void OnInit() { }
	// Offset : 0x47ce94
	protected virtual Void OnDestory() { }
	// Offset : 0x47ce98
	public UINavigationData GetCurrentUINavigationData() { }
	// Offset : 0x47cf54
	public UIBaseNavigationController GetCurrentUINavigationController() { }
	// Offset : 0x47cfd4
	public Void RegisterEscapeHandle(EscapeHandle handle) { }
	// Offset : 0x47d070
	public Void UnRegisterEscapeHandle(EscapeHandle handle) { }
	// Offset : 0x47d110
	public Boolean DispatchEscapeHandle() { }
	// Offset : 0x47d498
	private Void SetAnchor(RectTransform source, EUIAnchor allign) { }
	// Offset : 0x47d764
	private static Void .cctor() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public sealed class EscapeHandle : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x47d810
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x47d1fc
	public virtual Boolean Invoke() { }
	// Offset : 0x47d820
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x47d854
	public virtual Boolean EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UIBaseView
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x47d890
	public Void .ctor() { }
	// Offset : 0x47d898
	public Void Init(Transform rootTrans, Transform holder) { }
	// Offset : 0x47d950
	protected virtual Void OnInit(Transform holder) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class EventTriggerListener : EventTrigger
{
	// Fields
	public VoidDelegate onClick; // 0x28
	public VoidDelegate onDown; // 0x30
	public VoidDelegate onEnter; // 0x38
	public VoidDelegate onExit; // 0x40
	public VoidDelegate onUp; // 0x48
	public VoidDelegate onSelect; // 0x50
	public VoidDelegate onUpdateSelect; // 0x58
	public VoidDelegate onDrag; // 0x60
	public VoidDelegate onDrop; // 0x68
	public VoidDelegate onDeselect; // 0x70
	public VoidDelegate onScroll; // 0x78
	public VoidDelegate onMove; // 0x80
	public VoidDelegate onInitializePotentialDrag; // 0x88
	public VoidDelegate onBeginDrag; // 0x90
	public VoidDelegate onEndDrag; // 0x98
	public VoidDelegate onSubmit; // 0xa0
	public VoidDelegate onCancel; // 0xa8

	// Properties

	// Methods
	// Offset : 0x39069c
	public Void .ctor() { }
	// Offset : 0x3906a4
	public override Void OnPointerClick(PointerEventData eventData) { }
	// Offset : 0x390950
	public override Void OnPointerDown(PointerEventData eventData) { }
	// Offset : 0x390964
	public override Void OnPointerEnter(PointerEventData eventData) { }
	// Offset : 0x390978
	public override Void OnPointerExit(PointerEventData eventData) { }
	// Offset : 0x39098c
	public override Void OnPointerUp(PointerEventData eventData) { }
	// Offset : 0x3909a0
	public override Void OnSelect(BaseEventData eventData) { }
	// Offset : 0x3909b4
	public override Void OnUpdateSelected(BaseEventData eventData) { }
	// Offset : 0x3909c8
	public override Void OnDrag(PointerEventData eventData) { }
	// Offset : 0x3909dc
	public override Void OnDrop(PointerEventData eventData) { }
	// Offset : 0x3909f0
	public override Void OnDeselect(BaseEventData eventData) { }
	// Offset : 0x390a04
	public override Void OnScroll(PointerEventData eventData) { }
	// Offset : 0x390a18
	public override Void OnMove(AxisEventData eventData) { }
	// Offset : 0x390a2c
	public override Void OnInitializePotentialDrag(PointerEventData eventData) { }
	// Offset : 0x390a40
	public override Void OnBeginDrag(PointerEventData eventData) { }
	// Offset : 0x390a54
	public override Void OnEndDrag(PointerEventData eventData) { }
	// Offset : 0x390a68
	public override Void OnSubmit(BaseEventData eventData) { }
	// Offset : 0x390a7c
	public override Void OnCancel(BaseEventData eventData) { }
	// Offset : 0x390a90
	public static EventTriggerListener Get(GameObject go) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public sealed class VoidDelegate : MulticastDelegate
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x390b58
	public Void .ctor(Object object, IntPtr method) { }
	// Offset : 0x3906b8
	public virtual Void Invoke() { }
	// Offset : 0x390b68
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, Object object) { }
	// Offset : 0x390b9c
	public virtual Void EndInvoke(IAsyncResult result) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UIFullScreen : MonoBehaviour
{
	// Fields

	// Properties

	// Methods
	// Offset : 0x47d954
	public Void .ctor() { }
	// Offset : 0x47d95c
	private Void Start() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UIItemReference : MonoBehaviour
{
	// Fields
	public List`1 Items; // 0x18
	private Dictionary`2 m_ItemDict; // 0x20

	// Properties

	// Methods
	// Offset : 0x47db00
	public Void .ctor() { }
	// Offset : 0x
	public T GetItem(String itemName) { }
	// Offset : 0x47db08
	private Void CacheItem() { }
	// Offset : 0x47dd60
	private Boolean HasCached() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public enum EUIItemExportType
{
	// Fields
	public Int32 value__; // 0x10
	public const EUIItemExportType GameObject = 0; // 0x0
	public const EUIItemExportType Button = 1; // 0x0
	public const EUIItemExportType Label = 2; // 0x0
	public const EUIItemExportType InputField = 3; // 0x0
	public const EUIItemExportType Texture = 4; // 0x0
	public const EUIItemExportType Transform = 5; // 0x0
	public const EUIItemExportType CustomType = 6; // 0x0
	public const EUIItemExportType Animator = 7; // 0x0
	public const EUIItemExportType CanvasGroup = 8; // 0x0
	public const EUIItemExportType TweenAlpha = 9; // 0x0
	public const EUIItemExportType RectTransform = 10; // 0x0
	public const EUIItemExportType Image = 11; // 0x0

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UIItemVariable : MonoBehaviour
{
	// Fields
	public EUIItemExportType ExportType; // 0x18
	public String CustomExportTypeName; // 0x20
	public String ExportName; // 0x28
	public Object ExportObject; // 0x30

	// Properties

	// Methods
	// Offset : 0x4366ac
	public Void .ctor() { }
	// Offset : 0x4366b4
	public Void TryToAttachObject() { }
	// Offset : 0x43688c
	public String GetExportedName() { }
	// Offset : 0x436930
	public String GetEUIItemExportTypeCorrespondOriginTypeName(EUIItemExportType euiItemExportType, UIItemVariable InItemVar) { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
internal class UIModelManager : SingletonModule`1
{
	// Fields
	private Dictionary`2 m_UIModels; // 0x18
	private List`1 m_ModelLists; // 0x20

	// Properties

	// Methods
	// Offset : 0x436a44
	public Void .ctor() { }
	// Offset : 0x
	public T GetModel() { }
	// Offset : 0x436ab4
	protected override Void OnInit() { }
	// Offset : 0x436ab8
	protected override Void OnCleanup() { }
	// Offset : 0x436f00
	public Void ClearCache() { }
	// Offset : 0x437280
	public Void UserLogin(Object[] data) { }
	// Offset : 0x437600
	public Void UserLogout(Object[] data) { }
	// Offset : 0x437980
	public Void SceneChange(Object[] data) { }
	// Offset : 0x436e14
	private IEnumerable`1 GetModels() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: GCommon
public class UINavigationData
{
	// Fields
	private String m_Title; // 0x10
	private Int32 m_NavIndex; // 0x18
	private Type m_ContentControllerType; // 0x20
	private Boolean m_HideTopBar; // 0x28
	private List`1 m_WindowParam; // 0x30
	private Boolean m_ShowAvatarWindow; // 0x38
	private Boolean m_ShowAvatarPose; // 0x39
	private Vector3 m_ChatBtnPosition; // 0x3c
	private Boolean m_ShowChatBtn; // 0x48
	private Boolean m_EnableAdsBtn; // 0x49

	// Properties
	public String Title { get; set; }
	public Int32 NavIndex { get; set; }
	public Type ContentControllerType { get; set; }
	public Boolean HideTopBar { get; set; }
	public List`1 WindowParam { get; set; }
	public Boolean ShowAvatarWindow { get; set; }
	public Boolean ShowAvatarPose { get; set; }
	public Vector3 ChatBtnPosition { get; set; }
	public Boolean ShowChatBtn { get; set; }
	public Boolean EnableAdsBtn { get; set; }

	// Methods
	// Offset : 0x437d00
	public Void .ctor() { }
	// Offset : 0x437de8
	public Void .ctor(String customizeTitle) { }
	// Offset : 0x437ee0
	public String get_Title() { }
	// Offset : 0x437ee8
	public Void set_Title(String value) { }
	// Offset : 0x437ef0
	public Int32 get_NavIndex() { }
	// Offset : 0x437ef8
	public Void set_NavIndex(Int32 value) { }
	// Offset : 0x437f00
	public Type get_ContentControllerType() { }
	// Offset : 0x437f08
	public Void set_ContentControllerType(Type value) { }
	// Offset : 0x437f10
	public Boolean get_HideTopBar() { }
	// Offset : 0x437f18
	public Void set_HideTopBar(Boolean value) { }
	// Offset : 0x437f24
	public List`1 get_WindowParam() { }
	// Offset : 0x437f2c
	public Void set_WindowParam(List`1 value) { }
	// Offset : 0x437f34
	public Boolean get_ShowAvatarWindow() { }
	// Offset : 0x437f3c
	public Void set_ShowAvatarWindow(Boolean value) { }
	// Offset : 0x437f48
	public Boolean get_ShowAvatarPose() { }
	// Offset : 0x437f50
	public Void set_ShowAvatarPose(Boolean value) { }
	// Offset : 0x437f5c
	public Vector3 get_ChatBtnPosition() { }
	// Offset : 0x437f68
	public Void set_ChatBtnPosition(Vector3 value) { }
	// Offset : 0x437f74
	public Boolean get_ShowChatBtn() { }
	// Offset : 0x437f7c
	public Void set_ShowChatBtn(Boolean value) { }
	// Offset : 0x437f88
	public Boolean get_EnableAdsBtn() { }
	// Offset : 0x437f90
	public Void set_EnableAdsBtn(Boolean value) { }
	// Offset : 0x437f9c
	public override String ToString() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
public class InstantDemo : MonoBehaviour
{
	// Fields
	private const String CookiePrefix; // 0x0
	private String _storedCookie; // 0x18

	// Properties

	// Methods
	// Offset : 0x4408c0
	public Void .ctor() { }
	// Offset : 0x4408c8
	private Void Start() { }
	// Offset : 0x4408cc
	private Void Update() { }
	// Offset : 0x4408f8
	private IEnumerator DownloadAssetBundleScene(String _SceneUrl) { }
	// Offset : 0x440970
	public Void ShowInstallDialogPassCookie() { }
	// Offset : 0x440c28
	public Void ShowInstallDialog() { }
	// Offset : 0x440c98
	public Void WriteCookie() { }
	// Offset : 0x440e8c
	public Void ReadCookie() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private sealed class <DownloadAssetBundleScene>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1
{
	// Fields
	internal String _SceneUrl; // 0x10
	internal WWW <bundleWWW>__0; // 0x18
	internal AssetBundle <ab>__0; // 0x20
	internal Object $current; // 0x28
	internal Boolean $disposing; // 0x30
	internal Int32 $PC; // 0x34

	// Properties
	private Object System.Collections.Generic.IEnumerator<object>.Current { get; }
	private Object System.Collections.IEnumerator.Current { get; }

	// Methods
	// Offset : 0x440968
	public Void .ctor() { }
	// Offset : 0x44101c
	public Boolean MoveNext() { }
	// Offset : 0x441184
	private Object System.Collections.Generic.IEnumerator<object>.get_Current() { }
	// Offset : 0x44118c
	private Object System.Collections.IEnumerator.get_Current() { }
	// Offset : 0x441194
	public Void Dispose() { }
	// Offset : 0x4411a8
	public Void Reset() { }
}

// Dll : Assembly-CSharp.dll
// Namespace: 
internal static class <PrivateImplementationDetails>
{
	// Fields
	internal static readonly $ArrayType=1096 $field-1B490D0330F0C9433EF955E118BFC4C97BE6BA36; // 0x0
	internal static readonly $ArrayType=12 $field-148E9E3E864CD628C70D3DC1D8309483BD8C0E89; // 0x448
	internal static readonly $ArrayType=12 $field-AAF72C1002FDBCAE040DAE16A10D82184CE83679; // 0x454
	internal static readonly $ArrayType=12 $field-5CF7299F6558A8AC3F821B4F2F65F23798D319D3; // 0x460
	internal static readonly $ArrayType=12 $field-B67A7FB4648C62F6A1337CA473436D0E787E8633; // 0x46c
	internal static readonly $ArrayType=12 $field-C69BF4F300AD2C2E49A8072C2FE6B712FA73EA8F; // 0x478
	internal static readonly $ArrayType=12 $field-FAD52931F5B79811D31566BB18B6E0B5D2E2A164; // 0x484
	internal static readonly $ArrayType=112 $field-50B1635D1FB2907A171B71751E1A3FA79423CA17; // 0x490

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private struct $ArrayType=1096
{
	// Fields

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private struct $ArrayType=12
{
	// Fields

	// Properties

	// Methods
}

// Dll : Assembly-CSharp.dll
// Namespace: 
private struct $ArrayType=112
{
	// Fields

	// Properties

	// Methods
}
